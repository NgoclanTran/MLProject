/* Generated code for Python source for module 'nltk.stem.snowball'
 * created by Nuitka version 0.5.25
 *
 * This code is in part copyright 2017 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The _module_nltk$stem$snowball is a Python object pointer of module type. */

/* Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_nltk$stem$snowball;
PyDictObject *moduledict_nltk$stem$snowball;

/* The module constants used, if any. */
static PyObject *const_tuple_8e1bbc732e03c0e80a4a7029d959f013_tuple;
static PyObject *const_unicode_plain_si;
static PyObject *const_tuple_31374448d9a6d0406a7cc0f1ed0182f0_tuple;
static PyObject *const_unicode_digest_83217f7e651b043c5e654f77e0145ef8;
static PyObject *const_tuple_unicode_plain_imma_tuple;
static PyObject *const_str_plain__FinnishStemmer__vowels;
static PyObject *const_unicode_plain_se;
static PyObject *const_tuple_88d314ab5ad7450947332961e7d6321e_tuple;
static PyObject *const_tuple_unicode_plain_os_unicode_plain_ic_tuple;
static PyObject *const_str_plain__GermanStemmer__step1_suffixes;
static PyObject *const_tuple_unicode_digest_3b44810ca84c2278367df501b9231323_tuple;
static PyObject *const_unicode_plain_heden;
extern PyObject *const_str_plain_words;
extern PyObject *const_tuple_str_chr_42_tuple;
static PyObject *const_unicode_digest_27549ddbeb2e2d4f92a846fb872d3c33;
static PyObject *const_unicode_plain_abilitati;
extern PyObject *const_str_plain_stemmer;
static PyObject *const_unicode_digest_e7ce7cb4ba2d4a776b39a66620ed1dd1;
static PyObject *const_unicode_plain_abilitate;
static PyObject *const_unicode_plain_st;
static PyObject *const_str_plain_digraphs;
static PyObject *const_unicode_plain_g;
static PyObject *const_unicode_plain_erait;
static PyObject *const_unicode_plain_ivitate;
extern PyObject *const_str_plain_startswith;
static PyObject *const_unicode_plain_ivitati;
static PyObject *const_tuple_0483851c91d6f903d5f51b576c4e1458_tuple;
static PyObject *const_str_plain_NorwegianStemmer;
static PyObject *const_unicode_digest_7dc95b8a3411ea2e94cce2c3fb544c6b;
static PyObject *const_unicode_plain_encia;
static PyObject *const_unicode_plain_tta;
static PyObject *const_tuple_6e4e1a4ee8a90c1492f5d415d26faee3_tuple;
static PyObject *const_unicode_plain_siin;
static PyObject *const_unicode_plain_ibilitate;
static PyObject *const_unicode_digest_6bb7032994e2ecddb72007dc1a2f8ad1;
static PyObject *const_unicode_digest_99ba77effd8e91845b225bae4bdde4ff;
static PyObject *const_unicode_digest_a104078290e2ef7652ddf4b87d31a1b1;
static PyObject *const_unicode_plain_eriez;
static PyObject *const_tuple_3fa6ac1f53c663536627dc5946b5597b_tuple;
static PyObject *const_unicode_plain_eaux;
static PyObject *const_tuple_b779db4c86c3fc5363d8606238f57437_tuple;
static PyObject *const_tuple_unicode_plain_logia_unicode_plain_logie_tuple;
static PyObject *const_unicode_plain_ations;
static PyObject *const_unicode_chr_47;
static PyObject *const_unicode_plain_ancias;
static PyObject *const_tuple_7c67d7a4be913a24b94b80d63c2a05b8_tuple;
static PyObject *const_str_plain__DutchStemmer__vowels;
static PyObject *const_unicode_plain_at;
static PyObject *const_unicode_digest_910b3064909c53702273cb45d3dac832;
static PyObject *const_tuple_unicode_plain_ement_unicode_plain_ements_tuple;
static PyObject *const_tuple_a871f55427dc6112c3254b0f3775cc0d_tuple;
static PyObject *const_unicode_digest_cf8642b5149fa514622b94a4d35894b2;
static PyObject *const_unicode_plain_an;
static PyObject *const_unicode_plain_al;
static PyObject *const_tuple_993502414358840495b1f55dd7172430_tuple;
static PyObject *const_unicode_plain_ak;
static PyObject *const_str_plain__FrenchStemmer__step2a_suffixes;
static PyObject *const_str_plain__FinnishStemmer__double_consonants;
static PyObject *const_tuple_8cc965b5bf73320d8782cd161d56cb64_tuple;
static PyObject *const_unicode_plain_ad;
static PyObject *const_unicode_plain_ab;
static PyObject *const_tuple_b805d9073ad1d8a2b37827c66df08183_tuple;
static PyObject *const_tuple_unicode_plain_euse_unicode_plain_euses_tuple;
static PyObject *const_unicode_digest_3f3cd3bd59d11c8ca1bb917c4367f3d2;
static PyObject *const_unicode_digest_56ab2dbed0688715ab78ed4253b12de6;
static PyObject *const_tuple_ecbcc231e2a3f1a302573e90d9a9eec8_tuple;
static PyObject *const_unicode_plain_erai;
static PyObject *const_tuple_a41dd2420b3ae149f1666e62fcba434d_tuple;
static PyObject *const_unicode_digest_bd45c14285625ef7d1459fb4891f8e95;
static PyObject *const_unicode_plain_ativa;
static PyObject *const_unicode_plain_uu;
static PyObject *const_unicode_digest_c95bc571b87dd9c4d022227dbdc517d0;
static PyObject *const_tuple_0509c6307855288cb6eaf8fcd977fb03_tuple;
static PyObject *const_tuple_aee507605771beac2449897a25c3e0b8_tuple;
static PyObject *const_unicode_plain_atrices;
static PyObject *const_unicode_plain_erions;
static PyObject *const_str_plain__SwedishStemmer__s_ending;
extern PyObject *const_str_digest_f58de60a0881ce5c15d7da6b10750aee;
static PyObject *const_tuple_0802c11868d410b647d2c8bac75ddc7d_tuple;
static PyObject *const_tuple_b96c0dbe5027a79804a581f967622434_tuple;
static PyObject *const_unicode_digest_b33cd26bbcfa97d19a9a4f51b91d38e9;
static PyObject *const_unicode_plain_kaan;
static PyObject *const_unicode_plain_hungarian;
static PyObject *const_unicode_plain_finnish;
static PyObject *const_unicode_plain_I;
static PyObject *const_unicode_digest_18aab37aeef33c8a44b9d8a110c581c9;
static PyObject *const_tuple_f14c6160942c709d6c6b39a59c1d1717_tuple;
static PyObject *const_tuple_unicode_plain_yendo_tuple;
extern PyObject *const_unicode_plain_A;
static PyObject *const_tuple_95895417777ef4f35411bbf2690771a5_tuple;
static PyObject *const_unicode_digest_29adf0a82a22b3ff610a27a3c5520f02;
extern PyObject *const_int_neg_2;
extern PyObject *const_int_neg_3;
static PyObject *const_tuple_3e0da8f75319f78863662807e8f7110c_tuple;
extern PyObject *const_int_neg_1;
static PyObject *const_unicode_plain_idade;
extern PyObject *const_unicode_plain_Y;
extern PyObject *const_int_neg_4;
static PyObject *const_int_neg_5;
static PyObject *const_str_plain__SpanishStemmer__step2a_suffixes;
extern PyObject *const_unicode_plain_U;
static PyObject *const_tuple_unicode_plain_idad_unicode_plain_idades_tuple;
static PyObject *const_str_plain_russian;
extern PyObject *const_str_digest_58494c585006c17a0e20f33e08f63673;
static PyObject *const_unicode_plain_ation;
static PyObject *const_unicode_plain_l;
static PyObject *const_unicode_digest_1f157ffe1eae7b7af17901f9a762d3f3;
extern PyObject *const_unicode_plain_n;
extern PyObject *const_unicode_plain_o;
static PyObject *const_unicode_plain_i;
static PyObject *const_unicode_plain_j;
static PyObject *const_unicode_plain_k;
static PyObject *const_unicode_plain_d;
extern PyObject *const_unicode_plain_e;
extern PyObject *const_unicode_plain_f;
static PyObject *const_unicode_digest_ed1edf7feaa5fdc8aac633ccea30b6dd;
static PyObject *const_unicode_digest_c8940e591bfc889f1eedf45e19e49889;
extern PyObject *const_unicode_plain_a;
static PyObject *const_unicode_plain_b;
static PyObject *const_unicode_plain_c;
extern PyObject *const_unicode_plain_x;
extern PyObject *const_unicode_plain_y;
extern PyObject *const_unicode_plain_z;
static PyObject *const_str_plain___roman_to_cyrillic;
extern PyObject *const_unicode_plain_t;
static PyObject *const_str_plain_languages;
static PyObject *const_unicode_plain_v;
static PyObject *const_unicode_digest_e72e12f7bd4091cd7d49885da0d54666;
static PyObject *const_unicode_plain_p;
static PyObject *const_unicode_plain_q;
static PyObject *const_unicode_plain_r;
static PyObject *const_unicode_plain_s;
static PyObject *const_tuple_bf4ccbfb8a2dc1c39eb1b1f656b81de0_tuple;
static PyObject *const_tuple_unicode_plain_ul_unicode_plain_ului_tuple;
static PyObject *const_unicode_plain_ele;
static PyObject *const_tuple_unicode_plain_en_tuple;
static PyObject *const_tuple_8f02c732f2934489cace301e08adbe3f_tuple;
static PyObject *const_unicode_plain_ivo;
static PyObject *const_unicode_plain_uzioni;
static PyObject *const_unicode_plain_ivi;
static PyObject *const_tuple_2cfc31b0cb7404929bdf899a5e519f78_tuple;
static PyObject *const_unicode_digest_3237b32eb23cee6617f0a3a9251acea5;
static PyObject *const_unicode_plain_ny;
static PyObject *const_tuple_02ebd4f0f06223894f5b9eef8c76b64c_tuple;
static PyObject *const_tuple_unicode_plain_heid_tuple;
static PyObject *const_tuple_unicode_plain_mma_tuple;
static PyObject *const_unicode_plain_den;
static PyObject *const_unicode_plain_zh;
static PyObject *const_unicode_plain_Ier;
static PyObject *const_unicode_plain_assent;
static PyObject *const_unicode_digest_09379b5ee1ff611b09e0163788e986cf;
static PyObject *const_unicode_plain_ert;
static PyObject *const_unicode_plain_uzione;
static PyObject *const_tuple_7a8814b76c381411a5ff594ced61a9e5_tuple;
static PyObject *const_unicode_digest_d76f5dd1beb8a75f9b91600948454899;
static PyObject *const_tuple_6c8d5372f67b01d07556f5bd0e1d2cbf_tuple;
static PyObject *const_str_plain_french;
static PyObject *const_unicode_digest_1094ceee53f468647e12ae7ce3aa5571;
static PyObject *const_unicode_plain_mpa;
static PyObject *const_unicode_digest_72254343b67d1170c7dc8158ec915d3a;
static PyObject *const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple;
extern PyObject *const_str_plain_stopwords;
static PyObject *const_unicode_plain_ss;
static PyObject *const_str_plain__NorwegianStemmer__vowels;
static PyObject *const_unicode_digest_d02bfaed01174018b3e64a8ff0cb3bae;
static PyObject *const_unicode_plain_ul;
static PyObject *const_tuple_unicode_plain_ante_unicode_plain_able_unicode_plain_ible_tuple;
static PyObject *const_unicode_plain_col;
extern PyObject *const_str_plain___init__;
extern PyObject *const_unicode_plain_no;
static PyObject *const_unicode_plain_immi;
static PyObject *const_tuple_92caa36be441ec854f2de0e294aaa9d7_tuple;
static PyObject *const_unicode_digest_fa2751934f9ca2cad0b25c6f6122fb13;
static PyObject *const_tuple_74398d8d991a606c997a40bef640d5e3_tuple;
static PyObject *const_tuple_a4eb71c9a63ca533f5e948ad9ea356d1_tuple;
static PyObject *const_unicode_digest_d57aecefd8700a0b79449020d4ea1211;
static PyObject *const_unicode_plain_portuguese;
static PyObject *const_tuple_73d19a82d956714a1c25b481a0adc418_tuple;
extern PyObject *const_str_plain_suffix;
static PyObject *const_unicode_digest_579ae74eb0325e248521f748d0f47586;
static PyObject *const_unicode_digest_216f6d9a84a1a1672910f2cf0438da6d;
static PyObject *const_unicode_plain_spanish;
static PyObject *const_str_plain__SpanishStemmer__vowels;
static PyObject *const_unicode_plain_abil;
static PyObject *const_tuple_str_chr_39_tuple;
static PyObject *const_unicode_plain_nne;
static PyObject *const_unicode_plain_ko;
static PyObject *const_unicode_digest_d335d5d5ed53f97fd144b1a2ff79f3cd;
static PyObject *const_tuple_7d08e9422131a5a7b78d6201634372ca_tuple;
static PyObject *const_tuple_unicode_plain_iv_tuple;
static PyObject *const_unicode_plain_ical;
static PyObject *const_str_plain__SpanishStemmer__step3_suffixes;
static PyObject *const_str_plain_hungarian;
static PyObject *const_unicode_plain_li;
static PyObject *const_tuple_25686e15499762bcf0699ac1d9fa2920_tuple;
static PyObject *const_unicode_plain_baar;
static PyObject *const_unicode_plain_me;
static PyObject *const_unicode_plain_era;
static PyObject *const_unicode_plain_lo;
extern PyObject *const_str_plain_rindex;
static PyObject *const_unicode_plain_la;
static PyObject *const_tuple_unicode_digest_aed26e9fdc4d953682a95803e01952d3_tuple;
extern PyObject *const_str_plain___name__;
static PyObject *const_unicode_plain_ern;
static PyObject *const_unicode_plain_le;
static PyObject *const_unicode_plain_iuni;
static PyObject *const_tuple_b52820215875207b84eb2621e3500b61_tuple;
static PyObject *const_str_plain__SwedishStemmer__step3_suffixes;
static PyObject *const_unicode_plain_ly;
static PyObject *const_str_plain__r1r2_standard;
extern PyObject *const_str_digest_c0c3759da123e387798315e75d2fed70;
extern PyObject *const_str_plain_swedish;
static PyObject *const_tuple_0575198efcc749dda95e1cee1bb814d1_tuple;
static PyObject *const_unicode_plain_mpi;
static PyObject *const_unicode_digest_2bcaf158af91b9090915dd94ad19b47e;
static PyObject *const_unicode_plain_ist;
static PyObject *const_unicode_digest_e8e8e8de8b0402c17abe92c438e8720b;
static PyObject *const_unicode_digest_e758fdb7cbe8ae08a0f3bb84603270e7;
static PyObject *const_unicode_plain_ea;
static PyObject *const_unicode_plain_ion;
static PyObject *const_unicode_plain_ene;
static PyObject *const_unicode_plain_iei;
static PyObject *const_unicode_plain_ek;
static PyObject *const_unicode_plain_en;
static PyObject *const_unicode_plain_el;
static PyObject *const_str_plain__RussianStemmer__reflexive_suffixes;
static PyObject *const_unicode_plain_er;
static PyObject *const_unicode_plain_es;
static PyObject *const_unicode_digest_03c4b2f172419703f0fad6b0cba707ab;
static PyObject *const_str_plain__GermanStemmer__vowels;
static PyObject *const_unicode_plain_et;
static PyObject *const_unicode_plain_ativi;
static PyObject *const_unicode_plain_ez;
static PyObject *const_tuple_0d91b14694a1e22a71f0e20a0419e2c8_tuple;
static PyObject *const_tuple_f44649f09d155153fdd0c05ccaa583de_tuple;
static PyObject *const_unicode_digest_d087aa050a38508b1f0a500c1d21aa2c;
static PyObject *const_str_plain__FinnishStemmer__step2_suffixes;
static PyObject *const_unicode_digest_711578b5a996e75a650bde056decd383;
static PyObject *const_unicode_plain_iqUe;
static PyObject *const_unicode_digest_038f3890eedcee1b21b7d2364a09bcab;
static PyObject *const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple;
static PyObject *const_unicode_digest_beac4342d59d3a7b563dc5eede05b77a;
static PyObject *const_str_plain_DutchStemmer;
extern PyObject *const_str_digest_68cda404ee2dc137b693a4f3167c6d17;
static PyObject *const_unicode_plain_ution;
static PyObject *const_str_plain_vowels;
static PyObject *const_unicode_digest_049db6e58dec8faeb2bd7cd1632b9df3;
static PyObject *const_unicode_digest_8d76742109b75e16413fd10dd7df36a8;
static PyObject *const_unicode_plain_han;
static PyObject *const_unicode_plain_kh;
static PyObject *const_tuple_unicode_plain_oj_unicode_plain_uj_tuple;
static PyObject *const_unicode_plain_ism;
static PyObject *const_tuple_5ef37cf62d4b1b7803a0fd96573db4b6_tuple;
static PyObject *const_tuple_unicode_plain_heden_tuple;
static PyObject *const_unicode_plain_imma;
static PyObject *const_str_plain__NorwegianStemmer__step2_suffixes;
static PyObject *const_tuple_unicode_plain_els_unicode_plain_lig_unicode_plain_ig_tuple;
static PyObject *const_tuple_266f845d872b4f41fb35a7b88deb91d1_tuple;
static PyObject *const_tuple_11a34057217f37049e02e1d6509e49b5_tuple;
static PyObject *const_unicode_plain_yv;
static PyObject *const_str_plain_SwedishStemmer;
static PyObject *const_unicode_plain_kk;
static PyObject *const_unicode_digest_a9e8d2a2a8d68bee730286a6aab6c160;
static PyObject *const_unicode_digest_84a0b5e9b34f1ec00ad17f36447d4895;
static PyObject *const_tuple_unicode_plain_ig_unicode_plain_ik_unicode_plain_isch_tuple;
static PyObject *const_unicode_plain_idad;
static PyObject *const_tuple_e49dd29108b08f32825ced55c26fcdf3_tuple;
static PyObject *const_tuple_a1823a300173c705318d9829a719d4d6_tuple;
static PyObject *const_unicode_digest_78cdf5f405cf341f59d014e5862c6bc7;
static PyObject *const_tuple_327bd67ed55c6e3030521e5592ac2208_tuple;
static PyObject *const_unicode_plain_ya;
static PyObject *const_unicode_plain_yo;
static PyObject *const_tuple_unicode_digest_ed35aff149c3cd50410b4d18ad86e792_tuple;
static PyObject *const_tuple_unicode_digest_a6a1250a415661d97d62909534ab83c0_tuple;
static PyObject *const_unicode_digest_56efed22f0179fa5c50d8d8a65abb7a7;
static PyObject *const_unicode_plain_enze;
static PyObject *const_unicode_plain_ator;
static PyObject *const_tuple_33926bbcf7613052ed66bc027b49957d_tuple;
static PyObject *const_tuple_ef5ebc574a79dfd720fdbeab30f99197_tuple;
static PyObject *const_tuple_3299f567526f0559f6efbe4d0e04ff65_tuple;
static PyObject *const_str_plain__ItalianStemmer__step2_suffixes;
static PyObject *const_unicode_plain_lijk;
static PyObject *const_unicode_plain_iez;
static PyObject *const_unicode_plain_ible;
static PyObject *const_unicode_plain_nn;
static PyObject *const_tuple_unicode_plain_ci_tuple;
static PyObject *const_unicode_digest_323b65de5a003fb4f290a568d16c2cda;
static PyObject *const_unicode_digest_e6b89c1d38160e6677c4bb9f081e6c5c;
static PyObject *const_tuple_55e4d7c7908ecacbc7c86ad971c24be6_tuple;
static PyObject *const_tuple_496ad5371573b8369845b15055770b5e_tuple;
static PyObject *const_unicode_digest_05aa8be1d717976fd4c7556b7bb2385d;
static PyObject *const_unicode_plain_eill;
static PyObject *const_unicode_plain_ements;
static PyObject *const_tuple_6575b8f2b70c0cddeffa84d666a3e963_tuple;
static PyObject *const_unicode_plain_selo;
static PyObject *const_str_plain__FrenchStemmer__vowels;
static PyObject *const_tuple_631b7a7920642fcb1d2abc186f9e311c_tuple;
static PyObject *const_tuple_227a81f8638c04593034a84935ffc4b7_tuple;
static PyObject *const_unicode_plain_impa;
static PyObject *const_str_plain__RussianStemmer__roman_to_cyrillic;
static PyObject *const_tuple_unicode_plain_hungarian_tuple;
static PyObject *const_str_plain__HungarianStemmer__step1_suffixes;
static PyObject *const_unicode_digest_11b808f19a0a6a4942b1533e0c8e4af1;
static PyObject *const_tuple_33d056d1a7b7183e31308cd4f61243bb_tuple;
static PyObject *const_unicode_plain_swedish;
static PyObject *const_unicode_plain_ost;
static PyObject *const_tuple_e8aad01d4693334cb34df20b3f260563_tuple;
static PyObject *const_tuple_unicode_plain_ando_unicode_plain_endo_tuple;
static PyObject *const_unicode_plain_itiva;
static PyObject *const_unicode_digest_8786485eacb9b61f77fd72a3344043ff;
static PyObject *const_unicode_plain_itive;
static PyObject *const_unicode_digest_83c9e37d6e93d1aeb2f519c8d23ab8a3;
static PyObject *const_tuple_unicode_digest_2d6c9d5dde7e4950753696b6ed5a35ff_tuple;
static PyObject *const_unicode_digest_92ce353ad720e6b4883dcdd350ef2308;
static PyObject *const_unicode_plain_erais;
static PyObject *const_unicode_digest_c19ed4ecc1fef767495e0e340b43a2ea;
static PyObject *const_unicode_plain_enza;
static PyObject *const_str_plain__ItalianStemmer__vowels;
extern PyObject *const_str_plain_raw_input;
static PyObject *const_str_plain__NorwegianStemmer__step1_suffixes;
static PyObject *const_tuple_unicode_plain_logie_unicode_plain_logies_tuple;
static PyObject *const_unicode_digest_56ba0b0039dcafb80583c021ac6f64cc;
static PyObject *const_tuple_b3ce605d0c06c1c8ad0f5879320a1b91_tuple;
static PyObject *const_str_plain_digraph;
static PyObject *const_unicode_digest_e5b7e954d23d1556af222cafe527afe3;
static PyObject *const_unicode_digest_ac56d9555ca8849deb4827d87d58e877;
static PyObject *const_tuple_tuple_unicode_plain_oj_unicode_plain_uj_tuple_tuple;
static PyObject *const_unicode_digest_918613226874eb7500a1f3d0c51ed063;
static PyObject *const_unicode_plain_atore;
static PyObject *const_str_plain_danish;
static PyObject *const_unicode_plain_bcdfghjlmnoprtvyz;
static PyObject *const_unicode_plain_atori;
static PyObject *const_unicode_digest_e1963e71512752f09607c5e249411d53;
extern PyObject *const_tuple_int_pos_70_tuple;
static PyObject *const_unicode_digest_d0fe3dadce72905b5ca3596d45c99bde;
static PyObject *const_tuple_unicode_digest_bacc7c1e69811c177681ce974f1a7873_tuple;
static PyObject *const_unicode_digest_d9bdae7956cf33bf51000e801aa18ec0;
static PyObject *const_unicode_digest_dafdd63e1b33722ad1f47fddf4c4438c;
static PyObject *const_unicode_plain_ile;
static PyObject *const_unicode_digest_78fba20916662e73727fa1ccf67f50cf;
static PyObject *const_tuple_27af1ba8496868e7ab5749bd0fe10cda_tuple;
static PyObject *const_tuple_cea637d267ce9a15425f626e76e7c2b7_tuple;
static PyObject *const_unicode_digest_527d908fad8e209f9a2669c6e37e1fbb;
static PyObject *const_tuple_2fb5854997cab90a4d05ff60aa40c954_tuple;
static PyObject *const_unicode_digest_aade7c92617df6f0048d1e16c7b6a714;
extern PyObject *const_str_plain_udhr;
static PyObject *const_unicode_plain_yais;
static PyObject *const_unicode_plain_elig;
static PyObject *const_unicode_digest_3a1522ca96e4d22468ac84dfbd766769;
static PyObject *const_tuple_b77ab985c2bf34760b2abc78cae789df_tuple;
static PyObject *const_tuple_d7e10d442828c304a208e17e88dbafe5_tuple;
static PyObject *const_unicode_digest_58efb8b3f5f4b4f6b7343c1f0bd121ad;
static PyObject *const_tuple_dc95324d683a695f32532b06ec019a96_tuple;
static PyObject *const_tuple_effd7a5e0d0cc87a372a9c76d2f302db_tuple;
static PyObject *const_str_plain__ItalianStemmer__step1_suffixes;
static PyObject *const_tuple_32696cb57069936efe3e669be2a205d8_tuple;
static PyObject *const_unicode_plain_aua;
static PyObject *const_unicode_plain_german;
static PyObject *const_unicode_plain_azioni;
static PyObject *const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple;
static PyObject *const_unicode_digest_b13fc523c6330c593033192d322fd753;
static PyObject *const_unicode_digest_707dc82a3c2378a70dac038f187bd1f8;
extern PyObject *const_str_digest_c075052d723d6707083e869a0e3659bb;
static PyObject *const_tuple_7c19c3129287ed1c05bdd2c2c1c5213c_tuple;
static PyObject *const_unicode_digest_47b81fed7d8bf3e0cf07fd58da1fea1c;
static PyObject *const_unicode_digest_56e09ae969d5eb64a4ae0231607b3734;
extern PyObject *const_str_plain_r2;
extern PyObject *const_str_plain_r1;
static PyObject *const_unicode_digest_b428152830fa2709bfae80a9618c6525;
static PyObject *const_unicode_digest_38cc918aa65716ade119e9cb71f38954;
static PyObject *const_tuple_168f2837f58da07ff91508cb546bdebf_tuple;
static PyObject *const_tuple_9b5feff1ee70654ffe342974cb86fce9_tuple;
static PyObject *const_unicode_plain_aux;
static PyObject *const_unicode_plain_issements;
extern PyObject *const_int_pos_70;
static PyObject *const_tuple_30882c6f62be8cc245864da0c792bb7b_tuple;
static PyObject *const_str_plain_rv_ending_found;
static PyObject *const_unicode_digest_5f92f4b226019badebfbef2c5e93e54a;
static PyObject *const_unicode_plain_adora;
static PyObject *const_tuple_unicode_digest_ffbcedbec480ba49ec103efa1145d4f8_tuple;
static PyObject *const_tuple_c8d27353a56896ad9935ffe2c05e32b1_tuple;
static PyObject *const_unicode_plain_ador;
static PyObject *const_str_plain__HungarianStemmer__step9_suffixes;
static PyObject *const_tuple_e45fcfb5ae2858f99ff073e0f05deccb_tuple;
static PyObject *const_unicode_plain_itiv;
static PyObject *const_unicode_digest_78115e40470085e995c9f33a689bfb76;
static PyObject *const_str_plain_DanishStemmer;
static PyObject *const_unicode_digest_f2caf14fc04d7ff05f9f195dba4e2955;
static PyObject *const_unicode_plain_oo;
static PyObject *const_unicode_digest_d024846c1eaba62fc7dccb44fc853458;
static PyObject *const_unicode_plain_yamos;
static PyObject *const_unicode_plain_em;
static PyObject *const_unicode_plain_iendo;
static PyObject *const_unicode_digest_c39ed51721b386e12be8129686b300e9;
static PyObject *const_tuple_9da71f3069d6bd8c817bc6992dcef6bf_tuple;
static PyObject *const_tuple_c7fff8f64e1a348ef3c18d88e5495bce_tuple;
static PyObject *const_unicode_plain_hen;
static PyObject *const_tuple_unicode_plain_U_unicode_plain_u_tuple;
extern PyObject *const_tuple_empty;
static PyObject *const_str_plain__HungarianStemmer__step4_suffixes;
static PyObject *const_unicode_plain_bcdfghjklmnpqrstvwxz;
static PyObject *const_unicode_digest_dbf093dd6d9684d7a5038ba9b028700b;
static PyObject *const_unicode_plain_amento;
static PyObject *const_str_plain_chr_exceeded;
static PyObject *const_tuple_str_plain_i_tuple;
static PyObject *const_unicode_digest_3e6b89b3b28707186f1c8c46a90f1df2;
extern PyObject *const_str_plain_rv;
static PyObject *const_tuple_unicode_plain_italian_tuple;
static PyObject *const_unicode_plain_els;
static PyObject *const_tuple_66e35d91519c98995c87b3ad14739ae1_tuple;
static PyObject *const_str_plain_romanian;
static PyObject *const_unicode_digest_0a2d24ad5f8d1a187ea868185b362efd;
static PyObject *const_unicode_plain_lich;
extern PyObject *const_str_plain_kwargs;
static PyObject *const_unicode_digest_04a20b4e03cace659924c6aa2933c949;
extern PyObject *const_str_plain_re;
static PyObject *const_tuple_10e4de01aad20d678087669dddcf6313_tuple;
static PyObject *const_unicode_plain_dt;
static PyObject *const_unicode_plain_uciones;
static PyObject *const_unicode_plain_icivi;
static PyObject *const_unicode_digest_20f5146bb9a5a2e0e8d455177dad4e11;
static PyObject *const_unicode_digest_09bc009ffd858aaf58df7e98266d9b89;
static PyObject *const_tuple_845ac4528257b3ed391fd49fa8dae820_tuple;
static PyObject *const_tuple_b02b073265ed77383de1c095c4694220_tuple;
static PyObject *const_unicode_digest_cf034fd48b27ddf7f97d20cecb0d0523;
static PyObject *const_unicode_plain_iciva;
static PyObject *const_tuple_unicode_plain_ic_tuple;
static PyObject *const_unicode_digest_1240ae692d651c5d1539c59fdc48f057;
static PyObject *const_unicode_plain_iune;
static PyObject *const_unicode_digest_22715462b9096530b59c4d7feb91bf3f;
static PyObject *const_unicode_plain_tap;
static PyObject *const_tuple_eb52ccf5e8b342c09833c45ec7463ec0_tuple;
static PyObject *const_unicode_digest_48a5e5414e404390c40aa90eef5b408f;
static PyObject *const_str_plain_PortugueseStemmer;
static PyObject *const_tuple_1868edefb949b0d730a3408476f6d119_tuple;
static PyObject *const_tuple_e6d3ea5d4f340370863c7e2a11288cab_tuple;
static PyObject *const_unicode_digest_1d5999dd62a3ceefe08991005d874c28;
static PyObject *const_tuple_unicode_plain_german_tuple;
static PyObject *const_tuple_str_plain_nn_tuple;
static PyObject *const_tuple_unicode_plain_idade_unicode_plain_idades_tuple;
static PyObject *const_unicode_plain_slov;
static PyObject *const_unicode_digest_3f52a44c55b9453c5ea1ad22dd78e786;
static PyObject *const_tuple_23041e2226cfd5f631f03497d2af7ada_tuple;
static PyObject *const_unicode_digest_9fc494b9e47f1ff7a0348a3457292ff5;
static PyObject *const_unicode_digest_e84f43da3f98baa3d85ec8f3b279d739;
static PyObject *const_unicode_digest_daa44caae2c790737a8c24bc0be4162b;
static PyObject *const_unicode_plain_gd;
static PyObject *const_unicode_digest_185c6d9894f4ed8a07665716865b99d7;
static PyObject *const_unicode_digest_ce2dd360fc97fd6259923ac8b094cfb0;
static PyObject *const_unicode_digest_08d43b10cefd4221353d1b12b55f9774;
static PyObject *const_str_plain__HungarianStemmer__step2_suffixes;
static PyObject *const_tuple_51997d27c66f220f3eab87efda1a277f_tuple;
extern PyObject *const_str_plain_SnowballStemmer;
static PyObject *const_unicode_plain_ORIGINAL;
static PyObject *const_tuple_unicode_plain_lle_unicode_plain_ine_tuple;
static PyObject *const_tuple_unicode_plain_en_unicode_plain_es_unicode_plain_e_tuple;
extern PyObject *const_str_plain_center;
static PyObject *const_tuple_fc3385a3fcb339a8c3a51b260f9ddea8_tuple;
static PyObject *const_tuple_2113415aedfb96e4da28dce140250380_tuple;
extern PyObject *const_str_plain___file__;
static PyObject *const_tuple_42984e9c76991a83543acab6e2f18f9a_tuple;
static PyObject *const_unicode_plain_erez;
static PyObject *const_tuple_unicode_digest_00029bab94d4fae3bad9b98113cef03c_tuple;
static PyObject *const_tuple_acdd760e1bb6662d8992cc7f57800467_tuple;
static PyObject *const_tuple_f9cb4ff683cf07968ae8d155d1b96271_tuple;
static PyObject *const_unicode_plain_m;
static PyObject *const_unicode_digest_9c795e2fded76151d524a7e3b0c93812;
static PyObject *const_tuple_unicode_digest_1737b60e1e3799cec4e3066da44e189b_tuple;
static PyObject *const_unicode_plain_atoare;
static PyObject *const_unicode_plain_ativ;
static PyObject *const_tuple_unicode_plain_jo_tuple;
static PyObject *const_unicode_digest_741d144afce1a5137c573767055cb279;
static PyObject *const_unicode_digest_f68de3ef8c13e5dd2853b6c8fa86ca8b;
static PyObject *const_unicode_plain_tt;
static PyObject *const_unicode_digest_00029bab94d4fae3bad9b98113cef03c;
static PyObject *const_unicode_digest_f39ca2c1237dc556001a56894b0789f2;
static PyObject *const_unicode_digest_1c34a91667108c42ccd42adc23fdd3e4;
extern PyObject *const_unicode_digest_3f8b984275c38c3bda625b33f1771959;
static PyObject *const_unicode_digest_96eb7bf4544fb87bb2ae37c1564b7553;
static PyObject *const_tuple_9d60038e96c518aa7b726c75071cf2e0_tuple;
static PyObject *const_tuple_8ffcc2f3a509c5f2adf3ce0677e97f16_tuple;
extern PyObject *const_str_plain___metaclass__;
static PyObject *const_str_plain__FinnishStemmer__step4_suffixes;
static PyObject *const_unicode_digest_1a27b7b9da7216996c1254ad3ffa3531;
static PyObject *const_tuple_a5adf8286787c0820a5abe7f474bb9b0_tuple;
static PyObject *const_tuple_unicode_plain_abil_unicode_plain_ic_unicode_plain_iv_tuple;
static PyObject *const_tuple_0afea4878374468609999fa017a0ee81_tuple;
static PyObject *const_tuple_c789034d7278fd1af36a082e0ca2e00d_tuple;
extern PyObject *const_str_plain_word;
static PyObject *const_unicode_digest_b8718dff9bd262d9a858122725c34890;
static PyObject *const_tuple_unicode_plain_end_unicode_plain_ung_tuple;
static PyObject *const_tuple_34a0ae3c2a0fd59cc66eb2ec229e03f1_tuple;
static PyObject *const_unicode_plain_ier;
static PyObject *const_unicode_digest_953d89042a50992a94a2c67896f83479;
static PyObject *const_unicode_digest_67458d2c3b56421f177cb72aaebf67fc;
extern PyObject *const_str_plain_StemmerI;
static PyObject *const_unicode_digest_38194bff2827a2d9d0046361a50ca312;
static PyObject *const_unicode_plain_gy;
static PyObject *const_unicode_digest_1c20dde2a1bfb75af39bec4b5b13d281;
static PyObject *const_str_plain__FrenchStemmer__step2b_suffixes;
static PyObject *const_unicode_digest_b227e519e93fd3ff048fb6813e177f64;
extern PyObject *const_str_plain_stemmed;
static PyObject *const_tuple_2566c2645d55f81f1fb46fa785260a31_tuple;
static PyObject *const_tuple_a02cc15d798cbb5cd6c292e1b050fa68_tuple;
static PyObject *const_unicode_plain_leg;
static PyObject *const_str_plain___rv_french;
static PyObject *const_tuple_unicode_plain_ea_unicode_plain_ele_unicode_plain_elor_tuple;
extern PyObject *const_str_plain_replace;
static PyObject *const_unicode_digest_007691032e40e7582adc29d110e2df12;
static PyObject *const_str_plain__HungarianStemmer__double_consonants;
static PyObject *const_unicode_plain_gt;
static PyObject *const_tuple_f11cb483adc2f66ad177f31d8d53f3ea_tuple;
static PyObject *const_unicode_digest_095a177b51f187e5ba20c32fce88fe1d;
static PyObject *const_str_plain__FrenchStemmer__step4_suffixes;
static PyObject *const_tuple_unicode_plain_dt_unicode_plain_vt_tuple;
static PyObject *const_unicode_plain_icator;
static PyObject *const_unicode_plain_icive;
static PyObject *const_unicode_plain_iilor;
static PyObject *const_tuple_60742b409240155d476c25dac1be289b_tuple;
extern PyObject *const_str_plain___new__;
static PyObject *const_tuple_72f993cfaab1015a764fda66527479d2_tuple;
static PyObject *const_tuple_85d73053cefb5c5e13e442a4d52e324b_tuple;
static PyObject *const_unicode_digest_2635dbbc015515e6bb9c25ad8d346054;
static PyObject *const_unicode_plain_itori;
static PyObject *const_unicode_digest_762250f47f3e83faca3d040e36ae971f;
static PyObject *const_tuple_083a553af28068318eb4d12c441913d8_tuple;
extern PyObject *const_unicode_empty;
extern PyObject *const_tuple_str_plain_stopwords_tuple;
static PyObject *const_unicode_digest_6417e272e31675efd6de9d067f962404;
static PyObject *const_unicode_digest_e0e0b7c6bb19dda9ef5b49f8530ccf71;
static PyObject *const_unicode_plain_E;
static PyObject *const_unicode_plain_te;
static PyObject *const_str_plain__FrenchStemmer__step1_suffixes;
static PyObject *const_tuple_45f6ea7f15c39e03730b7dca9834b46a_tuple;
static PyObject *const_tuple_unicode_plain_norwegian_tuple;
static PyObject *const_unicode_plain_exit;
static PyObject *const_tuple_50e44c3d4eda2e5d2e5961d782d8fd0b_tuple;
static PyObject *const_unicode_digest_31c11d5a666693a67555f58436c55948;
static PyObject *const_tuple_unicode_plain_ig_tuple;
static PyObject *const_unicode_digest_11c17579f864c163030088478b9d264d;
static PyObject *const_unicode_plain_endo;
static PyObject *const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple;
static PyObject *const_unicode_digest_ff100f00c919f6114253432c068b0fcb;
static PyObject *const_str_plain__DanishStemmer__step1_suffixes;
static PyObject *const_tuple_unicode_plain_erte_unicode_plain_ert_tuple;
static PyObject *const_tuple_91ee3847503a56a732a8cba289d0b7e8_tuple;
static PyObject *const_tuple_unicode_plain_par_unicode_plain_col_unicode_plain_tap_tuple;
static PyObject *const_unicode_plain_hin;
static PyObject *const_unicode_digest_d387eb741b638d13b223a4147a8219a0;
static PyObject *const_str_plain_double_cons;
static PyObject *const_tuple_78cf67f7af49e763286d58581ebf2847_tuple;
static PyObject *const_tuple_fd74d5f1f14a0238bc6599fa81fa3c15_tuple;
static PyObject *const_unicode_plain_ait;
static PyObject *const_unicode_digest_75a810c13d55d8b1a714194a3f83e70b;
static PyObject *const_tuple_unicode_plain_ta_unicode_plain_na_tuple;
static PyObject *const_unicode_digest_8eb04cf7b1ef0a81429527862e4439ee;
extern PyObject *const_str_plain_nn;
static PyObject *const_unicode_digest_62db8fd5ae2a265479a2e1db31f73b57;
static PyObject *const_unicode_plain_ais;
static PyObject *const_unicode_plain_iile;
static PyObject *const_str_plain__RomanianStemmer__vowels;
static PyObject *const_tuple_dd133fbb3fa8b8ae72b8c8e4f63aa8d1_tuple;
static PyObject *const_unicode_digest_08bbb694960a2d85c41e434aeac51be4;
static PyObject *const_tuple_unicode_plain_al_unicode_plain_el_tuple;
static PyObject *const_unicode_digest_834b316728c2ad6be95c431070195163;
static PyObject *const_tuple_ec79e0c9060ccc1ce0f76f8f3ef19338_tuple;
static PyObject *const_unicode_digest_e66bb7aa790ad8efc652e279d75c52ea;
static PyObject *const_tuple_76a3773110ed3fb7fc901dca7c8e8633_tuple;
static PyObject *const_str_plain__GermanStemmer__step3_suffixes;
static PyObject *const_unicode_digest_3bf0195de53ad8c043672d1cd63637f3;
static PyObject *const_tuple_tuple_30882c6f62be8cc245864da0c792bb7b_tuple_tuple;
static PyObject *const_tuple_f04082947c75bd88e75e8064122acab2_tuple;
static PyObject *const_unicode_digest_33f74bcf797191a3ac5f1ea6f198c5bf;
static PyObject *const_unicode_plain_ences;
static PyObject *const_tuple_a660101c8de48f0e71b192fa160ba29f_tuple;
static PyObject *const_unicode_plain_ilor;
static PyObject *const_unicode_digest_a5ddfa5ea8795b19875fd52513e34d10;
static PyObject *const_unicode_digest_0660733d03d3aa101753bd2da6072150;
static PyObject *const_str_plain__PortugueseStemmer__step1_suffixes;
static PyObject *const_unicode_plain_norwegian;
static PyObject *const_tuple_3cde4017af6f16526fb10beed8499c5f_tuple;
extern PyObject *const_str_chr_42;
static PyObject *const_unicode_digest_9fbb4c1cc48de6d90f1747f76f471588;
static PyObject *const_tuple_unicode_plain_abil_tuple;
static PyObject *const_str_plain__FinnishStemmer__consonants;
static PyObject *const_unicode_digest_4fc4f204afd06910124f7168bb008746;
static PyObject *const_str_plain__NorwegianStemmer__s_ending;
static PyObject *const_unicode_digest_137fd8967ff7feb8f28e84c9caa36c7d;
static PyObject *const_unicode_plain_ksi;
static PyObject *const_unicode_digest_060b3f4dee951c3f2ca72fd224660c70;
static PyObject *const_tuple_a55a0316c7ece74c8344bc9c2b75b9f6_tuple;
static PyObject *const_tuple_unicode_plain_siin_unicode_plain_den_unicode_plain_tten_tuple;
static PyObject *const_str_plain__ScandinavianStemmer;
static PyObject *const_tuple_unicode_plain_finnish_tuple;
static PyObject *const_tuple_686bde844e12f4df5b9937dab286cac9_tuple;
static PyObject *const_unicode_plain_italian;
static PyObject *const_tuple_tuple_d1153c9e51c48c0996c3271524d5509a_tuple_tuple;
static PyObject *const_tuple_613172038fa6e48d0211bb10a817635f_tuple;
static PyObject *const_tuple_b426ffd81fbdd9cc4c4f98795874329c_tuple;
static PyObject *const_unicode_plain_bdfghklmnt;
extern PyObject *const_str_chr_39;
static PyObject *const_tuple_5632f189044678f18ed25f289d6373d4_tuple;
static PyObject *const_str_plain_RussianStemmer;
static PyObject *const_str_plain__rv_standard;
static PyObject *const_str_plain__HungarianStemmer__digraphs;
static PyObject *const_tuple_faf94a6e5c14f1747f509207339df22d_tuple;
static PyObject *const_unicode_plain_vt;
static PyObject *const_unicode_plain_ar;
static PyObject *const_str_plain_undouble_success;
static PyObject *const_unicode_plain_ete;
static PyObject *const_tuple_unicode_plain_I_unicode_plain_i_tuple;
static PyObject *const_unicode_plain_ivos;
static PyObject *const_unicode_digest_c1f040cc49a797c3d036ebf12e4ca59c;
static PyObject *const_unicode_plain_stul;
static PyObject *const_unicode_digest_22aff32e302512c1e61183bad14841a6;
static PyObject *const_str_plain__DanishStemmer__vowels;
static PyObject *const_unicode_plain_dd;
static PyObject *const_tuple_56d4780e0b984dc4318c8a0bd10cd4b2_tuple;
static PyObject *const_unicode_plain_eraIent;
static PyObject *const_unicode_digest_bb920a9c520a3c123ca25a0bee3c6dc2;
static PyObject *const_unicode_plain_ances;
static PyObject *const_tuple_bd8616f9487ba4c42dff80340f26ed9f_tuple;
static PyObject *const_str_plain__DanishStemmer__step2_suffixes;
static PyObject *const_tuple_93e1c64ccad8d75f6fa5b237ce6ca192_tuple;
static PyObject *const_unicode_digest_29eca6fe7cef87eed65d95e955438c63;
extern PyObject *const_unicode_chr_39;
static PyObject *const_tuple_8080a60c5794aeda7756249d3900f6c9_tuple;
static PyObject *const_str_plain__RussianStemmer__verb_suffixes;
static PyObject *const_unicode_plain_yvshi;
static PyObject *const_unicode_digest_cee27e4bc974a77815144915264904b5;
static PyObject *const_unicode_plain_azione;
static PyObject *const_tuple_7d48bd73d82ed9770b83395402452efb_tuple;
static PyObject *const_unicode_plain_as;
static PyObject *const_unicode_plain_oj;
static PyObject *const_unicode_plain_ok;
static PyObject *const_unicode_digest_3a08500cdf164c73a2d17fd487d79049;
static PyObject *const_unicode_plain_selos;
static PyObject *const_tuple_unicode_plain_french_tuple;
static PyObject *const_tuple_a19ef6e59d188e1b2c55a365e53b7e61_tuple;
static PyObject *const_unicode_digest_3a0050d9afcbdd171193c271c9e8b604;
static PyObject *const_str_plain__RussianStemmer__noun_suffixes;
static PyObject *const_unicode_digest_39d8c15d25cebea6a8d0ca44c6daa370;
static PyObject *const_unicode_digest_ea671a3167dde5a7597226999705a682;
static PyObject *const_str_plain__RussianStemmer__regions_russian;
static PyObject *const_tuple_unicode_plain_ch_unicode_plain_gh_tuple;
static PyObject *const_unicode_plain_emment;
static PyObject *const_unicode_plain_shch;
static PyObject *const_str_plain__FinnishStemmer__restricted_vowels;
static PyObject *const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple;
static PyObject *const_unicode_plain_est;
static PyObject *const_unicode_plain_assiez;
static PyObject *const_tuple_7279dacd5606b71771fe601dd34c7cfb_tuple;
static PyObject *const_unicode_digest_44a46dcd1c761a88aec0d1a2d5f5a3c7;
static PyObject *const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple;
static PyObject *const_unicode_plain_iqUes;
static PyObject *const_tuple_unicode_plain_russian_tuple;
static PyObject *const_str_plain__r1_scandinavian;
static PyObject *const_unicode_plain_zs;
static PyObject *const_tuple_4df1dda7855fe3f9d13b179b8c5138cc_tuple;
static PyObject *const_tuple_69edef68b2c6eca22debb83964de78ac_tuple;
static PyObject *const_unicode_digest_23b04996d96763e38f1b5692ca7258cb;
static PyObject *const_unicode_digest_61d5dfdfedbb4893ed3a8545e77992a3;
static PyObject *const_tuple_tuple_unicode_plain_ic_unicode_plain_iv_tuple_tuple;
static PyObject *const_unicode_digest_add3b41725114344903d6932d6e0253b;
static PyObject *const_unicode_digest_1737b60e1e3799cec4e3066da44e189b;
static PyObject *const_tuple_589e49ae696cce436a88167757c933ec_tuple;
static PyObject *const_unicode_digest_aca1cde46deeae69842a2c874f0f4532;
static PyObject *const_tuple_2901820b7f658cad81e39efab3a56684_tuple;
static PyObject *const_unicode_digest_ac9f1f835f6bf90debfec6d2459efaa8;
static PyObject *const_tuple_e0b9b30507db9495c0b29b9620ba5238_tuple;
static PyObject *const_unicode_plain_ance;
static PyObject *const_str_plain__PortugueseStemmer__step4_suffixes;
extern PyObject *const_str_plain_decode;
static PyObject *const_unicode_digest_594ca15359915ea94297b153a89c57cb;
static PyObject *const_unicode_digest_9273dfd762661b0bce44d5ca0a733faa;
static PyObject *const_unicode_digest_bacc7c1e69811c177681ce974f1a7873;
extern PyObject *const_str_plain_cls;
static PyObject *const_str_plain_HungarianStemmer;
static PyObject *const_unicode_digest_8b50c6d061093d206ae232d63ab77e8f;
static PyObject *const_tuple_65f125ed4f286331649efeaaa6fca05f_tuple;
static PyObject *const_tuple_16b37ec7cb872ad451b56151cdb77735_tuple;
static PyObject *const_str_plain_step2a_success;
static PyObject *const_tuple_unicode_digest_bd45c14285625ef7d1459fb4891f8e95_tuple;
static PyObject *const_tuple_unicode_digest_92351d786d28b4b8e77f42285e4f88f6_tuple;
static PyObject *const_unicode_plain_kt;
extern PyObject *const_str_plain_demo;
static PyObject *const_str_plain_ignore_stopwords;
static PyObject *const_unicode_digest_44e5ee9fcc8c01e5dab4e245ebb4499c;
static PyObject *const_tuple_a444720439c08ed85804bf03a3ba9154_tuple;
static PyObject *const_unicode_plain_isme;
static PyObject *const_unicode_digest_ed35aff149c3cd50410b4d18ad86e792;
static PyObject *const_tuple_e4a2b6178dc0988dedc3e67c3c0bb944_tuple;
static PyObject *const_unicode_plain_lta;
static PyObject *const_tuple_be984219f2a6953e0abfc723cf12fc82_tuple;
static PyObject *const_unicode_plain_russian;
static PyObject *const_unicode_digest_37268492117af5aa3a4196bff6776466;
static PyObject *const_tuple_99e62a547a74aba922bb773545af840d_tuple;
static PyObject *const_tuple_db0e7b73bc82184a512d41e2dc27d746_tuple;
static PyObject *const_unicode_plain_imento;
static PyObject *const_str_plain__HungarianStemmer__step8_suffixes;
static PyObject *const_unicode_plain_ye;
extern PyObject *const_str_plain_dutch;
static PyObject *const_unicode_plain_imenti;
static PyObject *const_unicode_plain_ty;
static PyObject *const_unicode_digest_354914660fa63a2d02505a32206f5d79;
static PyObject *const_unicode_digest_c8044251e6b6f1cdce09ea056e961ef9;
static PyObject *const_tuple_3bf1a19e4006ee5b3fe56e3ef11f4cd2_tuple;
static PyObject *const_unicode_digest_38dcfca46c19c228cb9d722e84c91dad;
extern PyObject *const_str_plain_self;
static PyObject *const_unicode_digest_2e3371447b82ef26caa45342c6366bca;
static PyObject *const_unicode_digest_b3e27c894e240690495e6e270a1194a2;
static PyObject *const_unicode_digest_2274517caed1fbe8acda049ccf86c576;
static PyObject *const_unicode_plain_ando;
static PyObject *const_unicode_plain_ului;
extern PyObject *const_unicode_plain_u;
static PyObject *const_xrange_256;
static PyObject *const_unicode_digest_4a809d79c92d963f27fdaf2f296354f2;
static PyObject *const_tuple_f76cbe2358e2c788a54a3d5b640f5f04_tuple;
static PyObject *const_unicode_digest_9517b5d6e35516b0b022218698df03f9;
static PyObject *const_unicode_digest_193ff3cb4343a982e9320f539bb570af;
static PyObject *const_unicode_digest_4393ee096ad5bde64ee27b68ee16d743;
static PyObject *const_tuple_unicode_plain_ene_unicode_plain_en_tuple;
static PyObject *const_unicode_plain_atrice;
static PyObject *const_unicode_digest_d02bba12eed79519808e696325a8e7b1;
static PyObject *const_tuple_651dad646088a5dfd8c659c2a41682ed_tuple;
static PyObject *const_unicode_digest_4146a4126dfa7199bdd957a83f1a5d45;
static PyObject *const_unicode_plain_icale;
static PyObject *const_tuple_dc8d33361ac7399a3d0f321f8e95c4b2_tuple;
static PyObject *const_unicode_plain_icala;
static PyObject *const_str_plain_norwegian;
static PyObject *const_unicode_plain_ment;
static PyObject *const_unicode_plain_icali;
static PyObject *const_unicode_digest_935145b6cd49804fb37dd37262b564a8;
static PyObject *const_unicode_plain_ivshi;
static PyObject *const_unicode_digest_0833766d0ca342628223b5b33272c0cd;
static PyObject *const_unicode_plain_ive;
static PyObject *const_unicode_digest_1f2c9bf408b4328895004534244d0899;
static PyObject *const_tuple_77f671eb92d9e5b84e89d4de32ca1791_tuple;
static PyObject *const_unicode_digest_20ff30c165c4f43f97c9f9d947a045d0;
static PyObject *const_unicode_plain_ifs;
static PyObject *const_tuple_fb7608fc06bb47c52c1a00144f395302_tuple;
static PyObject *const_unicode_digest_473fbf2ba6b0605956238cf78704a297;
static PyObject *const_unicode_digest_f3d41f5e50fd0354fa71bb0a004e0d89;
extern PyObject *const_str_plain_sub;
static PyObject *const_str_plain__RussianStemmer__derivational_suffixes;
static PyObject *const_unicode_plain_dzs;
static PyObject *const_unicode_digest_5dc956b3a024e804e9693ab6ea003746;
static PyObject *const_tuple_7c3f8809c19f91da7ee612f4f48c8357_tuple;
static PyObject *const_unicode_plain_isch;
static PyObject *const_unicode_plain_iva;
static PyObject *const_unicode_plain_amment;
static PyObject *const_unicode_digest_b191da371eceef3749c8dae83e8df957;
static PyObject *const_tuple_7b93e7ba12b6e9eb5774d9fb6261550a_tuple;
static PyObject *const_unicode_plain_jo;
static PyObject *const_tuple_faa874bf6d816f5651d9d6023ce7cd7e_tuple;
static PyObject *const_tuple_b1b3f739aa671e601b1d8cedaace3566_tuple;
static PyObject *const_str_plain_step2b_success;
static PyObject *const_unicode_plain_encias;
static PyObject *const_unicode_digest_aee6ee1b9b91d76f88fa57dafe9aaeb6;
static PyObject *const_unicode_plain_ell;
static PyObject *const_tuple_50cf5626dc820b899305d6108d631dae_tuple;
static PyObject *const_str_plain_RomanianStemmer;
static PyObject *const_unicode_digest_c4c0cdb9d05e856c7575106e9c55e55d;
static PyObject *const_unicode_plain_danish;
static PyObject *const_unicode_plain_nsa;
static PyObject *const_unicode_plain_eront;
static PyObject *const_tuple_771c93f72ced5928d5cb9dfc65e3b3e2_tuple;
static PyObject *const_unicode_plain_euses;
static PyObject *const_tuple_64d77b551539755c4fc18b73746163f5_tuple;
static PyObject *const_unicode_digest_d1b48ed3a76ac644cab2c672b1d63969;
static PyObject *const_unicode_plain_ung;
static PyObject *const_tuple_f924b321de9aa9cca45835accd5cb58a_tuple;
static PyObject *const_tuple_eb0e9336027c8b1dc1fe8296977c0a7d_tuple;
static PyObject *const_unicode_plain_ett;
static PyObject *const_unicode_digest_54ff4a85fb3d821462dde811b3c177cc;
static PyObject *const_tuple_7b67d509afa9aa514095723bb027880d_tuple;
static PyObject *const_unicode_plain_cs;
static PyObject *const_tuple_14a12a5482d894dcd4ddfab6cd3d2db3_tuple;
static PyObject *const_str_plain__PortugueseStemmer__vowels;
static PyObject *const_unicode_plain_avel;
static PyObject *const_unicode_plain_nno;
static PyObject *const_unicode_plain_mente;
static PyObject *const_tuple_62b0a6e40bd18f99e49b8d10b307b29b_tuple;
static PyObject *const_unicode_plain_idades;
static PyObject *const_unicode_digest_7db9f2dea9e1d2886b29d5bade251709;
extern PyObject *const_int_pos_4;
static PyObject *const_unicode_digest_7da2661aa14b31c867bd40685ca18c20;
extern PyObject *const_int_pos_2;
extern PyObject *const_int_pos_3;
static PyObject *const_unicode_plain_ancia;
extern PyObject *const_int_pos_1;
static PyObject *const_unicode_digest_1bb29b5f768cb16ccd8e386bc3125fe1;
static PyObject *const_tuple_730978f03211e3bbdd5bec24058bb6c7_tuple;
static PyObject *const_unicode_digest_471cac2009577067bf65eeecd4cd9ef0;
static PyObject *const_tuple_unicode_plain_swedish_tuple;
static PyObject *const_tuple_8d452526ebecaf5c65d57e47f06a0155_tuple;
static PyObject *const_unicode_digest_127608a3534fe68c04fb1f948fc9474c;
static PyObject *const_tuple_c1d5cd1fbabe9523917ca65d7abdb78e_tuple;
static PyObject *const_str_plain__RomanianStemmer__step1_suffixes;
static PyObject *const_str_plain__RussianStemmer__cyrillic_to_roman;
static PyObject *const_unicode_digest_1dca722d965c7a1888eed7a3d3498641;
static PyObject *const_tuple_219621fff021e23d2ead53cf1b753854_tuple;
static PyObject *const_unicode_plain_mmi;
static PyObject *const_unicode_plain_fullt;
static PyObject *const_tuple_02aa7bc7ed6ea108d2d884af1ee56087_tuple;
static PyObject *const_unicode_digest_7aba63cfda7797771cb4210f1bb01e9d;
static PyObject *const_str_plain__GermanStemmer__st_ending;
static PyObject *const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple;
static PyObject *const_unicode_plain_eleg;
static PyObject *const_str_plain__RomanianStemmer__step3_suffixes;
static PyObject *const_unicode_plain_ai;
static PyObject *const_str_plain__SwedishStemmer__step2_suffixes;
static PyObject *const_unicode_digest_71e905b11a810a0c249b8d42f53379d6;
static PyObject *const_unicode_digest_c037c04b68df914b0113d18587e61c4f;
static PyObject *const_tuple_bb54ed81b8031ebb4abb8754ce70dbaf_tuple;
static PyObject *const_tuple_2b1549b64f8ac42e80a45692dd5adeae_tuple;
static PyObject *const_unicode_digest_e0316f5240157982f6f73bf8990e84e2;
static PyObject *const_unicode_plain_lle;
static PyObject *const_tuple_2c67993aee2f31d2756d82af9e03e493_tuple;
static PyObject *const_unicode_digest_6082d1ca5c79da270c8fb8420af49f7d;
static PyObject *const_str_plain_superlative_removed;
static PyObject *const_unicode_digest_691747f70aea8454eeb7c1aa1e54f459;
static PyObject *const_str_plain__FinnishStemmer__step1_suffixes;
static PyObject *const_unicode_digest_30985e0992b11fb080ad7d9185ede5e8;
static PyObject *const_unicode_plain_ssa;
static PyObject *const_tuple_tuple_42984e9c76991a83543acab6e2f18f9a_tuple_tuple;
static PyObject *const_unicode_plain_ives;
static PyObject *const_tuple_cc2e4d3fd1a1cd22940575f16ccfe749_tuple;
extern PyObject *const_str_plain_snowball;
static PyObject *const_tuple_99a0039f1c7114ab6c9055da7eed5ad0_tuple;
static PyObject *const_tuple_a83d0aad9a8e67c97642281034ba06d4_tuple;
extern PyObject *const_str_plain_index;
static PyObject *const_tuple_unicode_plain_dutch_tuple;
extern PyObject *const_str_plain_join;
static PyObject *const_tuple_a3d49bbeb2468d8677161c823ade854c_tuple;
static PyObject *const_unicode_plain_iqU;
static PyObject *const_unicode_plain_ments;
static PyObject *const_str_plain_excerpt;
static PyObject *const_tuple_5ac6184bb29ef34436ac6fd7caeea57d_tuple;
static PyObject *const_unicode_plain_eig;
static PyObject *const_unicode_digest_e98852863fcd62b0f90e33e4ad58a6fd;
static PyObject *const_unicode_plain_seen;
static PyObject *const_unicode_digest_f93b9eb49ae41784f77c7dc9cf4ff867;
static PyObject *const_tuple_unicode_plain_ic_unicode_plain_iv_tuple;
static PyObject *const_tuple_unicode_plain_lich_unicode_plain_heit_tuple;
static PyObject *const_tuple_unicode_plain_iune_unicode_plain_iuni_tuple;
static PyObject *const_tuple_3240bbfe0aed66c65b85a290788af24a_tuple;
static PyObject *const_unicode_digest_a0c07d63a0baa715c0844159f987ebc4;
static PyObject *const_tuple_str_plain_self_str_plain_word_str_plain_r1_str_plain_suffix_tuple;
static PyObject *const_tuple_06b9bf63a73548cded550ebb4a44d0a1_tuple;
static PyObject *const_unicode_digest_323b4f039d541e713ac997b1e76ef30a;
static PyObject *const_unicode_digest_bfb47e73b9df75847d1d3fa376c4e532;
static PyObject *const_unicode_plain_logies;
static PyObject *const_unicode_digest_f1deddd1065541b6e574a41a6de43d9b;
static PyObject *const_str_plain__StandardStemmer;
static PyObject *const_unicode_plain_mme;
static PyObject *const_unicode_digest_d85f3012ea5ecdbc85dd1a91802ee13f;
static PyObject *const_unicode_digest_02c5a5223576c56da838040f20018fa0;
static PyObject *const_tuple_unicode_digest_dbe956c5481134fcb58b233f0351b464_tuple;
static PyObject *const_unicode_plain_assions;
static PyObject *const_unicode_plain_antes;
static PyObject *const_unicode_digest_0f730b2c3258f3fadc9b3f78c97c81ea;
static PyObject *const_tuple_e1df4d1ee61aeadd133357000470ee2a_tuple;
static PyObject *const_str_plain__SwedishStemmer__vowels;
static PyObject *const_unicode_plain_issement;
static PyObject *const_unicode_digest_397ca2ce6700b267d84446991b8ffe27;
static PyObject *const_unicode_plain_ateur;
static PyObject *const_unicode_plain_mma;
extern PyObject *const_str_plain_endswith;
static PyObject *const_unicode_digest_e63c459e332a345d194c722a57cc0493;
static PyObject *const_str_plain__RomanianStemmer__step0_suffixes;
extern PyObject *const_str_plain_i;
static PyObject *const_tuple_5eff0911f36248c31970c9d9669b12e2_tuple;
static PyObject *const_unicode_digest_dee46c08fe759524caf6ceaf00034f8e;
extern PyObject *const_str_plain_a;
static PyObject *const_tuple_8ec0d9a1d9cf86f808e22f6e483cb49a_tuple;
static PyObject *const_unicode_digest_8c8e4b6bd23cf2e7692e4c9913649e65;
static PyObject *const_str_plain_verb_removed;
static PyObject *const_unicode_digest_739da3409ac9b0524adb17c087154e99;
static PyObject *const_unicode_digest_3d845d6622f621a61795c4cf344cacf7;
extern PyObject *const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple;
static PyObject *const_unicode_digest_dbe956c5481134fcb58b233f0351b464;
static PyObject *const_tuple_e6a6b25a6f2f3505d9f21b160250b8f7_tuple;
static PyObject *const_unicode_digest_067b82a21c520c7c0ba090bf0d860afc;
static PyObject *const_unicode_digest_2b7cc6faba20e3dd422dc9bcdec90fc7;
static PyObject *const_unicode_plain_yas;
static PyObject *const_unicode_plain_ement;
static PyObject *const_str_plain___r1_hungarian;
static PyObject *const_tuple_160f3b20f9ad8ebb28cc691487a684a1_tuple;
static PyObject *const_unicode_plain_erte;
static PyObject *const_unicode_digest_0d91f930432018bb18ffb16b7a67f790;
static PyObject *const_str_plain__HungarianStemmer__step5_suffixes;
static PyObject *const_unicode_plain_ismes;
static PyObject *const_unicode_plain_na;
static PyObject *const_unicode_digest_b37c2c14d2bcb2e0e6af94881a75579f;
static PyObject *const_tuple_unicode_digest_5adb8d1bbb76387630c09a27d94fc384_tuple;
static PyObject *const_unicode_plain_ni;
static PyObject *const_tuple_tuple_bc37331094be7bf4e1a82223baa15ba2_tuple_tuple;
static PyObject *const_unicode_digest_c9a690f7fe0c72cf00bea9a18e61efa8;
static PyObject *const_unicode_digest_92351d786d28b4b8e77f42285e4f88f6;
static PyObject *const_tuple_unicode_plain_os_unicode_plain_ic_unicode_plain_ad_tuple;
static PyObject *const_tuple_unicode_plain_portuguese_tuple;
static PyObject *const_tuple_unicode_plain_gu_tuple;
static PyObject *const_tuple_unicode_plain_abl_unicode_plain_iqU_tuple;
static PyObject *const_str_plain__FinnishStemmer__long_vowels;
static PyObject *const_unicode_digest_daaeb8304eb0dae2e7f2a9b1c98adcb7;
static PyObject *const_unicode_digest_aed26e9fdc4d953682a95803e01952d3;
static PyObject *const_unicode_plain_dutch;
static PyObject *const_unicode_plain_kse;
static PyObject *const_tuple_0757d1e33667396b38455d34c482f4db_tuple;
static PyObject *const_unicode_digest_333b84e7fc9eca9c119c7ec106b20bbb;
static PyObject *const_tuple_unicode_plain_e_tuple;
static PyObject *const_tuple_unicode_plain_u_tuple;
static PyObject *const_tuple_unicode_digest_2402c52e17483901ade2167dd26d0fe1_tuple;
static PyObject *const_tuple_d20eb7083b055f1e3bb3d0d3fe80de07_tuple;
static PyObject *const_unicode_plain_vshi;
extern PyObject *const_int_0;
static PyObject *const_unicode_plain_itivi;
static PyObject *const_unicode_plain_gh;
static PyObject *const_unicode_plain_sh;
static PyObject *const_tuple_b8ad20ed5996d87d3c3c79dd34fe76be_tuple;
static PyObject *const_tuple_f70df800f719f9906537973c60e42b5c_tuple;
static PyObject *const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple;
static PyObject *const_unicode_plain_ivas;
static PyObject *const_str_digest_1a27b7b9da7216996c1254ad3ffa3531;
static PyObject *const_unicode_digest_8f6a7814126e381258f9b1f64b393e62;
static PyObject *const_unicode_digest_a91c0587a50638ab09b4e9bfd5089ee8;
static PyObject *const_unicode_digest_5adb8d1bbb76387630c09a27d94fc384;
static PyObject *const_tuple_5dd3f522472d9cd25a2399d8badf9b77_tuple;
static PyObject *const_unicode_digest_fcf7f6b725888decd13f25d7cf364cac;
static PyObject *const_unicode_digest_9829b914102ca383b0774037a4409b95;
static PyObject *const_unicode_digest_a00941951f6f7ce8c0f2d9bdc9df5242;
static PyObject *const_unicode_plain_gu;
static PyObject *const_unicode_digest_4fcfdba2f679d1ae6311146a6727e370;
static PyObject *const_tuple_c8b0ddde77da258cac1124f6b76a7449_tuple;
static PyObject *const_str_plain__SwedishStemmer__step1_suffixes;
static PyObject *const_unicode_digest_f85f4153510666cf42dc2c1b0c4ed046;
static PyObject *const_unicode_digest_4e693b7392fd6e4c8a5a3bad7c1b0144;
static PyObject *const_str_plain__RussianStemmer__adjectival_suffixes;
static PyObject *const_unicode_plain_aa;
static PyObject *const_unicode_plain_par;
static PyObject *const_tuple_273838185a55647a58438d7281766748_tuple;
static PyObject *const_tuple_unicode_plain_uyendo_tuple;
static PyObject *const_tuple_b75e62f9a467b516f0b37cf30193397d_tuple;
static PyObject *const_tuple_1e56be17625de98c40e42533ea3c3431_tuple;
static PyObject *const_unicode_digest_b4ea083b1e007f21f86cc1fcf5663cef;
static PyObject *const_tuple_47c15f4b53b78c0b369cee3694bd7dda_tuple;
static PyObject *const_unicode_digest_b6e83643cb2de0d95c9b2dcd46f00cfa;
static PyObject *const_tuple_75eda4c05d75c8ab2d309455415cafcd_tuple;
static PyObject *const_unicode_digest_06d978425788da799bc18038abaf5d5a;
static PyObject *const_unicode_plain_uj;
extern PyObject *const_unicode_plain_yes;
static PyObject *const_tuple_a233b622ffc791bc6c21ecf19aad8eed_tuple;
static PyObject *const_tuple_36ad135685f7e7dbaac0aff64f3f5315_tuple;
static PyObject *const_unicode_plain_ateurs;
static PyObject *const_unicode_digest_aec63e7144b3ed6e2ca700fb80cd4e72;
static PyObject *const_tuple_004f5b0ef7f5ba18d3dff3a8bafae5fc_tuple;
static PyObject *const_unicode_digest_e64aef8bc630796f1c20d05047369731;
static PyObject *const_tuple_7e256659a928b52bd1eff09b62fb1207_tuple;
static PyObject *const_unicode_digest_c1edc8989f7425d5407e0a0b6e78f352;
static PyObject *const_unicode_plain_logie;
static PyObject *const_unicode_plain_iua;
static PyObject *const_unicode_plain_itor;
static PyObject *const_str_plain_FinnishStemmer;
static PyObject *const_unicode_plain_logia;
static PyObject *const_unicode_plain_onn;
extern PyObject *const_dict_empty;
static PyObject *const_str_digest_16d3a0b90457c34a4aa3a9ea88cd53fa;
static PyObject *const_str_plain__DanishStemmer__step3_suffixes;
static PyObject *const_tuple_f34b893a7edb58b57f967a67af76ce1a_tuple;
extern PyObject *const_str_plain_stem;
static PyObject *const_unicode_plain_romanian;
static PyObject *const_unicode_digest_10efadad13cc4945647a3576963f3d59;
static PyObject *const_unicode_plain_french;
static PyObject *const_tuple_str_plain_udhr_tuple;
extern PyObject *const_str_plain_language;
static PyObject *const_str_plain__NorwegianStemmer__step3_suffixes;
static PyObject *const_str_plain__HungarianStemmer__r1_hungarian;
static PyObject *const_tuple_f905ea8aed2128045948b1711df084de_tuple;
static PyObject *const_unicode_plain_lla;
static PyObject *const_unicode_plain_ant;
static PyObject *const_unicode_plain_eras;
static PyObject *const_unicode_digest_2d54f1c5a1e3b07e4d6b4831651c53ce;
extern PyObject *const_tuple_str_plain_self_tuple;
static PyObject *const_tuple_91c51dd9fc301c0955e5315e6469c7e1_tuple;
static PyObject *const_unicode_digest_368915a3c46e6f7596ff543d222c3685;
static PyObject *const_unicode_digest_ca1cebddc9e8dc05d04cdc8f41829923;
static PyObject *const_str_plain_FrenchStemmer;
static PyObject *const_tuple_76d08bdc702514b83a9210a870492acd_tuple;
static PyObject *const_unicode_plain_yeron;
static PyObject *const_tuple_45f82c3622d28aff3edecb8d8a588741_tuple;
static PyObject *const_tuple_unicode_digest_71e905b11a810a0c249b8d42f53379d6_tuple;
static PyObject *const_unicode_plain_po;
static PyObject *const_unicode_plain_yen;
extern PyObject *const_str_plain___repr__;
static PyObject *const_unicode_plain_erons;
static PyObject *const_unicode_digest_e754c22dbff07c1f09acf2d98e4c2501;
static PyObject *const_unicode_plain_les;
static PyObject *const_unicode_plain_pa;
static PyObject *const_unicode_digest_f35129958ac2791eb8dca11e48893806;
static PyObject *const_tuple_2cc978adf415f49d0e73ca86beffe7bd_tuple;
static PyObject *const_unicode_digest_2d6c9d5dde7e4950753696b6ed5a35ff;
static PyObject *const_tuple_78940e8a91fb5b986e3e798d0050db75_tuple;
static PyObject *const_tuple_af35dc52706f6375dc3872b21259f02c_tuple;
static PyObject *const_str_plain___regions_russian;
static PyObject *const_tuple_f50d420abe67f802b4d39b10e9741aa9_tuple;
extern PyObject *const_str_digest_75b9a5f892ea679922632e6d2d7d662a;
static PyObject *const_unicode_plain_if;
static PyObject *const_unicode_plain_ig;
static PyObject *const_unicode_plain_ie;
static PyObject *const_unicode_plain_impi;
static PyObject *const_unicode_plain_ic;
static PyObject *const_unicode_plain_isti;
static PyObject *const_unicode_plain_eus;
static PyObject *const_unicode_plain_istes;
static PyObject *const_unicode_plain_iste;
static PyObject *const_tuple_unicode_plain_kk_unicode_plain_dd_unicode_plain_tt_tuple;
static PyObject *const_unicode_plain_ij;
static PyObject *const_unicode_plain_ik;
static PyObject *const_unicode_plain_ista;
static PyObject *const_unicode_plain_ii;
static PyObject *const_unicode_plain_iv;
static PyObject *const_str_plain__GermanStemmer__step2_suffixes;
static PyObject *const_unicode_plain_it;
static PyObject *const_unicode_plain_amente;
static PyObject *const_unicode_plain_ir;
static PyObject *const_str_plain_portuguese;
static PyObject *const_tuple_faa4eb74f3b25ad8912ba0836572323b_tuple;
static PyObject *const_unicode_plain_sela;
static PyObject *const_str_plain_step3_success;
extern PyObject *const_str_plain_staticmethod;
static PyObject *const_unicode_digest_bc116b69f79f787e9864737f78bd7244;
static PyObject *const_tuple_ec2707c9429d69fbd8cc75cfffeb8493_tuple;
static PyObject *const_unicode_digest_772da83eae0be360e6dd4cbb578ce290;
static PyObject *const_str_plain__RussianStemmer__superlative_suffixes;
static PyObject *const_tuple_4fcaecdeef3fd40a2c85a2ee5fa562c9_tuple;
static PyObject *const_unicode_plain_able;
static PyObject *const_unicode_plain_usions;
static PyObject *const_unicode_digest_cf4401d4788e0b069162e4d5a61c6fd8;
static PyObject *const_str_plain__RomanianStemmer__step2_suffixes;
static PyObject *const_tuple_c973d7a857e7686ae8beb9545955cfb1_tuple;
static PyObject *const_unicode_plain_ine;
static PyObject *const_unicode_plain_eux;
static PyObject *const_tuple_af47b87413332a5bef6ea1fc7af3c92e_tuple;
static PyObject *const_tuple_601f59e1b476e7f4d6bf50a646a84ab1_tuple;
static PyObject *const_unicode_digest_5d716e0e0c126123060ed96d8b60763a;
static PyObject *const_unicode_digest_6667a34fda61468463f1f7f60bc9760f;
static PyObject *const_tuple_0c9b07086b916378dc0b3d71d89a3128_tuple;
static PyObject *const_unicode_digest_e5650dd7bd458f2a7390ab7b0abb4884;
static PyObject *const_unicode_digest_e3006e2bebeca379c581132384fe2eff;
static PyObject *const_unicode_plain_usione;
static PyObject *const_tuple_621f4aaebc85dd42d37c871e39da57a5_tuple;
static PyObject *const_unicode_digest_3b44810ca84c2278367df501b9231323;
static PyObject *const_str_plain__HungarianStemmer__step3_suffixes;
static PyObject *const_unicode_plain_elov;
static PyObject *const_unicode_digest_ffbcedbec480ba49ec103efa1145d4f8;
static PyObject *const_unicode_plain_usioni;
static PyObject *const_unicode_plain_elor;
static PyObject *const_unicode_digest_9059e0adc025b923c9e1393260678724;
static PyObject *const_unicode_plain_asse;
static PyObject *const_unicode_plain_emos;
static PyObject *const_tuple_a609368ea8d61aa400a42520a41e4921_tuple;
static PyObject *const_tuple_31b084df71fd094038cab979e415b11e_tuple;
static PyObject *const_unicode_plain_os;
static PyObject *const_unicode_plain_ables;
static PyObject *const_unicode_digest_9517977509f69d68f0e7ed4c77fce9a6;
static PyObject *const_tuple_1144fdac22177e659ece2dafadf0b7e6_tuple;
static PyObject *const_unicode_digest_60e89fd24ca54036c79996d1b67de2dd;
static PyObject *const_str_plain_finnish;
static PyObject *const_unicode_digest_8d072b55e6e7efdcf38455454e7cd575;
static PyObject *const_tuple_6b3e9d7d85648178d3c04c6f21e43d0d_tuple;
static PyObject *const_unicode_digest_197039e3f28df469289f225a803d5d7e;
static PyObject *const_str_plain_adjectival_removed;
static PyObject *const_unicode_plain_yan;
static PyObject *const_str_plain__HungarianStemmer__vowels;
static PyObject *const_tuple_unicode_plain_igst_tuple;
static PyObject *const_tuple_unicode_digest_3237b32eb23cee6617f0a3a9251acea5_tuple;
static PyObject *const_unicode_digest_235b4db5798ab83b2cda8bacbe705eeb;
static PyObject *const_unicode_digest_20042556b9dae87c3a9051aba782c2ad;
static PyObject *const_unicode_plain_kin;
extern PyObject *const_str_plain_api;
static PyObject *const_unicode_digest_7116690f828f2ee99b0ed34103592a1e;
static PyObject *const_tuple_e4ead1c0f352d0adb324f18db20cdc82_tuple;
static PyObject *const_str_plain__SpanishStemmer__step0_suffixes;
static PyObject *const_tuple_4ff17472e9edf8f0913f0db95c096470_tuple;
static PyObject *const_unicode_plain_ative;
static PyObject *const_unicode_digest_626611eaee72b4edd9db2579f29436e1;
static PyObject *const_unicode_digest_e2c8e4058869b958f5a5b25d19ea4489;
static PyObject *const_tuple_7e838b0b675132306448d0bcce1e1d9e_tuple;
static PyObject *const_str_plain__DanishStemmer__s_ending;
static PyObject *const_tuple_tuple_b52820215875207b84eb2621e3500b61_tuple_tuple;
static PyObject *const_unicode_plain_bdfghklmnrt;
static PyObject *const_unicode_plain_ions;
static PyObject *const_tuple_86e5eb77e1efe2c861d16de6e61a1b9f_tuple;
static PyObject *const_tuple_546d6552b3521163be5f081fa48ff42c_tuple;
static PyObject *const_tuple_58419de004459738a3a5586548685aa7_tuple;
static PyObject *const_tuple_unicode_plain_kse_tuple;
static PyObject *const_unicode_plain_amenti;
extern PyObject *const_str_plain___module__;
static PyObject *const_tuple_unicode_plain_issement_unicode_plain_issements_tuple;
static PyObject *const_tuple_str_plain_cls_str_plain_language_str_plain_kwargs_tuple;
static PyObject *const_unicode_plain_sti;
extern PyObject *const_str_plain_lower;
static PyObject *const_str_plain_SpanishStemmer;
static PyObject *const_tuple_706e42975b2d521bea0c9b1cf76e71b1_tuple;
static PyObject *const_unicode_plain_sta;
static PyObject *const_unicode_plain_adoras;
static PyObject *const_unicode_digest_04599e99e19a20db6a6e177777941cb2;
static PyObject *const_unicode_digest_08c166a915d14fca1c8754bb3a41f4e5;
static PyObject *const_unicode_plain_ent;
static PyObject *const_tuple_ab93cd02888dc6ebbce56f88252cffc0_tuple;
static PyObject *const_str_plain__FrenchStemmer__rv_french;
static PyObject *const_tuple_cbfa83547dce568f2d6d71f7d9d28e8b_tuple;
static PyObject *const_tuple_unicode_plain_se_unicode_plain_s_tuple;
static PyObject *const_tuple_84a1aa2866c339e3e02dfed8263c6c26_tuple;
static PyObject *const_unicode_plain_enn;
static PyObject *const_unicode_digest_2402c52e17483901ade2167dd26d0fe1;
static PyObject *const_unicode_digest_07eb01e4392a9b5112cb3f938ee28574;
static PyObject *const_tuple_unicode_plain_spanish_tuple;
static PyObject *const_tuple_9d9f88c0da17928013fbc5e2ed0ab940_tuple;
static PyObject *const_tuple_tuple_unicode_plain_os_unicode_plain_ic_tuple_tuple;
static PyObject *const_unicode_digest_4eac633339ede7563c52dd33096bda1f;
static PyObject *const_unicode_digest_35fe7904bcbd53acfcea3ce07acce206;
static PyObject *const_unicode_digest_a538341bae463cc2be606b27b11f483f;
static PyObject *const_unicode_plain_ee;
static PyObject *const_str_plain_ItalianStemmer;
extern PyObject *const_str_plain_rstrip;
extern PyObject *const_unicode_newline;
static PyObject *const_unicode_plain_heit;
static PyObject *const_unicode_plain_lig;
static PyObject *const_tuple_6d37e7b6a6ae7a3e19ade00ac9b563e8_tuple;
static PyObject *const_str_plain__SpanishStemmer__step1_suffixes;
static PyObject *const_unicode_plain_aIent;
static PyObject *const_tuple_e45c40ce2ad015b19a2b8e10309e6bc9_tuple;
static PyObject *const_unicode_plain_ente;
static PyObject *const_unicode_plain_usion;
static PyObject *const_unicode_digest_2fa3e59ebc093813ad81b9971058f355;
static PyObject *const_unicode_digest_bfc660c6f02a99a63e034bb0c635c9b1;
static PyObject *const_unicode_digest_5f596bd3ec510d7e2d9b0769dca7330f;
static PyObject *const_unicode_plain_hetslov;
static PyObject *const_tuple_c91f679374c05c952ac066e817ce23bb_tuple;
static PyObject *const_tuple_unicode_plain_enza_unicode_plain_enze_tuple;
static PyObject *const_str_plain_replacement_done;
static PyObject *const_tuple_bc37331094be7bf4e1a82223baa15ba2_tuple;
static PyObject *const_unicode_plain_end;
static PyObject *const_unicode_plain_abl;
static PyObject *const_unicode_plain_gem;
static PyObject *const_tuple_unicode_plain_romanian_tuple;
static PyObject *const_unicode_digest_835ae20366f52774a0028b17a200037f;
static PyObject *const_unicode_plain_euse;
static PyObject *const_unicode_plain_niss;
static PyObject *const_unicode_plain_ta;
static PyObject *const_unicode_digest_aee153dc02be9d32f0ad13995ab6c1b6;
static PyObject *const_unicode_digest_bd3557e54eebb95f2fb09a4dc708d82c;
static PyObject *const_tuple_101625999447a7120805ecb8b80f61a1_tuple;
static PyObject *const_tuple_24449a48f5acd393d523907a440b8902_tuple;
static PyObject *const_tuple_924391ca6475244603f15fd2a11094db_tuple;
static PyObject *const_tuple_e181b636e1bca13587d7f801cd876854_tuple;
static PyObject *const_unicode_digest_10f4da5a1f74722239d506d8ff0d8bd8;
static PyObject *const_str_plain_step2_success;
static PyObject *const_unicode_plain_ing;
static PyObject *const_unicode_plain_iciv;
static PyObject *const_tuple_d636691f4239271d257787e7cd8440ef_tuple;
static PyObject *const_str_plain_step1_success;
static PyObject *const_str_plain_spanish;
static PyObject *const_unicode_digest_1e0319293f93f7c8ac7b55f33d210950;
static PyObject *const_tuple_99d8f76ba257f5f1c6aa6c5cddac83df_tuple;
static PyObject *const_unicode_plain_ch;
static PyObject *const_unicode_digest_4f69c0f86ee64623c992c2f4a3e66589;
static PyObject *const_str_digest_c7298b4f3c76de2d7a6153f9e0251ff7;
static PyObject *const_unicode_plain_dz;
static PyObject *const_tuple_c56562ec649ffe624ba416666af1ee3f_tuple;
static PyObject *const_tuple_22a4e3b3cd8a67f5d9f5dd4508b37871_tuple;
static PyObject *const_str_plain__GermanStemmer__s_ending;
static PyObject *const_tuple_bc2b3a79dd230f51972e38fb3dacac9e_tuple;
static PyObject *const_tuple_unicode_plain_at_tuple;
static PyObject *const_unicode_plain_aciones;
static PyObject *const_str_plain__FinnishStemmer__step3_suffixes;
static PyObject *const_tuple_tuple_0d91b14694a1e22a71f0e20a0419e2c8_tuple_tuple;
static PyObject *const_unicode_plain_las;
static PyObject *const_unicode_digest_d8f26d655477f9b71d21bab6c06796f1;
static PyObject *const_tuple_e0fe9f2b0a779e4be824cff8d4b76b90_tuple;
static PyObject *const_unicode_digest_3ffc098c6ed619aa023685efe3617bec;
static PyObject *const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple;
static PyObject *const_tuple_3b7d4e44f32e024571c694878f45a271_tuple;
static PyObject *const_unicode_plain_selas;
static PyObject *const_unicode_plain_ci;
static PyObject *const_unicode_plain_icitati;
static PyObject *const_str_plain_GermanStemmer;
static PyObject *const_unicode_plain_uyendo;
static PyObject *const_unicode_digest_1769a3ecb0d0a23578d5a7518888e81f;
static PyObject *const_tuple_unicode_plain_end_unicode_plain_ing_tuple;
static PyObject *const_tuple_fe4d09a5deefee50a47d3d66a36a6f27_tuple;
static PyObject *const_tuple_unicode_plain_i_tuple;
static PyObject *const_tuple_unicode_plain_ar_unicode_plain_er_unicode_plain_ir_tuple;
static PyObject *const_unicode_digest_b31349afbdc53065bee8d5dc3bc3488e;
static PyObject *const_tuple_tuple_unicode_plain_ch_unicode_plain_gh_tuple_tuple;
static PyObject *const_str_plain__DanishStemmer__double_consonants;
static PyObject *const_unicode_plain_nos;
static PyObject *const_unicode_plain_ence;
static PyObject *const_str_plain__HungarianStemmer__step7_suffixes;
static PyObject *const_unicode_digest_ce9df3550e776a650bc3e9bdd7e6ddd6;
static PyObject *const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple;
static PyObject *const_unicode_digest_06d9c98d970ccad03c441aa7f4e68df6;
static PyObject *const_tuple_6f6fa85f530d51930aae374e32e24830_tuple;
static PyObject *const_unicode_digest_e3481085e7dbd2e010459751d752a05e;
static PyObject *const_unicode_plain_icitate;
static PyObject *const_tuple_unicode_plain_ence_unicode_plain_ences_tuple;
static PyObject *const_unicode_digest_3eb70cd1f5cf77e2e53fec787c1780bf;
static PyObject *const_tuple_1e4323b1b66c39a2ee23b1e8a230c8f4_tuple;
static PyObject *const_unicode_plain_asses;
static PyObject *const_unicode_digest_6550225a0b5e2d48d988db8b2dd919fb;
static PyObject *const_unicode_plain_ante;
static PyObject *const_tuple_2bffbad65294b3b0c0243910f8264539_tuple;
extern PyObject *const_unicode_space;
static PyObject *const_tuple_unicode_plain_Y_unicode_plain_y_tuple;
static PyObject *const_unicode_plain_igst;
static PyObject *const_unicode_plain_ants;
static PyObject *const_tuple_d1153c9e51c48c0996c3271524d5509a_tuple;
static PyObject *const_unicode_digest_cc4fcf0fb97b833d8496392e844c7513;
static PyObject *const_str_plain___cyrillic_to_roman;
static PyObject *const_unicode_digest_023601b36901462335c12f4c2f34eab0;
static PyObject *const_unicode_plain_itoare;
static PyObject *const_unicode_digest_5c44415f6ed9e791b54dc6fa231033cb;
static PyObject *const_tuple_6d5213587a06b3895cede7973921d993_tuple;
static PyObject *const_str_plain_italian;
static PyObject *const_unicode_plain_lov;
static PyObject *const_unicode_digest_990a0047364b8346aeb9a31134f32e6d;
static PyObject *const_tuple_unicode_plain_ira_unicode_plain_iras_tuple;
static PyObject *const_str_plain__PortugueseStemmer__step2_suffixes;
static PyObject *const_tuple_860ff0d7fde116990e75009b9e4efd2f_tuple;
extern PyObject *const_tuple_str_plain_self_str_plain_word_tuple;
static PyObject *const_str_plain__SpanishStemmer__step2b_suffixes;
static PyObject *const_str_plain_german;
static PyObject *const_tuple_f2d4b6f3b89b147e63c897b250a64eb1_tuple;
static PyObject *const_tuple_ac5041baf699e514050e7e516f7e6b3c_tuple;
static PyObject *const_tuple_f5a1fbff148ca09e046ddc38ac31b566_tuple;
static PyObject *const_str_plain__DanishStemmer__consonants;
static PyObject *const_unicode_digest_22f24d5c8bb0288ee67644a450638195;
static PyObject *const_tuple_055154112601037720a87eaf42da26be_tuple;
extern PyObject *const_str_plain___doc__;
static PyObject *const_tuple_unicode_plain_encia_unicode_plain_encias_tuple;
static PyObject *const_tuple_0f5e8bfba6ac77c9b30b565f0f40fbe9_tuple;
static PyObject *const_unicode_plain_icatori;
static PyObject *const_unicode_plain_keit;
static PyObject *const_str_plain_pre_suff;
static PyObject *const_str_plain__DutchStemmer__step3b_suffixes;
static PyObject *const_unicode_plain_tten;
static PyObject *const_unicode_digest_c3e2dd5be462ffef44ff33cec36221d6;
static PyObject *const_unicode_digest_79d017d0589122dd9e8531d2c8c7f9ae;
static PyObject *const_unicode_plain_iras;
static PyObject *const_unicode_digest_8496a86118d1e1696c6e4da2b8658b71;
static PyObject *const_tuple_unicode_plain_danish_tuple;
static PyObject *const_tuple_c7db4b0079ad3df0cf65655e34767d18_tuple;
static PyObject *const_unicode_plain_hon;
static PyObject *const_unicode_digest_7441709481b0843ac867d466ecf0483a;
static PyObject *const_unicode_digest_6c4cb17ae27a686a66bed562c578c9c0;
static PyObject *const_unicode_plain_ira;
static PyObject *const_unicode_plain_bar;
static PyObject *const_unicode_plain_adores;
static PyObject *const_unicode_plain_utions;
static PyObject *const_str_plain__ItalianStemmer__step0_suffixes;
static PyObject *const_unicode_plain_heid;
static PyObject *const_tuple_bd83cadbf93eff15b5b969c939dc876e_tuple;
static PyObject *const_unicode_plain_log;
static PyObject *const_unicode_plain_atei;
static PyObject *const_unicode_digest_dad43f0f2031badc6c0270183056a256;
static PyObject *const_tuple_unicode_plain_y_tuple;
static PyObject *const_unicode_plain_bcdfghjklmnoprtvy;
static PyObject *const_unicode_digest_21a72cd6d7e4999bb2f337c11dbc7fbd;
static PyObject *const_str_plain__DutchStemmer__step1_suffixes;
static PyObject *const_unicode_plain_eja;
static PyObject *const_unicode_digest_447616c6c69e23ddf1149fc938d915f0;
extern PyObject *const_tuple_false_tuple;
static PyObject *const_unicode_digest_a6a1250a415661d97d62909534ab83c0;
static PyObject *const_unicode_digest_c27284149cba96cfc3c1dc00d30b3ea7;
static PyObject *const_tuple_4bebaa77fa75c2380a82e9edda1cfbe5_tuple;
static PyObject *const_unicode_plain_los;
static PyObject *const_unicode_plain_astul;
static PyObject *const_str_plain__HungarianStemmer__step6_suffixes;
static PyObject *const_tuple_unicode_plain_ment_unicode_plain_ments_tuple;
static PyObject *const_unicode_plain_yendo;
static PyObject *module_filename_obj;

static bool constants_created = false;

static void createModuleConstants( void )
{
    const_tuple_8e1bbc732e03c0e80a4a7029d959f013_tuple = PyTuple_New( 2 );
    const_unicode_plain_sh = UNSTREAM_UNICODE( &constant_bin[ 503 ], 2 );
    PyTuple_SET_ITEM( const_tuple_8e1bbc732e03c0e80a4a7029d959f013_tuple, 0, const_unicode_plain_sh ); Py_INCREF( const_unicode_plain_sh );
    const_unicode_digest_d9bdae7956cf33bf51000e801aa18ec0 = UNSTREAM_UNICODE( &constant_bin[ 713296 ], 2 );
    PyTuple_SET_ITEM( const_tuple_8e1bbc732e03c0e80a4a7029d959f013_tuple, 1, const_unicode_digest_d9bdae7956cf33bf51000e801aa18ec0 ); Py_INCREF( const_unicode_digest_d9bdae7956cf33bf51000e801aa18ec0 );
    const_unicode_plain_si = UNSTREAM_UNICODE( &constant_bin[ 282 ], 2 );
    const_tuple_31374448d9a6d0406a7cc0f1ed0182f0_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 713298 ], 202 );
    const_unicode_digest_83217f7e651b043c5e654f77e0145ef8 = UNSTREAM_UNICODE( &constant_bin[ 713500 ], 5 );
    const_tuple_unicode_plain_imma_tuple = PyTuple_New( 1 );
    const_unicode_plain_imma = UNSTREAM_UNICODE( &constant_bin[ 713505 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_imma_tuple, 0, const_unicode_plain_imma ); Py_INCREF( const_unicode_plain_imma );
    const_str_plain__FinnishStemmer__vowels = UNSTREAM_STRING( &constant_bin[ 713509 ], 23, 1 );
    const_unicode_plain_se = UNSTREAM_UNICODE( &constant_bin[ 712 ], 2 );
    const_tuple_88d314ab5ad7450947332961e7d6321e_tuple = PyTuple_New( 2 );
    const_unicode_digest_31c11d5a666693a67555f58436c55948 = UNSTREAM_UNICODE( &constant_bin[ 713532 ], 2 );
    PyTuple_SET_ITEM( const_tuple_88d314ab5ad7450947332961e7d6321e_tuple, 0, const_unicode_digest_31c11d5a666693a67555f58436c55948 ); Py_INCREF( const_unicode_digest_31c11d5a666693a67555f58436c55948 );
    const_unicode_plain_zh = UNSTREAM_UNICODE( &constant_bin[ 713534 ], 2 );
    PyTuple_SET_ITEM( const_tuple_88d314ab5ad7450947332961e7d6321e_tuple, 1, const_unicode_plain_zh ); Py_INCREF( const_unicode_plain_zh );
    const_tuple_unicode_plain_os_unicode_plain_ic_tuple = PyTuple_New( 2 );
    const_unicode_plain_os = UNSTREAM_UNICODE( &constant_bin[ 1913 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_os_unicode_plain_ic_tuple, 0, const_unicode_plain_os ); Py_INCREF( const_unicode_plain_os );
    const_unicode_plain_ic = UNSTREAM_UNICODE( &constant_bin[ 225 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_os_unicode_plain_ic_tuple, 1, const_unicode_plain_ic ); Py_INCREF( const_unicode_plain_ic );
    const_str_plain__GermanStemmer__step1_suffixes = UNSTREAM_STRING( &constant_bin[ 713536 ], 30, 1 );
    const_tuple_unicode_digest_3b44810ca84c2278367df501b9231323_tuple = PyTuple_New( 1 );
    const_unicode_digest_3b44810ca84c2278367df501b9231323 = UNSTREAM_UNICODE( &constant_bin[ 713566 ], 12 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_3b44810ca84c2278367df501b9231323_tuple, 0, const_unicode_digest_3b44810ca84c2278367df501b9231323 ); Py_INCREF( const_unicode_digest_3b44810ca84c2278367df501b9231323 );
    const_unicode_plain_heden = UNSTREAM_UNICODE( &constant_bin[ 713578 ], 5 );
    const_unicode_digest_27549ddbeb2e2d4f92a846fb872d3c33 = UNSTREAM_UNICODE( &constant_bin[ 713583 ], 2 );
    const_unicode_plain_abilitati = UNSTREAM_UNICODE( &constant_bin[ 713585 ], 9 );
    const_unicode_digest_e7ce7cb4ba2d4a776b39a66620ed1dd1 = UNSTREAM_UNICODE( &constant_bin[ 713594 ], 7 );
    const_unicode_plain_abilitate = UNSTREAM_UNICODE( &constant_bin[ 713601 ], 9 );
    const_unicode_plain_st = UNSTREAM_UNICODE( &constant_bin[ 752 ], 2 );
    const_str_plain_digraphs = UNSTREAM_STRING( &constant_bin[ 713610 ], 8, 1 );
    const_unicode_plain_g = UNSTREAM_UNICODE( &constant_bin[ 62 ], 1 );
    const_unicode_plain_erait = UNSTREAM_UNICODE( &constant_bin[ 713618 ], 5 );
    const_unicode_plain_ivitate = UNSTREAM_UNICODE( &constant_bin[ 713623 ], 7 );
    const_unicode_plain_ivitati = UNSTREAM_UNICODE( &constant_bin[ 713630 ], 7 );
    const_tuple_0483851c91d6f903d5f51b576c4e1458_tuple = PyTuple_New( 5 );
    const_unicode_digest_e758fdb7cbe8ae08a0f3bb84603270e7 = UNSTREAM_UNICODE( &constant_bin[ 713637 ], 4 );
    PyTuple_SET_ITEM( const_tuple_0483851c91d6f903d5f51b576c4e1458_tuple, 0, const_unicode_digest_e758fdb7cbe8ae08a0f3bb84603270e7 ); Py_INCREF( const_unicode_digest_e758fdb7cbe8ae08a0f3bb84603270e7 );
    const_unicode_digest_a5ddfa5ea8795b19875fd52513e34d10 = UNSTREAM_UNICODE( &constant_bin[ 713641 ], 5 );
    PyTuple_SET_ITEM( const_tuple_0483851c91d6f903d5f51b576c4e1458_tuple, 1, const_unicode_digest_a5ddfa5ea8795b19875fd52513e34d10 ); Py_INCREF( const_unicode_digest_a5ddfa5ea8795b19875fd52513e34d10 );
    const_unicode_digest_3a08500cdf164c73a2d17fd487d79049 = UNSTREAM_UNICODE( &constant_bin[ 713646 ], 3 );
    PyTuple_SET_ITEM( const_tuple_0483851c91d6f903d5f51b576c4e1458_tuple, 2, const_unicode_digest_3a08500cdf164c73a2d17fd487d79049 ); Py_INCREF( const_unicode_digest_3a08500cdf164c73a2d17fd487d79049 );
    const_unicode_digest_b4ea083b1e007f21f86cc1fcf5663cef = UNSTREAM_UNICODE( &constant_bin[ 713649 ], 3 );
    PyTuple_SET_ITEM( const_tuple_0483851c91d6f903d5f51b576c4e1458_tuple, 3, const_unicode_digest_b4ea083b1e007f21f86cc1fcf5663cef ); Py_INCREF( const_unicode_digest_b4ea083b1e007f21f86cc1fcf5663cef );
    const_unicode_digest_00029bab94d4fae3bad9b98113cef03c = UNSTREAM_UNICODE( &constant_bin[ 713181 ], 2 );
    PyTuple_SET_ITEM( const_tuple_0483851c91d6f903d5f51b576c4e1458_tuple, 4, const_unicode_digest_00029bab94d4fae3bad9b98113cef03c ); Py_INCREF( const_unicode_digest_00029bab94d4fae3bad9b98113cef03c );
    const_str_plain_NorwegianStemmer = UNSTREAM_STRING( &constant_bin[ 713652 ], 16, 1 );
    const_unicode_digest_7dc95b8a3411ea2e94cce2c3fb544c6b = UNSTREAM_UNICODE( &constant_bin[ 713668 ], 7 );
    const_unicode_plain_encia = UNSTREAM_UNICODE( &constant_bin[ 713675 ], 5 );
    const_unicode_plain_tta = UNSTREAM_UNICODE( &constant_bin[ 147255 ], 3 );
    const_tuple_6e4e1a4ee8a90c1492f5d415d26faee3_tuple = PyTuple_New( 2 );
    const_unicode_digest_78115e40470085e995c9f33a689bfb76 = UNSTREAM_UNICODE( &constant_bin[ 713680 ], 2 );
    PyTuple_SET_ITEM( const_tuple_6e4e1a4ee8a90c1492f5d415d26faee3_tuple, 0, const_unicode_digest_78115e40470085e995c9f33a689bfb76 ); Py_INCREF( const_unicode_digest_78115e40470085e995c9f33a689bfb76 );
    const_unicode_digest_935145b6cd49804fb37dd37262b564a8 = UNSTREAM_UNICODE( &constant_bin[ 713682 ], 3 );
    PyTuple_SET_ITEM( const_tuple_6e4e1a4ee8a90c1492f5d415d26faee3_tuple, 1, const_unicode_digest_935145b6cd49804fb37dd37262b564a8 ); Py_INCREF( const_unicode_digest_935145b6cd49804fb37dd37262b564a8 );
    const_unicode_plain_siin = UNSTREAM_UNICODE( &constant_bin[ 713685 ], 4 );
    const_unicode_plain_ibilitate = UNSTREAM_UNICODE( &constant_bin[ 713689 ], 9 );
    const_unicode_digest_6bb7032994e2ecddb72007dc1a2f8ad1 = UNSTREAM_UNICODE( &constant_bin[ 713698 ], 886 );
    const_unicode_digest_99ba77effd8e91845b225bae4bdde4ff = UNSTREAM_UNICODE( &constant_bin[ 714584 ], 2 );
    const_unicode_digest_a104078290e2ef7652ddf4b87d31a1b1 = UNSTREAM_UNICODE( &constant_bin[ 714586 ], 6 );
    const_unicode_plain_eriez = UNSTREAM_UNICODE( &constant_bin[ 714592 ], 5 );
    const_tuple_3fa6ac1f53c663536627dc5946b5597b_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 714597 ], 288 );
    const_unicode_plain_eaux = UNSTREAM_UNICODE( &constant_bin[ 714885 ], 4 );
    const_tuple_b779db4c86c3fc5363d8606238f57437_tuple = PyTuple_New( 4 );
    const_unicode_plain_ssa = UNSTREAM_UNICODE( &constant_bin[ 95194 ], 3 );
    PyTuple_SET_ITEM( const_tuple_b779db4c86c3fc5363d8606238f57437_tuple, 0, const_unicode_plain_ssa ); Py_INCREF( const_unicode_plain_ssa );
    const_unicode_plain_sta = UNSTREAM_UNICODE( &constant_bin[ 1305 ], 3 );
    PyTuple_SET_ITEM( const_tuple_b779db4c86c3fc5363d8606238f57437_tuple, 1, const_unicode_plain_sta ); Py_INCREF( const_unicode_plain_sta );
    const_unicode_plain_lla = UNSTREAM_UNICODE( &constant_bin[ 76871 ], 3 );
    PyTuple_SET_ITEM( const_tuple_b779db4c86c3fc5363d8606238f57437_tuple, 2, const_unicode_plain_lla ); Py_INCREF( const_unicode_plain_lla );
    const_unicode_plain_lta = UNSTREAM_UNICODE( &constant_bin[ 14855 ], 3 );
    PyTuple_SET_ITEM( const_tuple_b779db4c86c3fc5363d8606238f57437_tuple, 3, const_unicode_plain_lta ); Py_INCREF( const_unicode_plain_lta );
    const_tuple_unicode_plain_logia_unicode_plain_logie_tuple = PyTuple_New( 2 );
    const_unicode_plain_logia = UNSTREAM_UNICODE( &constant_bin[ 714889 ], 5 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_logia_unicode_plain_logie_tuple, 0, const_unicode_plain_logia ); Py_INCREF( const_unicode_plain_logia );
    const_unicode_plain_logie = UNSTREAM_UNICODE( &constant_bin[ 714894 ], 5 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_logia_unicode_plain_logie_tuple, 1, const_unicode_plain_logie ); Py_INCREF( const_unicode_plain_logie );
    const_unicode_plain_ations = UNSTREAM_UNICODE( &constant_bin[ 5392 ], 6 );
    const_unicode_chr_47 = UNSTREAM_UNICODE( &constant_bin[ 614 ], 1 );
    const_unicode_plain_ancias = UNSTREAM_UNICODE( &constant_bin[ 714899 ], 6 );
    const_tuple_7c67d7a4be913a24b94b80d63c2a05b8_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 714905 ], 517 );
    const_str_plain__DutchStemmer__vowels = UNSTREAM_STRING( &constant_bin[ 715422 ], 21, 1 );
    const_unicode_plain_at = UNSTREAM_UNICODE( &constant_bin[ 455 ], 2 );
    const_unicode_digest_910b3064909c53702273cb45d3dac832 = UNSTREAM_UNICODE( &constant_bin[ 715443 ], 2 );
    const_tuple_unicode_plain_ement_unicode_plain_ements_tuple = PyTuple_New( 2 );
    const_unicode_plain_ement = UNSTREAM_UNICODE( &constant_bin[ 1076 ], 5 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ement_unicode_plain_ements_tuple, 0, const_unicode_plain_ement ); Py_INCREF( const_unicode_plain_ement );
    const_unicode_plain_ements = UNSTREAM_UNICODE( &constant_bin[ 10097 ], 6 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ement_unicode_plain_ements_tuple, 1, const_unicode_plain_ements ); Py_INCREF( const_unicode_plain_ements );
    const_tuple_a871f55427dc6112c3254b0f3775cc0d_tuple = PyTuple_New( 2 );
    const_unicode_digest_b191da371eceef3749c8dae83e8df957 = UNSTREAM_UNICODE( &constant_bin[ 715445 ], 2 );
    PyTuple_SET_ITEM( const_tuple_a871f55427dc6112c3254b0f3775cc0d_tuple, 0, const_unicode_digest_b191da371eceef3749c8dae83e8df957 ); Py_INCREF( const_unicode_digest_b191da371eceef3749c8dae83e8df957 );
    const_unicode_digest_1d5999dd62a3ceefe08991005d874c28 = UNSTREAM_UNICODE( &constant_bin[ 715447 ], 2 );
    PyTuple_SET_ITEM( const_tuple_a871f55427dc6112c3254b0f3775cc0d_tuple, 1, const_unicode_digest_1d5999dd62a3ceefe08991005d874c28 ); Py_INCREF( const_unicode_digest_1d5999dd62a3ceefe08991005d874c28 );
    const_unicode_digest_cf8642b5149fa514622b94a4d35894b2 = UNSTREAM_UNICODE( &constant_bin[ 715449 ], 2 );
    const_unicode_plain_an = UNSTREAM_UNICODE( &constant_bin[ 511 ], 2 );
    const_unicode_plain_al = UNSTREAM_UNICODE( &constant_bin[ 246 ], 2 );
    const_tuple_993502414358840495b1f55dd7172430_tuple = PyTuple_New( 5 );
    const_unicode_plain_fullt = UNSTREAM_UNICODE( &constant_bin[ 715451 ], 5 );
    PyTuple_SET_ITEM( const_tuple_993502414358840495b1f55dd7172430_tuple, 0, const_unicode_plain_fullt ); Py_INCREF( const_unicode_plain_fullt );
    const_unicode_digest_30985e0992b11fb080ad7d9185ede5e8 = UNSTREAM_UNICODE( &constant_bin[ 715456 ], 5 );
    PyTuple_SET_ITEM( const_tuple_993502414358840495b1f55dd7172430_tuple, 1, const_unicode_digest_30985e0992b11fb080ad7d9185ede5e8 ); Py_INCREF( const_unicode_digest_30985e0992b11fb080ad7d9185ede5e8 );
    const_unicode_plain_els = UNSTREAM_UNICODE( &constant_bin[ 48653 ], 3 );
    PyTuple_SET_ITEM( const_tuple_993502414358840495b1f55dd7172430_tuple, 2, const_unicode_plain_els ); Py_INCREF( const_unicode_plain_els );
    const_unicode_plain_lig = UNSTREAM_UNICODE( &constant_bin[ 4097 ], 3 );
    PyTuple_SET_ITEM( const_tuple_993502414358840495b1f55dd7172430_tuple, 3, const_unicode_plain_lig ); Py_INCREF( const_unicode_plain_lig );
    const_unicode_plain_ig = UNSTREAM_UNICODE( &constant_bin[ 283 ], 2 );
    PyTuple_SET_ITEM( const_tuple_993502414358840495b1f55dd7172430_tuple, 4, const_unicode_plain_ig ); Py_INCREF( const_unicode_plain_ig );
    const_unicode_plain_ak = UNSTREAM_UNICODE( &constant_bin[ 2210 ], 2 );
    const_str_plain__FrenchStemmer__step2a_suffixes = UNSTREAM_STRING( &constant_bin[ 715461 ], 31, 1 );
    const_str_plain__FinnishStemmer__double_consonants = UNSTREAM_STRING( &constant_bin[ 715492 ], 34, 1 );
    const_tuple_8cc965b5bf73320d8782cd161d56cb64_tuple = PyTuple_New( 2 );
    const_unicode_digest_a00941951f6f7ce8c0f2d9bdc9df5242 = UNSTREAM_UNICODE( &constant_bin[ 715526 ], 2 );
    PyTuple_SET_ITEM( const_tuple_8cc965b5bf73320d8782cd161d56cb64_tuple, 0, const_unicode_digest_a00941951f6f7ce8c0f2d9bdc9df5242 ); Py_INCREF( const_unicode_digest_a00941951f6f7ce8c0f2d9bdc9df5242 );
    const_unicode_plain_b = UNSTREAM_UNICODE( &constant_bin[ 254 ], 1 );
    PyTuple_SET_ITEM( const_tuple_8cc965b5bf73320d8782cd161d56cb64_tuple, 1, const_unicode_plain_b ); Py_INCREF( const_unicode_plain_b );
    const_unicode_plain_ad = UNSTREAM_UNICODE( &constant_bin[ 173 ], 2 );
    const_unicode_plain_ab = UNSTREAM_UNICODE( &constant_bin[ 253 ], 2 );
    const_tuple_b805d9073ad1d8a2b37827c66df08183_tuple = PyTuple_New( 2 );
    const_unicode_digest_049db6e58dec8faeb2bd7cd1632b9df3 = UNSTREAM_UNICODE( &constant_bin[ 129608 ], 2 );
    PyTuple_SET_ITEM( const_tuple_b805d9073ad1d8a2b37827c66df08183_tuple, 0, const_unicode_digest_049db6e58dec8faeb2bd7cd1632b9df3 ); Py_INCREF( const_unicode_digest_049db6e58dec8faeb2bd7cd1632b9df3 );
    const_unicode_plain_E = UNSTREAM_UNICODE( &constant_bin[ 783 ], 1 );
    PyTuple_SET_ITEM( const_tuple_b805d9073ad1d8a2b37827c66df08183_tuple, 1, const_unicode_plain_E ); Py_INCREF( const_unicode_plain_E );
    const_tuple_unicode_plain_euse_unicode_plain_euses_tuple = PyTuple_New( 2 );
    const_unicode_plain_euse = UNSTREAM_UNICODE( &constant_bin[ 501485 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_euse_unicode_plain_euses_tuple, 0, const_unicode_plain_euse ); Py_INCREF( const_unicode_plain_euse );
    const_unicode_plain_euses = UNSTREAM_UNICODE( &constant_bin[ 715528 ], 5 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_euse_unicode_plain_euses_tuple, 1, const_unicode_plain_euses ); Py_INCREF( const_unicode_plain_euses );
    const_unicode_digest_3f3cd3bd59d11c8ca1bb917c4367f3d2 = UNSTREAM_UNICODE( &constant_bin[ 715533 ], 2 );
    const_unicode_digest_56ab2dbed0688715ab78ed4253b12de6 = UNSTREAM_UNICODE( &constant_bin[ 715535 ], 57 );
    const_tuple_ecbcc231e2a3f1a302573e90d9a9eec8_tuple = PyTuple_New( 2 );
    const_unicode_digest_d387eb741b638d13b223a4147a8219a0 = UNSTREAM_UNICODE( &constant_bin[ 715592 ], 2 );
    PyTuple_SET_ITEM( const_tuple_ecbcc231e2a3f1a302573e90d9a9eec8_tuple, 0, const_unicode_digest_d387eb741b638d13b223a4147a8219a0 ); Py_INCREF( const_unicode_digest_d387eb741b638d13b223a4147a8219a0 );
    const_unicode_plain_k = UNSTREAM_UNICODE( &constant_bin[ 145 ], 1 );
    PyTuple_SET_ITEM( const_tuple_ecbcc231e2a3f1a302573e90d9a9eec8_tuple, 1, const_unicode_plain_k ); Py_INCREF( const_unicode_plain_k );
    const_unicode_plain_erai = UNSTREAM_UNICODE( &constant_bin[ 713618 ], 4 );
    const_tuple_a41dd2420b3ae149f1666e62fcba434d_tuple = PyTuple_New( 2 );
    const_unicode_digest_ce9df3550e776a650bc3e9bdd7e6ddd6 = UNSTREAM_UNICODE( &constant_bin[ 715594 ], 3 );
    PyTuple_SET_ITEM( const_tuple_a41dd2420b3ae149f1666e62fcba434d_tuple, 0, const_unicode_digest_ce9df3550e776a650bc3e9bdd7e6ddd6 ); Py_INCREF( const_unicode_digest_ce9df3550e776a650bc3e9bdd7e6ddd6 );
    const_unicode_digest_9517b5d6e35516b0b022218698df03f9 = UNSTREAM_UNICODE( &constant_bin[ 715597 ], 2 );
    PyTuple_SET_ITEM( const_tuple_a41dd2420b3ae149f1666e62fcba434d_tuple, 1, const_unicode_digest_9517b5d6e35516b0b022218698df03f9 ); Py_INCREF( const_unicode_digest_9517b5d6e35516b0b022218698df03f9 );
    const_unicode_digest_bd45c14285625ef7d1459fb4891f8e95 = UNSTREAM_UNICODE( &constant_bin[ 715599 ], 22 );
    const_unicode_plain_ativa = UNSTREAM_UNICODE( &constant_bin[ 715250 ], 5 );
    const_unicode_plain_uu = UNSTREAM_UNICODE( &constant_bin[ 277455 ], 2 );
    const_unicode_digest_c95bc571b87dd9c4d022227dbdc517d0 = UNSTREAM_UNICODE( &constant_bin[ 715621 ], 5 );
    const_tuple_0509c6307855288cb6eaf8fcd977fb03_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_0509c6307855288cb6eaf8fcd977fb03_tuple, 0, const_unicode_plain_a ); Py_INCREF( const_unicode_plain_a );
    const_unicode_digest_20ff30c165c4f43f97c9f9d947a045d0 = UNSTREAM_UNICODE( &constant_bin[ 715626 ], 2 );
    PyTuple_SET_ITEM( const_tuple_0509c6307855288cb6eaf8fcd977fb03_tuple, 1, const_unicode_digest_20ff30c165c4f43f97c9f9d947a045d0 ); Py_INCREF( const_unicode_digest_20ff30c165c4f43f97c9f9d947a045d0 );
    const_tuple_aee507605771beac2449897a25c3e0b8_tuple = PyTuple_New( 10 );
    PyTuple_SET_ITEM( const_tuple_aee507605771beac2449897a25c3e0b8_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_aee507605771beac2449897a25c3e0b8_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    const_str_plain_step1_success = UNSTREAM_STRING( &constant_bin[ 715628 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_aee507605771beac2449897a25c3e0b8_tuple, 2, const_str_plain_step1_success ); Py_INCREF( const_str_plain_step1_success );
    const_str_plain_step2_success = UNSTREAM_STRING( &constant_bin[ 715641 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_aee507605771beac2449897a25c3e0b8_tuple, 3, const_str_plain_step2_success ); Py_INCREF( const_str_plain_step2_success );
    PyTuple_SET_ITEM( const_tuple_aee507605771beac2449897a25c3e0b8_tuple, 4, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_aee507605771beac2449897a25c3e0b8_tuple, 5, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_aee507605771beac2449897a25c3e0b8_tuple, 6, const_str_plain_r2 ); Py_INCREF( const_str_plain_r2 );
    PyTuple_SET_ITEM( const_tuple_aee507605771beac2449897a25c3e0b8_tuple, 7, const_str_plain_rv ); Py_INCREF( const_str_plain_rv );
    PyTuple_SET_ITEM( const_tuple_aee507605771beac2449897a25c3e0b8_tuple, 8, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    const_str_plain_replacement_done = UNSTREAM_STRING( &constant_bin[ 715654 ], 16, 1 );
    PyTuple_SET_ITEM( const_tuple_aee507605771beac2449897a25c3e0b8_tuple, 9, const_str_plain_replacement_done ); Py_INCREF( const_str_plain_replacement_done );
    const_unicode_plain_atrices = UNSTREAM_UNICODE( &constant_bin[ 81003 ], 7 );
    const_unicode_plain_erions = UNSTREAM_UNICODE( &constant_bin[ 715670 ], 6 );
    const_str_plain__SwedishStemmer__s_ending = UNSTREAM_STRING( &constant_bin[ 715676 ], 25, 1 );
    const_tuple_0802c11868d410b647d2c8bac75ddc7d_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 715701 ], 248 );
    const_tuple_b96c0dbe5027a79804a581f967622434_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_b96c0dbe5027a79804a581f967622434_tuple, 0, const_unicode_plain_f ); Py_INCREF( const_unicode_plain_f );
    const_unicode_digest_c27284149cba96cfc3c1dc00d30b3ea7 = UNSTREAM_UNICODE( &constant_bin[ 715949 ], 2 );
    PyTuple_SET_ITEM( const_tuple_b96c0dbe5027a79804a581f967622434_tuple, 1, const_unicode_digest_c27284149cba96cfc3c1dc00d30b3ea7 ); Py_INCREF( const_unicode_digest_c27284149cba96cfc3c1dc00d30b3ea7 );
    const_unicode_digest_b33cd26bbcfa97d19a9a4f51b91d38e9 = UNSTREAM_UNICODE( &constant_bin[ 715951 ], 228 );
    const_unicode_plain_kaan = UNSTREAM_UNICODE( &constant_bin[ 716179 ], 4 );
    const_unicode_plain_hungarian = UNSTREAM_UNICODE( &constant_bin[ 716183 ], 9 );
    const_unicode_plain_finnish = UNSTREAM_UNICODE( &constant_bin[ 143511 ], 7 );
    const_unicode_plain_I = UNSTREAM_UNICODE( &constant_bin[ 1908 ], 1 );
    const_unicode_digest_18aab37aeef33c8a44b9d8a110c581c9 = UNSTREAM_UNICODE( &constant_bin[ 716192 ], 2 );
    const_tuple_f14c6160942c709d6c6b39a59c1d1717_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_f14c6160942c709d6c6b39a59c1d1717_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_f14c6160942c709d6c6b39a59c1d1717_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_f14c6160942c709d6c6b39a59c1d1717_tuple, 2, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_f14c6160942c709d6c6b39a59c1d1717_tuple, 3, const_str_plain_r2 ); Py_INCREF( const_str_plain_r2 );
    PyTuple_SET_ITEM( const_tuple_f14c6160942c709d6c6b39a59c1d1717_tuple, 4, const_str_plain_rv ); Py_INCREF( const_str_plain_rv );
    const_str_plain_vowels = UNSTREAM_STRING( &constant_bin[ 700761 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_f14c6160942c709d6c6b39a59c1d1717_tuple, 5, const_str_plain_vowels ); Py_INCREF( const_str_plain_vowels );
    PyTuple_SET_ITEM( const_tuple_f14c6160942c709d6c6b39a59c1d1717_tuple, 6, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_tuple_unicode_plain_yendo_tuple = PyTuple_New( 1 );
    const_unicode_plain_yendo = UNSTREAM_UNICODE( &constant_bin[ 716194 ], 5 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_yendo_tuple, 0, const_unicode_plain_yendo ); Py_INCREF( const_unicode_plain_yendo );
    const_tuple_95895417777ef4f35411bbf2690771a5_tuple = PyTuple_New( 7 );
    const_unicode_digest_3e6b89b3b28707186f1c8c46a90f1df2 = UNSTREAM_UNICODE( &constant_bin[ 716199 ], 5 );
    PyTuple_SET_ITEM( const_tuple_95895417777ef4f35411bbf2690771a5_tuple, 0, const_unicode_digest_3e6b89b3b28707186f1c8c46a90f1df2 ); Py_INCREF( const_unicode_digest_3e6b89b3b28707186f1c8c46a90f1df2 );
    PyTuple_SET_ITEM( const_tuple_95895417777ef4f35411bbf2690771a5_tuple, 1, const_unicode_digest_83217f7e651b043c5e654f77e0145ef8 ); Py_INCREF( const_unicode_digest_83217f7e651b043c5e654f77e0145ef8 );
    const_unicode_plain_ion = UNSTREAM_UNICODE( &constant_bin[ 397 ], 3 );
    PyTuple_SET_ITEM( const_tuple_95895417777ef4f35411bbf2690771a5_tuple, 2, const_unicode_plain_ion ); Py_INCREF( const_unicode_plain_ion );
    const_unicode_plain_ier = UNSTREAM_UNICODE( &constant_bin[ 1591 ], 3 );
    PyTuple_SET_ITEM( const_tuple_95895417777ef4f35411bbf2690771a5_tuple, 3, const_unicode_plain_ier ); Py_INCREF( const_unicode_plain_ier );
    const_unicode_plain_Ier = UNSTREAM_UNICODE( &constant_bin[ 716204 ], 3 );
    PyTuple_SET_ITEM( const_tuple_95895417777ef4f35411bbf2690771a5_tuple, 4, const_unicode_plain_Ier ); Py_INCREF( const_unicode_plain_Ier );
    PyTuple_SET_ITEM( const_tuple_95895417777ef4f35411bbf2690771a5_tuple, 5, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    const_unicode_digest_e64aef8bc630796f1c20d05047369731 = UNSTREAM_UNICODE( &constant_bin[ 716207 ], 2 );
    PyTuple_SET_ITEM( const_tuple_95895417777ef4f35411bbf2690771a5_tuple, 6, const_unicode_digest_e64aef8bc630796f1c20d05047369731 ); Py_INCREF( const_unicode_digest_e64aef8bc630796f1c20d05047369731 );
    const_unicode_digest_29adf0a82a22b3ff610a27a3c5520f02 = UNSTREAM_UNICODE( &constant_bin[ 713500 ], 4 );
    const_tuple_3e0da8f75319f78863662807e8f7110c_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_3e0da8f75319f78863662807e8f7110c_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_3e0da8f75319f78863662807e8f7110c_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_3e0da8f75319f78863662807e8f7110c_tuple, 2, const_str_plain_vowels ); Py_INCREF( const_str_plain_vowels );
    PyTuple_SET_ITEM( const_tuple_3e0da8f75319f78863662807e8f7110c_tuple, 3, const_str_plain_digraphs ); Py_INCREF( const_str_plain_digraphs );
    PyTuple_SET_ITEM( const_tuple_3e0da8f75319f78863662807e8f7110c_tuple, 4, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    const_str_plain_digraph = UNSTREAM_STRING( &constant_bin[ 484078 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_3e0da8f75319f78863662807e8f7110c_tuple, 5, const_str_plain_digraph ); Py_INCREF( const_str_plain_digraph );
    PyTuple_SET_ITEM( const_tuple_3e0da8f75319f78863662807e8f7110c_tuple, 6, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_unicode_plain_idade = UNSTREAM_UNICODE( &constant_bin[ 716209 ], 5 );
    const_int_neg_5 = PyInt_FromLong( -5l );
    const_str_plain__SpanishStemmer__step2a_suffixes = UNSTREAM_STRING( &constant_bin[ 716214 ], 32, 1 );
    const_tuple_unicode_plain_idad_unicode_plain_idades_tuple = PyTuple_New( 2 );
    const_unicode_plain_idad = UNSTREAM_UNICODE( &constant_bin[ 716209 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_idad_unicode_plain_idades_tuple, 0, const_unicode_plain_idad ); Py_INCREF( const_unicode_plain_idad );
    const_unicode_plain_idades = UNSTREAM_UNICODE( &constant_bin[ 716246 ], 6 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_idad_unicode_plain_idades_tuple, 1, const_unicode_plain_idades ); Py_INCREF( const_unicode_plain_idades );
    const_str_plain_russian = UNSTREAM_STRING( &constant_bin[ 716252 ], 7, 1 );
    const_unicode_plain_ation = UNSTREAM_UNICODE( &constant_bin[ 2125 ], 5 );
    const_unicode_plain_l = UNSTREAM_UNICODE( &constant_bin[ 243 ], 1 );
    const_unicode_digest_1f157ffe1eae7b7af17901f9a762d3f3 = UNSTREAM_UNICODE( &constant_bin[ 716259 ], 2 );
    const_unicode_plain_i = UNSTREAM_UNICODE( &constant_bin[ 12 ], 1 );
    const_unicode_plain_j = UNSTREAM_UNICODE( &constant_bin[ 1029 ], 1 );
    const_unicode_plain_d = UNSTREAM_UNICODE( &constant_bin[ 19 ], 1 );
    const_unicode_digest_ed1edf7feaa5fdc8aac633ccea30b6dd = UNSTREAM_UNICODE( &constant_bin[ 716261 ], 1318 );
    const_unicode_digest_c8940e591bfc889f1eedf45e19e49889 = UNSTREAM_UNICODE( &constant_bin[ 717579 ], 2 );
    const_unicode_plain_c = UNSTREAM_UNICODE( &constant_bin[ 56 ], 1 );
    const_str_plain___roman_to_cyrillic = UNSTREAM_STRING( &constant_bin[ 717581 ], 19, 1 );
    const_str_plain_languages = UNSTREAM_STRING( &constant_bin[ 524208 ], 9, 1 );
    const_unicode_plain_v = UNSTREAM_UNICODE( &constant_bin[ 249 ], 1 );
    const_unicode_digest_e72e12f7bd4091cd7d49885da0d54666 = UNSTREAM_UNICODE( &constant_bin[ 717600 ], 8 );
    const_unicode_plain_p = UNSTREAM_UNICODE( &constant_bin[ 58 ], 1 );
    const_unicode_plain_q = UNSTREAM_UNICODE( &constant_bin[ 1990 ], 1 );
    const_unicode_plain_r = UNSTREAM_UNICODE( &constant_bin[ 60 ], 1 );
    const_unicode_plain_s = UNSTREAM_UNICODE( &constant_bin[ 7 ], 1 );
    const_tuple_bf4ccbfb8a2dc1c39eb1b1f656b81de0_tuple = PyTuple_New( 2 );
    const_unicode_digest_473fbf2ba6b0605956238cf78704a297 = UNSTREAM_UNICODE( &constant_bin[ 716199 ], 4 );
    PyTuple_SET_ITEM( const_tuple_bf4ccbfb8a2dc1c39eb1b1f656b81de0_tuple, 0, const_unicode_digest_473fbf2ba6b0605956238cf78704a297 ); Py_INCREF( const_unicode_digest_473fbf2ba6b0605956238cf78704a297 );
    PyTuple_SET_ITEM( const_tuple_bf4ccbfb8a2dc1c39eb1b1f656b81de0_tuple, 1, const_unicode_digest_29adf0a82a22b3ff610a27a3c5520f02 ); Py_INCREF( const_unicode_digest_29adf0a82a22b3ff610a27a3c5520f02 );
    const_tuple_unicode_plain_ul_unicode_plain_ului_tuple = PyTuple_New( 2 );
    const_unicode_plain_ul = UNSTREAM_UNICODE( &constant_bin[ 684 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ul_unicode_plain_ului_tuple, 0, const_unicode_plain_ul ); Py_INCREF( const_unicode_plain_ul );
    const_unicode_plain_ului = UNSTREAM_UNICODE( &constant_bin[ 717608 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ul_unicode_plain_ului_tuple, 1, const_unicode_plain_ului ); Py_INCREF( const_unicode_plain_ului );
    const_unicode_plain_ele = UNSTREAM_UNICODE( &constant_bin[ 1074 ], 3 );
    const_tuple_unicode_plain_en_tuple = PyTuple_New( 1 );
    const_unicode_plain_en = UNSTREAM_UNICODE( &constant_bin[ 267 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_en_tuple, 0, const_unicode_plain_en ); Py_INCREF( const_unicode_plain_en );
    const_tuple_8f02c732f2934489cace301e08adbe3f_tuple = PyTuple_New( 2 );
    const_unicode_digest_3a1522ca96e4d22468ac84dfbd766769 = UNSTREAM_UNICODE( &constant_bin[ 717612 ], 2 );
    PyTuple_SET_ITEM( const_tuple_8f02c732f2934489cace301e08adbe3f_tuple, 0, const_unicode_digest_3a1522ca96e4d22468ac84dfbd766769 ); Py_INCREF( const_unicode_digest_3a1522ca96e4d22468ac84dfbd766769 );
    const_unicode_plain_kh = UNSTREAM_UNICODE( &constant_bin[ 181568 ], 2 );
    PyTuple_SET_ITEM( const_tuple_8f02c732f2934489cace301e08adbe3f_tuple, 1, const_unicode_plain_kh ); Py_INCREF( const_unicode_plain_kh );
    const_unicode_plain_ivo = UNSTREAM_UNICODE( &constant_bin[ 225226 ], 3 );
    const_unicode_plain_uzioni = UNSTREAM_UNICODE( &constant_bin[ 717614 ], 6 );
    const_unicode_plain_ivi = UNSTREAM_UNICODE( &constant_bin[ 32227 ], 3 );
    const_tuple_2cfc31b0cb7404929bdf899a5e519f78_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_2cfc31b0cb7404929bdf899a5e519f78_tuple, 0, const_unicode_plain_n ); Py_INCREF( const_unicode_plain_n );
    const_unicode_digest_79d017d0589122dd9e8531d2c8c7f9ae = UNSTREAM_UNICODE( &constant_bin[ 717620 ], 2 );
    PyTuple_SET_ITEM( const_tuple_2cfc31b0cb7404929bdf899a5e519f78_tuple, 1, const_unicode_digest_79d017d0589122dd9e8531d2c8c7f9ae ); Py_INCREF( const_unicode_digest_79d017d0589122dd9e8531d2c8c7f9ae );
    const_unicode_digest_3237b32eb23cee6617f0a3a9251acea5 = UNSTREAM_UNICODE( &constant_bin[ 717622 ], 21 );
    const_unicode_plain_ny = UNSTREAM_UNICODE( &constant_bin[ 512 ], 2 );
    const_tuple_02ebd4f0f06223894f5b9eef8c76b64c_tuple = PyTuple_New( 2 );
    const_unicode_digest_1a27b7b9da7216996c1254ad3ffa3531 = UNSTREAM_UNICODE( &constant_bin[ 717643 ], 3 );
    PyTuple_SET_ITEM( const_tuple_02ebd4f0f06223894f5b9eef8c76b64c_tuple, 0, const_unicode_digest_1a27b7b9da7216996c1254ad3ffa3531 ); Py_INCREF( const_unicode_digest_1a27b7b9da7216996c1254ad3ffa3531 );
    PyTuple_SET_ITEM( const_tuple_02ebd4f0f06223894f5b9eef8c76b64c_tuple, 1, const_unicode_plain_A ); Py_INCREF( const_unicode_plain_A );
    const_tuple_unicode_plain_heid_tuple = PyTuple_New( 1 );
    const_unicode_plain_heid = UNSTREAM_UNICODE( &constant_bin[ 717646 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_heid_tuple, 0, const_unicode_plain_heid ); Py_INCREF( const_unicode_plain_heid );
    const_tuple_unicode_plain_mma_tuple = PyTuple_New( 1 );
    const_unicode_plain_mma = UNSTREAM_UNICODE( &constant_bin[ 5192 ], 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_mma_tuple, 0, const_unicode_plain_mma ); Py_INCREF( const_unicode_plain_mma );
    const_unicode_plain_den = UNSTREAM_UNICODE( &constant_bin[ 1064 ], 3 );
    const_unicode_plain_assent = UNSTREAM_UNICODE( &constant_bin[ 717650 ], 6 );
    const_unicode_digest_09379b5ee1ff611b09e0163788e986cf = UNSTREAM_UNICODE( &constant_bin[ 717656 ], 565 );
    const_unicode_plain_ert = UNSTREAM_UNICODE( &constant_bin[ 13709 ], 3 );
    const_unicode_plain_uzione = UNSTREAM_UNICODE( &constant_bin[ 718221 ], 6 );
    const_tuple_7a8814b76c381411a5ff594ced61a9e5_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_7a8814b76c381411a5ff594ced61a9e5_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_7a8814b76c381411a5ff594ced61a9e5_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_7a8814b76c381411a5ff594ced61a9e5_tuple, 2, const_str_plain_step1_success ); Py_INCREF( const_str_plain_step1_success );
    PyTuple_SET_ITEM( const_tuple_7a8814b76c381411a5ff594ced61a9e5_tuple, 3, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_7a8814b76c381411a5ff594ced61a9e5_tuple, 4, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_7a8814b76c381411a5ff594ced61a9e5_tuple, 5, const_str_plain_r2 ); Py_INCREF( const_str_plain_r2 );
    PyTuple_SET_ITEM( const_tuple_7a8814b76c381411a5ff594ced61a9e5_tuple, 6, const_str_plain_rv ); Py_INCREF( const_str_plain_rv );
    PyTuple_SET_ITEM( const_tuple_7a8814b76c381411a5ff594ced61a9e5_tuple, 7, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    const_unicode_digest_d76f5dd1beb8a75f9b91600948454899 = UNSTREAM_UNICODE( &constant_bin[ 718227 ], 3 );
    const_tuple_6c8d5372f67b01d07556f5bd0e1d2cbf_tuple = PyTuple_New( 2 );
    const_unicode_digest_d335d5d5ed53f97fd144b1a2ff79f3cd = UNSTREAM_UNICODE( &constant_bin[ 718230 ], 2 );
    PyTuple_SET_ITEM( const_tuple_6c8d5372f67b01d07556f5bd0e1d2cbf_tuple, 0, const_unicode_digest_d335d5d5ed53f97fd144b1a2ff79f3cd ); Py_INCREF( const_unicode_digest_d335d5d5ed53f97fd144b1a2ff79f3cd );
    PyTuple_SET_ITEM( const_tuple_6c8d5372f67b01d07556f5bd0e1d2cbf_tuple, 1, const_unicode_digest_049db6e58dec8faeb2bd7cd1632b9df3 ); Py_INCREF( const_unicode_digest_049db6e58dec8faeb2bd7cd1632b9df3 );
    const_str_plain_french = UNSTREAM_STRING( &constant_bin[ 143519 ], 6, 1 );
    const_unicode_digest_1094ceee53f468647e12ae7ce3aa5571 = UNSTREAM_UNICODE( &constant_bin[ 718232 ], 2 );
    const_unicode_plain_mpa = UNSTREAM_UNICODE( &constant_bin[ 453 ], 3 );
    const_unicode_digest_72254343b67d1170c7dc8158ec915d3a = UNSTREAM_UNICODE( &constant_bin[ 718234 ], 922 );
    const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple = PyTuple_New( 14 );
    const_unicode_plain_impi = UNSTREAM_UNICODE( &constant_bin[ 719156 ], 4 );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 0, const_unicode_plain_impi ); Py_INCREF( const_unicode_plain_impi );
    const_unicode_plain_impa = UNSTREAM_UNICODE( &constant_bin[ 12619 ], 4 );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 1, const_unicode_plain_impa ); Py_INCREF( const_unicode_plain_impa );
    const_unicode_digest_06d9c98d970ccad03c441aa7f4e68df6 = UNSTREAM_UNICODE( &constant_bin[ 719160 ], 5 );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 2, const_unicode_digest_06d9c98d970ccad03c441aa7f4e68df6 ); Py_INCREF( const_unicode_digest_06d9c98d970ccad03c441aa7f4e68df6 );
    const_unicode_plain_immi = UNSTREAM_UNICODE( &constant_bin[ 719165 ], 4 );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 3, const_unicode_plain_immi ); Py_INCREF( const_unicode_plain_immi );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 4, const_unicode_plain_imma ); Py_INCREF( const_unicode_plain_imma );
    const_unicode_digest_8786485eacb9b61f77fd72a3344043ff = UNSTREAM_UNICODE( &constant_bin[ 719169 ], 5 );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 5, const_unicode_digest_8786485eacb9b61f77fd72a3344043ff ); Py_INCREF( const_unicode_digest_8786485eacb9b61f77fd72a3344043ff );
    const_unicode_plain_mpi = UNSTREAM_UNICODE( &constant_bin[ 1876 ], 3 );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 6, const_unicode_plain_mpi ); Py_INCREF( const_unicode_plain_mpi );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 7, const_unicode_plain_mpa ); Py_INCREF( const_unicode_plain_mpa );
    const_unicode_digest_10f4da5a1f74722239d506d8ff0d8bd8 = UNSTREAM_UNICODE( &constant_bin[ 719161 ], 4 );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 8, const_unicode_digest_10f4da5a1f74722239d506d8ff0d8bd8 ); Py_INCREF( const_unicode_digest_10f4da5a1f74722239d506d8ff0d8bd8 );
    const_unicode_plain_mmi = UNSTREAM_UNICODE( &constant_bin[ 3910 ], 3 );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 9, const_unicode_plain_mmi ); Py_INCREF( const_unicode_plain_mmi );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 10, const_unicode_plain_mma ); Py_INCREF( const_unicode_plain_mma );
    const_unicode_digest_594ca15359915ea94297b153a89c57cb = UNSTREAM_UNICODE( &constant_bin[ 719170 ], 4 );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 11, const_unicode_digest_594ca15359915ea94297b153a89c57cb ); Py_INCREF( const_unicode_digest_594ca15359915ea94297b153a89c57cb );
    const_unicode_plain_eja = UNSTREAM_UNICODE( &constant_bin[ 719174 ], 3 );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 12, const_unicode_plain_eja ); Py_INCREF( const_unicode_plain_eja );
    const_unicode_digest_cf4401d4788e0b069162e4d5a61c6fd8 = UNSTREAM_UNICODE( &constant_bin[ 719177 ], 4 );
    PyTuple_SET_ITEM( const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple, 13, const_unicode_digest_cf4401d4788e0b069162e4d5a61c6fd8 ); Py_INCREF( const_unicode_digest_cf4401d4788e0b069162e4d5a61c6fd8 );
    const_unicode_plain_ss = UNSTREAM_UNICODE( &constant_bin[ 281 ], 2 );
    const_str_plain__NorwegianStemmer__vowels = UNSTREAM_STRING( &constant_bin[ 719181 ], 25, 1 );
    const_unicode_digest_d02bfaed01174018b3e64a8ff0cb3bae = UNSTREAM_UNICODE( &constant_bin[ 715301 ], 5 );
    const_tuple_unicode_plain_ante_unicode_plain_able_unicode_plain_ible_tuple = PyTuple_New( 3 );
    const_unicode_plain_ante = UNSTREAM_UNICODE( &constant_bin[ 20563 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ante_unicode_plain_able_unicode_plain_ible_tuple, 0, const_unicode_plain_ante ); Py_INCREF( const_unicode_plain_ante );
    const_unicode_plain_able = UNSTREAM_UNICODE( &constant_bin[ 253 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ante_unicode_plain_able_unicode_plain_ible_tuple, 1, const_unicode_plain_able ); Py_INCREF( const_unicode_plain_able );
    const_unicode_plain_ible = UNSTREAM_UNICODE( &constant_bin[ 12984 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ante_unicode_plain_able_unicode_plain_ible_tuple, 2, const_unicode_plain_ible ); Py_INCREF( const_unicode_plain_ible );
    const_unicode_plain_col = UNSTREAM_UNICODE( &constant_bin[ 2148 ], 3 );
    const_tuple_92caa36be441ec854f2de0e294aaa9d7_tuple = PyTuple_New( 4 );
    const_unicode_plain_if = UNSTREAM_UNICODE( &constant_bin[ 1589 ], 2 );
    PyTuple_SET_ITEM( const_tuple_92caa36be441ec854f2de0e294aaa9d7_tuple, 0, const_unicode_plain_if ); Py_INCREF( const_unicode_plain_if );
    const_unicode_plain_ive = UNSTREAM_UNICODE( &constant_bin[ 5816 ], 3 );
    PyTuple_SET_ITEM( const_tuple_92caa36be441ec854f2de0e294aaa9d7_tuple, 1, const_unicode_plain_ive ); Py_INCREF( const_unicode_plain_ive );
    const_unicode_plain_ifs = UNSTREAM_UNICODE( &constant_bin[ 719206 ], 3 );
    PyTuple_SET_ITEM( const_tuple_92caa36be441ec854f2de0e294aaa9d7_tuple, 2, const_unicode_plain_ifs ); Py_INCREF( const_unicode_plain_ifs );
    const_unicode_plain_ives = UNSTREAM_UNICODE( &constant_bin[ 7319 ], 4 );
    PyTuple_SET_ITEM( const_tuple_92caa36be441ec854f2de0e294aaa9d7_tuple, 3, const_unicode_plain_ives ); Py_INCREF( const_unicode_plain_ives );
    const_unicode_digest_fa2751934f9ca2cad0b25c6f6122fb13 = UNSTREAM_UNICODE( &constant_bin[ 719209 ], 231 );
    const_tuple_74398d8d991a606c997a40bef640d5e3_tuple = PyTuple_New( 2 );
    const_unicode_digest_0a2d24ad5f8d1a187ea868185b362efd = UNSTREAM_UNICODE( &constant_bin[ 719440 ], 2 );
    PyTuple_SET_ITEM( const_tuple_74398d8d991a606c997a40bef640d5e3_tuple, 0, const_unicode_digest_0a2d24ad5f8d1a187ea868185b362efd ); Py_INCREF( const_unicode_digest_0a2d24ad5f8d1a187ea868185b362efd );
    PyTuple_SET_ITEM( const_tuple_74398d8d991a606c997a40bef640d5e3_tuple, 1, const_unicode_plain_s ); Py_INCREF( const_unicode_plain_s );
    const_tuple_a4eb71c9a63ca533f5e948ad9ea356d1_tuple = PyTuple_New( 2 );
    const_unicode_digest_1c34a91667108c42ccd42adc23fdd3e4 = UNSTREAM_UNICODE( &constant_bin[ 719442 ], 2 );
    PyTuple_SET_ITEM( const_tuple_a4eb71c9a63ca533f5e948ad9ea356d1_tuple, 0, const_unicode_digest_1c34a91667108c42ccd42adc23fdd3e4 ); Py_INCREF( const_unicode_digest_1c34a91667108c42ccd42adc23fdd3e4 );
    PyTuple_SET_ITEM( const_tuple_a4eb71c9a63ca533f5e948ad9ea356d1_tuple, 1, const_unicode_plain_r ); Py_INCREF( const_unicode_plain_r );
    const_unicode_digest_d57aecefd8700a0b79449020d4ea1211 = UNSTREAM_UNICODE( &constant_bin[ 719444 ], 2 );
    const_unicode_plain_portuguese = UNSTREAM_UNICODE( &constant_bin[ 178104 ], 10 );
    const_tuple_73d19a82d956714a1c25b481a0adc418_tuple = PyTuple_New( 4 );
    const_unicode_plain_usion = UNSTREAM_UNICODE( &constant_bin[ 98109 ], 5 );
    PyTuple_SET_ITEM( const_tuple_73d19a82d956714a1c25b481a0adc418_tuple, 0, const_unicode_plain_usion ); Py_INCREF( const_unicode_plain_usion );
    const_unicode_plain_ution = UNSTREAM_UNICODE( &constant_bin[ 5554 ], 5 );
    PyTuple_SET_ITEM( const_tuple_73d19a82d956714a1c25b481a0adc418_tuple, 1, const_unicode_plain_ution ); Py_INCREF( const_unicode_plain_ution );
    const_unicode_plain_usions = UNSTREAM_UNICODE( &constant_bin[ 719446 ], 6 );
    PyTuple_SET_ITEM( const_tuple_73d19a82d956714a1c25b481a0adc418_tuple, 2, const_unicode_plain_usions ); Py_INCREF( const_unicode_plain_usions );
    const_unicode_plain_utions = UNSTREAM_UNICODE( &constant_bin[ 5554 ], 6 );
    PyTuple_SET_ITEM( const_tuple_73d19a82d956714a1c25b481a0adc418_tuple, 3, const_unicode_plain_utions ); Py_INCREF( const_unicode_plain_utions );
    const_unicode_digest_579ae74eb0325e248521f748d0f47586 = UNSTREAM_UNICODE( &constant_bin[ 713181 ], 3 );
    const_unicode_digest_216f6d9a84a1a1672910f2cf0438da6d = UNSTREAM_UNICODE( &constant_bin[ 719452 ], 35 );
    const_unicode_plain_spanish = UNSTREAM_UNICODE( &constant_bin[ 198366 ], 7 );
    const_str_plain__SpanishStemmer__vowels = UNSTREAM_STRING( &constant_bin[ 719487 ], 23, 1 );
    const_unicode_plain_abil = UNSTREAM_UNICODE( &constant_bin[ 1052 ], 4 );
    const_tuple_str_chr_39_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_chr_39_tuple, 0, const_str_chr_39 ); Py_INCREF( const_str_chr_39 );
    const_unicode_plain_nne = UNSTREAM_UNICODE( &constant_bin[ 1992 ], 3 );
    const_unicode_plain_ko = UNSTREAM_UNICODE( &constant_bin[ 135969 ], 2 );
    const_tuple_7d08e9422131a5a7b78d6201634372ca_tuple = PyTuple_New( 2 );
    const_unicode_digest_3ffc098c6ed619aa023685efe3617bec = UNSTREAM_UNICODE( &constant_bin[ 719510 ], 2 );
    PyTuple_SET_ITEM( const_tuple_7d08e9422131a5a7b78d6201634372ca_tuple, 0, const_unicode_digest_3ffc098c6ed619aa023685efe3617bec ); Py_INCREF( const_unicode_digest_3ffc098c6ed619aa023685efe3617bec );
    PyTuple_SET_ITEM( const_tuple_7d08e9422131a5a7b78d6201634372ca_tuple, 1, const_unicode_plain_i ); Py_INCREF( const_unicode_plain_i );
    const_tuple_unicode_plain_iv_tuple = PyTuple_New( 1 );
    const_unicode_plain_iv = UNSTREAM_UNICODE( &constant_bin[ 5816 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_iv_tuple, 0, const_unicode_plain_iv ); Py_INCREF( const_unicode_plain_iv );
    const_unicode_plain_ical = UNSTREAM_UNICODE( &constant_bin[ 3332 ], 4 );
    const_str_plain__SpanishStemmer__step3_suffixes = UNSTREAM_STRING( &constant_bin[ 719512 ], 31, 1 );
    const_str_plain_hungarian = UNSTREAM_STRING( &constant_bin[ 716183 ], 9, 1 );
    const_unicode_plain_li = UNSTREAM_UNICODE( &constant_bin[ 584 ], 2 );
    const_tuple_25686e15499762bcf0699ac1d9fa2920_tuple = PyTuple_New( 2 );
    const_unicode_digest_8b50c6d061093d206ae232d63ab77e8f = UNSTREAM_UNICODE( &constant_bin[ 719543 ], 2 );
    PyTuple_SET_ITEM( const_tuple_25686e15499762bcf0699ac1d9fa2920_tuple, 0, const_unicode_digest_8b50c6d061093d206ae232d63ab77e8f ); Py_INCREF( const_unicode_digest_8b50c6d061093d206ae232d63ab77e8f );
    const_unicode_plain_ch = UNSTREAM_UNICODE( &constant_bin[ 2132 ], 2 );
    PyTuple_SET_ITEM( const_tuple_25686e15499762bcf0699ac1d9fa2920_tuple, 1, const_unicode_plain_ch ); Py_INCREF( const_unicode_plain_ch );
    const_unicode_plain_baar = UNSTREAM_UNICODE( &constant_bin[ 719545 ], 4 );
    const_unicode_plain_me = UNSTREAM_UNICODE( &constant_bin[ 2 ], 2 );
    const_unicode_plain_era = UNSTREAM_UNICODE( &constant_bin[ 3872 ], 3 );
    const_unicode_plain_lo = UNSTREAM_UNICODE( &constant_bin[ 243 ], 2 );
    const_unicode_plain_la = UNSTREAM_UNICODE( &constant_bin[ 685 ], 2 );
    const_tuple_unicode_digest_aed26e9fdc4d953682a95803e01952d3_tuple = PyTuple_New( 1 );
    const_unicode_digest_aed26e9fdc4d953682a95803e01952d3 = UNSTREAM_UNICODE( &constant_bin[ 719549 ], 23 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_aed26e9fdc4d953682a95803e01952d3_tuple, 0, const_unicode_digest_aed26e9fdc4d953682a95803e01952d3 ); Py_INCREF( const_unicode_digest_aed26e9fdc4d953682a95803e01952d3 );
    const_unicode_plain_ern = UNSTREAM_UNICODE( &constant_bin[ 16101 ], 3 );
    const_unicode_plain_le = UNSTREAM_UNICODE( &constant_bin[ 255 ], 2 );
    const_unicode_plain_iuni = UNSTREAM_UNICODE( &constant_bin[ 719572 ], 4 );
    const_tuple_b52820215875207b84eb2621e3500b61_tuple = PyTuple_New( 5 );
    const_unicode_plain_enn = UNSTREAM_UNICODE( &constant_bin[ 175194 ], 3 );
    PyTuple_SET_ITEM( const_tuple_b52820215875207b84eb2621e3500b61_tuple, 0, const_unicode_plain_enn ); Py_INCREF( const_unicode_plain_enn );
    const_unicode_plain_onn = UNSTREAM_UNICODE( &constant_bin[ 219362 ], 3 );
    PyTuple_SET_ITEM( const_tuple_b52820215875207b84eb2621e3500b61_tuple, 1, const_unicode_plain_onn ); Py_INCREF( const_unicode_plain_onn );
    const_unicode_plain_ett = UNSTREAM_UNICODE( &constant_bin[ 9135 ], 3 );
    PyTuple_SET_ITEM( const_tuple_b52820215875207b84eb2621e3500b61_tuple, 2, const_unicode_plain_ett ); Py_INCREF( const_unicode_plain_ett );
    const_unicode_plain_ell = UNSTREAM_UNICODE( &constant_bin[ 4095 ], 3 );
    PyTuple_SET_ITEM( const_tuple_b52820215875207b84eb2621e3500b61_tuple, 3, const_unicode_plain_ell ); Py_INCREF( const_unicode_plain_ell );
    const_unicode_plain_eill = UNSTREAM_UNICODE( &constant_bin[ 719576 ], 4 );
    PyTuple_SET_ITEM( const_tuple_b52820215875207b84eb2621e3500b61_tuple, 4, const_unicode_plain_eill ); Py_INCREF( const_unicode_plain_eill );
    const_str_plain__SwedishStemmer__step3_suffixes = UNSTREAM_STRING( &constant_bin[ 719580 ], 31, 1 );
    const_unicode_plain_ly = UNSTREAM_UNICODE( &constant_bin[ 601 ], 2 );
    const_str_plain__r1r2_standard = UNSTREAM_STRING( &constant_bin[ 719611 ], 14, 1 );
    const_tuple_0575198efcc749dda95e1cee1bb814d1_tuple = PyTuple_New( 2 );
    const_unicode_digest_a91c0587a50638ab09b4e9bfd5089ee8 = UNSTREAM_UNICODE( &constant_bin[ 719625 ], 2 );
    PyTuple_SET_ITEM( const_tuple_0575198efcc749dda95e1cee1bb814d1_tuple, 0, const_unicode_digest_a91c0587a50638ab09b4e9bfd5089ee8 ); Py_INCREF( const_unicode_digest_a91c0587a50638ab09b4e9bfd5089ee8 );
    PyTuple_SET_ITEM( const_tuple_0575198efcc749dda95e1cee1bb814d1_tuple, 1, const_unicode_plain_z ); Py_INCREF( const_unicode_plain_z );
    const_unicode_digest_2bcaf158af91b9090915dd94ad19b47e = UNSTREAM_UNICODE( &constant_bin[ 719627 ], 21 );
    const_unicode_plain_ist = UNSTREAM_UNICODE( &constant_bin[ 1794 ], 3 );
    const_unicode_digest_e8e8e8de8b0402c17abe92c438e8720b = UNSTREAM_UNICODE( &constant_bin[ 719648 ], 4 );
    const_unicode_plain_ea = UNSTREAM_UNICODE( &constant_bin[ 879 ], 2 );
    const_unicode_plain_ene = UNSTREAM_UNICODE( &constant_bin[ 1941 ], 3 );
    const_unicode_plain_iei = UNSTREAM_UNICODE( &constant_bin[ 719575 ], 3 );
    const_unicode_plain_ek = UNSTREAM_UNICODE( &constant_bin[ 112415 ], 2 );
    const_unicode_plain_el = UNSTREAM_UNICODE( &constant_bin[ 649 ], 2 );
    const_str_plain__RussianStemmer__reflexive_suffixes = UNSTREAM_STRING( &constant_bin[ 719652 ], 35, 1 );
    const_unicode_plain_er = UNSTREAM_UNICODE( &constant_bin[ 265 ], 2 );
    const_unicode_plain_es = UNSTREAM_UNICODE( &constant_bin[ 751 ], 2 );
    const_unicode_digest_03c4b2f172419703f0fad6b0cba707ab = UNSTREAM_UNICODE( &constant_bin[ 719687 ], 4 );
    const_str_plain__GermanStemmer__vowels = UNSTREAM_STRING( &constant_bin[ 719691 ], 22, 1 );
    const_unicode_plain_et = UNSTREAM_UNICODE( &constant_bin[ 737 ], 2 );
    const_unicode_plain_ativi = UNSTREAM_UNICODE( &constant_bin[ 715270 ], 5 );
    const_unicode_plain_ez = UNSTREAM_UNICODE( &constant_bin[ 353005 ], 2 );
    const_tuple_0d91b14694a1e22a71f0e20a0419e2c8_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_0d91b14694a1e22a71f0e20a0419e2c8_tuple, 0, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 = UNSTREAM_UNICODE( &constant_bin[ 713126 ], 2 );
    PyTuple_SET_ITEM( const_tuple_0d91b14694a1e22a71f0e20a0419e2c8_tuple, 1, const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 ); Py_INCREF( const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 );
    const_unicode_digest_6082d1ca5c79da270c8fb8420af49f7d = UNSTREAM_UNICODE( &constant_bin[ 719644 ], 2 );
    PyTuple_SET_ITEM( const_tuple_0d91b14694a1e22a71f0e20a0419e2c8_tuple, 2, const_unicode_digest_6082d1ca5c79da270c8fb8420af49f7d ); Py_INCREF( const_unicode_digest_6082d1ca5c79da270c8fb8420af49f7d );
    const_tuple_f44649f09d155153fdd0c05ccaa583de_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_f44649f09d155153fdd0c05ccaa583de_tuple, 0, const_unicode_digest_20ff30c165c4f43f97c9f9d947a045d0 ); Py_INCREF( const_unicode_digest_20ff30c165c4f43f97c9f9d947a045d0 );
    PyTuple_SET_ITEM( const_tuple_f44649f09d155153fdd0c05ccaa583de_tuple, 1, const_unicode_plain_a ); Py_INCREF( const_unicode_plain_a );
    const_unicode_digest_d087aa050a38508b1f0a500c1d21aa2c = UNSTREAM_UNICODE( &constant_bin[ 713501 ], 2 );
    const_str_plain__FinnishStemmer__step2_suffixes = UNSTREAM_STRING( &constant_bin[ 719713 ], 31, 1 );
    const_unicode_digest_711578b5a996e75a650bde056decd383 = UNSTREAM_UNICODE( &constant_bin[ 719744 ], 2 );
    const_unicode_plain_iqUe = UNSTREAM_UNICODE( &constant_bin[ 719746 ], 4 );
    const_unicode_digest_038f3890eedcee1b21b7d2364a09bcab = UNSTREAM_UNICODE( &constant_bin[ 719750 ], 64 );
    const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple = PyTuple_New( 16 );
    const_unicode_plain_iilor = UNSTREAM_UNICODE( &constant_bin[ 719814 ], 5 );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 0, const_unicode_plain_iilor ); Py_INCREF( const_unicode_plain_iilor );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 1, const_unicode_plain_ului ); Py_INCREF( const_unicode_plain_ului );
    const_unicode_plain_elor = UNSTREAM_UNICODE( &constant_bin[ 198511 ], 4 );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 2, const_unicode_plain_elor ); Py_INCREF( const_unicode_plain_elor );
    const_unicode_plain_iile = UNSTREAM_UNICODE( &constant_bin[ 719819 ], 4 );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 3, const_unicode_plain_iile ); Py_INCREF( const_unicode_plain_iile );
    const_unicode_plain_ilor = UNSTREAM_UNICODE( &constant_bin[ 719815 ], 4 );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 4, const_unicode_plain_ilor ); Py_INCREF( const_unicode_plain_ilor );
    const_unicode_plain_atei = UNSTREAM_UNICODE( &constant_bin[ 713627 ], 4 );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 5, const_unicode_plain_atei ); Py_INCREF( const_unicode_plain_atei );
    const_unicode_digest_39d8c15d25cebea6a8d0ca44c6daa370 = UNSTREAM_UNICODE( &constant_bin[ 719823 ], 5 );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 6, const_unicode_digest_39d8c15d25cebea6a8d0ca44c6daa370 ); Py_INCREF( const_unicode_digest_39d8c15d25cebea6a8d0ca44c6daa370 );
    const_unicode_digest_762250f47f3e83faca3d040e36ae971f = UNSTREAM_UNICODE( &constant_bin[ 719828 ], 5 );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 7, const_unicode_digest_762250f47f3e83faca3d040e36ae971f ); Py_INCREF( const_unicode_digest_762250f47f3e83faca3d040e36ae971f );
    const_unicode_plain_aua = UNSTREAM_UNICODE( &constant_bin[ 719833 ], 3 );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 8, const_unicode_plain_aua ); Py_INCREF( const_unicode_plain_aua );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 9, const_unicode_plain_ele ); Py_INCREF( const_unicode_plain_ele );
    const_unicode_plain_iua = UNSTREAM_UNICODE( &constant_bin[ 719836 ], 3 );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 10, const_unicode_plain_iua ); Py_INCREF( const_unicode_plain_iua );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 11, const_unicode_plain_iei ); Py_INCREF( const_unicode_plain_iei );
    const_unicode_plain_ile = UNSTREAM_UNICODE( &constant_bin[ 657 ], 3 );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 12, const_unicode_plain_ile ); Py_INCREF( const_unicode_plain_ile );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 13, const_unicode_plain_ul ); Py_INCREF( const_unicode_plain_ul );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 14, const_unicode_plain_ea ); Py_INCREF( const_unicode_plain_ea );
    const_unicode_plain_ii = UNSTREAM_UNICODE( &constant_bin[ 80244 ], 2 );
    PyTuple_SET_ITEM( const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple, 15, const_unicode_plain_ii ); Py_INCREF( const_unicode_plain_ii );
    const_unicode_digest_beac4342d59d3a7b563dc5eede05b77a = UNSTREAM_UNICODE( &constant_bin[ 719839 ], 228 );
    const_str_plain_DutchStemmer = UNSTREAM_STRING( &constant_bin[ 715423 ], 12, 1 );
    const_unicode_digest_8d76742109b75e16413fd10dd7df36a8 = UNSTREAM_UNICODE( &constant_bin[ 720067 ], 4 );
    const_unicode_plain_han = UNSTREAM_UNICODE( &constant_bin[ 17210 ], 3 );
    const_tuple_unicode_plain_oj_unicode_plain_uj_tuple = PyTuple_New( 2 );
    const_unicode_plain_oj = UNSTREAM_UNICODE( &constant_bin[ 1578 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_oj_unicode_plain_uj_tuple, 0, const_unicode_plain_oj ); Py_INCREF( const_unicode_plain_oj );
    const_unicode_plain_uj = UNSTREAM_UNICODE( &constant_bin[ 720071 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_oj_unicode_plain_uj_tuple, 1, const_unicode_plain_uj ); Py_INCREF( const_unicode_plain_uj );
    const_unicode_plain_ism = UNSTREAM_UNICODE( &constant_bin[ 27957 ], 3 );
    const_tuple_5ef37cf62d4b1b7803a0fd96573db4b6_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_5ef37cf62d4b1b7803a0fd96573db4b6_tuple, 0, const_unicode_plain_i ); Py_INCREF( const_unicode_plain_i );
    const_unicode_digest_92ce353ad720e6b4883dcdd350ef2308 = UNSTREAM_UNICODE( &constant_bin[ 720073 ], 2 );
    PyTuple_SET_ITEM( const_tuple_5ef37cf62d4b1b7803a0fd96573db4b6_tuple, 1, const_unicode_digest_92ce353ad720e6b4883dcdd350ef2308 ); Py_INCREF( const_unicode_digest_92ce353ad720e6b4883dcdd350ef2308 );
    const_tuple_unicode_plain_heden_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_heden_tuple, 0, const_unicode_plain_heden ); Py_INCREF( const_unicode_plain_heden );
    const_str_plain__NorwegianStemmer__step2_suffixes = UNSTREAM_STRING( &constant_bin[ 720075 ], 33, 1 );
    const_tuple_unicode_plain_els_unicode_plain_lig_unicode_plain_ig_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_els_unicode_plain_lig_unicode_plain_ig_tuple, 0, const_unicode_plain_els ); Py_INCREF( const_unicode_plain_els );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_els_unicode_plain_lig_unicode_plain_ig_tuple, 1, const_unicode_plain_lig ); Py_INCREF( const_unicode_plain_lig );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_els_unicode_plain_lig_unicode_plain_ig_tuple, 2, const_unicode_plain_ig ); Py_INCREF( const_unicode_plain_ig );
    const_tuple_266f845d872b4f41fb35a7b88deb91d1_tuple = PyTuple_New( 3 );
    const_unicode_digest_739da3409ac9b0524adb17c087154e99 = UNSTREAM_UNICODE( &constant_bin[ 720108 ], 5 );
    PyTuple_SET_ITEM( const_tuple_266f845d872b4f41fb35a7b88deb91d1_tuple, 0, const_unicode_digest_739da3409ac9b0524adb17c087154e99 ); Py_INCREF( const_unicode_digest_739da3409ac9b0524adb17c087154e99 );
    const_unicode_digest_d1b48ed3a76ac644cab2c672b1d63969 = UNSTREAM_UNICODE( &constant_bin[ 720113 ], 5 );
    PyTuple_SET_ITEM( const_tuple_266f845d872b4f41fb35a7b88deb91d1_tuple, 1, const_unicode_digest_d1b48ed3a76ac644cab2c672b1d63969 ); Py_INCREF( const_unicode_digest_d1b48ed3a76ac644cab2c672b1d63969 );
    const_unicode_digest_38cc918aa65716ade119e9cb71f38954 = UNSTREAM_UNICODE( &constant_bin[ 720111 ], 4 );
    PyTuple_SET_ITEM( const_tuple_266f845d872b4f41fb35a7b88deb91d1_tuple, 2, const_unicode_digest_38cc918aa65716ade119e9cb71f38954 ); Py_INCREF( const_unicode_digest_38cc918aa65716ade119e9cb71f38954 );
    const_tuple_11a34057217f37049e02e1d6509e49b5_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_11a34057217f37049e02e1d6509e49b5_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_11a34057217f37049e02e1d6509e49b5_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_11a34057217f37049e02e1d6509e49b5_tuple, 2, const_str_plain_step1_success ); Py_INCREF( const_str_plain_step1_success );
    const_str_plain_rv_ending_found = UNSTREAM_STRING( &constant_bin[ 720118 ], 15, 1 );
    PyTuple_SET_ITEM( const_tuple_11a34057217f37049e02e1d6509e49b5_tuple, 3, const_str_plain_rv_ending_found ); Py_INCREF( const_str_plain_rv_ending_found );
    const_str_plain_step2a_success = UNSTREAM_STRING( &constant_bin[ 720133 ], 14, 1 );
    PyTuple_SET_ITEM( const_tuple_11a34057217f37049e02e1d6509e49b5_tuple, 4, const_str_plain_step2a_success ); Py_INCREF( const_str_plain_step2a_success );
    const_str_plain_step2b_success = UNSTREAM_STRING( &constant_bin[ 720147 ], 14, 1 );
    PyTuple_SET_ITEM( const_tuple_11a34057217f37049e02e1d6509e49b5_tuple, 5, const_str_plain_step2b_success ); Py_INCREF( const_str_plain_step2b_success );
    PyTuple_SET_ITEM( const_tuple_11a34057217f37049e02e1d6509e49b5_tuple, 6, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_11a34057217f37049e02e1d6509e49b5_tuple, 7, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_11a34057217f37049e02e1d6509e49b5_tuple, 8, const_str_plain_r2 ); Py_INCREF( const_str_plain_r2 );
    PyTuple_SET_ITEM( const_tuple_11a34057217f37049e02e1d6509e49b5_tuple, 9, const_str_plain_rv ); Py_INCREF( const_str_plain_rv );
    PyTuple_SET_ITEM( const_tuple_11a34057217f37049e02e1d6509e49b5_tuple, 10, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    const_unicode_plain_yv = UNSTREAM_UNICODE( &constant_bin[ 294358 ], 2 );
    const_str_plain_SwedishStemmer = UNSTREAM_STRING( &constant_bin[ 715677 ], 14, 1 );
    const_unicode_plain_kk = UNSTREAM_UNICODE( &constant_bin[ 173617 ], 2 );
    const_unicode_digest_a9e8d2a2a8d68bee730286a6aab6c160 = UNSTREAM_UNICODE( &constant_bin[ 715779 ], 4 );
    const_unicode_digest_84a0b5e9b34f1ec00ad17f36447d4895 = UNSTREAM_UNICODE( &constant_bin[ 720161 ], 2 );
    const_tuple_unicode_plain_ig_unicode_plain_ik_unicode_plain_isch_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ig_unicode_plain_ik_unicode_plain_isch_tuple, 0, const_unicode_plain_ig ); Py_INCREF( const_unicode_plain_ig );
    const_unicode_plain_ik = UNSTREAM_UNICODE( &constant_bin[ 647 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ig_unicode_plain_ik_unicode_plain_isch_tuple, 1, const_unicode_plain_ik ); Py_INCREF( const_unicode_plain_ik );
    const_unicode_plain_isch = UNSTREAM_UNICODE( &constant_bin[ 720163 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ig_unicode_plain_ik_unicode_plain_isch_tuple, 2, const_unicode_plain_isch ); Py_INCREF( const_unicode_plain_isch );
    const_tuple_e49dd29108b08f32825ced55c26fcdf3_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_e49dd29108b08f32825ced55c26fcdf3_tuple, 0, const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 ); Py_INCREF( const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 );
    PyTuple_SET_ITEM( const_tuple_e49dd29108b08f32825ced55c26fcdf3_tuple, 1, const_unicode_digest_d087aa050a38508b1f0a500c1d21aa2c ); Py_INCREF( const_unicode_digest_d087aa050a38508b1f0a500c1d21aa2c );
    const_tuple_a1823a300173c705318d9829a719d4d6_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_a1823a300173c705318d9829a719d4d6_tuple, 0, const_unicode_plain_en ); Py_INCREF( const_unicode_plain_en );
    PyTuple_SET_ITEM( const_tuple_a1823a300173c705318d9829a719d4d6_tuple, 1, const_unicode_plain_es ); Py_INCREF( const_unicode_plain_es );
    const_unicode_digest_78fba20916662e73727fa1ccf67f50cf = UNSTREAM_UNICODE( &constant_bin[ 720167 ], 4 );
    PyTuple_SET_ITEM( const_tuple_a1823a300173c705318d9829a719d4d6_tuple, 2, const_unicode_digest_78fba20916662e73727fa1ccf67f50cf ); Py_INCREF( const_unicode_digest_78fba20916662e73727fa1ccf67f50cf );
    const_unicode_plain_emos = UNSTREAM_UNICODE( &constant_bin[ 341702 ], 4 );
    PyTuple_SET_ITEM( const_tuple_a1823a300173c705318d9829a719d4d6_tuple, 3, const_unicode_plain_emos ); Py_INCREF( const_unicode_plain_emos );
    const_unicode_digest_78cdf5f405cf341f59d014e5862c6bc7 = UNSTREAM_UNICODE( &constant_bin[ 720171 ], 8 );
    const_tuple_327bd67ed55c6e3030521e5592ac2208_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_327bd67ed55c6e3030521e5592ac2208_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_327bd67ed55c6e3030521e5592ac2208_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_327bd67ed55c6e3030521e5592ac2208_tuple, 2, const_str_plain_step1_success ); Py_INCREF( const_str_plain_step1_success );
    PyTuple_SET_ITEM( const_tuple_327bd67ed55c6e3030521e5592ac2208_tuple, 3, const_str_plain_step2_success ); Py_INCREF( const_str_plain_step2_success );
    PyTuple_SET_ITEM( const_tuple_327bd67ed55c6e3030521e5592ac2208_tuple, 4, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_327bd67ed55c6e3030521e5592ac2208_tuple, 5, const_str_plain_r2 ); Py_INCREF( const_str_plain_r2 );
    PyTuple_SET_ITEM( const_tuple_327bd67ed55c6e3030521e5592ac2208_tuple, 6, const_str_plain_rv ); Py_INCREF( const_str_plain_rv );
    PyTuple_SET_ITEM( const_tuple_327bd67ed55c6e3030521e5592ac2208_tuple, 7, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    const_unicode_plain_ya = UNSTREAM_UNICODE( &constant_bin[ 12742 ], 2 );
    const_unicode_plain_yo = UNSTREAM_UNICODE( &constant_bin[ 7847 ], 2 );
    const_tuple_unicode_digest_ed35aff149c3cd50410b4d18ad86e792_tuple = PyTuple_New( 1 );
    const_unicode_digest_ed35aff149c3cd50410b4d18ad86e792 = UNSTREAM_UNICODE( &constant_bin[ 720179 ], 22 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_ed35aff149c3cd50410b4d18ad86e792_tuple, 0, const_unicode_digest_ed35aff149c3cd50410b4d18ad86e792 ); Py_INCREF( const_unicode_digest_ed35aff149c3cd50410b4d18ad86e792 );
    const_tuple_unicode_digest_a6a1250a415661d97d62909534ab83c0_tuple = PyTuple_New( 1 );
    const_unicode_digest_a6a1250a415661d97d62909534ab83c0 = UNSTREAM_UNICODE( &constant_bin[ 720201 ], 23 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_a6a1250a415661d97d62909534ab83c0_tuple, 0, const_unicode_digest_a6a1250a415661d97d62909534ab83c0 ); Py_INCREF( const_unicode_digest_a6a1250a415661d97d62909534ab83c0 );
    const_unicode_digest_56efed22f0179fa5c50d8d8a65abb7a7 = UNSTREAM_UNICODE( &constant_bin[ 720224 ], 87 );
    const_unicode_plain_enze = UNSTREAM_UNICODE( &constant_bin[ 720311 ], 4 );
    const_unicode_plain_ator = UNSTREAM_UNICODE( &constant_bin[ 5172 ], 4 );
    const_tuple_33926bbcf7613052ed66bc027b49957d_tuple = PyTuple_New( 4 );
    const_unicode_plain_azione = UNSTREAM_UNICODE( &constant_bin[ 720315 ], 6 );
    PyTuple_SET_ITEM( const_tuple_33926bbcf7613052ed66bc027b49957d_tuple, 0, const_unicode_plain_azione ); Py_INCREF( const_unicode_plain_azione );
    const_unicode_plain_azioni = UNSTREAM_UNICODE( &constant_bin[ 720321 ], 6 );
    PyTuple_SET_ITEM( const_tuple_33926bbcf7613052ed66bc027b49957d_tuple, 1, const_unicode_plain_azioni ); Py_INCREF( const_unicode_plain_azioni );
    const_unicode_plain_atore = UNSTREAM_UNICODE( &constant_bin[ 720327 ], 5 );
    PyTuple_SET_ITEM( const_tuple_33926bbcf7613052ed66bc027b49957d_tuple, 2, const_unicode_plain_atore ); Py_INCREF( const_unicode_plain_atore );
    const_unicode_plain_atori = UNSTREAM_UNICODE( &constant_bin[ 247855 ], 5 );
    PyTuple_SET_ITEM( const_tuple_33926bbcf7613052ed66bc027b49957d_tuple, 3, const_unicode_plain_atori ); Py_INCREF( const_unicode_plain_atori );
    const_tuple_ef5ebc574a79dfd720fdbeab30f99197_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_ef5ebc574a79dfd720fdbeab30f99197_tuple, 0, const_unicode_plain_os ); Py_INCREF( const_unicode_plain_os );
    PyTuple_SET_ITEM( const_tuple_ef5ebc574a79dfd720fdbeab30f99197_tuple, 1, const_unicode_plain_a ); Py_INCREF( const_unicode_plain_a );
    PyTuple_SET_ITEM( const_tuple_ef5ebc574a79dfd720fdbeab30f99197_tuple, 2, const_unicode_plain_i ); Py_INCREF( const_unicode_plain_i );
    PyTuple_SET_ITEM( const_tuple_ef5ebc574a79dfd720fdbeab30f99197_tuple, 3, const_unicode_plain_o ); Py_INCREF( const_unicode_plain_o );
    PyTuple_SET_ITEM( const_tuple_ef5ebc574a79dfd720fdbeab30f99197_tuple, 4, const_unicode_digest_00029bab94d4fae3bad9b98113cef03c ); Py_INCREF( const_unicode_digest_00029bab94d4fae3bad9b98113cef03c );
    const_unicode_digest_0660733d03d3aa101753bd2da6072150 = UNSTREAM_UNICODE( &constant_bin[ 719636 ], 2 );
    PyTuple_SET_ITEM( const_tuple_ef5ebc574a79dfd720fdbeab30f99197_tuple, 5, const_unicode_digest_0660733d03d3aa101753bd2da6072150 ); Py_INCREF( const_unicode_digest_0660733d03d3aa101753bd2da6072150 );
    const_unicode_digest_a0c07d63a0baa715c0844159f987ebc4 = UNSTREAM_UNICODE( &constant_bin[ 719638 ], 2 );
    PyTuple_SET_ITEM( const_tuple_ef5ebc574a79dfd720fdbeab30f99197_tuple, 6, const_unicode_digest_a0c07d63a0baa715c0844159f987ebc4 ); Py_INCREF( const_unicode_digest_a0c07d63a0baa715c0844159f987ebc4 );
    const_tuple_3299f567526f0559f6efbe4d0e04ff65_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_3299f567526f0559f6efbe4d0e04ff65_tuple, 0, const_unicode_plain_ern ); Py_INCREF( const_unicode_plain_ern );
    const_unicode_plain_em = UNSTREAM_UNICODE( &constant_bin[ 870 ], 2 );
    PyTuple_SET_ITEM( const_tuple_3299f567526f0559f6efbe4d0e04ff65_tuple, 1, const_unicode_plain_em ); Py_INCREF( const_unicode_plain_em );
    PyTuple_SET_ITEM( const_tuple_3299f567526f0559f6efbe4d0e04ff65_tuple, 2, const_unicode_plain_er ); Py_INCREF( const_unicode_plain_er );
    PyTuple_SET_ITEM( const_tuple_3299f567526f0559f6efbe4d0e04ff65_tuple, 3, const_unicode_plain_en ); Py_INCREF( const_unicode_plain_en );
    PyTuple_SET_ITEM( const_tuple_3299f567526f0559f6efbe4d0e04ff65_tuple, 4, const_unicode_plain_es ); Py_INCREF( const_unicode_plain_es );
    PyTuple_SET_ITEM( const_tuple_3299f567526f0559f6efbe4d0e04ff65_tuple, 5, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    PyTuple_SET_ITEM( const_tuple_3299f567526f0559f6efbe4d0e04ff65_tuple, 6, const_unicode_plain_s ); Py_INCREF( const_unicode_plain_s );
    const_str_plain__ItalianStemmer__step2_suffixes = UNSTREAM_STRING( &constant_bin[ 720332 ], 31, 1 );
    const_unicode_plain_lijk = UNSTREAM_UNICODE( &constant_bin[ 720363 ], 4 );
    const_unicode_plain_iez = UNSTREAM_UNICODE( &constant_bin[ 714594 ], 3 );
    const_unicode_plain_nn = UNSTREAM_UNICODE( &constant_bin[ 1992 ], 2 );
    const_tuple_unicode_plain_ci_tuple = PyTuple_New( 1 );
    const_unicode_plain_ci = UNSTREAM_UNICODE( &constant_bin[ 544 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ci_tuple, 0, const_unicode_plain_ci ); Py_INCREF( const_unicode_plain_ci );
    const_unicode_digest_323b65de5a003fb4f290a568d16c2cda = UNSTREAM_UNICODE( &constant_bin[ 715805 ], 3 );
    const_unicode_digest_e6b89c1d38160e6677c4bb9f081e6c5c = UNSTREAM_UNICODE( &constant_bin[ 720367 ], 604 );
    const_tuple_55e4d7c7908ecacbc7c86ad971c24be6_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_55e4d7c7908ecacbc7c86ad971c24be6_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_55e4d7c7908ecacbc7c86ad971c24be6_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_55e4d7c7908ecacbc7c86ad971c24be6_tuple, 2, const_str_plain_vowels ); Py_INCREF( const_str_plain_vowels );
    PyTuple_SET_ITEM( const_tuple_55e4d7c7908ecacbc7c86ad971c24be6_tuple, 3, const_str_plain_rv ); Py_INCREF( const_str_plain_rv );
    PyTuple_SET_ITEM( const_tuple_55e4d7c7908ecacbc7c86ad971c24be6_tuple, 4, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_tuple_496ad5371573b8369845b15055770b5e_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 720971 ], 321 );
    const_unicode_digest_05aa8be1d717976fd4c7556b7bb2385d = UNSTREAM_UNICODE( &constant_bin[ 721292 ], 4 );
    const_tuple_6575b8f2b70c0cddeffa84d666a3e963_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_6575b8f2b70c0cddeffa84d666a3e963_tuple, 0, const_unicode_digest_39d8c15d25cebea6a8d0ca44c6daa370 ); Py_INCREF( const_unicode_digest_39d8c15d25cebea6a8d0ca44c6daa370 );
    PyTuple_SET_ITEM( const_tuple_6575b8f2b70c0cddeffa84d666a3e963_tuple, 1, const_unicode_digest_762250f47f3e83faca3d040e36ae971f ); Py_INCREF( const_unicode_digest_762250f47f3e83faca3d040e36ae971f );
    const_unicode_plain_selo = UNSTREAM_UNICODE( &constant_bin[ 721296 ], 4 );
    const_str_plain__FrenchStemmer__vowels = UNSTREAM_STRING( &constant_bin[ 721300 ], 22, 1 );
    const_tuple_631b7a7920642fcb1d2abc186f9e311c_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_631b7a7920642fcb1d2abc186f9e311c_tuple, 0, const_unicode_plain_ii ); Py_INCREF( const_unicode_plain_ii );
    PyTuple_SET_ITEM( const_tuple_631b7a7920642fcb1d2abc186f9e311c_tuple, 1, const_unicode_plain_iua ); Py_INCREF( const_unicode_plain_iua );
    PyTuple_SET_ITEM( const_tuple_631b7a7920642fcb1d2abc186f9e311c_tuple, 2, const_unicode_plain_iei ); Py_INCREF( const_unicode_plain_iei );
    PyTuple_SET_ITEM( const_tuple_631b7a7920642fcb1d2abc186f9e311c_tuple, 3, const_unicode_plain_iile ); Py_INCREF( const_unicode_plain_iile );
    PyTuple_SET_ITEM( const_tuple_631b7a7920642fcb1d2abc186f9e311c_tuple, 4, const_unicode_plain_iilor ); Py_INCREF( const_unicode_plain_iilor );
    PyTuple_SET_ITEM( const_tuple_631b7a7920642fcb1d2abc186f9e311c_tuple, 5, const_unicode_plain_ilor ); Py_INCREF( const_unicode_plain_ilor );
    const_tuple_227a81f8638c04593034a84935ffc4b7_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 721322 ], 431 );
    const_str_plain__RussianStemmer__roman_to_cyrillic = UNSTREAM_STRING( &constant_bin[ 721753 ], 34, 1 );
    const_tuple_unicode_plain_hungarian_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_hungarian_tuple, 0, const_unicode_plain_hungarian ); Py_INCREF( const_unicode_plain_hungarian );
    const_str_plain__HungarianStemmer__step1_suffixes = UNSTREAM_STRING( &constant_bin[ 721787 ], 33, 1 );
    const_unicode_digest_11b808f19a0a6a4942b1533e0c8e4af1 = UNSTREAM_UNICODE( &constant_bin[ 721820 ], 2 );
    const_tuple_33d056d1a7b7183e31308cd4f61243bb_tuple = PyTuple_New( 2 );
    const_unicode_digest_1240ae692d651c5d1539c59fdc48f057 = UNSTREAM_UNICODE( &constant_bin[ 721822 ], 2 );
    PyTuple_SET_ITEM( const_tuple_33d056d1a7b7183e31308cd4f61243bb_tuple, 0, const_unicode_digest_1240ae692d651c5d1539c59fdc48f057 ); Py_INCREF( const_unicode_digest_1240ae692d651c5d1539c59fdc48f057 );
    PyTuple_SET_ITEM( const_tuple_33d056d1a7b7183e31308cd4f61243bb_tuple, 1, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    const_unicode_plain_swedish = UNSTREAM_UNICODE( &constant_bin[ 721824 ], 7 );
    const_unicode_plain_ost = UNSTREAM_UNICODE( &constant_bin[ 10005 ], 3 );
    const_tuple_e8aad01d4693334cb34df20b3f260563_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_e8aad01d4693334cb34df20b3f260563_tuple, 0, const_unicode_digest_92ce353ad720e6b4883dcdd350ef2308 ); Py_INCREF( const_unicode_digest_92ce353ad720e6b4883dcdd350ef2308 );
    PyTuple_SET_ITEM( const_tuple_e8aad01d4693334cb34df20b3f260563_tuple, 1, const_unicode_plain_i ); Py_INCREF( const_unicode_plain_i );
    const_tuple_unicode_plain_ando_unicode_plain_endo_tuple = PyTuple_New( 2 );
    const_unicode_plain_ando = UNSTREAM_UNICODE( &constant_bin[ 111898 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ando_unicode_plain_endo_tuple, 0, const_unicode_plain_ando ); Py_INCREF( const_unicode_plain_ando );
    const_unicode_plain_endo = UNSTREAM_UNICODE( &constant_bin[ 122181 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ando_unicode_plain_endo_tuple, 1, const_unicode_plain_endo ); Py_INCREF( const_unicode_plain_endo );
    const_unicode_plain_itiva = UNSTREAM_UNICODE( &constant_bin[ 715312 ], 5 );
    const_unicode_plain_itive = UNSTREAM_UNICODE( &constant_bin[ 5814 ], 5 );
    const_unicode_digest_83c9e37d6e93d1aeb2f519c8d23ab8a3 = UNSTREAM_UNICODE( &constant_bin[ 721831 ], 4 );
    const_tuple_unicode_digest_2d6c9d5dde7e4950753696b6ed5a35ff_tuple = PyTuple_New( 1 );
    const_unicode_digest_2d6c9d5dde7e4950753696b6ed5a35ff = UNSTREAM_UNICODE( &constant_bin[ 721835 ], 20 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_2d6c9d5dde7e4950753696b6ed5a35ff_tuple, 0, const_unicode_digest_2d6c9d5dde7e4950753696b6ed5a35ff ); Py_INCREF( const_unicode_digest_2d6c9d5dde7e4950753696b6ed5a35ff );
    const_unicode_plain_erais = UNSTREAM_UNICODE( &constant_bin[ 721855 ], 5 );
    const_unicode_digest_c19ed4ecc1fef767495e0e340b43a2ea = UNSTREAM_UNICODE( &constant_bin[ 721860 ], 229 );
    const_unicode_plain_enza = UNSTREAM_UNICODE( &constant_bin[ 722089 ], 4 );
    const_str_plain__ItalianStemmer__vowels = UNSTREAM_STRING( &constant_bin[ 722093 ], 23, 1 );
    const_str_plain__NorwegianStemmer__step1_suffixes = UNSTREAM_STRING( &constant_bin[ 722116 ], 33, 1 );
    const_tuple_unicode_plain_logie_unicode_plain_logies_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_logie_unicode_plain_logies_tuple, 0, const_unicode_plain_logie ); Py_INCREF( const_unicode_plain_logie );
    const_unicode_plain_logies = UNSTREAM_UNICODE( &constant_bin[ 721404 ], 6 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_logie_unicode_plain_logies_tuple, 1, const_unicode_plain_logies ); Py_INCREF( const_unicode_plain_logies );
    const_unicode_digest_56ba0b0039dcafb80583c021ac6f64cc = UNSTREAM_UNICODE( &constant_bin[ 33732 ], 70 );
    const_tuple_b3ce605d0c06c1c8ad0f5879320a1b91_tuple = PyTuple_New( 2 );
    const_unicode_digest_3bf0195de53ad8c043672d1cd63637f3 = UNSTREAM_UNICODE( &constant_bin[ 722149 ], 2 );
    PyTuple_SET_ITEM( const_tuple_b3ce605d0c06c1c8ad0f5879320a1b91_tuple, 0, const_unicode_digest_3bf0195de53ad8c043672d1cd63637f3 ); Py_INCREF( const_unicode_digest_3bf0195de53ad8c043672d1cd63637f3 );
    PyTuple_SET_ITEM( const_tuple_b3ce605d0c06c1c8ad0f5879320a1b91_tuple, 1, const_unicode_digest_ce9df3550e776a650bc3e9bdd7e6ddd6 ); Py_INCREF( const_unicode_digest_ce9df3550e776a650bc3e9bdd7e6ddd6 );
    const_unicode_digest_e5b7e954d23d1556af222cafe527afe3 = UNSTREAM_UNICODE( &constant_bin[ 722151 ], 10 );
    const_unicode_digest_ac56d9555ca8849deb4827d87d58e877 = UNSTREAM_UNICODE( &constant_bin[ 719649 ], 3 );
    const_tuple_tuple_unicode_plain_oj_unicode_plain_uj_tuple_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_tuple_unicode_plain_oj_unicode_plain_uj_tuple_tuple, 0, const_tuple_unicode_plain_oj_unicode_plain_uj_tuple ); Py_INCREF( const_tuple_unicode_plain_oj_unicode_plain_uj_tuple );
    const_unicode_digest_918613226874eb7500a1f3d0c51ed063 = UNSTREAM_UNICODE( &constant_bin[ 722161 ], 2 );
    const_str_plain_danish = UNSTREAM_STRING( &constant_bin[ 722163 ], 6, 1 );
    const_unicode_plain_bcdfghjlmnoprtvyz = UNSTREAM_UNICODE( &constant_bin[ 722169 ], 17 );
    const_unicode_digest_e1963e71512752f09607c5e249411d53 = UNSTREAM_UNICODE( &constant_bin[ 722186 ], 5 );
    const_unicode_digest_d0fe3dadce72905b5ca3596d45c99bde = UNSTREAM_UNICODE( &constant_bin[ 50475 ], 30 );
    const_tuple_unicode_digest_bacc7c1e69811c177681ce974f1a7873_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_bacc7c1e69811c177681ce974f1a7873_tuple, 0, const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 ); Py_INCREF( const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 );
    const_unicode_digest_dafdd63e1b33722ad1f47fddf4c4438c = UNSTREAM_UNICODE( &constant_bin[ 722191 ], 7 );
    const_tuple_27af1ba8496868e7ab5749bd0fe10cda_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_27af1ba8496868e7ab5749bd0fe10cda_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_27af1ba8496868e7ab5749bd0fe10cda_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_27af1ba8496868e7ab5749bd0fe10cda_tuple, 2, const_str_plain_step2_success ); Py_INCREF( const_str_plain_step2_success );
    PyTuple_SET_ITEM( const_tuple_27af1ba8496868e7ab5749bd0fe10cda_tuple, 3, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_27af1ba8496868e7ab5749bd0fe10cda_tuple, 4, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_27af1ba8496868e7ab5749bd0fe10cda_tuple, 5, const_str_plain_r2 ); Py_INCREF( const_str_plain_r2 );
    PyTuple_SET_ITEM( const_tuple_27af1ba8496868e7ab5749bd0fe10cda_tuple, 6, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    const_tuple_cea637d267ce9a15425f626e76e7c2b7_tuple = PyTuple_New( 1 );
    const_tuple_unicode_plain_par_unicode_plain_col_unicode_plain_tap_tuple = PyTuple_New( 3 );
    const_unicode_plain_par = UNSTREAM_UNICODE( &constant_bin[ 1953 ], 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_par_unicode_plain_col_unicode_plain_tap_tuple, 0, const_unicode_plain_par ); Py_INCREF( const_unicode_plain_par );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_par_unicode_plain_col_unicode_plain_tap_tuple, 1, const_unicode_plain_col ); Py_INCREF( const_unicode_plain_col );
    const_unicode_plain_tap = UNSTREAM_UNICODE( &constant_bin[ 637973 ], 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_par_unicode_plain_col_unicode_plain_tap_tuple, 2, const_unicode_plain_tap ); Py_INCREF( const_unicode_plain_tap );
    PyTuple_SET_ITEM( const_tuple_cea637d267ce9a15425f626e76e7c2b7_tuple, 0, const_tuple_unicode_plain_par_unicode_plain_col_unicode_plain_tap_tuple ); Py_INCREF( const_tuple_unicode_plain_par_unicode_plain_col_unicode_plain_tap_tuple );
    const_unicode_digest_527d908fad8e209f9a2669c6e37e1fbb = UNSTREAM_UNICODE( &constant_bin[ 715198 ], 6 );
    const_tuple_2fb5854997cab90a4d05ff60aa40c954_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_2fb5854997cab90a4d05ff60aa40c954_tuple, 0, const_unicode_plain_b ); Py_INCREF( const_unicode_plain_b );
    PyTuple_SET_ITEM( const_tuple_2fb5854997cab90a4d05ff60aa40c954_tuple, 1, const_unicode_digest_3f3cd3bd59d11c8ca1bb917c4367f3d2 ); Py_INCREF( const_unicode_digest_3f3cd3bd59d11c8ca1bb917c4367f3d2 );
    const_unicode_digest_aade7c92617df6f0048d1e16c7b6a714 = UNSTREAM_UNICODE( &constant_bin[ 722198 ], 5 );
    const_unicode_plain_yais = UNSTREAM_UNICODE( &constant_bin[ 722203 ], 4 );
    const_unicode_plain_elig = UNSTREAM_UNICODE( &constant_bin[ 722207 ], 4 );
    const_tuple_b77ab985c2bf34760b2abc78cae789df_tuple = PyTuple_New( 2 );
    const_unicode_digest_1769a3ecb0d0a23578d5a7518888e81f = UNSTREAM_UNICODE( &constant_bin[ 722211 ], 2 );
    PyTuple_SET_ITEM( const_tuple_b77ab985c2bf34760b2abc78cae789df_tuple, 0, const_unicode_digest_1769a3ecb0d0a23578d5a7518888e81f ); Py_INCREF( const_unicode_digest_1769a3ecb0d0a23578d5a7518888e81f );
    PyTuple_SET_ITEM( const_tuple_b77ab985c2bf34760b2abc78cae789df_tuple, 1, const_unicode_digest_049db6e58dec8faeb2bd7cd1632b9df3 ); Py_INCREF( const_unicode_digest_049db6e58dec8faeb2bd7cd1632b9df3 );
    const_tuple_d7e10d442828c304a208e17e88dbafe5_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_d7e10d442828c304a208e17e88dbafe5_tuple, 0, const_unicode_plain_ivitate ); Py_INCREF( const_unicode_plain_ivitate );
    PyTuple_SET_ITEM( const_tuple_d7e10d442828c304a208e17e88dbafe5_tuple, 1, const_unicode_plain_ivitati ); Py_INCREF( const_unicode_plain_ivitati );
    const_unicode_digest_193ff3cb4343a982e9320f539bb570af = UNSTREAM_UNICODE( &constant_bin[ 715075 ], 7 );
    PyTuple_SET_ITEM( const_tuple_d7e10d442828c304a208e17e88dbafe5_tuple, 2, const_unicode_digest_193ff3cb4343a982e9320f539bb570af ); Py_INCREF( const_unicode_digest_193ff3cb4343a982e9320f539bb570af );
    const_unicode_digest_e66bb7aa790ad8efc652e279d75c52ea = UNSTREAM_UNICODE( &constant_bin[ 715011 ], 9 );
    PyTuple_SET_ITEM( const_tuple_d7e10d442828c304a208e17e88dbafe5_tuple, 3, const_unicode_digest_e66bb7aa790ad8efc652e279d75c52ea ); Py_INCREF( const_unicode_digest_e66bb7aa790ad8efc652e279d75c52ea );
    const_unicode_digest_58efb8b3f5f4b4f6b7343c1f0bd121ad = UNSTREAM_UNICODE( &constant_bin[ 722213 ], 4 );
    const_tuple_dc95324d683a695f32532b06ec019a96_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_dc95324d683a695f32532b06ec019a96_tuple, 0, const_unicode_plain_mpi ); Py_INCREF( const_unicode_plain_mpi );
    PyTuple_SET_ITEM( const_tuple_dc95324d683a695f32532b06ec019a96_tuple, 1, const_unicode_plain_mpa ); Py_INCREF( const_unicode_plain_mpa );
    PyTuple_SET_ITEM( const_tuple_dc95324d683a695f32532b06ec019a96_tuple, 2, const_unicode_digest_10f4da5a1f74722239d506d8ff0d8bd8 ); Py_INCREF( const_unicode_digest_10f4da5a1f74722239d506d8ff0d8bd8 );
    PyTuple_SET_ITEM( const_tuple_dc95324d683a695f32532b06ec019a96_tuple, 3, const_unicode_plain_mmi ); Py_INCREF( const_unicode_plain_mmi );
    PyTuple_SET_ITEM( const_tuple_dc95324d683a695f32532b06ec019a96_tuple, 4, const_unicode_plain_mma ); Py_INCREF( const_unicode_plain_mma );
    PyTuple_SET_ITEM( const_tuple_dc95324d683a695f32532b06ec019a96_tuple, 5, const_unicode_digest_594ca15359915ea94297b153a89c57cb ); Py_INCREF( const_unicode_digest_594ca15359915ea94297b153a89c57cb );
    const_tuple_effd7a5e0d0cc87a372a9c76d2f302db_tuple = PyTuple_New( 4 );
    const_unicode_plain_iva = UNSTREAM_UNICODE( &constant_bin[ 7430 ], 3 );
    PyTuple_SET_ITEM( const_tuple_effd7a5e0d0cc87a372a9c76d2f302db_tuple, 0, const_unicode_plain_iva ); Py_INCREF( const_unicode_plain_iva );
    PyTuple_SET_ITEM( const_tuple_effd7a5e0d0cc87a372a9c76d2f302db_tuple, 1, const_unicode_plain_ivo ); Py_INCREF( const_unicode_plain_ivo );
    const_unicode_plain_ivas = UNSTREAM_UNICODE( &constant_bin[ 722217 ], 4 );
    PyTuple_SET_ITEM( const_tuple_effd7a5e0d0cc87a372a9c76d2f302db_tuple, 2, const_unicode_plain_ivas ); Py_INCREF( const_unicode_plain_ivas );
    const_unicode_plain_ivos = UNSTREAM_UNICODE( &constant_bin[ 722221 ], 4 );
    PyTuple_SET_ITEM( const_tuple_effd7a5e0d0cc87a372a9c76d2f302db_tuple, 3, const_unicode_plain_ivos ); Py_INCREF( const_unicode_plain_ivos );
    const_str_plain__ItalianStemmer__step1_suffixes = UNSTREAM_STRING( &constant_bin[ 722225 ], 31, 1 );
    const_tuple_32696cb57069936efe3e669be2a205d8_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_32696cb57069936efe3e669be2a205d8_tuple, 0, const_unicode_plain_ch ); Py_INCREF( const_unicode_plain_ch );
    PyTuple_SET_ITEM( const_tuple_32696cb57069936efe3e669be2a205d8_tuple, 1, const_unicode_digest_8b50c6d061093d206ae232d63ab77e8f ); Py_INCREF( const_unicode_digest_8b50c6d061093d206ae232d63ab77e8f );
    const_unicode_plain_german = UNSTREAM_UNICODE( &constant_bin[ 143526 ], 6 );
    const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple = PyTuple_New( 12 );
    PyTuple_SET_ITEM( const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    const_str_plain_chr_exceeded = UNSTREAM_STRING( &constant_bin[ 722256 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple, 2, const_str_plain_chr_exceeded ); Py_INCREF( const_str_plain_chr_exceeded );
    PyTuple_SET_ITEM( const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple, 3, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple, 4, const_str_plain_step1_success ); Py_INCREF( const_str_plain_step1_success );
    const_str_plain_adjectival_removed = UNSTREAM_STRING( &constant_bin[ 722268 ], 18, 1 );
    PyTuple_SET_ITEM( const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple, 5, const_str_plain_adjectival_removed ); Py_INCREF( const_str_plain_adjectival_removed );
    const_str_plain_verb_removed = UNSTREAM_STRING( &constant_bin[ 722286 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple, 6, const_str_plain_verb_removed ); Py_INCREF( const_str_plain_verb_removed );
    const_str_plain_undouble_success = UNSTREAM_STRING( &constant_bin[ 722298 ], 16, 1 );
    PyTuple_SET_ITEM( const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple, 7, const_str_plain_undouble_success ); Py_INCREF( const_str_plain_undouble_success );
    const_str_plain_superlative_removed = UNSTREAM_STRING( &constant_bin[ 722314 ], 19, 1 );
    PyTuple_SET_ITEM( const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple, 8, const_str_plain_superlative_removed ); Py_INCREF( const_str_plain_superlative_removed );
    PyTuple_SET_ITEM( const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple, 9, const_str_plain_rv ); Py_INCREF( const_str_plain_rv );
    PyTuple_SET_ITEM( const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple, 10, const_str_plain_r2 ); Py_INCREF( const_str_plain_r2 );
    PyTuple_SET_ITEM( const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple, 11, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    const_unicode_digest_b13fc523c6330c593033192d322fd753 = UNSTREAM_UNICODE( &constant_bin[ 722333 ], 2 );
    const_unicode_digest_707dc82a3c2378a70dac038f187bd1f8 = UNSTREAM_UNICODE( &constant_bin[ 722335 ], 2 );
    const_tuple_7c19c3129287ed1c05bdd2c2c1c5213c_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 722337 ], 145 );
    const_unicode_digest_47b81fed7d8bf3e0cf07fd58da1fea1c = UNSTREAM_UNICODE( &constant_bin[ 722482 ], 97 );
    const_unicode_digest_56e09ae969d5eb64a4ae0231607b3734 = UNSTREAM_UNICODE( &constant_bin[ 722579 ], 10 );
    const_unicode_digest_b428152830fa2709bfae80a9618c6525 = UNSTREAM_UNICODE( &constant_bin[ 722589 ], 407 );
    const_tuple_168f2837f58da07ff91508cb546bdebf_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_168f2837f58da07ff91508cb546bdebf_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_168f2837f58da07ff91508cb546bdebf_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_168f2837f58da07ff91508cb546bdebf_tuple, 2, const_str_plain_vowels ); Py_INCREF( const_str_plain_vowels );
    PyTuple_SET_ITEM( const_tuple_168f2837f58da07ff91508cb546bdebf_tuple, 3, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_168f2837f58da07ff91508cb546bdebf_tuple, 4, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_tuple_9b5feff1ee70654ffe342974cb86fce9_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_9b5feff1ee70654ffe342974cb86fce9_tuple, 0, const_unicode_plain_t ); Py_INCREF( const_unicode_plain_t );
    PyTuple_SET_ITEM( const_tuple_9b5feff1ee70654ffe342974cb86fce9_tuple, 1, const_unicode_digest_84a0b5e9b34f1ec00ad17f36447d4895 ); Py_INCREF( const_unicode_digest_84a0b5e9b34f1ec00ad17f36447d4895 );
    const_unicode_plain_aux = UNSTREAM_UNICODE( &constant_bin[ 714886 ], 3 );
    const_unicode_plain_issements = UNSTREAM_UNICODE( &constant_bin[ 721332 ], 9 );
    const_tuple_30882c6f62be8cc245864da0c792bb7b_tuple = PyTuple_New( 5 );
    const_unicode_digest_dee46c08fe759524caf6ceaf00034f8e = UNSTREAM_UNICODE( &constant_bin[ 722996 ], 6 );
    PyTuple_SET_ITEM( const_tuple_30882c6f62be8cc245864da0c792bb7b_tuple, 0, const_unicode_digest_dee46c08fe759524caf6ceaf00034f8e ); Py_INCREF( const_unicode_digest_dee46c08fe759524caf6ceaf00034f8e );
    const_unicode_digest_11c17579f864c163030088478b9d264d = UNSTREAM_UNICODE( &constant_bin[ 723002 ], 5 );
    PyTuple_SET_ITEM( const_tuple_30882c6f62be8cc245864da0c792bb7b_tuple, 1, const_unicode_digest_11c17579f864c163030088478b9d264d ); Py_INCREF( const_unicode_digest_11c17579f864c163030088478b9d264d );
    PyTuple_SET_ITEM( const_tuple_30882c6f62be8cc245864da0c792bb7b_tuple, 2, const_unicode_digest_579ae74eb0325e248521f748d0f47586 ); Py_INCREF( const_unicode_digest_579ae74eb0325e248521f748d0f47586 );
    PyTuple_SET_ITEM( const_tuple_30882c6f62be8cc245864da0c792bb7b_tuple, 3, const_unicode_digest_d76f5dd1beb8a75f9b91600948454899 ); Py_INCREF( const_unicode_digest_d76f5dd1beb8a75f9b91600948454899 );
    const_unicode_digest_ff100f00c919f6114253432c068b0fcb = UNSTREAM_UNICODE( &constant_bin[ 723007 ], 3 );
    PyTuple_SET_ITEM( const_tuple_30882c6f62be8cc245864da0c792bb7b_tuple, 4, const_unicode_digest_ff100f00c919f6114253432c068b0fcb ); Py_INCREF( const_unicode_digest_ff100f00c919f6114253432c068b0fcb );
    const_unicode_digest_5f92f4b226019badebfbef2c5e93e54a = UNSTREAM_UNICODE( &constant_bin[ 723010 ], 2 );
    const_unicode_plain_adora = UNSTREAM_UNICODE( &constant_bin[ 723012 ], 5 );
    const_tuple_unicode_digest_ffbcedbec480ba49ec103efa1145d4f8_tuple = PyTuple_New( 1 );
    const_unicode_digest_ffbcedbec480ba49ec103efa1145d4f8 = UNSTREAM_UNICODE( &constant_bin[ 723017 ], 22 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_ffbcedbec480ba49ec103efa1145d4f8_tuple, 0, const_unicode_digest_ffbcedbec480ba49ec103efa1145d4f8 ); Py_INCREF( const_unicode_digest_ffbcedbec480ba49ec103efa1145d4f8 );
    const_tuple_c8d27353a56896ad9935ffe2c05e32b1_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_c8d27353a56896ad9935ffe2c05e32b1_tuple, 0, const_unicode_plain_abilitate ); Py_INCREF( const_unicode_plain_abilitate );
    PyTuple_SET_ITEM( const_tuple_c8d27353a56896ad9935ffe2c05e32b1_tuple, 1, const_unicode_plain_abilitati ); Py_INCREF( const_unicode_plain_abilitati );
    const_unicode_digest_add3b41725114344903d6932d6e0253b = UNSTREAM_UNICODE( &constant_bin[ 714973 ], 9 );
    PyTuple_SET_ITEM( const_tuple_c8d27353a56896ad9935ffe2c05e32b1_tuple, 2, const_unicode_digest_add3b41725114344903d6932d6e0253b ); Py_INCREF( const_unicode_digest_add3b41725114344903d6932d6e0253b );
    const_unicode_digest_cee27e4bc974a77815144915264904b5 = UNSTREAM_UNICODE( &constant_bin[ 714943 ], 11 );
    PyTuple_SET_ITEM( const_tuple_c8d27353a56896ad9935ffe2c05e32b1_tuple, 3, const_unicode_digest_cee27e4bc974a77815144915264904b5 ); Py_INCREF( const_unicode_digest_cee27e4bc974a77815144915264904b5 );
    const_unicode_plain_ador = UNSTREAM_UNICODE( &constant_bin[ 723012 ], 4 );
    const_str_plain__HungarianStemmer__step9_suffixes = UNSTREAM_STRING( &constant_bin[ 723039 ], 33, 1 );
    const_tuple_e45fcfb5ae2858f99ff073e0f05deccb_tuple = PyTuple_New( 2 );
    const_unicode_digest_137fd8967ff7feb8f28e84c9caa36c7d = UNSTREAM_UNICODE( &constant_bin[ 723072 ], 2 );
    PyTuple_SET_ITEM( const_tuple_e45fcfb5ae2858f99ff073e0f05deccb_tuple, 0, const_unicode_digest_137fd8967ff7feb8f28e84c9caa36c7d ); Py_INCREF( const_unicode_digest_137fd8967ff7feb8f28e84c9caa36c7d );
    PyTuple_SET_ITEM( const_tuple_e45fcfb5ae2858f99ff073e0f05deccb_tuple, 1, const_unicode_plain_v ); Py_INCREF( const_unicode_plain_v );
    const_unicode_plain_itiv = UNSTREAM_UNICODE( &constant_bin[ 5814 ], 4 );
    const_str_plain_DanishStemmer = UNSTREAM_STRING( &constant_bin[ 723074 ], 13, 1 );
    const_unicode_digest_f2caf14fc04d7ff05f9f195dba4e2955 = UNSTREAM_UNICODE( &constant_bin[ 723087 ], 4 );
    const_unicode_plain_oo = UNSTREAM_UNICODE( &constant_bin[ 653 ], 2 );
    const_unicode_digest_d024846c1eaba62fc7dccb44fc853458 = UNSTREAM_UNICODE( &constant_bin[ 723091 ], 5 );
    const_unicode_plain_yamos = UNSTREAM_UNICODE( &constant_bin[ 723096 ], 5 );
    const_unicode_plain_iendo = UNSTREAM_UNICODE( &constant_bin[ 723101 ], 5 );
    const_unicode_digest_c39ed51721b386e12be8129686b300e9 = UNSTREAM_UNICODE( &constant_bin[ 723106 ], 7 );
    const_tuple_9da71f3069d6bd8c817bc6992dcef6bf_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_9da71f3069d6bd8c817bc6992dcef6bf_tuple, 0, const_unicode_plain_ism ); Py_INCREF( const_unicode_plain_ism );
    const_unicode_plain_isme = UNSTREAM_UNICODE( &constant_bin[ 721490 ], 4 );
    PyTuple_SET_ITEM( const_tuple_9da71f3069d6bd8c817bc6992dcef6bf_tuple, 1, const_unicode_plain_isme ); Py_INCREF( const_unicode_plain_isme );
    PyTuple_SET_ITEM( const_tuple_9da71f3069d6bd8c817bc6992dcef6bf_tuple, 2, const_unicode_plain_ist ); Py_INCREF( const_unicode_plain_ist );
    const_unicode_plain_ista = UNSTREAM_UNICODE( &constant_bin[ 97375 ], 4 );
    PyTuple_SET_ITEM( const_tuple_9da71f3069d6bd8c817bc6992dcef6bf_tuple, 3, const_unicode_plain_ista ); Py_INCREF( const_unicode_plain_ista );
    const_unicode_plain_iste = UNSTREAM_UNICODE( &constant_bin[ 32675 ], 4 );
    PyTuple_SET_ITEM( const_tuple_9da71f3069d6bd8c817bc6992dcef6bf_tuple, 4, const_unicode_plain_iste ); Py_INCREF( const_unicode_plain_iste );
    const_unicode_plain_isti = UNSTREAM_UNICODE( &constant_bin[ 3415 ], 4 );
    PyTuple_SET_ITEM( const_tuple_9da71f3069d6bd8c817bc6992dcef6bf_tuple, 5, const_unicode_plain_isti ); Py_INCREF( const_unicode_plain_isti );
    const_unicode_digest_ac9f1f835f6bf90debfec6d2459efaa8 = UNSTREAM_UNICODE( &constant_bin[ 723113 ], 5 );
    PyTuple_SET_ITEM( const_tuple_9da71f3069d6bd8c817bc6992dcef6bf_tuple, 6, const_unicode_digest_ac9f1f835f6bf90debfec6d2459efaa8 ); Py_INCREF( const_unicode_digest_ac9f1f835f6bf90debfec6d2459efaa8 );
    PyTuple_SET_ITEM( const_tuple_9da71f3069d6bd8c817bc6992dcef6bf_tuple, 7, const_unicode_digest_e1963e71512752f09607c5e249411d53 ); Py_INCREF( const_unicode_digest_e1963e71512752f09607c5e249411d53 );
    const_tuple_c7fff8f64e1a348ef3c18d88e5495bce_tuple = PyTuple_New( 2 );
    const_unicode_digest_e2c8e4058869b958f5a5b25d19ea4489 = UNSTREAM_UNICODE( &constant_bin[ 723118 ], 2 );
    PyTuple_SET_ITEM( const_tuple_c7fff8f64e1a348ef3c18d88e5495bce_tuple, 0, const_unicode_digest_e2c8e4058869b958f5a5b25d19ea4489 ); Py_INCREF( const_unicode_digest_e2c8e4058869b958f5a5b25d19ea4489 );
    PyTuple_SET_ITEM( const_tuple_c7fff8f64e1a348ef3c18d88e5495bce_tuple, 1, const_unicode_plain_z ); Py_INCREF( const_unicode_plain_z );
    const_unicode_plain_hen = UNSTREAM_UNICODE( &constant_bin[ 8758 ], 3 );
    const_tuple_unicode_plain_U_unicode_plain_u_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_U_unicode_plain_u_tuple, 0, const_unicode_plain_U ); Py_INCREF( const_unicode_plain_U );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_U_unicode_plain_u_tuple, 1, const_unicode_plain_u ); Py_INCREF( const_unicode_plain_u );
    const_str_plain__HungarianStemmer__step4_suffixes = UNSTREAM_STRING( &constant_bin[ 723120 ], 33, 1 );
    const_unicode_plain_bcdfghjklmnpqrstvwxz = UNSTREAM_UNICODE( &constant_bin[ 723153 ], 20 );
    const_unicode_digest_dbf093dd6d9684d7a5038ba9b028700b = UNSTREAM_UNICODE( &constant_bin[ 723173 ], 12 );
    const_unicode_plain_amento = UNSTREAM_UNICODE( &constant_bin[ 723185 ], 6 );
    const_tuple_str_plain_i_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_i_tuple, 0, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_tuple_unicode_plain_italian_tuple = PyTuple_New( 1 );
    const_unicode_plain_italian = UNSTREAM_UNICODE( &constant_bin[ 723191 ], 7 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_italian_tuple, 0, const_unicode_plain_italian ); Py_INCREF( const_unicode_plain_italian );
    const_tuple_66e35d91519c98995c87b3ad14739ae1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_66e35d91519c98995c87b3ad14739ae1_tuple, 0, const_unicode_digest_0660733d03d3aa101753bd2da6072150 ); Py_INCREF( const_unicode_digest_0660733d03d3aa101753bd2da6072150 );
    const_unicode_digest_cf034fd48b27ddf7f97d20cecb0d0523 = UNSTREAM_UNICODE( &constant_bin[ 723198 ], 2 );
    PyTuple_SET_ITEM( const_tuple_66e35d91519c98995c87b3ad14739ae1_tuple, 1, const_unicode_digest_cf034fd48b27ddf7f97d20cecb0d0523 ); Py_INCREF( const_unicode_digest_cf034fd48b27ddf7f97d20cecb0d0523 );
    const_str_plain_romanian = UNSTREAM_STRING( &constant_bin[ 723200 ], 8, 1 );
    const_unicode_plain_lich = UNSTREAM_UNICODE( &constant_bin[ 723208 ], 4 );
    const_unicode_digest_04a20b4e03cace659924c6aa2933c949 = UNSTREAM_UNICODE( &constant_bin[ 723212 ], 232 );
    const_tuple_10e4de01aad20d678087669dddcf6313_tuple = PyTuple_New( 2 );
    const_unicode_digest_aec63e7144b3ed6e2ca700fb80cd4e72 = UNSTREAM_UNICODE( &constant_bin[ 723444 ], 2 );
    PyTuple_SET_ITEM( const_tuple_10e4de01aad20d678087669dddcf6313_tuple, 0, const_unicode_digest_aec63e7144b3ed6e2ca700fb80cd4e72 ); Py_INCREF( const_unicode_digest_aec63e7144b3ed6e2ca700fb80cd4e72 );
    PyTuple_SET_ITEM( const_tuple_10e4de01aad20d678087669dddcf6313_tuple, 1, const_unicode_plain_l ); Py_INCREF( const_unicode_plain_l );
    const_unicode_plain_dt = UNSTREAM_UNICODE( &constant_bin[ 1009 ], 2 );
    const_unicode_plain_uciones = UNSTREAM_UNICODE( &constant_bin[ 723446 ], 7 );
    const_unicode_plain_icivi = UNSTREAM_UNICODE( &constant_bin[ 715188 ], 5 );
    const_unicode_digest_20f5146bb9a5a2e0e8d455177dad4e11 = UNSTREAM_UNICODE( &constant_bin[ 723453 ], 30 );
    const_unicode_digest_09bc009ffd858aaf58df7e98266d9b89 = UNSTREAM_UNICODE( &constant_bin[ 2492 ], 2 );
    const_tuple_845ac4528257b3ed391fd49fa8dae820_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_845ac4528257b3ed391fd49fa8dae820_tuple, 0, const_unicode_digest_a0c07d63a0baa715c0844159f987ebc4 ); Py_INCREF( const_unicode_digest_a0c07d63a0baa715c0844159f987ebc4 );
    PyTuple_SET_ITEM( const_tuple_845ac4528257b3ed391fd49fa8dae820_tuple, 1, const_unicode_digest_711578b5a996e75a650bde056decd383 ); Py_INCREF( const_unicode_digest_711578b5a996e75a650bde056decd383 );
    const_tuple_b02b073265ed77383de1c095c4694220_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_b02b073265ed77383de1c095c4694220_tuple, 0, const_unicode_plain_v ); Py_INCREF( const_unicode_plain_v );
    const_unicode_digest_e0e0b7c6bb19dda9ef5b49f8530ccf71 = UNSTREAM_UNICODE( &constant_bin[ 723483 ], 2 );
    PyTuple_SET_ITEM( const_tuple_b02b073265ed77383de1c095c4694220_tuple, 1, const_unicode_digest_e0e0b7c6bb19dda9ef5b49f8530ccf71 ); Py_INCREF( const_unicode_digest_e0e0b7c6bb19dda9ef5b49f8530ccf71 );
    const_unicode_plain_iciva = UNSTREAM_UNICODE( &constant_bin[ 715168 ], 5 );
    const_tuple_unicode_plain_ic_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ic_tuple, 0, const_unicode_plain_ic ); Py_INCREF( const_unicode_plain_ic );
    const_unicode_plain_iune = UNSTREAM_UNICODE( &constant_bin[ 715113 ], 4 );
    const_unicode_digest_22715462b9096530b59c4d7feb91bf3f = UNSTREAM_UNICODE( &constant_bin[ 715145 ], 7 );
    const_tuple_eb52ccf5e8b342c09833c45ec7463ec0_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_eb52ccf5e8b342c09833c45ec7463ec0_tuple, 0, const_unicode_digest_00029bab94d4fae3bad9b98113cef03c ); Py_INCREF( const_unicode_digest_00029bab94d4fae3bad9b98113cef03c );
    PyTuple_SET_ITEM( const_tuple_eb52ccf5e8b342c09833c45ec7463ec0_tuple, 1, const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 ); Py_INCREF( const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 );
    const_unicode_digest_48a5e5414e404390c40aa90eef5b408f = UNSTREAM_UNICODE( &constant_bin[ 723485 ], 454 );
    const_str_plain_PortugueseStemmer = UNSTREAM_STRING( &constant_bin[ 717294 ], 17, 1 );
    const_tuple_1868edefb949b0d730a3408476f6d119_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_1868edefb949b0d730a3408476f6d119_tuple, 0, const_unicode_digest_99ba77effd8e91845b225bae4bdde4ff ); Py_INCREF( const_unicode_digest_99ba77effd8e91845b225bae4bdde4ff );
    PyTuple_SET_ITEM( const_tuple_1868edefb949b0d730a3408476f6d119_tuple, 1, const_unicode_plain_u ); Py_INCREF( const_unicode_plain_u );
    const_tuple_e6d3ea5d4f340370863c7e2a11288cab_tuple = PyTuple_New( 2 );
    const_unicode_digest_b8718dff9bd262d9a858122725c34890 = UNSTREAM_UNICODE( &constant_bin[ 723939 ], 2 );
    PyTuple_SET_ITEM( const_tuple_e6d3ea5d4f340370863c7e2a11288cab_tuple, 0, const_unicode_digest_b8718dff9bd262d9a858122725c34890 ); Py_INCREF( const_unicode_digest_b8718dff9bd262d9a858122725c34890 );
    PyTuple_SET_ITEM( const_tuple_e6d3ea5d4f340370863c7e2a11288cab_tuple, 1, const_unicode_plain_g ); Py_INCREF( const_unicode_plain_g );
    const_tuple_unicode_plain_german_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_german_tuple, 0, const_unicode_plain_german ); Py_INCREF( const_unicode_plain_german );
    const_tuple_str_plain_nn_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_nn_tuple, 0, const_str_plain_nn ); Py_INCREF( const_str_plain_nn );
    const_tuple_unicode_plain_idade_unicode_plain_idades_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_idade_unicode_plain_idades_tuple, 0, const_unicode_plain_idade ); Py_INCREF( const_unicode_plain_idade );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_idade_unicode_plain_idades_tuple, 1, const_unicode_plain_idades ); Py_INCREF( const_unicode_plain_idades );
    const_unicode_plain_slov = UNSTREAM_UNICODE( &constant_bin[ 723941 ], 4 );
    const_unicode_digest_3f52a44c55b9453c5ea1ad22dd78e786 = UNSTREAM_UNICODE( &constant_bin[ 719687 ], 3 );
    const_tuple_23041e2226cfd5f631f03497d2af7ada_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_23041e2226cfd5f631f03497d2af7ada_tuple, 0, const_unicode_digest_78cdf5f405cf341f59d014e5862c6bc7 ); Py_INCREF( const_unicode_digest_78cdf5f405cf341f59d014e5862c6bc7 );
    const_unicode_digest_c1f040cc49a797c3d036ebf12e4ca59c = UNSTREAM_UNICODE( &constant_bin[ 713637 ], 3 );
    PyTuple_SET_ITEM( const_tuple_23041e2226cfd5f631f03497d2af7ada_tuple, 1, const_unicode_digest_c1f040cc49a797c3d036ebf12e4ca59c ); Py_INCREF( const_unicode_digest_c1f040cc49a797c3d036ebf12e4ca59c );
    const_unicode_digest_953d89042a50992a94a2c67896f83479 = UNSTREAM_UNICODE( &constant_bin[ 720175 ], 3 );
    PyTuple_SET_ITEM( const_tuple_23041e2226cfd5f631f03497d2af7ada_tuple, 2, const_unicode_digest_953d89042a50992a94a2c67896f83479 ); Py_INCREF( const_unicode_digest_953d89042a50992a94a2c67896f83479 );
    const_unicode_digest_9fc494b9e47f1ff7a0348a3457292ff5 = UNSTREAM_UNICODE( &constant_bin[ 715770 ], 4 );
    const_unicode_digest_e84f43da3f98baa3d85ec8f3b279d739 = UNSTREAM_UNICODE( &constant_bin[ 715133 ], 7 );
    const_unicode_digest_daa44caae2c790737a8c24bc0be4162b = UNSTREAM_UNICODE( &constant_bin[ 723945 ], 2 );
    const_unicode_plain_gd = UNSTREAM_UNICODE( &constant_bin[ 5054 ], 2 );
    const_unicode_digest_185c6d9894f4ed8a07665716865b99d7 = UNSTREAM_UNICODE( &constant_bin[ 723947 ], 2 );
    const_unicode_digest_ce2dd360fc97fd6259923ac8b094cfb0 = UNSTREAM_UNICODE( &constant_bin[ 721664 ], 5 );
    const_unicode_digest_08d43b10cefd4221353d1b12b55f9774 = UNSTREAM_UNICODE( &constant_bin[ 723949 ], 2 );
    const_str_plain__HungarianStemmer__step2_suffixes = UNSTREAM_STRING( &constant_bin[ 723951 ], 33, 1 );
    const_tuple_51997d27c66f220f3eab87efda1a277f_tuple = PyTuple_New( 2 );
    const_unicode_digest_07eb01e4392a9b5112cb3f938ee28574 = UNSTREAM_UNICODE( &constant_bin[ 723984 ], 2 );
    PyTuple_SET_ITEM( const_tuple_51997d27c66f220f3eab87efda1a277f_tuple, 0, const_unicode_digest_07eb01e4392a9b5112cb3f938ee28574 ); Py_INCREF( const_unicode_digest_07eb01e4392a9b5112cb3f938ee28574 );
    PyTuple_SET_ITEM( const_tuple_51997d27c66f220f3eab87efda1a277f_tuple, 1, const_unicode_digest_3f8b984275c38c3bda625b33f1771959 ); Py_INCREF( const_unicode_digest_3f8b984275c38c3bda625b33f1771959 );
    const_unicode_plain_ORIGINAL = UNSTREAM_UNICODE( &constant_bin[ 723986 ], 8 );
    const_tuple_unicode_plain_lle_unicode_plain_ine_tuple = PyTuple_New( 2 );
    const_unicode_plain_lle = UNSTREAM_UNICODE( &constant_bin[ 8246 ], 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_lle_unicode_plain_ine_tuple, 0, const_unicode_plain_lle ); Py_INCREF( const_unicode_plain_lle );
    const_unicode_plain_ine = UNSTREAM_UNICODE( &constant_bin[ 22 ], 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_lle_unicode_plain_ine_tuple, 1, const_unicode_plain_ine ); Py_INCREF( const_unicode_plain_ine );
    const_tuple_unicode_plain_en_unicode_plain_es_unicode_plain_e_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_en_unicode_plain_es_unicode_plain_e_tuple, 0, const_unicode_plain_en ); Py_INCREF( const_unicode_plain_en );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_en_unicode_plain_es_unicode_plain_e_tuple, 1, const_unicode_plain_es ); Py_INCREF( const_unicode_plain_es );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_en_unicode_plain_es_unicode_plain_e_tuple, 2, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    const_tuple_fc3385a3fcb339a8c3a51b260f9ddea8_tuple = PyTuple_New( 2 );
    const_unicode_digest_235b4db5798ab83b2cda8bacbe705eeb = UNSTREAM_UNICODE( &constant_bin[ 723994 ], 4 );
    PyTuple_SET_ITEM( const_tuple_fc3385a3fcb339a8c3a51b260f9ddea8_tuple, 0, const_unicode_digest_235b4db5798ab83b2cda8bacbe705eeb ); Py_INCREF( const_unicode_digest_235b4db5798ab83b2cda8bacbe705eeb );
    PyTuple_SET_ITEM( const_tuple_fc3385a3fcb339a8c3a51b260f9ddea8_tuple, 1, const_unicode_plain_ost ); Py_INCREF( const_unicode_plain_ost );
    const_tuple_2113415aedfb96e4da28dce140250380_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_2113415aedfb96e4da28dce140250380_tuple, 0, const_unicode_plain_v ); Py_INCREF( const_unicode_plain_v );
    const_unicode_plain_vshi = UNSTREAM_UNICODE( &constant_bin[ 713595 ], 4 );
    PyTuple_SET_ITEM( const_tuple_2113415aedfb96e4da28dce140250380_tuple, 1, const_unicode_plain_vshi ); Py_INCREF( const_unicode_plain_vshi );
    const_unicode_digest_9c795e2fded76151d524a7e3b0c93812 = UNSTREAM_UNICODE( &constant_bin[ 713595 ], 6 );
    PyTuple_SET_ITEM( const_tuple_2113415aedfb96e4da28dce140250380_tuple, 2, const_unicode_digest_9c795e2fded76151d524a7e3b0c93812 ); Py_INCREF( const_unicode_digest_9c795e2fded76151d524a7e3b0c93812 );
    const_tuple_42984e9c76991a83543acab6e2f18f9a_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_42984e9c76991a83543acab6e2f18f9a_tuple, 0, const_unicode_plain_a ); Py_INCREF( const_unicode_plain_a );
    PyTuple_SET_ITEM( const_tuple_42984e9c76991a83543acab6e2f18f9a_tuple, 1, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    PyTuple_SET_ITEM( const_tuple_42984e9c76991a83543acab6e2f18f9a_tuple, 2, const_unicode_plain_i ); Py_INCREF( const_unicode_plain_i );
    PyTuple_SET_ITEM( const_tuple_42984e9c76991a83543acab6e2f18f9a_tuple, 3, const_unicode_plain_o ); Py_INCREF( const_unicode_plain_o );
    const_unicode_digest_bc116b69f79f787e9864737f78bd7244 = UNSTREAM_UNICODE( &constant_bin[ 723998 ], 2 );
    PyTuple_SET_ITEM( const_tuple_42984e9c76991a83543acab6e2f18f9a_tuple, 4, const_unicode_digest_bc116b69f79f787e9864737f78bd7244 ); Py_INCREF( const_unicode_digest_bc116b69f79f787e9864737f78bd7244 );
    PyTuple_SET_ITEM( const_tuple_42984e9c76991a83543acab6e2f18f9a_tuple, 5, const_unicode_digest_d087aa050a38508b1f0a500c1d21aa2c ); Py_INCREF( const_unicode_digest_d087aa050a38508b1f0a500c1d21aa2c );
    PyTuple_SET_ITEM( const_tuple_42984e9c76991a83543acab6e2f18f9a_tuple, 6, const_unicode_digest_cf034fd48b27ddf7f97d20cecb0d0523 ); Py_INCREF( const_unicode_digest_cf034fd48b27ddf7f97d20cecb0d0523 );
    PyTuple_SET_ITEM( const_tuple_42984e9c76991a83543acab6e2f18f9a_tuple, 7, const_unicode_digest_711578b5a996e75a650bde056decd383 ); Py_INCREF( const_unicode_digest_711578b5a996e75a650bde056decd383 );
    const_unicode_plain_erez = UNSTREAM_UNICODE( &constant_bin[ 724000 ], 4 );
    const_tuple_unicode_digest_00029bab94d4fae3bad9b98113cef03c_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_00029bab94d4fae3bad9b98113cef03c_tuple, 0, const_unicode_digest_00029bab94d4fae3bad9b98113cef03c ); Py_INCREF( const_unicode_digest_00029bab94d4fae3bad9b98113cef03c );
    const_tuple_acdd760e1bb6662d8992cc7f57800467_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_acdd760e1bb6662d8992cc7f57800467_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_acdd760e1bb6662d8992cc7f57800467_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_acdd760e1bb6662d8992cc7f57800467_tuple, 2, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_acdd760e1bb6662d8992cc7f57800467_tuple, 3, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    const_str_plain_double_cons = UNSTREAM_STRING( &constant_bin[ 715509 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_acdd760e1bb6662d8992cc7f57800467_tuple, 4, const_str_plain_double_cons ); Py_INCREF( const_str_plain_double_cons );
    const_tuple_f9cb4ff683cf07968ae8d155d1b96271_tuple = PyTuple_New( 2 );
    const_unicode_digest_9059e0adc025b923c9e1393260678724 = UNSTREAM_UNICODE( &constant_bin[ 724004 ], 2 );
    PyTuple_SET_ITEM( const_tuple_f9cb4ff683cf07968ae8d155d1b96271_tuple, 0, const_unicode_digest_9059e0adc025b923c9e1393260678724 ); Py_INCREF( const_unicode_digest_9059e0adc025b923c9e1393260678724 );
    PyTuple_SET_ITEM( const_tuple_f9cb4ff683cf07968ae8d155d1b96271_tuple, 1, const_unicode_plain_a ); Py_INCREF( const_unicode_plain_a );
    const_unicode_plain_m = UNSTREAM_UNICODE( &constant_bin[ 2 ], 1 );
    const_tuple_unicode_digest_1737b60e1e3799cec4e3066da44e189b_tuple = PyTuple_New( 1 );
    const_unicode_digest_1737b60e1e3799cec4e3066da44e189b = UNSTREAM_UNICODE( &constant_bin[ 724006 ], 14 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_1737b60e1e3799cec4e3066da44e189b_tuple, 0, const_unicode_digest_1737b60e1e3799cec4e3066da44e189b ); Py_INCREF( const_unicode_digest_1737b60e1e3799cec4e3066da44e189b );
    const_unicode_plain_atoare = UNSTREAM_UNICODE( &constant_bin[ 715122 ], 6 );
    const_unicode_plain_ativ = UNSTREAM_UNICODE( &constant_bin[ 55494 ], 4 );
    const_tuple_unicode_plain_jo_tuple = PyTuple_New( 1 );
    const_unicode_plain_jo = UNSTREAM_UNICODE( &constant_bin[ 54813 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_jo_tuple, 0, const_unicode_plain_jo ); Py_INCREF( const_unicode_plain_jo );
    const_unicode_digest_741d144afce1a5137c573767055cb279 = UNSTREAM_UNICODE( &constant_bin[ 724020 ], 2 );
    const_unicode_digest_f68de3ef8c13e5dd2853b6c8fa86ca8b = UNSTREAM_UNICODE( &constant_bin[ 724022 ], 2 );
    const_unicode_plain_tt = UNSTREAM_UNICODE( &constant_bin[ 908 ], 2 );
    const_unicode_digest_f39ca2c1237dc556001a56894b0789f2 = UNSTREAM_UNICODE( &constant_bin[ 724024 ], 544 );
    const_unicode_digest_96eb7bf4544fb87bb2ae37c1564b7553 = UNSTREAM_UNICODE( &constant_bin[ 724568 ], 774 );
    const_tuple_9d60038e96c518aa7b726c75071cf2e0_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_9d60038e96c518aa7b726c75071cf2e0_tuple, 0, const_unicode_digest_b13fc523c6330c593033192d322fd753 ); Py_INCREF( const_unicode_digest_b13fc523c6330c593033192d322fd753 );
    PyTuple_SET_ITEM( const_tuple_9d60038e96c518aa7b726c75071cf2e0_tuple, 1, const_unicode_plain_ch ); Py_INCREF( const_unicode_plain_ch );
    const_tuple_8ffcc2f3a509c5f2adf3ce0677e97f16_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_8ffcc2f3a509c5f2adf3ce0677e97f16_tuple, 0, const_unicode_digest_79d017d0589122dd9e8531d2c8c7f9ae ); Py_INCREF( const_unicode_digest_79d017d0589122dd9e8531d2c8c7f9ae );
    PyTuple_SET_ITEM( const_tuple_8ffcc2f3a509c5f2adf3ce0677e97f16_tuple, 1, const_unicode_plain_n ); Py_INCREF( const_unicode_plain_n );
    const_str_plain__FinnishStemmer__step4_suffixes = UNSTREAM_STRING( &constant_bin[ 725342 ], 31, 1 );
    const_tuple_a5adf8286787c0820a5abe7f474bb9b0_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_a5adf8286787c0820a5abe7f474bb9b0_tuple, 0, const_unicode_digest_cf8642b5149fa514622b94a4d35894b2 ); Py_INCREF( const_unicode_digest_cf8642b5149fa514622b94a4d35894b2 );
    const_unicode_plain_shch = UNSTREAM_UNICODE( &constant_bin[ 725373 ], 4 );
    PyTuple_SET_ITEM( const_tuple_a5adf8286787c0820a5abe7f474bb9b0_tuple, 1, const_unicode_plain_shch ); Py_INCREF( const_unicode_plain_shch );
    const_tuple_unicode_plain_abil_unicode_plain_ic_unicode_plain_iv_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_abil_unicode_plain_ic_unicode_plain_iv_tuple, 0, const_unicode_plain_abil ); Py_INCREF( const_unicode_plain_abil );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_abil_unicode_plain_ic_unicode_plain_iv_tuple, 1, const_unicode_plain_ic ); Py_INCREF( const_unicode_plain_ic );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_abil_unicode_plain_ic_unicode_plain_iv_tuple, 2, const_unicode_plain_iv ); Py_INCREF( const_unicode_plain_iv );
    const_tuple_0afea4878374468609999fa017a0ee81_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_0afea4878374468609999fa017a0ee81_tuple, 0, const_unicode_digest_741d144afce1a5137c573767055cb279 ); Py_INCREF( const_unicode_digest_741d144afce1a5137c573767055cb279 );
    PyTuple_SET_ITEM( const_tuple_0afea4878374468609999fa017a0ee81_tuple, 1, const_unicode_digest_1094ceee53f468647e12ae7ce3aa5571 ); Py_INCREF( const_unicode_digest_1094ceee53f468647e12ae7ce3aa5571 );
    const_tuple_c789034d7278fd1af36a082e0ca2e00d_tuple = PyTuple_New( 2 );
    const_unicode_digest_9517977509f69d68f0e7ed4c77fce9a6 = UNSTREAM_UNICODE( &constant_bin[ 725377 ], 2 );
    PyTuple_SET_ITEM( const_tuple_c789034d7278fd1af36a082e0ca2e00d_tuple, 0, const_unicode_digest_9517977509f69d68f0e7ed4c77fce9a6 ); Py_INCREF( const_unicode_digest_9517977509f69d68f0e7ed4c77fce9a6 );
    PyTuple_SET_ITEM( const_tuple_c789034d7278fd1af36a082e0ca2e00d_tuple, 1, const_unicode_plain_p ); Py_INCREF( const_unicode_plain_p );
    const_tuple_unicode_plain_end_unicode_plain_ung_tuple = PyTuple_New( 2 );
    const_unicode_plain_end = UNSTREAM_UNICODE( &constant_bin[ 1665 ], 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_end_unicode_plain_ung_tuple, 0, const_unicode_plain_end ); Py_INCREF( const_unicode_plain_end );
    const_unicode_plain_ung = UNSTREAM_UNICODE( &constant_bin[ 144344 ], 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_end_unicode_plain_ung_tuple, 1, const_unicode_plain_ung ); Py_INCREF( const_unicode_plain_ung );
    const_tuple_34a0ae3c2a0fd59cc66eb2ec229e03f1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_34a0ae3c2a0fd59cc66eb2ec229e03f1_tuple, 0, const_unicode_digest_9517b5d6e35516b0b022218698df03f9 ); Py_INCREF( const_unicode_digest_9517b5d6e35516b0b022218698df03f9 );
    PyTuple_SET_ITEM( const_tuple_34a0ae3c2a0fd59cc66eb2ec229e03f1_tuple, 1, const_unicode_digest_ce9df3550e776a650bc3e9bdd7e6ddd6 ); Py_INCREF( const_unicode_digest_ce9df3550e776a650bc3e9bdd7e6ddd6 );
    const_unicode_digest_67458d2c3b56421f177cb72aaebf67fc = UNSTREAM_UNICODE( &constant_bin[ 725379 ], 23 );
    const_unicode_digest_38194bff2827a2d9d0046361a50ca312 = UNSTREAM_UNICODE( &constant_bin[ 713668 ], 3 );
    const_unicode_plain_gy = UNSTREAM_UNICODE( &constant_bin[ 3818 ], 2 );
    const_unicode_digest_1c20dde2a1bfb75af39bec4b5b13d281 = UNSTREAM_UNICODE( &constant_bin[ 725402 ], 1441 );
    const_str_plain__FrenchStemmer__step2b_suffixes = UNSTREAM_STRING( &constant_bin[ 726843 ], 31, 1 );
    const_unicode_digest_b227e519e93fd3ff048fb6813e177f64 = UNSTREAM_UNICODE( &constant_bin[ 721664 ], 4 );
    const_tuple_2566c2645d55f81f1fb46fa785260a31_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_2566c2645d55f81f1fb46fa785260a31_tuple, 0, const_unicode_plain_tta ); Py_INCREF( const_unicode_plain_tta );
    const_unicode_digest_f85f4153510666cf42dc2c1b0c4ed046 = UNSTREAM_UNICODE( &constant_bin[ 715804 ], 4 );
    PyTuple_SET_ITEM( const_tuple_2566c2645d55f81f1fb46fa785260a31_tuple, 1, const_unicode_digest_f85f4153510666cf42dc2c1b0c4ed046 ); Py_INCREF( const_unicode_digest_f85f4153510666cf42dc2c1b0c4ed046 );
    const_tuple_a02cc15d798cbb5cd6c292e1b050fa68_tuple = PyTuple_New( 2 );
    const_unicode_digest_4fcfdba2f679d1ae6311146a6727e370 = UNSTREAM_UNICODE( &constant_bin[ 726874 ], 2 );
    PyTuple_SET_ITEM( const_tuple_a02cc15d798cbb5cd6c292e1b050fa68_tuple, 0, const_unicode_digest_4fcfdba2f679d1ae6311146a6727e370 ); Py_INCREF( const_unicode_digest_4fcfdba2f679d1ae6311146a6727e370 );
    PyTuple_SET_ITEM( const_tuple_a02cc15d798cbb5cd6c292e1b050fa68_tuple, 1, const_unicode_plain_i ); Py_INCREF( const_unicode_plain_i );
    const_unicode_plain_leg = UNSTREAM_UNICODE( &constant_bin[ 50552 ], 3 );
    const_str_plain___rv_french = UNSTREAM_STRING( &constant_bin[ 726876 ], 11, 1 );
    const_tuple_unicode_plain_ea_unicode_plain_ele_unicode_plain_elor_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ea_unicode_plain_ele_unicode_plain_elor_tuple, 0, const_unicode_plain_ea ); Py_INCREF( const_unicode_plain_ea );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ea_unicode_plain_ele_unicode_plain_elor_tuple, 1, const_unicode_plain_ele ); Py_INCREF( const_unicode_plain_ele );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ea_unicode_plain_ele_unicode_plain_elor_tuple, 2, const_unicode_plain_elor ); Py_INCREF( const_unicode_plain_elor );
    const_unicode_digest_007691032e40e7582adc29d110e2df12 = UNSTREAM_UNICODE( &constant_bin[ 726887 ], 666 );
    const_str_plain__HungarianStemmer__double_consonants = UNSTREAM_STRING( &constant_bin[ 727553 ], 36, 1 );
    const_unicode_plain_gt = UNSTREAM_UNICODE( &constant_bin[ 956 ], 2 );
    const_tuple_f11cb483adc2f66ad177f31d8d53f3ea_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_f11cb483adc2f66ad177f31d8d53f3ea_tuple, 0, const_unicode_plain_l ); Py_INCREF( const_unicode_plain_l );
    const_unicode_digest_dad43f0f2031badc6c0270183056a256 = UNSTREAM_UNICODE( &constant_bin[ 727589 ], 2 );
    PyTuple_SET_ITEM( const_tuple_f11cb483adc2f66ad177f31d8d53f3ea_tuple, 1, const_unicode_digest_dad43f0f2031badc6c0270183056a256 ); Py_INCREF( const_unicode_digest_dad43f0f2031badc6c0270183056a256 );
    const_unicode_digest_095a177b51f187e5ba20c32fce88fe1d = UNSTREAM_UNICODE( &constant_bin[ 727591 ], 12 );
    const_str_plain__FrenchStemmer__step4_suffixes = UNSTREAM_STRING( &constant_bin[ 727603 ], 30, 1 );
    const_tuple_unicode_plain_dt_unicode_plain_vt_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_dt_unicode_plain_vt_tuple, 0, const_unicode_plain_dt ); Py_INCREF( const_unicode_plain_dt );
    const_unicode_plain_vt = UNSTREAM_UNICODE( &constant_bin[ 88373 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_dt_unicode_plain_vt_tuple, 1, const_unicode_plain_vt ); Py_INCREF( const_unicode_plain_vt );
    const_unicode_plain_icator = UNSTREAM_UNICODE( &constant_bin[ 107794 ], 6 );
    const_unicode_plain_icive = UNSTREAM_UNICODE( &constant_bin[ 715178 ], 5 );
    const_tuple_60742b409240155d476c25dac1be289b_tuple = PyTuple_New( 1 );
    const_tuple_unicode_plain_kk_unicode_plain_dd_unicode_plain_tt_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_kk_unicode_plain_dd_unicode_plain_tt_tuple, 0, const_unicode_plain_kk ); Py_INCREF( const_unicode_plain_kk );
    const_unicode_plain_dd = UNSTREAM_UNICODE( &constant_bin[ 174 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_kk_unicode_plain_dd_unicode_plain_tt_tuple, 1, const_unicode_plain_dd ); Py_INCREF( const_unicode_plain_dd );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_kk_unicode_plain_dd_unicode_plain_tt_tuple, 2, const_unicode_plain_tt ); Py_INCREF( const_unicode_plain_tt );
    PyTuple_SET_ITEM( const_tuple_60742b409240155d476c25dac1be289b_tuple, 0, const_tuple_unicode_plain_kk_unicode_plain_dd_unicode_plain_tt_tuple ); Py_INCREF( const_tuple_unicode_plain_kk_unicode_plain_dd_unicode_plain_tt_tuple );
    const_tuple_72f993cfaab1015a764fda66527479d2_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_72f993cfaab1015a764fda66527479d2_tuple, 0, const_unicode_plain_amento ); Py_INCREF( const_unicode_plain_amento );
    const_unicode_plain_amenti = UNSTREAM_UNICODE( &constant_bin[ 727633 ], 6 );
    PyTuple_SET_ITEM( const_tuple_72f993cfaab1015a764fda66527479d2_tuple, 1, const_unicode_plain_amenti ); Py_INCREF( const_unicode_plain_amenti );
    const_unicode_plain_imento = UNSTREAM_UNICODE( &constant_bin[ 727639 ], 6 );
    PyTuple_SET_ITEM( const_tuple_72f993cfaab1015a764fda66527479d2_tuple, 2, const_unicode_plain_imento ); Py_INCREF( const_unicode_plain_imento );
    const_unicode_plain_imenti = UNSTREAM_UNICODE( &constant_bin[ 335343 ], 6 );
    PyTuple_SET_ITEM( const_tuple_72f993cfaab1015a764fda66527479d2_tuple, 3, const_unicode_plain_imenti ); Py_INCREF( const_unicode_plain_imenti );
    const_tuple_85d73053cefb5c5e13e442a4d52e324b_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_85d73053cefb5c5e13e442a4d52e324b_tuple, 0, const_unicode_digest_1f157ffe1eae7b7af17901f9a762d3f3 ); Py_INCREF( const_unicode_digest_1f157ffe1eae7b7af17901f9a762d3f3 );
    PyTuple_SET_ITEM( const_tuple_85d73053cefb5c5e13e442a4d52e324b_tuple, 1, const_unicode_digest_3f8b984275c38c3bda625b33f1771959 ); Py_INCREF( const_unicode_digest_3f8b984275c38c3bda625b33f1771959 );
    const_unicode_digest_2635dbbc015515e6bb9c25ad8d346054 = UNSTREAM_UNICODE( &constant_bin[ 727645 ], 2 );
    const_unicode_plain_itori = UNSTREAM_UNICODE( &constant_bin[ 715353 ], 5 );
    const_tuple_083a553af28068318eb4d12c441913d8_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_083a553af28068318eb4d12c441913d8_tuple, 0, const_unicode_plain_ivo ); Py_INCREF( const_unicode_plain_ivo );
    PyTuple_SET_ITEM( const_tuple_083a553af28068318eb4d12c441913d8_tuple, 1, const_unicode_plain_ivi ); Py_INCREF( const_unicode_plain_ivi );
    PyTuple_SET_ITEM( const_tuple_083a553af28068318eb4d12c441913d8_tuple, 2, const_unicode_plain_iva ); Py_INCREF( const_unicode_plain_iva );
    PyTuple_SET_ITEM( const_tuple_083a553af28068318eb4d12c441913d8_tuple, 3, const_unicode_plain_ive ); Py_INCREF( const_unicode_plain_ive );
    const_unicode_digest_6417e272e31675efd6de9d067f962404 = UNSTREAM_UNICODE( &constant_bin[ 727647 ], 15 );
    const_unicode_plain_te = UNSTREAM_UNICODE( &constant_bin[ 640 ], 2 );
    const_str_plain__FrenchStemmer__step1_suffixes = UNSTREAM_STRING( &constant_bin[ 727662 ], 30, 1 );
    const_tuple_45f6ea7f15c39e03730b7dca9834b46a_tuple = PyTuple_New( 2 );
    const_unicode_digest_35fe7904bcbd53acfcea3ce07acce206 = UNSTREAM_UNICODE( &constant_bin[ 727692 ], 6 );
    PyTuple_SET_ITEM( const_tuple_45f6ea7f15c39e03730b7dca9834b46a_tuple, 0, const_unicode_digest_35fe7904bcbd53acfcea3ce07acce206 ); Py_INCREF( const_unicode_digest_35fe7904bcbd53acfcea3ce07acce206 );
    PyTuple_SET_ITEM( const_tuple_45f6ea7f15c39e03730b7dca9834b46a_tuple, 1, const_unicode_plain_uciones ); Py_INCREF( const_unicode_plain_uciones );
    const_tuple_unicode_plain_norwegian_tuple = PyTuple_New( 1 );
    const_unicode_plain_norwegian = UNSTREAM_UNICODE( &constant_bin[ 726263 ], 9 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_norwegian_tuple, 0, const_unicode_plain_norwegian ); Py_INCREF( const_unicode_plain_norwegian );
    const_unicode_plain_exit = UNSTREAM_UNICODE( &constant_bin[ 286768 ], 4 );
    const_tuple_50e44c3d4eda2e5d2e5961d782d8fd0b_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_50e44c3d4eda2e5d2e5961d782d8fd0b_tuple, 0, const_unicode_digest_2635dbbc015515e6bb9c25ad8d346054 ); Py_INCREF( const_unicode_digest_2635dbbc015515e6bb9c25ad8d346054 );
    PyTuple_SET_ITEM( const_tuple_50e44c3d4eda2e5d2e5961d782d8fd0b_tuple, 1, const_unicode_plain_sh ); Py_INCREF( const_unicode_plain_sh );
    const_tuple_unicode_plain_ig_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ig_tuple, 0, const_unicode_plain_ig ); Py_INCREF( const_unicode_plain_ig );
    const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple = PyTuple_New( 13 );
    PyTuple_SET_ITEM( const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple, 0, const_str_plain_danish ); Py_INCREF( const_str_plain_danish );
    PyTuple_SET_ITEM( const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple, 1, const_str_plain_dutch ); Py_INCREF( const_str_plain_dutch );
    const_str_plain_finnish = UNSTREAM_STRING( &constant_bin[ 143511 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple, 2, const_str_plain_finnish ); Py_INCREF( const_str_plain_finnish );
    PyTuple_SET_ITEM( const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple, 3, const_str_plain_french ); Py_INCREF( const_str_plain_french );
    const_str_plain_german = UNSTREAM_STRING( &constant_bin[ 143526 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple, 4, const_str_plain_german ); Py_INCREF( const_str_plain_german );
    PyTuple_SET_ITEM( const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple, 5, const_str_plain_hungarian ); Py_INCREF( const_str_plain_hungarian );
    const_str_plain_italian = UNSTREAM_STRING( &constant_bin[ 723191 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple, 6, const_str_plain_italian ); Py_INCREF( const_str_plain_italian );
    const_str_plain_norwegian = UNSTREAM_STRING( &constant_bin[ 726263 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple, 7, const_str_plain_norwegian ); Py_INCREF( const_str_plain_norwegian );
    const_str_plain_portuguese = UNSTREAM_STRING( &constant_bin[ 178104 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple, 8, const_str_plain_portuguese ); Py_INCREF( const_str_plain_portuguese );
    PyTuple_SET_ITEM( const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple, 9, const_str_plain_romanian ); Py_INCREF( const_str_plain_romanian );
    PyTuple_SET_ITEM( const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple, 10, const_str_plain_russian ); Py_INCREF( const_str_plain_russian );
    const_str_plain_spanish = UNSTREAM_STRING( &constant_bin[ 198366 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple, 11, const_str_plain_spanish ); Py_INCREF( const_str_plain_spanish );
    PyTuple_SET_ITEM( const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple, 12, const_str_plain_swedish ); Py_INCREF( const_str_plain_swedish );
    const_str_plain__DanishStemmer__step1_suffixes = UNSTREAM_STRING( &constant_bin[ 727698 ], 30, 1 );
    const_tuple_unicode_plain_erte_unicode_plain_ert_tuple = PyTuple_New( 2 );
    const_unicode_plain_erte = UNSTREAM_UNICODE( &constant_bin[ 57244 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_erte_unicode_plain_ert_tuple, 0, const_unicode_plain_erte ); Py_INCREF( const_unicode_plain_erte );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_erte_unicode_plain_ert_tuple, 1, const_unicode_plain_ert ); Py_INCREF( const_unicode_plain_ert );
    const_tuple_91ee3847503a56a732a8cba289d0b7e8_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_91ee3847503a56a732a8cba289d0b7e8_tuple, 0, const_unicode_plain_os ); Py_INCREF( const_unicode_plain_os );
    PyTuple_SET_ITEM( const_tuple_91ee3847503a56a732a8cba289d0b7e8_tuple, 1, const_unicode_plain_a ); Py_INCREF( const_unicode_plain_a );
    PyTuple_SET_ITEM( const_tuple_91ee3847503a56a732a8cba289d0b7e8_tuple, 2, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    PyTuple_SET_ITEM( const_tuple_91ee3847503a56a732a8cba289d0b7e8_tuple, 3, const_unicode_plain_o ); Py_INCREF( const_unicode_plain_o );
    PyTuple_SET_ITEM( const_tuple_91ee3847503a56a732a8cba289d0b7e8_tuple, 4, const_unicode_digest_00029bab94d4fae3bad9b98113cef03c ); Py_INCREF( const_unicode_digest_00029bab94d4fae3bad9b98113cef03c );
    PyTuple_SET_ITEM( const_tuple_91ee3847503a56a732a8cba289d0b7e8_tuple, 5, const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 ); Py_INCREF( const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 );
    PyTuple_SET_ITEM( const_tuple_91ee3847503a56a732a8cba289d0b7e8_tuple, 6, const_unicode_digest_0660733d03d3aa101753bd2da6072150 ); Py_INCREF( const_unicode_digest_0660733d03d3aa101753bd2da6072150 );
    PyTuple_SET_ITEM( const_tuple_91ee3847503a56a732a8cba289d0b7e8_tuple, 7, const_unicode_digest_a0c07d63a0baa715c0844159f987ebc4 ); Py_INCREF( const_unicode_digest_a0c07d63a0baa715c0844159f987ebc4 );
    const_unicode_plain_hin = UNSTREAM_UNICODE( &constant_bin[ 2133 ], 3 );
    const_tuple_78cf67f7af49e763286d58581ebf2847_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_78cf67f7af49e763286d58581ebf2847_tuple, 0, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    PyTuple_SET_ITEM( const_tuple_78cf67f7af49e763286d58581ebf2847_tuple, 1, const_unicode_digest_707dc82a3c2378a70dac038f187bd1f8 ); Py_INCREF( const_unicode_digest_707dc82a3c2378a70dac038f187bd1f8 );
    const_tuple_fd74d5f1f14a0238bc6599fa81fa3c15_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 727728 ], 450 );
    const_unicode_plain_ait = UNSTREAM_UNICODE( &constant_bin[ 181576 ], 3 );
    const_unicode_digest_75a810c13d55d8b1a714194a3f83e70b = UNSTREAM_UNICODE( &constant_bin[ 728178 ], 230 );
    const_tuple_unicode_plain_ta_unicode_plain_na_tuple = PyTuple_New( 2 );
    const_unicode_plain_ta = UNSTREAM_UNICODE( &constant_bin[ 611 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ta_unicode_plain_na_tuple, 0, const_unicode_plain_ta ); Py_INCREF( const_unicode_plain_ta );
    const_unicode_plain_na = UNSTREAM_UNICODE( &constant_bin[ 0 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ta_unicode_plain_na_tuple, 1, const_unicode_plain_na ); Py_INCREF( const_unicode_plain_na );
    const_unicode_digest_8eb04cf7b1ef0a81429527862e4439ee = UNSTREAM_UNICODE( &constant_bin[ 728408 ], 4 );
    const_unicode_digest_62db8fd5ae2a265479a2e1db31f73b57 = UNSTREAM_UNICODE( &constant_bin[ 728412 ], 5 );
    const_unicode_plain_ais = UNSTREAM_UNICODE( &constant_bin[ 5618 ], 3 );
    const_str_plain__RomanianStemmer__vowels = UNSTREAM_STRING( &constant_bin[ 728417 ], 24, 1 );
    const_tuple_dd133fbb3fa8b8ae72b8c8e4f63aa8d1_tuple = PyTuple_New( 2 );
    const_unicode_digest_368915a3c46e6f7596ff543d222c3685 = UNSTREAM_UNICODE( &constant_bin[ 728441 ], 2 );
    PyTuple_SET_ITEM( const_tuple_dd133fbb3fa8b8ae72b8c8e4f63aa8d1_tuple, 0, const_unicode_digest_368915a3c46e6f7596ff543d222c3685 ); Py_INCREF( const_unicode_digest_368915a3c46e6f7596ff543d222c3685 );
    PyTuple_SET_ITEM( const_tuple_dd133fbb3fa8b8ae72b8c8e4f63aa8d1_tuple, 1, const_unicode_plain_zh ); Py_INCREF( const_unicode_plain_zh );
    const_unicode_digest_08bbb694960a2d85c41e434aeac51be4 = UNSTREAM_UNICODE( &constant_bin[ 728443 ], 1159 );
    const_tuple_unicode_plain_al_unicode_plain_el_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_al_unicode_plain_el_tuple, 0, const_unicode_plain_al ); Py_INCREF( const_unicode_plain_al );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_al_unicode_plain_el_tuple, 1, const_unicode_plain_el ); Py_INCREF( const_unicode_plain_el );
    const_unicode_digest_834b316728c2ad6be95c431070195163 = UNSTREAM_UNICODE( &constant_bin[ 729602 ], 3 );
    const_tuple_ec79e0c9060ccc1ce0f76f8f3ef19338_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_ec79e0c9060ccc1ce0f76f8f3ef19338_tuple, 0, const_unicode_digest_935145b6cd49804fb37dd37262b564a8 ); Py_INCREF( const_unicode_digest_935145b6cd49804fb37dd37262b564a8 );
    PyTuple_SET_ITEM( const_tuple_ec79e0c9060ccc1ce0f76f8f3ef19338_tuple, 1, const_unicode_digest_18aab37aeef33c8a44b9d8a110c581c9 ); Py_INCREF( const_unicode_digest_18aab37aeef33c8a44b9d8a110c581c9 );
    const_tuple_76a3773110ed3fb7fc901dca7c8e8633_tuple = PyTuple_New( 2 );
    const_unicode_digest_44e5ee9fcc8c01e5dab4e245ebb4499c = UNSTREAM_UNICODE( &constant_bin[ 729605 ], 2 );
    PyTuple_SET_ITEM( const_tuple_76a3773110ed3fb7fc901dca7c8e8633_tuple, 0, const_unicode_digest_44e5ee9fcc8c01e5dab4e245ebb4499c ); Py_INCREF( const_unicode_digest_44e5ee9fcc8c01e5dab4e245ebb4499c );
    PyTuple_SET_ITEM( const_tuple_76a3773110ed3fb7fc901dca7c8e8633_tuple, 1, const_unicode_digest_5f92f4b226019badebfbef2c5e93e54a ); Py_INCREF( const_unicode_digest_5f92f4b226019badebfbef2c5e93e54a );
    const_str_plain__GermanStemmer__step3_suffixes = UNSTREAM_STRING( &constant_bin[ 729607 ], 30, 1 );
    const_tuple_tuple_30882c6f62be8cc245864da0c792bb7b_tuple_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_tuple_30882c6f62be8cc245864da0c792bb7b_tuple_tuple, 0, const_tuple_30882c6f62be8cc245864da0c792bb7b_tuple ); Py_INCREF( const_tuple_30882c6f62be8cc245864da0c792bb7b_tuple );
    const_tuple_f04082947c75bd88e75e8064122acab2_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_f04082947c75bd88e75e8064122acab2_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_f04082947c75bd88e75e8064122acab2_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_f04082947c75bd88e75e8064122acab2_tuple, 2, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_f04082947c75bd88e75e8064122acab2_tuple, 3, const_str_plain_double_cons ); Py_INCREF( const_str_plain_double_cons );
    PyTuple_SET_ITEM( const_tuple_f04082947c75bd88e75e8064122acab2_tuple, 4, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    const_unicode_digest_33f74bcf797191a3ac5f1ea6f198c5bf = UNSTREAM_UNICODE( &constant_bin[ 729637 ], 9 );
    const_unicode_plain_ences = UNSTREAM_UNICODE( &constant_bin[ 16255 ], 5 );
    const_tuple_a660101c8de48f0e71b192fa160ba29f_tuple = PyTuple_New( 2 );
    const_unicode_digest_c3e2dd5be462ffef44ff33cec36221d6 = UNSTREAM_UNICODE( &constant_bin[ 729646 ], 2 );
    PyTuple_SET_ITEM( const_tuple_a660101c8de48f0e71b192fa160ba29f_tuple, 0, const_unicode_digest_c3e2dd5be462ffef44ff33cec36221d6 ); Py_INCREF( const_unicode_digest_c3e2dd5be462ffef44ff33cec36221d6 );
    PyTuple_SET_ITEM( const_tuple_a660101c8de48f0e71b192fa160ba29f_tuple, 1, const_unicode_plain_o ); Py_INCREF( const_unicode_plain_o );
    const_str_plain__PortugueseStemmer__step1_suffixes = UNSTREAM_STRING( &constant_bin[ 729648 ], 34, 1 );
    const_tuple_3cde4017af6f16526fb10beed8499c5f_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_3cde4017af6f16526fb10beed8499c5f_tuple, 0, const_unicode_plain_ier ); Py_INCREF( const_unicode_plain_ier );
    PyTuple_SET_ITEM( const_tuple_3cde4017af6f16526fb10beed8499c5f_tuple, 1, const_unicode_digest_3e6b89b3b28707186f1c8c46a90f1df2 ); Py_INCREF( const_unicode_digest_3e6b89b3b28707186f1c8c46a90f1df2 );
    PyTuple_SET_ITEM( const_tuple_3cde4017af6f16526fb10beed8499c5f_tuple, 2, const_unicode_plain_Ier ); Py_INCREF( const_unicode_plain_Ier );
    PyTuple_SET_ITEM( const_tuple_3cde4017af6f16526fb10beed8499c5f_tuple, 3, const_unicode_digest_83217f7e651b043c5e654f77e0145ef8 ); Py_INCREF( const_unicode_digest_83217f7e651b043c5e654f77e0145ef8 );
    const_unicode_digest_9fbb4c1cc48de6d90f1747f76f471588 = UNSTREAM_UNICODE( &constant_bin[ 729682 ], 4 );
    const_tuple_unicode_plain_abil_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_abil_tuple, 0, const_unicode_plain_abil ); Py_INCREF( const_unicode_plain_abil );
    const_str_plain__FinnishStemmer__consonants = UNSTREAM_STRING( &constant_bin[ 729686 ], 27, 1 );
    const_unicode_digest_4fc4f204afd06910124f7168bb008746 = UNSTREAM_UNICODE( &constant_bin[ 729713 ], 147 );
    const_str_plain__NorwegianStemmer__s_ending = UNSTREAM_STRING( &constant_bin[ 729860 ], 27, 1 );
    const_unicode_plain_ksi = UNSTREAM_UNICODE( &constant_bin[ 715889 ], 3 );
    const_unicode_digest_060b3f4dee951c3f2ca72fd224660c70 = UNSTREAM_UNICODE( &constant_bin[ 729887 ], 2 );
    const_tuple_a55a0316c7ece74c8344bc9c2b75b9f6_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_a55a0316c7ece74c8344bc9c2b75b9f6_tuple, 0, const_unicode_digest_323b65de5a003fb4f290a568d16c2cda ); Py_INCREF( const_unicode_digest_323b65de5a003fb4f290a568d16c2cda );
    const_unicode_digest_3eb70cd1f5cf77e2e53fec787c1780bf = UNSTREAM_UNICODE( &constant_bin[ 715927 ], 3 );
    PyTuple_SET_ITEM( const_tuple_a55a0316c7ece74c8344bc9c2b75b9f6_tuple, 1, const_unicode_digest_3eb70cd1f5cf77e2e53fec787c1780bf ); Py_INCREF( const_unicode_digest_3eb70cd1f5cf77e2e53fec787c1780bf );
    const_tuple_unicode_plain_siin_unicode_plain_den_unicode_plain_tten_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_siin_unicode_plain_den_unicode_plain_tten_tuple, 0, const_unicode_plain_siin ); Py_INCREF( const_unicode_plain_siin );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_siin_unicode_plain_den_unicode_plain_tten_tuple, 1, const_unicode_plain_den ); Py_INCREF( const_unicode_plain_den );
    const_unicode_plain_tten = UNSTREAM_UNICODE( &constant_bin[ 2167 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_siin_unicode_plain_den_unicode_plain_tten_tuple, 2, const_unicode_plain_tten ); Py_INCREF( const_unicode_plain_tten );
    const_str_plain__ScandinavianStemmer = UNSTREAM_STRING( &constant_bin[ 729889 ], 20, 1 );
    const_tuple_unicode_plain_finnish_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_finnish_tuple, 0, const_unicode_plain_finnish ); Py_INCREF( const_unicode_plain_finnish );
    const_tuple_686bde844e12f4df5b9937dab286cac9_tuple = PyTuple_New( 10 );
    PyTuple_SET_ITEM( const_tuple_686bde844e12f4df5b9937dab286cac9_tuple, 0, const_unicode_plain_kaan ); Py_INCREF( const_unicode_plain_kaan );
    const_unicode_digest_4393ee096ad5bde64ee27b68ee16d743 = UNSTREAM_UNICODE( &constant_bin[ 729909 ], 6 );
    PyTuple_SET_ITEM( const_tuple_686bde844e12f4df5b9937dab286cac9_tuple, 1, const_unicode_digest_4393ee096ad5bde64ee27b68ee16d743 ); Py_INCREF( const_unicode_digest_4393ee096ad5bde64ee27b68ee16d743 );
    const_unicode_plain_sti = UNSTREAM_UNICODE( &constant_bin[ 3416 ], 3 );
    PyTuple_SET_ITEM( const_tuple_686bde844e12f4df5b9937dab286cac9_tuple, 2, const_unicode_plain_sti ); Py_INCREF( const_unicode_plain_sti );
    const_unicode_plain_kin = UNSTREAM_UNICODE( &constant_bin[ 10483 ], 3 );
    PyTuple_SET_ITEM( const_tuple_686bde844e12f4df5b9937dab286cac9_tuple, 3, const_unicode_plain_kin ); Py_INCREF( const_unicode_plain_kin );
    PyTuple_SET_ITEM( const_tuple_686bde844e12f4df5b9937dab286cac9_tuple, 4, const_unicode_plain_han ); Py_INCREF( const_unicode_plain_han );
    PyTuple_SET_ITEM( const_tuple_686bde844e12f4df5b9937dab286cac9_tuple, 5, const_unicode_digest_9fc494b9e47f1ff7a0348a3457292ff5 ); Py_INCREF( const_unicode_digest_9fc494b9e47f1ff7a0348a3457292ff5 );
    PyTuple_SET_ITEM( const_tuple_686bde844e12f4df5b9937dab286cac9_tuple, 6, const_unicode_plain_ko ); Py_INCREF( const_unicode_plain_ko );
    PyTuple_SET_ITEM( const_tuple_686bde844e12f4df5b9937dab286cac9_tuple, 7, const_unicode_digest_834b316728c2ad6be95c431070195163 ); Py_INCREF( const_unicode_digest_834b316728c2ad6be95c431070195163 );
    const_unicode_plain_pa = UNSTREAM_UNICODE( &constant_bin[ 454 ], 2 );
    PyTuple_SET_ITEM( const_tuple_686bde844e12f4df5b9937dab286cac9_tuple, 8, const_unicode_plain_pa ); Py_INCREF( const_unicode_plain_pa );
    const_unicode_digest_ca1cebddc9e8dc05d04cdc8f41829923 = UNSTREAM_UNICODE( &constant_bin[ 719162 ], 3 );
    PyTuple_SET_ITEM( const_tuple_686bde844e12f4df5b9937dab286cac9_tuple, 9, const_unicode_digest_ca1cebddc9e8dc05d04cdc8f41829923 ); Py_INCREF( const_unicode_digest_ca1cebddc9e8dc05d04cdc8f41829923 );
    const_tuple_tuple_d1153c9e51c48c0996c3271524d5509a_tuple_tuple = PyTuple_New( 1 );
    const_tuple_d1153c9e51c48c0996c3271524d5509a_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_d1153c9e51c48c0996c3271524d5509a_tuple, 0, const_unicode_plain_ando ); Py_INCREF( const_unicode_plain_ando );
    PyTuple_SET_ITEM( const_tuple_d1153c9e51c48c0996c3271524d5509a_tuple, 1, const_unicode_plain_iendo ); Py_INCREF( const_unicode_plain_iendo );
    const_unicode_plain_ar = UNSTREAM_UNICODE( &constant_bin[ 250 ], 2 );
    PyTuple_SET_ITEM( const_tuple_d1153c9e51c48c0996c3271524d5509a_tuple, 2, const_unicode_plain_ar ); Py_INCREF( const_unicode_plain_ar );
    PyTuple_SET_ITEM( const_tuple_d1153c9e51c48c0996c3271524d5509a_tuple, 3, const_unicode_plain_er ); Py_INCREF( const_unicode_plain_er );
    const_unicode_plain_ir = UNSTREAM_UNICODE( &constant_bin[ 1272 ], 2 );
    PyTuple_SET_ITEM( const_tuple_d1153c9e51c48c0996c3271524d5509a_tuple, 4, const_unicode_plain_ir ); Py_INCREF( const_unicode_plain_ir );
    PyTuple_SET_ITEM( const_tuple_tuple_d1153c9e51c48c0996c3271524d5509a_tuple_tuple, 0, const_tuple_d1153c9e51c48c0996c3271524d5509a_tuple ); Py_INCREF( const_tuple_d1153c9e51c48c0996c3271524d5509a_tuple );
    const_tuple_613172038fa6e48d0211bb10a817635f_tuple = PyTuple_New( 2 );
    const_unicode_digest_067b82a21c520c7c0ba090bf0d860afc = UNSTREAM_UNICODE( &constant_bin[ 727842 ], 6 );
    PyTuple_SET_ITEM( const_tuple_613172038fa6e48d0211bb10a817635f_tuple, 0, const_unicode_digest_067b82a21c520c7c0ba090bf0d860afc ); Py_INCREF( const_unicode_digest_067b82a21c520c7c0ba090bf0d860afc );
    const_unicode_digest_aca1cde46deeae69842a2c874f0f4532 = UNSTREAM_UNICODE( &constant_bin[ 727842 ], 7 );
    PyTuple_SET_ITEM( const_tuple_613172038fa6e48d0211bb10a817635f_tuple, 1, const_unicode_digest_aca1cde46deeae69842a2c874f0f4532 ); Py_INCREF( const_unicode_digest_aca1cde46deeae69842a2c874f0f4532 );
    const_tuple_b426ffd81fbdd9cc4c4f98795874329c_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_b426ffd81fbdd9cc4c4f98795874329c_tuple, 0, const_unicode_digest_049db6e58dec8faeb2bd7cd1632b9df3 ); Py_INCREF( const_unicode_digest_049db6e58dec8faeb2bd7cd1632b9df3 );
    PyTuple_SET_ITEM( const_tuple_b426ffd81fbdd9cc4c4f98795874329c_tuple, 1, const_unicode_digest_1769a3ecb0d0a23578d5a7518888e81f ); Py_INCREF( const_unicode_digest_1769a3ecb0d0a23578d5a7518888e81f );
    const_unicode_plain_bdfghklmnt = UNSTREAM_UNICODE( &constant_bin[ 729915 ], 10 );
    const_tuple_5632f189044678f18ed25f289d6373d4_tuple = PyTuple_New( 12 );
    const_unicode_plain_yeron = UNSTREAM_UNICODE( &constant_bin[ 729925 ], 5 );
    PyTuple_SET_ITEM( const_tuple_5632f189044678f18ed25f289d6373d4_tuple, 0, const_unicode_plain_yeron ); Py_INCREF( const_unicode_plain_yeron );
    PyTuple_SET_ITEM( const_tuple_5632f189044678f18ed25f289d6373d4_tuple, 1, const_unicode_plain_yendo ); Py_INCREF( const_unicode_plain_yendo );
    PyTuple_SET_ITEM( const_tuple_5632f189044678f18ed25f289d6373d4_tuple, 2, const_unicode_plain_yamos ); Py_INCREF( const_unicode_plain_yamos );
    PyTuple_SET_ITEM( const_tuple_5632f189044678f18ed25f289d6373d4_tuple, 3, const_unicode_plain_yais ); Py_INCREF( const_unicode_plain_yais );
    const_unicode_plain_yan = UNSTREAM_UNICODE( &constant_bin[ 729930 ], 3 );
    PyTuple_SET_ITEM( const_tuple_5632f189044678f18ed25f289d6373d4_tuple, 4, const_unicode_plain_yan ); Py_INCREF( const_unicode_plain_yan );
    const_unicode_plain_yen = UNSTREAM_UNICODE( &constant_bin[ 112314 ], 3 );
    PyTuple_SET_ITEM( const_tuple_5632f189044678f18ed25f289d6373d4_tuple, 5, const_unicode_plain_yen ); Py_INCREF( const_unicode_plain_yen );
    const_unicode_plain_yas = UNSTREAM_UNICODE( &constant_bin[ 268146 ], 3 );
    PyTuple_SET_ITEM( const_tuple_5632f189044678f18ed25f289d6373d4_tuple, 6, const_unicode_plain_yas ); Py_INCREF( const_unicode_plain_yas );
    PyTuple_SET_ITEM( const_tuple_5632f189044678f18ed25f289d6373d4_tuple, 7, const_unicode_plain_yes ); Py_INCREF( const_unicode_plain_yes );
    PyTuple_SET_ITEM( const_tuple_5632f189044678f18ed25f289d6373d4_tuple, 8, const_unicode_plain_ya ); Py_INCREF( const_unicode_plain_ya );
    const_unicode_plain_ye = UNSTREAM_UNICODE( &constant_bin[ 47610 ], 2 );
    PyTuple_SET_ITEM( const_tuple_5632f189044678f18ed25f289d6373d4_tuple, 9, const_unicode_plain_ye ); Py_INCREF( const_unicode_plain_ye );
    PyTuple_SET_ITEM( const_tuple_5632f189044678f18ed25f289d6373d4_tuple, 10, const_unicode_plain_yo ); Py_INCREF( const_unicode_plain_yo );
    const_unicode_digest_f3d41f5e50fd0354fa71bb0a004e0d89 = UNSTREAM_UNICODE( &constant_bin[ 729933 ], 3 );
    PyTuple_SET_ITEM( const_tuple_5632f189044678f18ed25f289d6373d4_tuple, 11, const_unicode_digest_f3d41f5e50fd0354fa71bb0a004e0d89 ); Py_INCREF( const_unicode_digest_f3d41f5e50fd0354fa71bb0a004e0d89 );
    const_str_plain_RussianStemmer = UNSTREAM_STRING( &constant_bin[ 714524 ], 14, 1 );
    const_str_plain__rv_standard = UNSTREAM_STRING( &constant_bin[ 729936 ], 12, 1 );
    const_str_plain__HungarianStemmer__digraphs = UNSTREAM_STRING( &constant_bin[ 729948 ], 27, 1 );
    const_tuple_faf94a6e5c14f1747f509207339df22d_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 729975 ], 173 );
    const_unicode_plain_ete = UNSTREAM_UNICODE( &constant_bin[ 7265 ], 3 );
    const_tuple_unicode_plain_I_unicode_plain_i_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_I_unicode_plain_i_tuple, 0, const_unicode_plain_I ); Py_INCREF( const_unicode_plain_I );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_I_unicode_plain_i_tuple, 1, const_unicode_plain_i ); Py_INCREF( const_unicode_plain_i );
    const_unicode_plain_stul = UNSTREAM_UNICODE( &constant_bin[ 730148 ], 4 );
    const_unicode_digest_22aff32e302512c1e61183bad14841a6 = UNSTREAM_UNICODE( &constant_bin[ 730152 ], 7 );
    const_str_plain__DanishStemmer__vowels = UNSTREAM_STRING( &constant_bin[ 730159 ], 22, 1 );
    const_tuple_56d4780e0b984dc4318c8a0bd10cd4b2_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_56d4780e0b984dc4318c8a0bd10cd4b2_tuple, 0, const_unicode_plain_isch ); Py_INCREF( const_unicode_plain_isch );
    PyTuple_SET_ITEM( const_tuple_56d4780e0b984dc4318c8a0bd10cd4b2_tuple, 1, const_unicode_plain_lich ); Py_INCREF( const_unicode_plain_lich );
    const_unicode_plain_heit = UNSTREAM_UNICODE( &constant_bin[ 730181 ], 4 );
    PyTuple_SET_ITEM( const_tuple_56d4780e0b984dc4318c8a0bd10cd4b2_tuple, 2, const_unicode_plain_heit ); Py_INCREF( const_unicode_plain_heit );
    const_unicode_plain_keit = UNSTREAM_UNICODE( &constant_bin[ 730185 ], 4 );
    PyTuple_SET_ITEM( const_tuple_56d4780e0b984dc4318c8a0bd10cd4b2_tuple, 3, const_unicode_plain_keit ); Py_INCREF( const_unicode_plain_keit );
    PyTuple_SET_ITEM( const_tuple_56d4780e0b984dc4318c8a0bd10cd4b2_tuple, 4, const_unicode_plain_end ); Py_INCREF( const_unicode_plain_end );
    PyTuple_SET_ITEM( const_tuple_56d4780e0b984dc4318c8a0bd10cd4b2_tuple, 5, const_unicode_plain_ung ); Py_INCREF( const_unicode_plain_ung );
    PyTuple_SET_ITEM( const_tuple_56d4780e0b984dc4318c8a0bd10cd4b2_tuple, 6, const_unicode_plain_ig ); Py_INCREF( const_unicode_plain_ig );
    PyTuple_SET_ITEM( const_tuple_56d4780e0b984dc4318c8a0bd10cd4b2_tuple, 7, const_unicode_plain_ik ); Py_INCREF( const_unicode_plain_ik );
    const_unicode_plain_eraIent = UNSTREAM_UNICODE( &constant_bin[ 730189 ], 7 );
    const_unicode_digest_bb920a9c520a3c123ca25a0bee3c6dc2 = UNSTREAM_UNICODE( &constant_bin[ 730196 ], 34 );
    const_unicode_plain_ances = UNSTREAM_UNICODE( &constant_bin[ 111918 ], 5 );
    const_tuple_bd8616f9487ba4c42dff80340f26ed9f_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_bd8616f9487ba4c42dff80340f26ed9f_tuple, 0, const_unicode_plain_kh ); Py_INCREF( const_unicode_plain_kh );
    PyTuple_SET_ITEM( const_tuple_bd8616f9487ba4c42dff80340f26ed9f_tuple, 1, const_unicode_digest_3a1522ca96e4d22468ac84dfbd766769 ); Py_INCREF( const_unicode_digest_3a1522ca96e4d22468ac84dfbd766769 );
    const_str_plain__DanishStemmer__step2_suffixes = UNSTREAM_STRING( &constant_bin[ 730230 ], 30, 1 );
    const_tuple_93e1c64ccad8d75f6fa5b237ce6ca192_tuple = PyTuple_New( 6 );
    const_unicode_plain_astul = UNSTREAM_UNICODE( &constant_bin[ 730260 ], 5 );
    PyTuple_SET_ITEM( const_tuple_93e1c64ccad8d75f6fa5b237ce6ca192_tuple, 0, const_unicode_plain_astul ); Py_INCREF( const_unicode_plain_astul );
    const_unicode_digest_0833766d0ca342628223b5b33272c0cd = UNSTREAM_UNICODE( &constant_bin[ 730265 ], 6 );
    PyTuple_SET_ITEM( const_tuple_93e1c64ccad8d75f6fa5b237ce6ca192_tuple, 1, const_unicode_digest_0833766d0ca342628223b5b33272c0cd ); Py_INCREF( const_unicode_digest_0833766d0ca342628223b5b33272c0cd );
    const_unicode_digest_bfb47e73b9df75847d1d3fa376c4e532 = UNSTREAM_UNICODE( &constant_bin[ 730271 ], 6 );
    PyTuple_SET_ITEM( const_tuple_93e1c64ccad8d75f6fa5b237ce6ca192_tuple, 2, const_unicode_digest_bfb47e73b9df75847d1d3fa376c4e532 ); Py_INCREF( const_unicode_digest_bfb47e73b9df75847d1d3fa376c4e532 );
    PyTuple_SET_ITEM( const_tuple_93e1c64ccad8d75f6fa5b237ce6ca192_tuple, 3, const_unicode_digest_7dc95b8a3411ea2e94cce2c3fb544c6b ); Py_INCREF( const_unicode_digest_7dc95b8a3411ea2e94cce2c3fb544c6b );
    PyTuple_SET_ITEM( const_tuple_93e1c64ccad8d75f6fa5b237ce6ca192_tuple, 4, const_unicode_plain_stul ); Py_INCREF( const_unicode_plain_stul );
    const_unicode_digest_b31349afbdc53065bee8d5dc3bc3488e = UNSTREAM_UNICODE( &constant_bin[ 713670 ], 5 );
    PyTuple_SET_ITEM( const_tuple_93e1c64ccad8d75f6fa5b237ce6ca192_tuple, 5, const_unicode_digest_b31349afbdc53065bee8d5dc3bc3488e ); Py_INCREF( const_unicode_digest_b31349afbdc53065bee8d5dc3bc3488e );
    const_unicode_digest_29eca6fe7cef87eed65d95e955438c63 = UNSTREAM_UNICODE( &constant_bin[ 730277 ], 2 );
    const_tuple_8080a60c5794aeda7756249d3900f6c9_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_8080a60c5794aeda7756249d3900f6c9_tuple, 0, const_unicode_digest_1094ceee53f468647e12ae7ce3aa5571 ); Py_INCREF( const_unicode_digest_1094ceee53f468647e12ae7ce3aa5571 );
    PyTuple_SET_ITEM( const_tuple_8080a60c5794aeda7756249d3900f6c9_tuple, 1, const_unicode_digest_741d144afce1a5137c573767055cb279 ); Py_INCREF( const_unicode_digest_741d144afce1a5137c573767055cb279 );
    const_str_plain__RussianStemmer__verb_suffixes = UNSTREAM_STRING( &constant_bin[ 730279 ], 30, 1 );
    const_unicode_plain_yvshi = UNSTREAM_UNICODE( &constant_bin[ 723106 ], 5 );
    const_tuple_7d48bd73d82ed9770b83395402452efb_tuple = PyTuple_New( 4 );
    const_unicode_plain_aa = UNSTREAM_UNICODE( &constant_bin[ 122174 ], 2 );
    PyTuple_SET_ITEM( const_tuple_7d48bd73d82ed9770b83395402452efb_tuple, 0, const_unicode_plain_aa ); Py_INCREF( const_unicode_plain_aa );
    const_unicode_plain_ee = UNSTREAM_UNICODE( &constant_bin[ 1999 ], 2 );
    PyTuple_SET_ITEM( const_tuple_7d48bd73d82ed9770b83395402452efb_tuple, 1, const_unicode_plain_ee ); Py_INCREF( const_unicode_plain_ee );
    PyTuple_SET_ITEM( const_tuple_7d48bd73d82ed9770b83395402452efb_tuple, 2, const_unicode_plain_oo ); Py_INCREF( const_unicode_plain_oo );
    PyTuple_SET_ITEM( const_tuple_7d48bd73d82ed9770b83395402452efb_tuple, 3, const_unicode_plain_uu ); Py_INCREF( const_unicode_plain_uu );
    const_unicode_plain_as = UNSTREAM_UNICODE( &constant_bin[ 280 ], 2 );
    const_unicode_plain_ok = UNSTREAM_UNICODE( &constant_bin[ 3520 ], 2 );
    const_unicode_plain_selos = UNSTREAM_UNICODE( &constant_bin[ 730309 ], 5 );
    const_tuple_unicode_plain_french_tuple = PyTuple_New( 1 );
    const_unicode_plain_french = UNSTREAM_UNICODE( &constant_bin[ 143519 ], 6 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_french_tuple, 0, const_unicode_plain_french ); Py_INCREF( const_unicode_plain_french );
    const_tuple_a19ef6e59d188e1b2c55a365e53b7e61_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 730314 ], 464 );
    const_unicode_digest_3a0050d9afcbdd171193c271c9e8b604 = UNSTREAM_UNICODE( &constant_bin[ 730778 ], 2 );
    const_str_plain__RussianStemmer__noun_suffixes = UNSTREAM_STRING( &constant_bin[ 730780 ], 30, 1 );
    const_unicode_digest_ea671a3167dde5a7597226999705a682 = UNSTREAM_UNICODE( &constant_bin[ 730810 ], 5 );
    const_str_plain__RussianStemmer__regions_russian = UNSTREAM_STRING( &constant_bin[ 730815 ], 32, 1 );
    const_tuple_unicode_plain_ch_unicode_plain_gh_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ch_unicode_plain_gh_tuple, 0, const_unicode_plain_ch ); Py_INCREF( const_unicode_plain_ch );
    const_unicode_plain_gh = UNSTREAM_UNICODE( &constant_bin[ 4408 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ch_unicode_plain_gh_tuple, 1, const_unicode_plain_gh ); Py_INCREF( const_unicode_plain_gh );
    const_unicode_plain_emment = UNSTREAM_UNICODE( &constant_bin[ 721459 ], 6 );
    const_str_plain__FinnishStemmer__restricted_vowels = UNSTREAM_STRING( &constant_bin[ 730847 ], 34, 1 );
    const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple = PyTuple_New( 17 );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 0, const_unicode_plain_la ); Py_INCREF( const_unicode_plain_la );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 1, const_unicode_plain_na ); Py_INCREF( const_unicode_plain_na );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 2, const_unicode_plain_ete ); Py_INCREF( const_unicode_plain_ete );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 3, const_unicode_digest_58efb8b3f5f4b4f6b7343c1f0bd121ad ); Py_INCREF( const_unicode_digest_58efb8b3f5f4b4f6b7343c1f0bd121ad );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 4, const_unicode_plain_li ); Py_INCREF( const_unicode_plain_li );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 5, const_unicode_digest_1094ceee53f468647e12ae7ce3aa5571 ); Py_INCREF( const_unicode_digest_1094ceee53f468647e12ae7ce3aa5571 );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 6, const_unicode_plain_l ); Py_INCREF( const_unicode_plain_l );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 7, const_unicode_plain_em ); Py_INCREF( const_unicode_plain_em );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 8, const_unicode_plain_n ); Py_INCREF( const_unicode_plain_n );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 9, const_unicode_plain_lo ); Py_INCREF( const_unicode_plain_lo );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 10, const_unicode_plain_no ); Py_INCREF( const_unicode_plain_no );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 11, const_unicode_plain_et ); Py_INCREF( const_unicode_plain_et );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 12, const_unicode_digest_f2caf14fc04d7ff05f9f195dba4e2955 ); Py_INCREF( const_unicode_digest_f2caf14fc04d7ff05f9f195dba4e2955 );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 13, const_unicode_plain_ny ); Py_INCREF( const_unicode_plain_ny );
    const_unicode_digest_aee153dc02be9d32f0ad13995ab6c1b6 = UNSTREAM_UNICODE( &constant_bin[ 33 ], 2 );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 14, const_unicode_digest_aee153dc02be9d32f0ad13995ab6c1b6 ); Py_INCREF( const_unicode_digest_aee153dc02be9d32f0ad13995ab6c1b6 );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 15, const_unicode_digest_8eb04cf7b1ef0a81429527862e4439ee ); Py_INCREF( const_unicode_digest_8eb04cf7b1ef0a81429527862e4439ee );
    const_unicode_plain_nno = UNSTREAM_UNICODE( &constant_bin[ 79713 ], 3 );
    PyTuple_SET_ITEM( const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple, 16, const_unicode_plain_nno ); Py_INCREF( const_unicode_plain_nno );
    const_unicode_plain_est = UNSTREAM_UNICODE( &constant_bin[ 751 ], 3 );
    const_unicode_plain_assiez = UNSTREAM_UNICODE( &constant_bin[ 730881 ], 6 );
    const_tuple_7279dacd5606b71771fe601dd34c7cfb_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 730887 ], 371 );
    const_unicode_digest_44a46dcd1c761a88aec0d1a2d5f5a3c7 = UNSTREAM_UNICODE( &constant_bin[ 720108 ], 3 );
    const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple, 0, const_unicode_plain_A ); Py_INCREF( const_unicode_plain_A );
    PyTuple_SET_ITEM( const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple, 1, const_unicode_plain_U ); Py_INCREF( const_unicode_plain_U );
    PyTuple_SET_ITEM( const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple, 2, const_unicode_plain_E ); Py_INCREF( const_unicode_plain_E );
    PyTuple_SET_ITEM( const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple, 3, const_unicode_plain_a ); Py_INCREF( const_unicode_plain_a );
    PyTuple_SET_ITEM( const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple, 4, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    PyTuple_SET_ITEM( const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple, 5, const_unicode_plain_i ); Py_INCREF( const_unicode_plain_i );
    PyTuple_SET_ITEM( const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple, 6, const_unicode_plain_o ); Py_INCREF( const_unicode_plain_o );
    PyTuple_SET_ITEM( const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple, 7, const_unicode_plain_u ); Py_INCREF( const_unicode_plain_u );
    PyTuple_SET_ITEM( const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple, 8, const_unicode_plain_y ); Py_INCREF( const_unicode_plain_y );
    const_unicode_plain_iqUes = UNSTREAM_UNICODE( &constant_bin[ 721480 ], 5 );
    const_tuple_unicode_plain_russian_tuple = PyTuple_New( 1 );
    const_unicode_plain_russian = UNSTREAM_UNICODE( &constant_bin[ 716252 ], 7 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_russian_tuple, 0, const_unicode_plain_russian ); Py_INCREF( const_unicode_plain_russian );
    const_str_plain__r1_scandinavian = UNSTREAM_STRING( &constant_bin[ 731258 ], 16, 1 );
    const_unicode_plain_zs = UNSTREAM_UNICODE( &constant_bin[ 347197 ], 2 );
    const_tuple_4df1dda7855fe3f9d13b179b8c5138cc_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_4df1dda7855fe3f9d13b179b8c5138cc_tuple, 0, const_str_plain_re ); Py_INCREF( const_str_plain_re );
    PyTuple_SET_ITEM( const_tuple_4df1dda7855fe3f9d13b179b8c5138cc_tuple, 1, const_str_plain_udhr ); Py_INCREF( const_str_plain_udhr );
    PyTuple_SET_ITEM( const_tuple_4df1dda7855fe3f9d13b179b8c5138cc_tuple, 2, const_str_plain_language ); Py_INCREF( const_str_plain_language );
    PyTuple_SET_ITEM( const_tuple_4df1dda7855fe3f9d13b179b8c5138cc_tuple, 3, const_str_plain_stemmer ); Py_INCREF( const_str_plain_stemmer );
    const_str_plain_excerpt = UNSTREAM_STRING( &constant_bin[ 731274 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_4df1dda7855fe3f9d13b179b8c5138cc_tuple, 4, const_str_plain_excerpt ); Py_INCREF( const_str_plain_excerpt );
    PyTuple_SET_ITEM( const_tuple_4df1dda7855fe3f9d13b179b8c5138cc_tuple, 5, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_4df1dda7855fe3f9d13b179b8c5138cc_tuple, 6, const_str_plain_stemmed ); Py_INCREF( const_str_plain_stemmed );
    const_tuple_69edef68b2c6eca22debb83964de78ac_tuple = PyTuple_New( 19 );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 0, const_unicode_plain_eraIent ); Py_INCREF( const_unicode_plain_eraIent );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 1, const_unicode_plain_erions ); Py_INCREF( const_unicode_plain_erions );
    const_unicode_digest_8d072b55e6e7efdcf38455454e7cd575 = UNSTREAM_UNICODE( &constant_bin[ 731281 ], 6 );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 2, const_unicode_digest_8d072b55e6e7efdcf38455454e7cd575 ); Py_INCREF( const_unicode_digest_8d072b55e6e7efdcf38455454e7cd575 );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 3, const_unicode_plain_erais ); Py_INCREF( const_unicode_plain_erais );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 4, const_unicode_plain_erait ); Py_INCREF( const_unicode_plain_erait );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 5, const_unicode_plain_eriez ); Py_INCREF( const_unicode_plain_eriez );
    const_unicode_plain_erons = UNSTREAM_UNICODE( &constant_bin[ 731287 ], 5 );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 6, const_unicode_plain_erons ); Py_INCREF( const_unicode_plain_erons );
    const_unicode_plain_eront = UNSTREAM_UNICODE( &constant_bin[ 731292 ], 5 );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 7, const_unicode_plain_eront ); Py_INCREF( const_unicode_plain_eront );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 8, const_unicode_plain_erai ); Py_INCREF( const_unicode_plain_erai );
    const_unicode_plain_eras = UNSTREAM_UNICODE( &constant_bin[ 20082 ], 4 );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 9, const_unicode_plain_eras ); Py_INCREF( const_unicode_plain_eras );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 10, const_unicode_plain_erez ); Py_INCREF( const_unicode_plain_erez );
    const_unicode_digest_5f596bd3ec510d7e2d9b0769dca7330f = UNSTREAM_UNICODE( &constant_bin[ 731297 ], 4 );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 11, const_unicode_digest_5f596bd3ec510d7e2d9b0769dca7330f ); Py_INCREF( const_unicode_digest_5f596bd3ec510d7e2d9b0769dca7330f );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 12, const_unicode_plain_era ); Py_INCREF( const_unicode_plain_era );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 13, const_unicode_plain_iez ); Py_INCREF( const_unicode_plain_iez );
    const_unicode_digest_04599e99e19a20db6a6e177777941cb2 = UNSTREAM_UNICODE( &constant_bin[ 731297 ], 3 );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 14, const_unicode_digest_04599e99e19a20db6a6e177777941cb2 ); Py_INCREF( const_unicode_digest_04599e99e19a20db6a6e177777941cb2 );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 15, const_unicode_digest_38194bff2827a2d9d0046361a50ca312 ); Py_INCREF( const_unicode_digest_38194bff2827a2d9d0046361a50ca312 );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 16, const_unicode_plain_er ); Py_INCREF( const_unicode_plain_er );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 17, const_unicode_plain_ez ); Py_INCREF( const_unicode_plain_ez );
    PyTuple_SET_ITEM( const_tuple_69edef68b2c6eca22debb83964de78ac_tuple, 18, const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 ); Py_INCREF( const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 );
    const_unicode_digest_23b04996d96763e38f1b5692ca7258cb = UNSTREAM_UNICODE( &constant_bin[ 715838 ], 4 );
    const_unicode_digest_61d5dfdfedbb4893ed3a8545e77992a3 = UNSTREAM_UNICODE( &constant_bin[ 731301 ], 4 );
    const_tuple_tuple_unicode_plain_ic_unicode_plain_iv_tuple_tuple = PyTuple_New( 1 );
    const_tuple_unicode_plain_ic_unicode_plain_iv_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ic_unicode_plain_iv_tuple, 0, const_unicode_plain_ic ); Py_INCREF( const_unicode_plain_ic );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ic_unicode_plain_iv_tuple, 1, const_unicode_plain_iv ); Py_INCREF( const_unicode_plain_iv );
    PyTuple_SET_ITEM( const_tuple_tuple_unicode_plain_ic_unicode_plain_iv_tuple_tuple, 0, const_tuple_unicode_plain_ic_unicode_plain_iv_tuple ); Py_INCREF( const_tuple_unicode_plain_ic_unicode_plain_iv_tuple );
    const_tuple_589e49ae696cce436a88167757c933ec_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_589e49ae696cce436a88167757c933ec_tuple, 0, const_unicode_plain_shch ); Py_INCREF( const_unicode_plain_shch );
    PyTuple_SET_ITEM( const_tuple_589e49ae696cce436a88167757c933ec_tuple, 1, const_unicode_digest_cf8642b5149fa514622b94a4d35894b2 ); Py_INCREF( const_unicode_digest_cf8642b5149fa514622b94a4d35894b2 );
    const_tuple_2901820b7f658cad81e39efab3a56684_tuple = PyTuple_New( 2 );
    const_unicode_digest_60e89fd24ca54036c79996d1b67de2dd = UNSTREAM_UNICODE( &constant_bin[ 731305 ], 2 );
    PyTuple_SET_ITEM( const_tuple_2901820b7f658cad81e39efab3a56684_tuple, 0, const_unicode_digest_60e89fd24ca54036c79996d1b67de2dd ); Py_INCREF( const_unicode_digest_60e89fd24ca54036c79996d1b67de2dd );
    PyTuple_SET_ITEM( const_tuple_2901820b7f658cad81e39efab3a56684_tuple, 1, const_unicode_digest_1a27b7b9da7216996c1254ad3ffa3531 ); Py_INCREF( const_unicode_digest_1a27b7b9da7216996c1254ad3ffa3531 );
    const_tuple_e0b9b30507db9495c0b29b9620ba5238_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_e0b9b30507db9495c0b29b9620ba5238_tuple, 0, const_unicode_plain_m ); Py_INCREF( const_unicode_plain_m );
    const_unicode_digest_daaeb8304eb0dae2e7f2a9b1c98adcb7 = UNSTREAM_UNICODE( &constant_bin[ 731307 ], 2 );
    PyTuple_SET_ITEM( const_tuple_e0b9b30507db9495c0b29b9620ba5238_tuple, 1, const_unicode_digest_daaeb8304eb0dae2e7f2a9b1c98adcb7 ); Py_INCREF( const_unicode_digest_daaeb8304eb0dae2e7f2a9b1c98adcb7 );
    const_unicode_plain_ance = UNSTREAM_UNICODE( &constant_bin[ 18725 ], 4 );
    const_str_plain__PortugueseStemmer__step4_suffixes = UNSTREAM_STRING( &constant_bin[ 731309 ], 34, 1 );
    const_unicode_digest_9273dfd762661b0bce44d5ca0a733faa = UNSTREAM_UNICODE( &constant_bin[ 715771 ], 3 );
    const_str_plain_HungarianStemmer = UNSTREAM_STRING( &constant_bin[ 721788 ], 16, 1 );
    const_tuple_65f125ed4f286331649efeaaa6fca05f_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_65f125ed4f286331649efeaaa6fca05f_tuple, 0, const_unicode_plain_r ); Py_INCREF( const_unicode_plain_r );
    PyTuple_SET_ITEM( const_tuple_65f125ed4f286331649efeaaa6fca05f_tuple, 1, const_unicode_digest_27549ddbeb2e2d4f92a846fb872d3c33 ); Py_INCREF( const_unicode_digest_27549ddbeb2e2d4f92a846fb872d3c33 );
    const_tuple_16b37ec7cb872ad451b56151cdb77735_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 731343 ], 2778 );
    const_tuple_unicode_digest_bd45c14285625ef7d1459fb4891f8e95_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_bd45c14285625ef7d1459fb4891f8e95_tuple, 0, const_unicode_digest_bd45c14285625ef7d1459fb4891f8e95 ); Py_INCREF( const_unicode_digest_bd45c14285625ef7d1459fb4891f8e95 );
    const_tuple_unicode_digest_92351d786d28b4b8e77f42285e4f88f6_tuple = PyTuple_New( 1 );
    const_unicode_digest_92351d786d28b4b8e77f42285e4f88f6 = UNSTREAM_UNICODE( &constant_bin[ 734121 ], 27 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_92351d786d28b4b8e77f42285e4f88f6_tuple, 0, const_unicode_digest_92351d786d28b4b8e77f42285e4f88f6 ); Py_INCREF( const_unicode_digest_92351d786d28b4b8e77f42285e4f88f6 );
    const_unicode_plain_kt = UNSTREAM_UNICODE( &constant_bin[ 63665 ], 2 );
    const_str_plain_ignore_stopwords = UNSTREAM_STRING( &constant_bin[ 722549 ], 16, 1 );
    const_tuple_a444720439c08ed85804bf03a3ba9154_tuple = PyTuple_New( 2 );
    const_unicode_digest_323b4f039d541e713ac997b1e76ef30a = UNSTREAM_UNICODE( &constant_bin[ 734148 ], 2 );
    PyTuple_SET_ITEM( const_tuple_a444720439c08ed85804bf03a3ba9154_tuple, 0, const_unicode_digest_323b4f039d541e713ac997b1e76ef30a ); Py_INCREF( const_unicode_digest_323b4f039d541e713ac997b1e76ef30a );
    PyTuple_SET_ITEM( const_tuple_a444720439c08ed85804bf03a3ba9154_tuple, 1, const_unicode_plain_u ); Py_INCREF( const_unicode_plain_u );
    const_tuple_e4a2b6178dc0988dedc3e67c3c0bb944_tuple = PyTuple_New( 2 );
    const_unicode_digest_4e693b7392fd6e4c8a5a3bad7c1b0144 = UNSTREAM_UNICODE( &constant_bin[ 734150 ], 2 );
    PyTuple_SET_ITEM( const_tuple_e4a2b6178dc0988dedc3e67c3c0bb944_tuple, 0, const_unicode_digest_4e693b7392fd6e4c8a5a3bad7c1b0144 ); Py_INCREF( const_unicode_digest_4e693b7392fd6e4c8a5a3bad7c1b0144 );
    PyTuple_SET_ITEM( const_tuple_e4a2b6178dc0988dedc3e67c3c0bb944_tuple, 1, const_unicode_plain_a ); Py_INCREF( const_unicode_plain_a );
    const_tuple_be984219f2a6953e0abfc723cf12fc82_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_be984219f2a6953e0abfc723cf12fc82_tuple, 0, const_unicode_digest_e0e0b7c6bb19dda9ef5b49f8530ccf71 ); Py_INCREF( const_unicode_digest_e0e0b7c6bb19dda9ef5b49f8530ccf71 );
    PyTuple_SET_ITEM( const_tuple_be984219f2a6953e0abfc723cf12fc82_tuple, 1, const_unicode_plain_v ); Py_INCREF( const_unicode_plain_v );
    const_unicode_digest_37268492117af5aa3a4196bff6776466 = UNSTREAM_UNICODE( &constant_bin[ 734152 ], 4 );
    const_tuple_99e62a547a74aba922bb773545af840d_tuple = PyTuple_New( 2 );
    const_unicode_digest_06d978425788da799bc18038abaf5d5a = UNSTREAM_UNICODE( &constant_bin[ 734156 ], 2 );
    PyTuple_SET_ITEM( const_tuple_99e62a547a74aba922bb773545af840d_tuple, 0, const_unicode_digest_06d978425788da799bc18038abaf5d5a ); Py_INCREF( const_unicode_digest_06d978425788da799bc18038abaf5d5a );
    PyTuple_SET_ITEM( const_tuple_99e62a547a74aba922bb773545af840d_tuple, 1, const_unicode_plain_o ); Py_INCREF( const_unicode_plain_o );
    const_tuple_db0e7b73bc82184a512d41e2dc27d746_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_db0e7b73bc82184a512d41e2dc27d746_tuple, 0, const_unicode_plain_A ); Py_INCREF( const_unicode_plain_A );
    PyTuple_SET_ITEM( const_tuple_db0e7b73bc82184a512d41e2dc27d746_tuple, 1, const_unicode_digest_1a27b7b9da7216996c1254ad3ffa3531 ); Py_INCREF( const_unicode_digest_1a27b7b9da7216996c1254ad3ffa3531 );
    const_str_plain__HungarianStemmer__step8_suffixes = UNSTREAM_STRING( &constant_bin[ 734158 ], 33, 1 );
    const_unicode_plain_ty = UNSTREAM_UNICODE( &constant_bin[ 3613 ], 2 );
    const_unicode_digest_354914660fa63a2d02505a32206f5d79 = UNSTREAM_UNICODE( &constant_bin[ 734191 ], 4 );
    const_unicode_digest_c8044251e6b6f1cdce09ea056e961ef9 = UNSTREAM_UNICODE( &constant_bin[ 734195 ], 229 );
    const_tuple_3bf1a19e4006ee5b3fe56e3ef11f4cd2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_3bf1a19e4006ee5b3fe56e3ef11f4cd2_tuple, 0, const_unicode_digest_d57aecefd8700a0b79449020d4ea1211 ); Py_INCREF( const_unicode_digest_d57aecefd8700a0b79449020d4ea1211 );
    PyTuple_SET_ITEM( const_tuple_3bf1a19e4006ee5b3fe56e3ef11f4cd2_tuple, 1, const_unicode_plain_n ); Py_INCREF( const_unicode_plain_n );
    const_unicode_digest_38dcfca46c19c228cb9d722e84c91dad = UNSTREAM_UNICODE( &constant_bin[ 734424 ], 12 );
    const_unicode_digest_2e3371447b82ef26caa45342c6366bca = UNSTREAM_UNICODE( &constant_bin[ 734436 ], 11 );
    const_unicode_digest_b3e27c894e240690495e6e270a1194a2 = UNSTREAM_UNICODE( &constant_bin[ 734447 ], 2 );
    const_unicode_digest_2274517caed1fbe8acda049ccf86c576 = UNSTREAM_UNICODE( &constant_bin[ 734449 ], 316 );
    const_xrange_256 = MAKE_XRANGE( 0, 256, 1 );
    const_unicode_digest_4a809d79c92d963f27fdaf2f296354f2 = UNSTREAM_UNICODE( &constant_bin[ 734765 ], 21 );
    const_tuple_f76cbe2358e2c788a54a3d5b640f5f04_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_f76cbe2358e2c788a54a3d5b640f5f04_tuple, 0, const_unicode_plain_dd ); Py_INCREF( const_unicode_plain_dd );
    PyTuple_SET_ITEM( const_tuple_f76cbe2358e2c788a54a3d5b640f5f04_tuple, 1, const_unicode_plain_gd ); Py_INCREF( const_unicode_plain_gd );
    PyTuple_SET_ITEM( const_tuple_f76cbe2358e2c788a54a3d5b640f5f04_tuple, 2, const_unicode_plain_nn ); Py_INCREF( const_unicode_plain_nn );
    PyTuple_SET_ITEM( const_tuple_f76cbe2358e2c788a54a3d5b640f5f04_tuple, 3, const_unicode_plain_dt ); Py_INCREF( const_unicode_plain_dt );
    PyTuple_SET_ITEM( const_tuple_f76cbe2358e2c788a54a3d5b640f5f04_tuple, 4, const_unicode_plain_gt ); Py_INCREF( const_unicode_plain_gt );
    PyTuple_SET_ITEM( const_tuple_f76cbe2358e2c788a54a3d5b640f5f04_tuple, 5, const_unicode_plain_kt ); Py_INCREF( const_unicode_plain_kt );
    PyTuple_SET_ITEM( const_tuple_f76cbe2358e2c788a54a3d5b640f5f04_tuple, 6, const_unicode_plain_tt ); Py_INCREF( const_unicode_plain_tt );
    const_tuple_unicode_plain_ene_unicode_plain_en_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ene_unicode_plain_en_tuple, 0, const_unicode_plain_ene ); Py_INCREF( const_unicode_plain_ene );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ene_unicode_plain_en_tuple, 1, const_unicode_plain_en ); Py_INCREF( const_unicode_plain_en );
    const_unicode_plain_atrice = UNSTREAM_UNICODE( &constant_bin[ 81003 ], 6 );
    const_unicode_digest_d02bba12eed79519808e696325a8e7b1 = UNSTREAM_UNICODE( &constant_bin[ 734786 ], 2 );
    const_tuple_651dad646088a5dfd8c659c2a41682ed_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 734788 ], 553 );
    const_unicode_digest_4146a4126dfa7199bdd957a83f1a5d45 = UNSTREAM_UNICODE( &constant_bin[ 735341 ], 966 );
    const_unicode_plain_icale = UNSTREAM_UNICODE( &constant_bin[ 715219 ], 5 );
    const_tuple_dc8d33361ac7399a3d0f321f8e95c4b2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_dc8d33361ac7399a3d0f321f8e95c4b2_tuple, 0, const_unicode_digest_0660733d03d3aa101753bd2da6072150 ); Py_INCREF( const_unicode_digest_0660733d03d3aa101753bd2da6072150 );
    PyTuple_SET_ITEM( const_tuple_dc8d33361ac7399a3d0f321f8e95c4b2_tuple, 1, const_unicode_plain_i ); Py_INCREF( const_unicode_plain_i );
    const_unicode_plain_icala = UNSTREAM_UNICODE( &constant_bin[ 715209 ], 5 );
    const_unicode_plain_ment = UNSTREAM_UNICODE( &constant_bin[ 286 ], 4 );
    const_unicode_plain_icali = UNSTREAM_UNICODE( &constant_bin[ 382544 ], 5 );
    const_unicode_plain_ivshi = UNSTREAM_UNICODE( &constant_bin[ 713594 ], 5 );
    const_unicode_digest_1f2c9bf408b4328895004534244d0899 = UNSTREAM_UNICODE( &constant_bin[ 736307 ], 2 );
    const_tuple_77f671eb92d9e5b84e89d4de32ca1791_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_77f671eb92d9e5b84e89d4de32ca1791_tuple, 0, const_unicode_digest_d9bdae7956cf33bf51000e801aa18ec0 ); Py_INCREF( const_unicode_digest_d9bdae7956cf33bf51000e801aa18ec0 );
    PyTuple_SET_ITEM( const_tuple_77f671eb92d9e5b84e89d4de32ca1791_tuple, 1, const_unicode_plain_sh ); Py_INCREF( const_unicode_plain_sh );
    const_tuple_fb7608fc06bb47c52c1a00144f395302_tuple = PyTuple_New( 5 );
    const_unicode_plain_ie = UNSTREAM_UNICODE( &constant_bin[ 750 ], 2 );
    PyTuple_SET_ITEM( const_tuple_fb7608fc06bb47c52c1a00144f395302_tuple, 0, const_unicode_plain_ie ); Py_INCREF( const_unicode_plain_ie );
    PyTuple_SET_ITEM( const_tuple_fb7608fc06bb47c52c1a00144f395302_tuple, 1, const_unicode_plain_a ); Py_INCREF( const_unicode_plain_a );
    PyTuple_SET_ITEM( const_tuple_fb7608fc06bb47c52c1a00144f395302_tuple, 2, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    PyTuple_SET_ITEM( const_tuple_fb7608fc06bb47c52c1a00144f395302_tuple, 3, const_unicode_plain_i ); Py_INCREF( const_unicode_plain_i );
    const_unicode_digest_e3006e2bebeca379c581132384fe2eff = UNSTREAM_UNICODE( &constant_bin[ 713313 ], 2 );
    PyTuple_SET_ITEM( const_tuple_fb7608fc06bb47c52c1a00144f395302_tuple, 4, const_unicode_digest_e3006e2bebeca379c581132384fe2eff ); Py_INCREF( const_unicode_digest_e3006e2bebeca379c581132384fe2eff );
    const_str_plain__RussianStemmer__derivational_suffixes = UNSTREAM_STRING( &constant_bin[ 736309 ], 38, 1 );
    const_unicode_plain_dzs = UNSTREAM_UNICODE( &constant_bin[ 736347 ], 3 );
    const_unicode_digest_5dc956b3a024e804e9693ab6ea003746 = UNSTREAM_UNICODE( &constant_bin[ 736350 ], 4 );
    const_tuple_7c3f8809c19f91da7ee612f4f48c8357_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_7c3f8809c19f91da7ee612f4f48c8357_tuple, 0, const_unicode_digest_daaeb8304eb0dae2e7f2a9b1c98adcb7 ); Py_INCREF( const_unicode_digest_daaeb8304eb0dae2e7f2a9b1c98adcb7 );
    PyTuple_SET_ITEM( const_tuple_7c3f8809c19f91da7ee612f4f48c8357_tuple, 1, const_unicode_plain_m ); Py_INCREF( const_unicode_plain_m );
    const_unicode_plain_amment = UNSTREAM_UNICODE( &constant_bin[ 721448 ], 6 );
    const_tuple_7b93e7ba12b6e9eb5774d9fb6261550a_tuple = PyTuple_New( 2 );
    const_unicode_digest_7da2661aa14b31c867bd40685ca18c20 = UNSTREAM_UNICODE( &constant_bin[ 736354 ], 2 );
    PyTuple_SET_ITEM( const_tuple_7b93e7ba12b6e9eb5774d9fb6261550a_tuple, 0, const_unicode_digest_7da2661aa14b31c867bd40685ca18c20 ); Py_INCREF( const_unicode_digest_7da2661aa14b31c867bd40685ca18c20 );
    PyTuple_SET_ITEM( const_tuple_7b93e7ba12b6e9eb5774d9fb6261550a_tuple, 1, const_unicode_plain_y ); Py_INCREF( const_unicode_plain_y );
    const_tuple_faa874bf6d816f5651d9d6023ce7cd7e_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_faa874bf6d816f5651d9d6023ce7cd7e_tuple, 0, const_unicode_digest_e64aef8bc630796f1c20d05047369731 ); Py_INCREF( const_unicode_digest_e64aef8bc630796f1c20d05047369731 );
    PyTuple_SET_ITEM( const_tuple_faa874bf6d816f5651d9d6023ce7cd7e_tuple, 1, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    const_tuple_b1b3f739aa671e601b1d8cedaace3566_tuple = PyTuple_New( 2 );
    const_unicode_digest_f1deddd1065541b6e574a41a6de43d9b = UNSTREAM_UNICODE( &constant_bin[ 736356 ], 2 );
    PyTuple_SET_ITEM( const_tuple_b1b3f739aa671e601b1d8cedaace3566_tuple, 0, const_unicode_digest_f1deddd1065541b6e574a41a6de43d9b ); Py_INCREF( const_unicode_digest_f1deddd1065541b6e574a41a6de43d9b );
    PyTuple_SET_ITEM( const_tuple_b1b3f739aa671e601b1d8cedaace3566_tuple, 1, const_unicode_plain_f ); Py_INCREF( const_unicode_plain_f );
    const_unicode_plain_encias = UNSTREAM_UNICODE( &constant_bin[ 730443 ], 6 );
    const_unicode_digest_aee6ee1b9b91d76f88fa57dafe9aaeb6 = UNSTREAM_UNICODE( &constant_bin[ 715087 ], 7 );
    const_tuple_50cf5626dc820b899305d6108d631dae_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_50cf5626dc820b899305d6108d631dae_tuple, 0, const_unicode_plain_itiv ); Py_INCREF( const_unicode_plain_itiv );
    PyTuple_SET_ITEM( const_tuple_50cf5626dc820b899305d6108d631dae_tuple, 1, const_unicode_plain_itiva ); Py_INCREF( const_unicode_plain_itiva );
    PyTuple_SET_ITEM( const_tuple_50cf5626dc820b899305d6108d631dae_tuple, 2, const_unicode_plain_itive ); Py_INCREF( const_unicode_plain_itive );
    const_unicode_plain_itivi = UNSTREAM_UNICODE( &constant_bin[ 713621 ], 5 );
    PyTuple_SET_ITEM( const_tuple_50cf5626dc820b899305d6108d631dae_tuple, 3, const_unicode_plain_itivi ); Py_INCREF( const_unicode_plain_itivi );
    PyTuple_SET_ITEM( const_tuple_50cf5626dc820b899305d6108d631dae_tuple, 4, const_unicode_digest_a104078290e2ef7652ddf4b87d31a1b1 ); Py_INCREF( const_unicode_digest_a104078290e2ef7652ddf4b87d31a1b1 );
    PyTuple_SET_ITEM( const_tuple_50cf5626dc820b899305d6108d631dae_tuple, 5, const_unicode_digest_22715462b9096530b59c4d7feb91bf3f ); Py_INCREF( const_unicode_digest_22715462b9096530b59c4d7feb91bf3f );
    const_unicode_plain_itoare = UNSTREAM_UNICODE( &constant_bin[ 715157 ], 6 );
    PyTuple_SET_ITEM( const_tuple_50cf5626dc820b899305d6108d631dae_tuple, 6, const_unicode_plain_itoare ); Py_INCREF( const_unicode_plain_itoare );
    const_unicode_plain_itor = UNSTREAM_UNICODE( &constant_bin[ 75550 ], 4 );
    PyTuple_SET_ITEM( const_tuple_50cf5626dc820b899305d6108d631dae_tuple, 7, const_unicode_plain_itor ); Py_INCREF( const_unicode_plain_itor );
    PyTuple_SET_ITEM( const_tuple_50cf5626dc820b899305d6108d631dae_tuple, 8, const_unicode_plain_itori ); Py_INCREF( const_unicode_plain_itori );
    const_str_plain_RomanianStemmer = UNSTREAM_STRING( &constant_bin[ 717316 ], 15, 1 );
    const_unicode_digest_c4c0cdb9d05e856c7575106e9c55e55d = UNSTREAM_UNICODE( &constant_bin[ 736358 ], 5 );
    const_unicode_plain_danish = UNSTREAM_UNICODE( &constant_bin[ 722163 ], 6 );
    const_unicode_plain_nsa = UNSTREAM_UNICODE( &constant_bin[ 217569 ], 3 );
    const_tuple_771c93f72ced5928d5cb9dfc65e3b3e2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_771c93f72ced5928d5cb9dfc65e3b3e2_tuple, 0, const_unicode_plain_fullt ); Py_INCREF( const_unicode_plain_fullt );
    PyTuple_SET_ITEM( const_tuple_771c93f72ced5928d5cb9dfc65e3b3e2_tuple, 1, const_unicode_digest_30985e0992b11fb080ad7d9185ede5e8 ); Py_INCREF( const_unicode_digest_30985e0992b11fb080ad7d9185ede5e8 );
    const_tuple_64d77b551539755c4fc18b73746163f5_tuple = PyTuple_New( 16 );
    const_unicode_plain_icitate = UNSTREAM_UNICODE( &constant_bin[ 715025 ], 7 );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 0, const_unicode_plain_icitate ); Py_INCREF( const_unicode_plain_icitate );
    const_unicode_plain_icitati = UNSTREAM_UNICODE( &constant_bin[ 715037 ], 7 );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 1, const_unicode_plain_icitati ); Py_INCREF( const_unicode_plain_icitati );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 2, const_unicode_digest_aee6ee1b9b91d76f88fa57dafe9aaeb6 ); Py_INCREF( const_unicode_digest_aee6ee1b9b91d76f88fa57dafe9aaeb6 );
    const_unicode_digest_bfc660c6f02a99a63e034bb0c635c9b1 = UNSTREAM_UNICODE( &constant_bin[ 715049 ], 9 );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 3, const_unicode_digest_bfc660c6f02a99a63e034bb0c635c9b1 ); Py_INCREF( const_unicode_digest_bfc660c6f02a99a63e034bb0c635c9b1 );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 4, const_unicode_plain_icator ); Py_INCREF( const_unicode_plain_icator );
    const_unicode_plain_icatori = UNSTREAM_UNICODE( &constant_bin[ 715063 ], 7 );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 5, const_unicode_plain_icatori ); Py_INCREF( const_unicode_plain_icatori );
    const_unicode_plain_iciv = UNSTREAM_UNICODE( &constant_bin[ 715168 ], 4 );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 6, const_unicode_plain_iciv ); Py_INCREF( const_unicode_plain_iciv );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 7, const_unicode_plain_iciva ); Py_INCREF( const_unicode_plain_iciva );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 8, const_unicode_plain_icive ); Py_INCREF( const_unicode_plain_icive );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 9, const_unicode_plain_icivi ); Py_INCREF( const_unicode_plain_icivi );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 10, const_unicode_digest_527d908fad8e209f9a2669c6e37e1fbb ); Py_INCREF( const_unicode_digest_527d908fad8e209f9a2669c6e37e1fbb );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 11, const_unicode_plain_ical ); Py_INCREF( const_unicode_plain_ical );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 12, const_unicode_plain_icala ); Py_INCREF( const_unicode_plain_icala );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 13, const_unicode_plain_icale ); Py_INCREF( const_unicode_plain_icale );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 14, const_unicode_plain_icali ); Py_INCREF( const_unicode_plain_icali );
    const_unicode_digest_3d845d6622f621a61795c4cf344cacf7 = UNSTREAM_UNICODE( &constant_bin[ 715239 ], 6 );
    PyTuple_SET_ITEM( const_tuple_64d77b551539755c4fc18b73746163f5_tuple, 15, const_unicode_digest_3d845d6622f621a61795c4cf344cacf7 ); Py_INCREF( const_unicode_digest_3d845d6622f621a61795c4cf344cacf7 );
    const_tuple_f924b321de9aa9cca45835accd5cb58a_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 736363 ], 922 );
    const_tuple_eb0e9336027c8b1dc1fe8296977c0a7d_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_eb0e9336027c8b1dc1fe8296977c0a7d_tuple, 0, const_unicode_digest_daa44caae2c790737a8c24bc0be4162b ); Py_INCREF( const_unicode_digest_daa44caae2c790737a8c24bc0be4162b );
    PyTuple_SET_ITEM( const_tuple_eb0e9336027c8b1dc1fe8296977c0a7d_tuple, 1, const_unicode_plain_y ); Py_INCREF( const_unicode_plain_y );
    const_unicode_digest_54ff4a85fb3d821462dde811b3c177cc = UNSTREAM_UNICODE( &constant_bin[ 737285 ], 5 );
    const_tuple_7b67d509afa9aa514095723bb027880d_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_7b67d509afa9aa514095723bb027880d_tuple, 0, const_unicode_digest_3f8b984275c38c3bda625b33f1771959 ); Py_INCREF( const_unicode_digest_3f8b984275c38c3bda625b33f1771959 );
    PyTuple_SET_ITEM( const_tuple_7b67d509afa9aa514095723bb027880d_tuple, 1, const_unicode_digest_07eb01e4392a9b5112cb3f938ee28574 ); Py_INCREF( const_unicode_digest_07eb01e4392a9b5112cb3f938ee28574 );
    const_unicode_plain_cs = UNSTREAM_UNICODE( &constant_bin[ 427 ], 2 );
    const_tuple_14a12a5482d894dcd4ddfab6cd3d2db3_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_14a12a5482d894dcd4ddfab6cd3d2db3_tuple, 0, const_unicode_digest_a0c07d63a0baa715c0844159f987ebc4 ); Py_INCREF( const_unicode_digest_a0c07d63a0baa715c0844159f987ebc4 );
    PyTuple_SET_ITEM( const_tuple_14a12a5482d894dcd4ddfab6cd3d2db3_tuple, 1, const_unicode_plain_o ); Py_INCREF( const_unicode_plain_o );
    const_str_plain__PortugueseStemmer__vowels = UNSTREAM_STRING( &constant_bin[ 737290 ], 26, 1 );
    const_unicode_plain_avel = UNSTREAM_UNICODE( &constant_bin[ 220175 ], 4 );
    const_unicode_plain_mente = UNSTREAM_UNICODE( &constant_bin[ 6411 ], 5 );
    const_tuple_62b0a6e40bd18f99e49b8d10b307b29b_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_62b0a6e40bd18f99e49b8d10b307b29b_tuple, 0, const_unicode_plain_s ); Py_INCREF( const_unicode_plain_s );
    const_unicode_digest_6550225a0b5e2d48d988db8b2dd919fb = UNSTREAM_UNICODE( &constant_bin[ 737316 ], 2 );
    PyTuple_SET_ITEM( const_tuple_62b0a6e40bd18f99e49b8d10b307b29b_tuple, 1, const_unicode_digest_6550225a0b5e2d48d988db8b2dd919fb ); Py_INCREF( const_unicode_digest_6550225a0b5e2d48d988db8b2dd919fb );
    const_unicode_digest_7db9f2dea9e1d2886b29d5bade251709 = UNSTREAM_UNICODE( &constant_bin[ 737318 ], 4 );
    const_unicode_plain_ancia = UNSTREAM_UNICODE( &constant_bin[ 714899 ], 5 );
    const_unicode_digest_1bb29b5f768cb16ccd8e386bc3125fe1 = UNSTREAM_UNICODE( &constant_bin[ 737322 ], 2 );
    const_tuple_730978f03211e3bbdd5bec24058bb6c7_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_730978f03211e3bbdd5bec24058bb6c7_tuple, 0, const_unicode_plain_d ); Py_INCREF( const_unicode_plain_d );
    PyTuple_SET_ITEM( const_tuple_730978f03211e3bbdd5bec24058bb6c7_tuple, 1, const_unicode_digest_185c6d9894f4ed8a07665716865b99d7 ); Py_INCREF( const_unicode_digest_185c6d9894f4ed8a07665716865b99d7 );
    const_unicode_digest_471cac2009577067bf65eeecd4cd9ef0 = UNSTREAM_UNICODE( &constant_bin[ 737324 ], 28 );
    const_tuple_unicode_plain_swedish_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_swedish_tuple, 0, const_unicode_plain_swedish ); Py_INCREF( const_unicode_plain_swedish );
    const_tuple_8d452526ebecaf5c65d57e47f06a0155_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 737352 ], 287 );
    const_unicode_digest_127608a3534fe68c04fb1f948fc9474c = UNSTREAM_UNICODE( &constant_bin[ 719640 ], 2 );
    const_tuple_c1d5cd1fbabe9523917ca65d7abdb78e_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_c1d5cd1fbabe9523917ca65d7abdb78e_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_c1d5cd1fbabe9523917ca65d7abdb78e_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_c1d5cd1fbabe9523917ca65d7abdb78e_tuple, 2, const_str_plain_step1_success ); Py_INCREF( const_str_plain_step1_success );
    PyTuple_SET_ITEM( const_tuple_c1d5cd1fbabe9523917ca65d7abdb78e_tuple, 3, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_c1d5cd1fbabe9523917ca65d7abdb78e_tuple, 4, const_str_plain_r2 ); Py_INCREF( const_str_plain_r2 );
    PyTuple_SET_ITEM( const_tuple_c1d5cd1fbabe9523917ca65d7abdb78e_tuple, 5, const_str_plain_rv ); Py_INCREF( const_str_plain_rv );
    PyTuple_SET_ITEM( const_tuple_c1d5cd1fbabe9523917ca65d7abdb78e_tuple, 6, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    const_str_plain_pre_suff = UNSTREAM_STRING( &constant_bin[ 737639 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_c1d5cd1fbabe9523917ca65d7abdb78e_tuple, 7, const_str_plain_pre_suff ); Py_INCREF( const_str_plain_pre_suff );
    const_str_plain__RomanianStemmer__step1_suffixes = UNSTREAM_STRING( &constant_bin[ 737647 ], 32, 1 );
    const_str_plain__RussianStemmer__cyrillic_to_roman = UNSTREAM_STRING( &constant_bin[ 737679 ], 34, 1 );
    const_unicode_digest_1dca722d965c7a1888eed7a3d3498641 = UNSTREAM_UNICODE( &constant_bin[ 715301 ], 6 );
    const_tuple_219621fff021e23d2ead53cf1b753854_tuple = PyTuple_New( 2 );
    const_unicode_digest_772da83eae0be360e6dd4cbb578ce290 = UNSTREAM_UNICODE( &constant_bin[ 737713 ], 6 );
    PyTuple_SET_ITEM( const_tuple_219621fff021e23d2ead53cf1b753854_tuple, 0, const_unicode_digest_772da83eae0be360e6dd4cbb578ce290 ); Py_INCREF( const_unicode_digest_772da83eae0be360e6dd4cbb578ce290 );
    PyTuple_SET_ITEM( const_tuple_219621fff021e23d2ead53cf1b753854_tuple, 1, const_unicode_digest_aade7c92617df6f0048d1e16c7b6a714 ); Py_INCREF( const_unicode_digest_aade7c92617df6f0048d1e16c7b6a714 );
    const_tuple_02aa7bc7ed6ea108d2d884af1ee56087_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 737719 ], 350 );
    const_unicode_digest_7aba63cfda7797771cb4210f1bb01e9d = UNSTREAM_UNICODE( &constant_bin[ 713315 ], 2 );
    const_str_plain__GermanStemmer__st_ending = UNSTREAM_STRING( &constant_bin[ 738069 ], 25, 1 );
    const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple = PyTuple_New( 12 );
    PyTuple_SET_ITEM( const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple, 0, const_unicode_digest_e8e8e8de8b0402c17abe92c438e8720b ); Py_INCREF( const_unicode_digest_e8e8e8de8b0402c17abe92c438e8720b );
    const_unicode_digest_2fa3e59ebc093813ad81b9971058f355 = UNSTREAM_UNICODE( &constant_bin[ 738094 ], 5 );
    PyTuple_SET_ITEM( const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple, 1, const_unicode_digest_2fa3e59ebc093813ad81b9971058f355 ); Py_INCREF( const_unicode_digest_2fa3e59ebc093813ad81b9971058f355 );
    PyTuple_SET_ITEM( const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple, 2, const_unicode_digest_9fbb4c1cc48de6d90f1747f76f471588 ); Py_INCREF( const_unicode_digest_9fbb4c1cc48de6d90f1747f76f471588 );
    PyTuple_SET_ITEM( const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple, 3, const_unicode_digest_37268492117af5aa3a4196bff6776466 ); Py_INCREF( const_unicode_digest_37268492117af5aa3a4196bff6776466 );
    const_unicode_digest_10efadad13cc4945647a3576963f3d59 = UNSTREAM_UNICODE( &constant_bin[ 738099 ], 5 );
    PyTuple_SET_ITEM( const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple, 4, const_unicode_digest_10efadad13cc4945647a3576963f3d59 ); Py_INCREF( const_unicode_digest_10efadad13cc4945647a3576963f3d59 );
    PyTuple_SET_ITEM( const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple, 5, const_unicode_digest_d024846c1eaba62fc7dccb44fc853458 ); Py_INCREF( const_unicode_digest_d024846c1eaba62fc7dccb44fc853458 );
    PyTuple_SET_ITEM( const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple, 6, const_unicode_digest_739da3409ac9b0524adb17c087154e99 ); Py_INCREF( const_unicode_digest_739da3409ac9b0524adb17c087154e99 );
    PyTuple_SET_ITEM( const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple, 7, const_unicode_digest_d1b48ed3a76ac644cab2c672b1d63969 ); Py_INCREF( const_unicode_digest_d1b48ed3a76ac644cab2c672b1d63969 );
    PyTuple_SET_ITEM( const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple, 8, const_unicode_digest_ac56d9555ca8849deb4827d87d58e877 ); Py_INCREF( const_unicode_digest_ac56d9555ca8849deb4827d87d58e877 );
    const_unicode_digest_2d54f1c5a1e3b07e4d6b4831651c53ce = UNSTREAM_UNICODE( &constant_bin[ 715621 ], 3 );
    PyTuple_SET_ITEM( const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple, 9, const_unicode_digest_2d54f1c5a1e3b07e4d6b4831651c53ce ); Py_INCREF( const_unicode_digest_2d54f1c5a1e3b07e4d6b4831651c53ce );
    PyTuple_SET_ITEM( const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple, 10, const_unicode_digest_38cc918aa65716ade119e9cb71f38954 ); Py_INCREF( const_unicode_digest_38cc918aa65716ade119e9cb71f38954 );
    PyTuple_SET_ITEM( const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple, 11, const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 ); Py_INCREF( const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 );
    const_unicode_plain_eleg = UNSTREAM_UNICODE( &constant_bin[ 264495 ], 4 );
    const_str_plain__RomanianStemmer__step3_suffixes = UNSTREAM_STRING( &constant_bin[ 738104 ], 32, 1 );
    const_unicode_plain_ai = UNSTREAM_UNICODE( &constant_bin[ 1717 ], 2 );
    const_str_plain__SwedishStemmer__step2_suffixes = UNSTREAM_STRING( &constant_bin[ 738136 ], 31, 1 );
    const_unicode_digest_71e905b11a810a0c249b8d42f53379d6 = UNSTREAM_UNICODE( &constant_bin[ 727819 ], 2 );
    const_unicode_digest_c037c04b68df914b0113d18587e61c4f = UNSTREAM_UNICODE( &constant_bin[ 713672 ], 2 );
    const_tuple_bb54ed81b8031ebb4abb8754ce70dbaf_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_bb54ed81b8031ebb4abb8754ce70dbaf_tuple, 0, const_unicode_digest_1f2c9bf408b4328895004534244d0899 ); Py_INCREF( const_unicode_digest_1f2c9bf408b4328895004534244d0899 );
    PyTuple_SET_ITEM( const_tuple_bb54ed81b8031ebb4abb8754ce70dbaf_tuple, 1, const_unicode_plain_p ); Py_INCREF( const_unicode_plain_p );
    const_tuple_2b1549b64f8ac42e80a45692dd5adeae_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_2b1549b64f8ac42e80a45692dd5adeae_tuple, 0, const_unicode_plain_z ); Py_INCREF( const_unicode_plain_z );
    PyTuple_SET_ITEM( const_tuple_2b1549b64f8ac42e80a45692dd5adeae_tuple, 1, const_unicode_digest_a91c0587a50638ab09b4e9bfd5089ee8 ); Py_INCREF( const_unicode_digest_a91c0587a50638ab09b4e9bfd5089ee8 );
    const_unicode_digest_e0316f5240157982f6f73bf8990e84e2 = UNSTREAM_UNICODE( &constant_bin[ 738167 ], 892 );
    const_tuple_2c67993aee2f31d2756d82af9e03e493_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_2c67993aee2f31d2756d82af9e03e493_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_2c67993aee2f31d2756d82af9e03e493_tuple, 1, const_str_plain_language ); Py_INCREF( const_str_plain_language );
    PyTuple_SET_ITEM( const_tuple_2c67993aee2f31d2756d82af9e03e493_tuple, 2, const_str_plain_ignore_stopwords ); Py_INCREF( const_str_plain_ignore_stopwords );
    PyTuple_SET_ITEM( const_tuple_2c67993aee2f31d2756d82af9e03e493_tuple, 3, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    const_unicode_digest_691747f70aea8454eeb7c1aa1e54f459 = UNSTREAM_UNICODE( &constant_bin[ 739059 ], 15 );
    const_str_plain__FinnishStemmer__step1_suffixes = UNSTREAM_STRING( &constant_bin[ 739074 ], 31, 1 );
    const_tuple_tuple_42984e9c76991a83543acab6e2f18f9a_tuple_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_tuple_42984e9c76991a83543acab6e2f18f9a_tuple_tuple, 0, const_tuple_42984e9c76991a83543acab6e2f18f9a_tuple ); Py_INCREF( const_tuple_42984e9c76991a83543acab6e2f18f9a_tuple );
    const_tuple_cc2e4d3fd1a1cd22940575f16ccfe749_tuple = PyTuple_New( 7 );
    const_unicode_digest_4eac633339ede7563c52dd33096bda1f = UNSTREAM_UNICODE( &constant_bin[ 738099 ], 3 );
    PyTuple_SET_ITEM( const_tuple_cc2e4d3fd1a1cd22940575f16ccfe749_tuple, 0, const_unicode_digest_4eac633339ede7563c52dd33096bda1f ); Py_INCREF( const_unicode_digest_4eac633339ede7563c52dd33096bda1f );
    PyTuple_SET_ITEM( const_tuple_cc2e4d3fd1a1cd22940575f16ccfe749_tuple, 1, const_unicode_digest_44a46dcd1c761a88aec0d1a2d5f5a3c7 ); Py_INCREF( const_unicode_digest_44a46dcd1c761a88aec0d1a2d5f5a3c7 );
    const_unicode_digest_02c5a5223576c56da838040f20018fa0 = UNSTREAM_UNICODE( &constant_bin[ 738094 ], 3 );
    PyTuple_SET_ITEM( const_tuple_cc2e4d3fd1a1cd22940575f16ccfe749_tuple, 2, const_unicode_digest_02c5a5223576c56da838040f20018fa0 ); Py_INCREF( const_unicode_digest_02c5a5223576c56da838040f20018fa0 );
    PyTuple_SET_ITEM( const_tuple_cc2e4d3fd1a1cd22940575f16ccfe749_tuple, 3, const_unicode_plain_ok ); Py_INCREF( const_unicode_plain_ok );
    PyTuple_SET_ITEM( const_tuple_cc2e4d3fd1a1cd22940575f16ccfe749_tuple, 4, const_unicode_plain_ek ); Py_INCREF( const_unicode_plain_ek );
    PyTuple_SET_ITEM( const_tuple_cc2e4d3fd1a1cd22940575f16ccfe749_tuple, 5, const_unicode_plain_ak ); Py_INCREF( const_unicode_plain_ak );
    PyTuple_SET_ITEM( const_tuple_cc2e4d3fd1a1cd22940575f16ccfe749_tuple, 6, const_unicode_plain_k ); Py_INCREF( const_unicode_plain_k );
    const_tuple_99a0039f1c7114ab6c9055da7eed5ad0_tuple = PyTuple_New( 6 );
    const_unicode_digest_e5650dd7bd458f2a7390ab7b0abb4884 = UNSTREAM_UNICODE( &constant_bin[ 739105 ], 4 );
    PyTuple_SET_ITEM( const_tuple_99a0039f1c7114ab6c9055da7eed5ad0_tuple, 0, const_unicode_digest_e5650dd7bd458f2a7390ab7b0abb4884 ); Py_INCREF( const_unicode_digest_e5650dd7bd458f2a7390ab7b0abb4884 );
    PyTuple_SET_ITEM( const_tuple_99a0039f1c7114ab6c9055da7eed5ad0_tuple, 1, const_unicode_digest_5dc956b3a024e804e9693ab6ea003746 ); Py_INCREF( const_unicode_digest_5dc956b3a024e804e9693ab6ea003746 );
    PyTuple_SET_ITEM( const_tuple_99a0039f1c7114ab6c9055da7eed5ad0_tuple, 2, const_unicode_digest_2d54f1c5a1e3b07e4d6b4831651c53ce ); Py_INCREF( const_unicode_digest_2d54f1c5a1e3b07e4d6b4831651c53ce );
    PyTuple_SET_ITEM( const_tuple_99a0039f1c7114ab6c9055da7eed5ad0_tuple, 3, const_unicode_digest_c95bc571b87dd9c4d022227dbdc517d0 ); Py_INCREF( const_unicode_digest_c95bc571b87dd9c4d022227dbdc517d0 );
    const_unicode_digest_22f24d5c8bb0288ee67644a450638195 = UNSTREAM_UNICODE( &constant_bin[ 739109 ], 6 );
    PyTuple_SET_ITEM( const_tuple_99a0039f1c7114ab6c9055da7eed5ad0_tuple, 4, const_unicode_digest_22f24d5c8bb0288ee67644a450638195 ); Py_INCREF( const_unicode_digest_22f24d5c8bb0288ee67644a450638195 );
    PyTuple_SET_ITEM( const_tuple_99a0039f1c7114ab6c9055da7eed5ad0_tuple, 5, const_unicode_digest_354914660fa63a2d02505a32206f5d79 ); Py_INCREF( const_unicode_digest_354914660fa63a2d02505a32206f5d79 );
    const_tuple_a83d0aad9a8e67c97642281034ba06d4_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_a83d0aad9a8e67c97642281034ba06d4_tuple, 0, const_unicode_digest_b227e519e93fd3ff048fb6813e177f64 ); Py_INCREF( const_unicode_digest_b227e519e93fd3ff048fb6813e177f64 );
    PyTuple_SET_ITEM( const_tuple_a83d0aad9a8e67c97642281034ba06d4_tuple, 1, const_unicode_digest_ce2dd360fc97fd6259923ac8b094cfb0 ); Py_INCREF( const_unicode_digest_ce2dd360fc97fd6259923ac8b094cfb0 );
    const_tuple_unicode_plain_dutch_tuple = PyTuple_New( 1 );
    const_unicode_plain_dutch = UNSTREAM_UNICODE( &constant_bin[ 724527 ], 5 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_dutch_tuple, 0, const_unicode_plain_dutch ); Py_INCREF( const_unicode_plain_dutch );
    const_tuple_a3d49bbeb2468d8677161c823ade854c_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_a3d49bbeb2468d8677161c823ade854c_tuple, 0, const_unicode_plain_gd ); Py_INCREF( const_unicode_plain_gd );
    PyTuple_SET_ITEM( const_tuple_a3d49bbeb2468d8677161c823ade854c_tuple, 1, const_unicode_plain_dt ); Py_INCREF( const_unicode_plain_dt );
    PyTuple_SET_ITEM( const_tuple_a3d49bbeb2468d8677161c823ade854c_tuple, 2, const_unicode_plain_gt ); Py_INCREF( const_unicode_plain_gt );
    PyTuple_SET_ITEM( const_tuple_a3d49bbeb2468d8677161c823ade854c_tuple, 3, const_unicode_plain_kt ); Py_INCREF( const_unicode_plain_kt );
    const_unicode_plain_iqU = UNSTREAM_UNICODE( &constant_bin[ 719746 ], 3 );
    const_unicode_plain_ments = UNSTREAM_UNICODE( &constant_bin[ 1565 ], 5 );
    const_tuple_5ac6184bb29ef34436ac6fd7caeea57d_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_5ac6184bb29ef34436ac6fd7caeea57d_tuple, 0, const_unicode_digest_060b3f4dee951c3f2ca72fd224660c70 ); Py_INCREF( const_unicode_digest_060b3f4dee951c3f2ca72fd224660c70 );
    PyTuple_SET_ITEM( const_tuple_5ac6184bb29ef34436ac6fd7caeea57d_tuple, 1, const_unicode_plain_g ); Py_INCREF( const_unicode_plain_g );
    const_unicode_plain_eig = UNSTREAM_UNICODE( &constant_bin[ 55501 ], 3 );
    const_unicode_digest_e98852863fcd62b0f90e33e4ad58a6fd = UNSTREAM_UNICODE( &constant_bin[ 739115 ], 2 );
    const_unicode_plain_seen = UNSTREAM_UNICODE( &constant_bin[ 72810 ], 4 );
    const_unicode_digest_f93b9eb49ae41784f77c7dc9cf4ff867 = UNSTREAM_UNICODE( &constant_bin[ 739117 ], 130 );
    const_tuple_unicode_plain_lich_unicode_plain_heit_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_lich_unicode_plain_heit_tuple, 0, const_unicode_plain_lich ); Py_INCREF( const_unicode_plain_lich );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_lich_unicode_plain_heit_tuple, 1, const_unicode_plain_heit ); Py_INCREF( const_unicode_plain_heit );
    const_tuple_unicode_plain_iune_unicode_plain_iuni_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_iune_unicode_plain_iuni_tuple, 0, const_unicode_plain_iune ); Py_INCREF( const_unicode_plain_iune );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_iune_unicode_plain_iuni_tuple, 1, const_unicode_plain_iuni ); Py_INCREF( const_unicode_plain_iuni );
    const_tuple_3240bbfe0aed66c65b85a290788af24a_tuple = PyTuple_New( 2 );
    const_unicode_digest_a538341bae463cc2be606b27b11f483f = UNSTREAM_UNICODE( &constant_bin[ 739247 ], 2 );
    PyTuple_SET_ITEM( const_tuple_3240bbfe0aed66c65b85a290788af24a_tuple, 0, const_unicode_digest_a538341bae463cc2be606b27b11f483f ); Py_INCREF( const_unicode_digest_a538341bae463cc2be606b27b11f483f );
    PyTuple_SET_ITEM( const_tuple_3240bbfe0aed66c65b85a290788af24a_tuple, 1, const_unicode_plain_d ); Py_INCREF( const_unicode_plain_d );
    const_tuple_str_plain_self_str_plain_word_str_plain_r1_str_plain_suffix_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_word_str_plain_r1_str_plain_suffix_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_word_str_plain_r1_str_plain_suffix_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_word_str_plain_r1_str_plain_suffix_tuple, 2, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_word_str_plain_r1_str_plain_suffix_tuple, 3, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    const_tuple_06b9bf63a73548cded550ebb4a44d0a1_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_06b9bf63a73548cded550ebb4a44d0a1_tuple, 0, const_unicode_plain_heden ); Py_INCREF( const_unicode_plain_heden );
    PyTuple_SET_ITEM( const_tuple_06b9bf63a73548cded550ebb4a44d0a1_tuple, 1, const_unicode_plain_ene ); Py_INCREF( const_unicode_plain_ene );
    PyTuple_SET_ITEM( const_tuple_06b9bf63a73548cded550ebb4a44d0a1_tuple, 2, const_unicode_plain_en ); Py_INCREF( const_unicode_plain_en );
    PyTuple_SET_ITEM( const_tuple_06b9bf63a73548cded550ebb4a44d0a1_tuple, 3, const_unicode_plain_se ); Py_INCREF( const_unicode_plain_se );
    PyTuple_SET_ITEM( const_tuple_06b9bf63a73548cded550ebb4a44d0a1_tuple, 4, const_unicode_plain_s ); Py_INCREF( const_unicode_plain_s );
    const_str_plain__StandardStemmer = UNSTREAM_STRING( &constant_bin[ 739249 ], 16, 1 );
    const_unicode_plain_mme = UNSTREAM_UNICODE( &constant_bin[ 540 ], 3 );
    const_unicode_digest_d85f3012ea5ecdbc85dd1a91802ee13f = UNSTREAM_UNICODE( &constant_bin[ 9 ], 2 );
    const_tuple_unicode_digest_dbe956c5481134fcb58b233f0351b464_tuple = PyTuple_New( 1 );
    const_unicode_digest_dbe956c5481134fcb58b233f0351b464 = UNSTREAM_UNICODE( &constant_bin[ 739265 ], 19 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_dbe956c5481134fcb58b233f0351b464_tuple, 0, const_unicode_digest_dbe956c5481134fcb58b233f0351b464 ); Py_INCREF( const_unicode_digest_dbe956c5481134fcb58b233f0351b464 );
    const_unicode_plain_assions = UNSTREAM_UNICODE( &constant_bin[ 739284 ], 7 );
    const_unicode_plain_antes = UNSTREAM_UNICODE( &constant_bin[ 727917 ], 5 );
    const_unicode_digest_0f730b2c3258f3fadc9b3f78c97c81ea = UNSTREAM_UNICODE( &constant_bin[ 739291 ], 1107 );
    const_tuple_e1df4d1ee61aeadd133357000470ee2a_tuple = PyTuple_New( 1 );
    const_tuple_unicode_plain_os_unicode_plain_ic_unicode_plain_ad_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_os_unicode_plain_ic_unicode_plain_ad_tuple, 0, const_unicode_plain_os ); Py_INCREF( const_unicode_plain_os );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_os_unicode_plain_ic_unicode_plain_ad_tuple, 1, const_unicode_plain_ic ); Py_INCREF( const_unicode_plain_ic );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_os_unicode_plain_ic_unicode_plain_ad_tuple, 2, const_unicode_plain_ad ); Py_INCREF( const_unicode_plain_ad );
    PyTuple_SET_ITEM( const_tuple_e1df4d1ee61aeadd133357000470ee2a_tuple, 0, const_tuple_unicode_plain_os_unicode_plain_ic_unicode_plain_ad_tuple ); Py_INCREF( const_tuple_unicode_plain_os_unicode_plain_ic_unicode_plain_ad_tuple );
    const_str_plain__SwedishStemmer__vowels = UNSTREAM_STRING( &constant_bin[ 740398 ], 23, 1 );
    const_unicode_plain_issement = UNSTREAM_UNICODE( &constant_bin[ 721332 ], 8 );
    const_unicode_digest_397ca2ce6700b267d84446991b8ffe27 = UNSTREAM_UNICODE( &constant_bin[ 740421 ], 1539 );
    const_unicode_plain_ateur = UNSTREAM_UNICODE( &constant_bin[ 721382 ], 5 );
    const_unicode_digest_e63c459e332a345d194c722a57cc0493 = UNSTREAM_UNICODE( &constant_bin[ 741960 ], 3 );
    const_str_plain__RomanianStemmer__step0_suffixes = UNSTREAM_STRING( &constant_bin[ 741963 ], 32, 1 );
    const_tuple_5eff0911f36248c31970c9d9669b12e2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_5eff0911f36248c31970c9d9669b12e2_tuple, 0, const_unicode_digest_00029bab94d4fae3bad9b98113cef03c ); Py_INCREF( const_unicode_digest_00029bab94d4fae3bad9b98113cef03c );
    PyTuple_SET_ITEM( const_tuple_5eff0911f36248c31970c9d9669b12e2_tuple, 1, const_unicode_plain_a ); Py_INCREF( const_unicode_plain_a );
    const_tuple_8ec0d9a1d9cf86f808e22f6e483cb49a_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_8ec0d9a1d9cf86f808e22f6e483cb49a_tuple, 0, const_unicode_digest_11b808f19a0a6a4942b1533e0c8e4af1 ); Py_INCREF( const_unicode_digest_11b808f19a0a6a4942b1533e0c8e4af1 );
    PyTuple_SET_ITEM( const_tuple_8ec0d9a1d9cf86f808e22f6e483cb49a_tuple, 1, const_unicode_plain_m ); Py_INCREF( const_unicode_plain_m );
    const_unicode_digest_8c8e4b6bd23cf2e7692e4c9913649e65 = UNSTREAM_UNICODE( &constant_bin[ 741995 ], 594 );
    const_tuple_e6a6b25a6f2f3505d9f21b160250b8f7_tuple = PyTuple_New( 2 );
    const_unicode_digest_197039e3f28df469289f225a803d5d7e = UNSTREAM_UNICODE( &constant_bin[ 742589 ], 2 );
    PyTuple_SET_ITEM( const_tuple_e6a6b25a6f2f3505d9f21b160250b8f7_tuple, 0, const_unicode_digest_197039e3f28df469289f225a803d5d7e ); Py_INCREF( const_unicode_digest_197039e3f28df469289f225a803d5d7e );
    PyTuple_SET_ITEM( const_tuple_e6a6b25a6f2f3505d9f21b160250b8f7_tuple, 1, const_unicode_plain_shch ); Py_INCREF( const_unicode_plain_shch );
    const_unicode_digest_2b7cc6faba20e3dd422dc9bcdec90fc7 = UNSTREAM_UNICODE( &constant_bin[ 742591 ], 946 );
    const_str_plain___r1_hungarian = UNSTREAM_STRING( &constant_bin[ 743537 ], 14, 1 );
    const_tuple_160f3b20f9ad8ebb28cc691487a684a1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_160f3b20f9ad8ebb28cc691487a684a1_tuple, 0, const_unicode_digest_707dc82a3c2378a70dac038f187bd1f8 ); Py_INCREF( const_unicode_digest_707dc82a3c2378a70dac038f187bd1f8 );
    PyTuple_SET_ITEM( const_tuple_160f3b20f9ad8ebb28cc691487a684a1_tuple, 1, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    const_unicode_digest_0d91f930432018bb18ffb16b7a67f790 = UNSTREAM_UNICODE( &constant_bin[ 743551 ], 232 );
    const_str_plain__HungarianStemmer__step5_suffixes = UNSTREAM_STRING( &constant_bin[ 743783 ], 33, 1 );
    const_unicode_plain_ismes = UNSTREAM_UNICODE( &constant_bin[ 721490 ], 5 );
    const_unicode_digest_b37c2c14d2bcb2e0e6af94881a75579f = UNSTREAM_UNICODE( &constant_bin[ 743816 ], 17 );
    const_tuple_unicode_digest_5adb8d1bbb76387630c09a27d94fc384_tuple = PyTuple_New( 1 );
    const_unicode_digest_5adb8d1bbb76387630c09a27d94fc384 = UNSTREAM_UNICODE( &constant_bin[ 743833 ], 21 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_5adb8d1bbb76387630c09a27d94fc384_tuple, 0, const_unicode_digest_5adb8d1bbb76387630c09a27d94fc384 ); Py_INCREF( const_unicode_digest_5adb8d1bbb76387630c09a27d94fc384 );
    const_unicode_plain_ni = UNSTREAM_UNICODE( &constant_bin[ 224 ], 2 );
    const_tuple_tuple_bc37331094be7bf4e1a82223baa15ba2_tuple_tuple = PyTuple_New( 1 );
    const_tuple_bc37331094be7bf4e1a82223baa15ba2_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_bc37331094be7bf4e1a82223baa15ba2_tuple, 0, const_unicode_plain_ante ); Py_INCREF( const_unicode_plain_ante );
    PyTuple_SET_ITEM( const_tuple_bc37331094be7bf4e1a82223baa15ba2_tuple, 1, const_unicode_plain_avel ); Py_INCREF( const_unicode_plain_avel );
    const_unicode_digest_333b84e7fc9eca9c119c7ec106b20bbb = UNSTREAM_UNICODE( &constant_bin[ 728037 ], 5 );
    PyTuple_SET_ITEM( const_tuple_bc37331094be7bf4e1a82223baa15ba2_tuple, 2, const_unicode_digest_333b84e7fc9eca9c119c7ec106b20bbb ); Py_INCREF( const_unicode_digest_333b84e7fc9eca9c119c7ec106b20bbb );
    PyTuple_SET_ITEM( const_tuple_tuple_bc37331094be7bf4e1a82223baa15ba2_tuple_tuple, 0, const_tuple_bc37331094be7bf4e1a82223baa15ba2_tuple ); Py_INCREF( const_tuple_bc37331094be7bf4e1a82223baa15ba2_tuple );
    const_unicode_digest_c9a690f7fe0c72cf00bea9a18e61efa8 = UNSTREAM_UNICODE( &constant_bin[ 715821 ], 4 );
    const_tuple_unicode_plain_portuguese_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_portuguese_tuple, 0, const_unicode_plain_portuguese ); Py_INCREF( const_unicode_plain_portuguese );
    const_tuple_unicode_plain_gu_tuple = PyTuple_New( 1 );
    const_unicode_plain_gu = UNSTREAM_UNICODE( &constant_bin[ 3413 ], 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_gu_tuple, 0, const_unicode_plain_gu ); Py_INCREF( const_unicode_plain_gu );
    const_tuple_unicode_plain_abl_unicode_plain_iqU_tuple = PyTuple_New( 2 );
    const_unicode_plain_abl = UNSTREAM_UNICODE( &constant_bin[ 253 ], 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_abl_unicode_plain_iqU_tuple, 0, const_unicode_plain_abl ); Py_INCREF( const_unicode_plain_abl );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_abl_unicode_plain_iqU_tuple, 1, const_unicode_plain_iqU ); Py_INCREF( const_unicode_plain_iqU );
    const_str_plain__FinnishStemmer__long_vowels = UNSTREAM_STRING( &constant_bin[ 743854 ], 28, 1 );
    const_unicode_plain_kse = UNSTREAM_UNICODE( &constant_bin[ 56413 ], 3 );
    const_tuple_0757d1e33667396b38455d34c482f4db_tuple = PyTuple_New( 11 );
    const_unicode_plain_hetslov = UNSTREAM_UNICODE( &constant_bin[ 743882 ], 7 );
    PyTuple_SET_ITEM( const_tuple_0757d1e33667396b38455d34c482f4db_tuple, 0, const_unicode_plain_hetslov ); Py_INCREF( const_unicode_plain_hetslov );
    PyTuple_SET_ITEM( const_tuple_0757d1e33667396b38455d34c482f4db_tuple, 1, const_unicode_plain_eleg ); Py_INCREF( const_unicode_plain_eleg );
    PyTuple_SET_ITEM( const_tuple_0757d1e33667396b38455d34c482f4db_tuple, 2, const_unicode_plain_elig ); Py_INCREF( const_unicode_plain_elig );
    const_unicode_plain_elov = UNSTREAM_UNICODE( &constant_bin[ 743889 ], 4 );
    PyTuple_SET_ITEM( const_tuple_0757d1e33667396b38455d34c482f4db_tuple, 3, const_unicode_plain_elov ); Py_INCREF( const_unicode_plain_elov );
    PyTuple_SET_ITEM( const_tuple_0757d1e33667396b38455d34c482f4db_tuple, 4, const_unicode_plain_slov ); Py_INCREF( const_unicode_plain_slov );
    PyTuple_SET_ITEM( const_tuple_0757d1e33667396b38455d34c482f4db_tuple, 5, const_unicode_plain_leg ); Py_INCREF( const_unicode_plain_leg );
    PyTuple_SET_ITEM( const_tuple_0757d1e33667396b38455d34c482f4db_tuple, 6, const_unicode_plain_eig ); Py_INCREF( const_unicode_plain_eig );
    PyTuple_SET_ITEM( const_tuple_0757d1e33667396b38455d34c482f4db_tuple, 7, const_unicode_plain_lig ); Py_INCREF( const_unicode_plain_lig );
    PyTuple_SET_ITEM( const_tuple_0757d1e33667396b38455d34c482f4db_tuple, 8, const_unicode_plain_els ); Py_INCREF( const_unicode_plain_els );
    const_unicode_plain_lov = UNSTREAM_UNICODE( &constant_bin[ 645293 ], 3 );
    PyTuple_SET_ITEM( const_tuple_0757d1e33667396b38455d34c482f4db_tuple, 9, const_unicode_plain_lov ); Py_INCREF( const_unicode_plain_lov );
    PyTuple_SET_ITEM( const_tuple_0757d1e33667396b38455d34c482f4db_tuple, 10, const_unicode_plain_ig ); Py_INCREF( const_unicode_plain_ig );
    const_tuple_unicode_plain_e_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_e_tuple, 0, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    const_tuple_unicode_plain_u_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_u_tuple, 0, const_unicode_plain_u ); Py_INCREF( const_unicode_plain_u );
    const_tuple_unicode_digest_2402c52e17483901ade2167dd26d0fe1_tuple = PyTuple_New( 1 );
    const_unicode_digest_2402c52e17483901ade2167dd26d0fe1 = UNSTREAM_UNICODE( &constant_bin[ 743893 ], 16 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_2402c52e17483901ade2167dd26d0fe1_tuple, 0, const_unicode_digest_2402c52e17483901ade2167dd26d0fe1 ); Py_INCREF( const_unicode_digest_2402c52e17483901ade2167dd26d0fe1 );
    const_tuple_d20eb7083b055f1e3bb3d0d3fe80de07_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_d20eb7083b055f1e3bb3d0d3fe80de07_tuple, 0, const_unicode_digest_c27284149cba96cfc3c1dc00d30b3ea7 ); Py_INCREF( const_unicode_digest_c27284149cba96cfc3c1dc00d30b3ea7 );
    PyTuple_SET_ITEM( const_tuple_d20eb7083b055f1e3bb3d0d3fe80de07_tuple, 1, const_unicode_plain_f ); Py_INCREF( const_unicode_plain_f );
    const_tuple_b8ad20ed5996d87d3c3c79dd34fe76be_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_b8ad20ed5996d87d3c3c79dd34fe76be_tuple, 0, const_unicode_digest_3a0050d9afcbdd171193c271c9e8b604 ); Py_INCREF( const_unicode_digest_3a0050d9afcbdd171193c271c9e8b604 );
    PyTuple_SET_ITEM( const_tuple_b8ad20ed5996d87d3c3c79dd34fe76be_tuple, 1, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    const_tuple_f70df800f719f9906537973c60e42b5c_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_f70df800f719f9906537973c60e42b5c_tuple, 0, const_unicode_digest_6550225a0b5e2d48d988db8b2dd919fb ); Py_INCREF( const_unicode_digest_6550225a0b5e2d48d988db8b2dd919fb );
    PyTuple_SET_ITEM( const_tuple_f70df800f719f9906537973c60e42b5c_tuple, 1, const_unicode_plain_s ); Py_INCREF( const_unicode_plain_s );
    const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple, 0, const_unicode_plain_ance ); Py_INCREF( const_unicode_plain_ance );
    PyTuple_SET_ITEM( const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple, 1, const_unicode_plain_iqUe ); Py_INCREF( const_unicode_plain_iqUe );
    PyTuple_SET_ITEM( const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple, 2, const_unicode_plain_isme ); Py_INCREF( const_unicode_plain_isme );
    PyTuple_SET_ITEM( const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple, 3, const_unicode_plain_able ); Py_INCREF( const_unicode_plain_able );
    PyTuple_SET_ITEM( const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple, 4, const_unicode_plain_iste ); Py_INCREF( const_unicode_plain_iste );
    const_unicode_plain_eux = UNSTREAM_UNICODE( &constant_bin[ 721710 ], 3 );
    PyTuple_SET_ITEM( const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple, 5, const_unicode_plain_eux ); Py_INCREF( const_unicode_plain_eux );
    PyTuple_SET_ITEM( const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple, 6, const_unicode_plain_ances ); Py_INCREF( const_unicode_plain_ances );
    PyTuple_SET_ITEM( const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple, 7, const_unicode_plain_iqUes ); Py_INCREF( const_unicode_plain_iqUes );
    PyTuple_SET_ITEM( const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple, 8, const_unicode_plain_ismes ); Py_INCREF( const_unicode_plain_ismes );
    const_unicode_plain_ables = UNSTREAM_UNICODE( &constant_bin[ 7889 ], 5 );
    PyTuple_SET_ITEM( const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple, 9, const_unicode_plain_ables ); Py_INCREF( const_unicode_plain_ables );
    const_unicode_plain_istes = UNSTREAM_UNICODE( &constant_bin[ 721510 ], 5 );
    PyTuple_SET_ITEM( const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple, 10, const_unicode_plain_istes ); Py_INCREF( const_unicode_plain_istes );
    const_str_digest_1a27b7b9da7216996c1254ad3ffa3531 = UNSTREAM_STRING( &constant_bin[ 717643 ], 3, 0 );
    const_unicode_digest_8f6a7814126e381258f9b1f64b393e62 = UNSTREAM_UNICODE( &constant_bin[ 743909 ], 229 );
    const_tuple_5dd3f522472d9cd25a2399d8badf9b77_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_5dd3f522472d9cd25a2399d8badf9b77_tuple, 0, const_unicode_plain_ivo ); Py_INCREF( const_unicode_plain_ivo );
    PyTuple_SET_ITEM( const_tuple_5dd3f522472d9cd25a2399d8badf9b77_tuple, 1, const_unicode_plain_iva ); Py_INCREF( const_unicode_plain_iva );
    PyTuple_SET_ITEM( const_tuple_5dd3f522472d9cd25a2399d8badf9b77_tuple, 2, const_unicode_plain_ivos ); Py_INCREF( const_unicode_plain_ivos );
    PyTuple_SET_ITEM( const_tuple_5dd3f522472d9cd25a2399d8badf9b77_tuple, 3, const_unicode_plain_ivas ); Py_INCREF( const_unicode_plain_ivas );
    const_unicode_digest_fcf7f6b725888decd13f25d7cf364cac = UNSTREAM_UNICODE( &constant_bin[ 744138 ], 654 );
    const_unicode_digest_9829b914102ca383b0774037a4409b95 = UNSTREAM_UNICODE( &constant_bin[ 744792 ], 6 );
    const_tuple_c8b0ddde77da258cac1124f6b76a7449_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_c8b0ddde77da258cac1124f6b76a7449_tuple, 0, const_unicode_digest_1a27b7b9da7216996c1254ad3ffa3531 ); Py_INCREF( const_unicode_digest_1a27b7b9da7216996c1254ad3ffa3531 );
    PyTuple_SET_ITEM( const_tuple_c8b0ddde77da258cac1124f6b76a7449_tuple, 1, const_unicode_digest_60e89fd24ca54036c79996d1b67de2dd ); Py_INCREF( const_unicode_digest_60e89fd24ca54036c79996d1b67de2dd );
    const_str_plain__SwedishStemmer__step1_suffixes = UNSTREAM_STRING( &constant_bin[ 744798 ], 31, 1 );
    const_str_plain__RussianStemmer__adjectival_suffixes = UNSTREAM_STRING( &constant_bin[ 744829 ], 36, 1 );
    const_tuple_273838185a55647a58438d7281766748_tuple = PyTuple_New( 10 );
    PyTuple_SET_ITEM( const_tuple_273838185a55647a58438d7281766748_tuple, 0, const_unicode_plain_adora ); Py_INCREF( const_unicode_plain_adora );
    PyTuple_SET_ITEM( const_tuple_273838185a55647a58438d7281766748_tuple, 1, const_unicode_plain_ador ); Py_INCREF( const_unicode_plain_ador );
    const_unicode_digest_f35129958ac2791eb8dca11e48893806 = UNSTREAM_UNICODE( &constant_bin[ 730536 ], 6 );
    PyTuple_SET_ITEM( const_tuple_273838185a55647a58438d7281766748_tuple, 2, const_unicode_digest_f35129958ac2791eb8dca11e48893806 ); Py_INCREF( const_unicode_digest_f35129958ac2791eb8dca11e48893806 );
    const_unicode_plain_adoras = UNSTREAM_UNICODE( &constant_bin[ 727796 ], 6 );
    PyTuple_SET_ITEM( const_tuple_273838185a55647a58438d7281766748_tuple, 3, const_unicode_plain_adoras ); Py_INCREF( const_unicode_plain_adoras );
    const_unicode_plain_adores = UNSTREAM_UNICODE( &constant_bin[ 727807 ], 6 );
    PyTuple_SET_ITEM( const_tuple_273838185a55647a58438d7281766748_tuple, 4, const_unicode_plain_adores ); Py_INCREF( const_unicode_plain_adores );
    const_unicode_plain_aciones = UNSTREAM_UNICODE( &constant_bin[ 730374 ], 7 );
    PyTuple_SET_ITEM( const_tuple_273838185a55647a58438d7281766748_tuple, 5, const_unicode_plain_aciones ); Py_INCREF( const_unicode_plain_aciones );
    PyTuple_SET_ITEM( const_tuple_273838185a55647a58438d7281766748_tuple, 6, const_unicode_plain_ante ); Py_INCREF( const_unicode_plain_ante );
    PyTuple_SET_ITEM( const_tuple_273838185a55647a58438d7281766748_tuple, 7, const_unicode_plain_antes ); Py_INCREF( const_unicode_plain_antes );
    PyTuple_SET_ITEM( const_tuple_273838185a55647a58438d7281766748_tuple, 8, const_unicode_plain_ancia ); Py_INCREF( const_unicode_plain_ancia );
    PyTuple_SET_ITEM( const_tuple_273838185a55647a58438d7281766748_tuple, 9, const_unicode_plain_ancias ); Py_INCREF( const_unicode_plain_ancias );
    const_tuple_unicode_plain_uyendo_tuple = PyTuple_New( 1 );
    const_unicode_plain_uyendo = UNSTREAM_UNICODE( &constant_bin[ 744865 ], 6 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_uyendo_tuple, 0, const_unicode_plain_uyendo ); Py_INCREF( const_unicode_plain_uyendo );
    const_tuple_b75e62f9a467b516f0b37cf30193397d_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_b75e62f9a467b516f0b37cf30193397d_tuple, 0, const_unicode_digest_10efadad13cc4945647a3576963f3d59 ); Py_INCREF( const_unicode_digest_10efadad13cc4945647a3576963f3d59 );
    PyTuple_SET_ITEM( const_tuple_b75e62f9a467b516f0b37cf30193397d_tuple, 1, const_unicode_digest_d024846c1eaba62fc7dccb44fc853458 ); Py_INCREF( const_unicode_digest_d024846c1eaba62fc7dccb44fc853458 );
    const_tuple_1e56be17625de98c40e42533ea3c3431_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_1e56be17625de98c40e42533ea3c3431_tuple, 0, const_unicode_plain_p ); Py_INCREF( const_unicode_plain_p );
    PyTuple_SET_ITEM( const_tuple_1e56be17625de98c40e42533ea3c3431_tuple, 1, const_unicode_digest_9517977509f69d68f0e7ed4c77fce9a6 ); Py_INCREF( const_unicode_digest_9517977509f69d68f0e7ed4c77fce9a6 );
    const_tuple_47c15f4b53b78c0b369cee3694bd7dda_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_47c15f4b53b78c0b369cee3694bd7dda_tuple, 0, const_unicode_digest_1bb29b5f768cb16ccd8e386bc3125fe1 ); Py_INCREF( const_unicode_digest_1bb29b5f768cb16ccd8e386bc3125fe1 );
    PyTuple_SET_ITEM( const_tuple_47c15f4b53b78c0b369cee3694bd7dda_tuple, 1, const_unicode_plain_kh ); Py_INCREF( const_unicode_plain_kh );
    const_unicode_digest_b6e83643cb2de0d95c9b2dcd46f00cfa = UNSTREAM_UNICODE( &constant_bin[ 744871 ], 772 );
    const_tuple_75eda4c05d75c8ab2d309455415cafcd_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 745643 ], 1523 );
    const_tuple_a233b622ffc791bc6c21ecf19aad8eed_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_a233b622ffc791bc6c21ecf19aad8eed_tuple, 0, const_unicode_plain_o ); Py_INCREF( const_unicode_plain_o );
    PyTuple_SET_ITEM( const_tuple_a233b622ffc791bc6c21ecf19aad8eed_tuple, 1, const_unicode_digest_c3e2dd5be462ffef44ff33cec36221d6 ); Py_INCREF( const_unicode_digest_c3e2dd5be462ffef44ff33cec36221d6 );
    const_tuple_36ad135685f7e7dbaac0aff64f3f5315_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_36ad135685f7e7dbaac0aff64f3f5315_tuple, 0, const_unicode_plain_g ); Py_INCREF( const_unicode_plain_g );
    PyTuple_SET_ITEM( const_tuple_36ad135685f7e7dbaac0aff64f3f5315_tuple, 1, const_unicode_digest_060b3f4dee951c3f2ca72fd224660c70 ); Py_INCREF( const_unicode_digest_060b3f4dee951c3f2ca72fd224660c70 );
    const_unicode_plain_ateurs = UNSTREAM_UNICODE( &constant_bin[ 721382 ], 6 );
    const_tuple_004f5b0ef7f5ba18d3dff3a8bafae5fc_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 747166 ], 813 );
    const_tuple_7e256659a928b52bd1eff09b62fb1207_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_7e256659a928b52bd1eff09b62fb1207_tuple, 0, const_unicode_plain_est ); Py_INCREF( const_unicode_plain_est );
    PyTuple_SET_ITEM( const_tuple_7e256659a928b52bd1eff09b62fb1207_tuple, 1, const_unicode_plain_en ); Py_INCREF( const_unicode_plain_en );
    PyTuple_SET_ITEM( const_tuple_7e256659a928b52bd1eff09b62fb1207_tuple, 2, const_unicode_plain_er ); Py_INCREF( const_unicode_plain_er );
    PyTuple_SET_ITEM( const_tuple_7e256659a928b52bd1eff09b62fb1207_tuple, 3, const_unicode_plain_st ); Py_INCREF( const_unicode_plain_st );
    const_unicode_digest_c1edc8989f7425d5407e0a0b6e78f352 = UNSTREAM_UNICODE( &constant_bin[ 747979 ], 6 );
    const_str_plain_FinnishStemmer = UNSTREAM_STRING( &constant_bin[ 713510 ], 14, 1 );
    const_str_digest_16d3a0b90457c34a4aa3a9ea88cd53fa = UNSTREAM_STRING( &constant_bin[ 747985 ], 54, 0 );
    const_str_plain__DanishStemmer__step3_suffixes = UNSTREAM_STRING( &constant_bin[ 748039 ], 30, 1 );
    const_tuple_f34b893a7edb58b57f967a67af76ce1a_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_f34b893a7edb58b57f967a67af76ce1a_tuple, 0, const_unicode_digest_7db9f2dea9e1d2886b29d5bade251709 ); Py_INCREF( const_unicode_digest_7db9f2dea9e1d2886b29d5bade251709 );
    PyTuple_SET_ITEM( const_tuple_f34b893a7edb58b57f967a67af76ce1a_tuple, 1, const_unicode_digest_8d76742109b75e16413fd10dd7df36a8 ); Py_INCREF( const_unicode_digest_8d76742109b75e16413fd10dd7df36a8 );
    PyTuple_SET_ITEM( const_tuple_f34b893a7edb58b57f967a67af76ce1a_tuple, 2, const_unicode_digest_3f52a44c55b9453c5ea1ad22dd78e786 ); Py_INCREF( const_unicode_digest_3f52a44c55b9453c5ea1ad22dd78e786 );
    PyTuple_SET_ITEM( const_tuple_f34b893a7edb58b57f967a67af76ce1a_tuple, 3, const_unicode_digest_54ff4a85fb3d821462dde811b3c177cc ); Py_INCREF( const_unicode_digest_54ff4a85fb3d821462dde811b3c177cc );
    PyTuple_SET_ITEM( const_tuple_f34b893a7edb58b57f967a67af76ce1a_tuple, 4, const_unicode_digest_9829b914102ca383b0774037a4409b95 ); Py_INCREF( const_unicode_digest_9829b914102ca383b0774037a4409b95 );
    PyTuple_SET_ITEM( const_tuple_f34b893a7edb58b57f967a67af76ce1a_tuple, 5, const_unicode_digest_03c4b2f172419703f0fad6b0cba707ab ); Py_INCREF( const_unicode_digest_03c4b2f172419703f0fad6b0cba707ab );
    const_unicode_plain_romanian = UNSTREAM_UNICODE( &constant_bin[ 723200 ], 8 );
    const_tuple_str_plain_udhr_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_udhr_tuple, 0, const_str_plain_udhr ); Py_INCREF( const_str_plain_udhr );
    const_str_plain__NorwegianStemmer__step3_suffixes = UNSTREAM_STRING( &constant_bin[ 748069 ], 33, 1 );
    const_str_plain__HungarianStemmer__r1_hungarian = UNSTREAM_STRING( &constant_bin[ 748102 ], 31, 1 );
    const_tuple_f905ea8aed2128045948b1711df084de_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_f905ea8aed2128045948b1711df084de_tuple, 0, const_unicode_digest_d02bba12eed79519808e696325a8e7b1 ); Py_INCREF( const_unicode_digest_d02bba12eed79519808e696325a8e7b1 );
    PyTuple_SET_ITEM( const_tuple_f905ea8aed2128045948b1711df084de_tuple, 1, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    const_unicode_plain_ant = UNSTREAM_UNICODE( &constant_bin[ 6873 ], 3 );
    const_tuple_91c51dd9fc301c0955e5315e6469c7e1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_91c51dd9fc301c0955e5315e6469c7e1_tuple, 0, const_unicode_digest_c8940e591bfc889f1eedf45e19e49889 ); Py_INCREF( const_unicode_digest_c8940e591bfc889f1eedf45e19e49889 );
    PyTuple_SET_ITEM( const_tuple_91c51dd9fc301c0955e5315e6469c7e1_tuple, 1, const_unicode_chr_39 ); Py_INCREF( const_unicode_chr_39 );
    const_str_plain_FrenchStemmer = UNSTREAM_STRING( &constant_bin[ 715462 ], 13, 1 );
    const_tuple_76d08bdc702514b83a9210a870492acd_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_76d08bdc702514b83a9210a870492acd_tuple, 0, const_unicode_plain_nsa ); Py_INCREF( const_unicode_plain_nsa );
    const_unicode_digest_e3481085e7dbd2e010459751d752a05e = UNSTREAM_UNICODE( &constant_bin[ 748133 ], 4 );
    PyTuple_SET_ITEM( const_tuple_76d08bdc702514b83a9210a870492acd_tuple, 1, const_unicode_digest_e3481085e7dbd2e010459751d752a05e ); Py_INCREF( const_unicode_digest_e3481085e7dbd2e010459751d752a05e );
    PyTuple_SET_ITEM( const_tuple_76d08bdc702514b83a9210a870492acd_tuple, 2, const_unicode_plain_mme ); Py_INCREF( const_unicode_plain_mme );
    PyTuple_SET_ITEM( const_tuple_76d08bdc702514b83a9210a870492acd_tuple, 3, const_unicode_plain_nne ); Py_INCREF( const_unicode_plain_nne );
    PyTuple_SET_ITEM( const_tuple_76d08bdc702514b83a9210a870492acd_tuple, 4, const_unicode_plain_si ); Py_INCREF( const_unicode_plain_si );
    PyTuple_SET_ITEM( const_tuple_76d08bdc702514b83a9210a870492acd_tuple, 5, const_unicode_plain_ni ); Py_INCREF( const_unicode_plain_ni );
    PyTuple_SET_ITEM( const_tuple_76d08bdc702514b83a9210a870492acd_tuple, 6, const_unicode_plain_an ); Py_INCREF( const_unicode_plain_an );
    PyTuple_SET_ITEM( const_tuple_76d08bdc702514b83a9210a870492acd_tuple, 7, const_unicode_digest_9273dfd762661b0bce44d5ca0a733faa ); Py_INCREF( const_unicode_digest_9273dfd762661b0bce44d5ca0a733faa );
    PyTuple_SET_ITEM( const_tuple_76d08bdc702514b83a9210a870492acd_tuple, 8, const_unicode_plain_en ); Py_INCREF( const_unicode_plain_en );
    const_tuple_45f82c3622d28aff3edecb8d8a588741_tuple = PyTuple_New( 2 );
    const_unicode_digest_990a0047364b8346aeb9a31134f32e6d = UNSTREAM_UNICODE( &constant_bin[ 722191 ], 6 );
    PyTuple_SET_ITEM( const_tuple_45f82c3622d28aff3edecb8d8a588741_tuple, 0, const_unicode_digest_990a0047364b8346aeb9a31134f32e6d ); Py_INCREF( const_unicode_digest_990a0047364b8346aeb9a31134f32e6d );
    PyTuple_SET_ITEM( const_tuple_45f82c3622d28aff3edecb8d8a588741_tuple, 1, const_unicode_digest_dafdd63e1b33722ad1f47fddf4c4438c ); Py_INCREF( const_unicode_digest_dafdd63e1b33722ad1f47fddf4c4438c );
    const_tuple_unicode_digest_71e905b11a810a0c249b8d42f53379d6_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_71e905b11a810a0c249b8d42f53379d6_tuple, 0, const_unicode_digest_71e905b11a810a0c249b8d42f53379d6 ); Py_INCREF( const_unicode_digest_71e905b11a810a0c249b8d42f53379d6 );
    const_unicode_plain_po = UNSTREAM_UNICODE( &constant_bin[ 608 ], 2 );
    const_unicode_digest_e754c22dbff07c1f09acf2d98e4c2501 = UNSTREAM_UNICODE( &constant_bin[ 748137 ], 227 );
    const_unicode_plain_les = UNSTREAM_UNICODE( &constant_bin[ 1766 ], 3 );
    const_tuple_2cc978adf415f49d0e73ca86beffe7bd_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_2cc978adf415f49d0e73ca86beffe7bd_tuple, 0, const_unicode_digest_29eca6fe7cef87eed65d95e955438c63 ); Py_INCREF( const_unicode_digest_29eca6fe7cef87eed65d95e955438c63 );
    PyTuple_SET_ITEM( const_tuple_2cc978adf415f49d0e73ca86beffe7bd_tuple, 1, const_unicode_chr_39 ); Py_INCREF( const_unicode_chr_39 );
    const_tuple_78940e8a91fb5b986e3e798d0050db75_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_78940e8a91fb5b986e3e798d0050db75_tuple, 0, const_unicode_digest_e98852863fcd62b0f90e33e4ad58a6fd ); Py_INCREF( const_unicode_digest_e98852863fcd62b0f90e33e4ad58a6fd );
    PyTuple_SET_ITEM( const_tuple_78940e8a91fb5b986e3e798d0050db75_tuple, 1, const_unicode_digest_1094ceee53f468647e12ae7ce3aa5571 ); Py_INCREF( const_unicode_digest_1094ceee53f468647e12ae7ce3aa5571 );
    const_tuple_af35dc52706f6375dc3872b21259f02c_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_af35dc52706f6375dc3872b21259f02c_tuple, 0, const_unicode_digest_b3e27c894e240690495e6e270a1194a2 ); Py_INCREF( const_unicode_digest_b3e27c894e240690495e6e270a1194a2 );
    PyTuple_SET_ITEM( const_tuple_af35dc52706f6375dc3872b21259f02c_tuple, 1, const_unicode_plain_t ); Py_INCREF( const_unicode_plain_t );
    const_str_plain___regions_russian = UNSTREAM_STRING( &constant_bin[ 730830 ], 17, 1 );
    const_tuple_f50d420abe67f802b4d39b10e9741aa9_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_f50d420abe67f802b4d39b10e9741aa9_tuple, 0, const_unicode_digest_910b3064909c53702273cb45d3dac832 ); Py_INCREF( const_unicode_digest_910b3064909c53702273cb45d3dac832 );
    PyTuple_SET_ITEM( const_tuple_f50d420abe67f802b4d39b10e9741aa9_tuple, 1, const_unicode_plain_o ); Py_INCREF( const_unicode_plain_o );
    const_unicode_plain_eus = UNSTREAM_UNICODE( &constant_bin[ 245275 ], 3 );
    const_unicode_plain_ij = UNSTREAM_UNICODE( &constant_bin[ 112235 ], 2 );
    const_str_plain__GermanStemmer__step2_suffixes = UNSTREAM_STRING( &constant_bin[ 748364 ], 30, 1 );
    const_unicode_plain_it = UNSTREAM_UNICODE( &constant_bin[ 766 ], 2 );
    const_unicode_plain_amente = UNSTREAM_UNICODE( &constant_bin[ 727854 ], 6 );
    const_tuple_faa4eb74f3b25ad8912ba0836572323b_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 748394 ], 350 );
    const_unicode_plain_sela = UNSTREAM_UNICODE( &constant_bin[ 748744 ], 4 );
    const_str_plain_step3_success = UNSTREAM_STRING( &constant_bin[ 748748 ], 13, 1 );
    const_tuple_ec2707c9429d69fbd8cc75cfffeb8493_tuple = PyTuple_New( 2 );
    const_unicode_digest_6c4cb17ae27a686a66bed562c578c9c0 = UNSTREAM_UNICODE( &constant_bin[ 748761 ], 2 );
    PyTuple_SET_ITEM( const_tuple_ec2707c9429d69fbd8cc75cfffeb8493_tuple, 0, const_unicode_digest_6c4cb17ae27a686a66bed562c578c9c0 ); Py_INCREF( const_unicode_digest_6c4cb17ae27a686a66bed562c578c9c0 );
    PyTuple_SET_ITEM( const_tuple_ec2707c9429d69fbd8cc75cfffeb8493_tuple, 1, const_unicode_digest_1a27b7b9da7216996c1254ad3ffa3531 ); Py_INCREF( const_unicode_digest_1a27b7b9da7216996c1254ad3ffa3531 );
    const_str_plain__RussianStemmer__superlative_suffixes = UNSTREAM_STRING( &constant_bin[ 748763 ], 37, 1 );
    const_tuple_4fcaecdeef3fd40a2c85a2ee5fa562c9_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_4fcaecdeef3fd40a2c85a2ee5fa562c9_tuple, 0, const_unicode_plain_a ); Py_INCREF( const_unicode_plain_a );
    PyTuple_SET_ITEM( const_tuple_4fcaecdeef3fd40a2c85a2ee5fa562c9_tuple, 1, const_unicode_digest_4e693b7392fd6e4c8a5a3bad7c1b0144 ); Py_INCREF( const_unicode_digest_4e693b7392fd6e4c8a5a3bad7c1b0144 );
    const_str_plain__RomanianStemmer__step2_suffixes = UNSTREAM_STRING( &constant_bin[ 748800 ], 32, 1 );
    const_tuple_c973d7a857e7686ae8beb9545955cfb1_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_c973d7a857e7686ae8beb9545955cfb1_tuple, 0, const_unicode_plain_cs ); Py_INCREF( const_unicode_plain_cs );
    const_unicode_plain_dz = UNSTREAM_UNICODE( &constant_bin[ 736347 ], 2 );
    PyTuple_SET_ITEM( const_tuple_c973d7a857e7686ae8beb9545955cfb1_tuple, 1, const_unicode_plain_dz ); Py_INCREF( const_unicode_plain_dz );
    PyTuple_SET_ITEM( const_tuple_c973d7a857e7686ae8beb9545955cfb1_tuple, 2, const_unicode_plain_dzs ); Py_INCREF( const_unicode_plain_dzs );
    PyTuple_SET_ITEM( const_tuple_c973d7a857e7686ae8beb9545955cfb1_tuple, 3, const_unicode_plain_gy ); Py_INCREF( const_unicode_plain_gy );
    PyTuple_SET_ITEM( const_tuple_c973d7a857e7686ae8beb9545955cfb1_tuple, 4, const_unicode_plain_ly ); Py_INCREF( const_unicode_plain_ly );
    PyTuple_SET_ITEM( const_tuple_c973d7a857e7686ae8beb9545955cfb1_tuple, 5, const_unicode_plain_ny ); Py_INCREF( const_unicode_plain_ny );
    PyTuple_SET_ITEM( const_tuple_c973d7a857e7686ae8beb9545955cfb1_tuple, 6, const_unicode_plain_ty ); Py_INCREF( const_unicode_plain_ty );
    PyTuple_SET_ITEM( const_tuple_c973d7a857e7686ae8beb9545955cfb1_tuple, 7, const_unicode_plain_zs ); Py_INCREF( const_unicode_plain_zs );
    const_tuple_af47b87413332a5bef6ea1fc7af3c92e_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_af47b87413332a5bef6ea1fc7af3c92e_tuple, 0, const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 ); Py_INCREF( const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 );
    PyTuple_SET_ITEM( const_tuple_af47b87413332a5bef6ea1fc7af3c92e_tuple, 1, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    const_tuple_601f59e1b476e7f4d6bf50a646a84ab1_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 748832 ], 930 );
    const_unicode_digest_5d716e0e0c126123060ed96d8b60763a = UNSTREAM_UNICODE( &constant_bin[ 749762 ], 950 );
    const_unicode_digest_6667a34fda61468463f1f7f60bc9760f = UNSTREAM_UNICODE( &constant_bin[ 750712 ], 229 );
    const_tuple_0c9b07086b916378dc0b3d71d89a3128_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_0c9b07086b916378dc0b3d71d89a3128_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_0c9b07086b916378dc0b3d71d89a3128_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_0c9b07086b916378dc0b3d71d89a3128_tuple, 2, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_0c9b07086b916378dc0b3d71d89a3128_tuple, 3, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_0c9b07086b916378dc0b3d71d89a3128_tuple, 4, const_str_plain_r2 ); Py_INCREF( const_str_plain_r2 );
    PyTuple_SET_ITEM( const_tuple_0c9b07086b916378dc0b3d71d89a3128_tuple, 5, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    const_unicode_plain_usione = UNSTREAM_UNICODE( &constant_bin[ 750941 ], 6 );
    const_tuple_621f4aaebc85dd42d37c871e39da57a5_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_621f4aaebc85dd42d37c871e39da57a5_tuple, 0, const_unicode_digest_00029bab94d4fae3bad9b98113cef03c ); Py_INCREF( const_unicode_digest_00029bab94d4fae3bad9b98113cef03c );
    PyTuple_SET_ITEM( const_tuple_621f4aaebc85dd42d37c871e39da57a5_tuple, 1, const_unicode_digest_bc116b69f79f787e9864737f78bd7244 ); Py_INCREF( const_unicode_digest_bc116b69f79f787e9864737f78bd7244 );
    const_str_plain__HungarianStemmer__step3_suffixes = UNSTREAM_STRING( &constant_bin[ 750947 ], 33, 1 );
    const_unicode_plain_usioni = UNSTREAM_UNICODE( &constant_bin[ 750980 ], 6 );
    const_unicode_plain_asse = UNSTREAM_UNICODE( &constant_bin[ 13066 ], 4 );
    const_tuple_a609368ea8d61aa400a42520a41e4921_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_a609368ea8d61aa400a42520a41e4921_tuple, 0, const_unicode_digest_27549ddbeb2e2d4f92a846fb872d3c33 ); Py_INCREF( const_unicode_digest_27549ddbeb2e2d4f92a846fb872d3c33 );
    PyTuple_SET_ITEM( const_tuple_a609368ea8d61aa400a42520a41e4921_tuple, 1, const_unicode_plain_r ); Py_INCREF( const_unicode_plain_r );
    const_tuple_31b084df71fd094038cab979e415b11e_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_31b084df71fd094038cab979e415b11e_tuple, 0, const_unicode_digest_08d43b10cefd4221353d1b12b55f9774 ); Py_INCREF( const_unicode_digest_08d43b10cefd4221353d1b12b55f9774 );
    PyTuple_SET_ITEM( const_tuple_31b084df71fd094038cab979e415b11e_tuple, 1, const_unicode_plain_ss ); Py_INCREF( const_unicode_plain_ss );
    const_tuple_1144fdac22177e659ece2dafadf0b7e6_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_1144fdac22177e659ece2dafadf0b7e6_tuple, 0, const_unicode_plain_aa ); Py_INCREF( const_unicode_plain_aa );
    PyTuple_SET_ITEM( const_tuple_1144fdac22177e659ece2dafadf0b7e6_tuple, 1, const_unicode_plain_ee ); Py_INCREF( const_unicode_plain_ee );
    PyTuple_SET_ITEM( const_tuple_1144fdac22177e659ece2dafadf0b7e6_tuple, 2, const_unicode_plain_ii ); Py_INCREF( const_unicode_plain_ii );
    PyTuple_SET_ITEM( const_tuple_1144fdac22177e659ece2dafadf0b7e6_tuple, 3, const_unicode_plain_oo ); Py_INCREF( const_unicode_plain_oo );
    PyTuple_SET_ITEM( const_tuple_1144fdac22177e659ece2dafadf0b7e6_tuple, 4, const_unicode_plain_uu ); Py_INCREF( const_unicode_plain_uu );
    const_unicode_digest_8496a86118d1e1696c6e4da2b8658b71 = UNSTREAM_UNICODE( &constant_bin[ 729910 ], 4 );
    PyTuple_SET_ITEM( const_tuple_1144fdac22177e659ece2dafadf0b7e6_tuple, 5, const_unicode_digest_8496a86118d1e1696c6e4da2b8658b71 ); Py_INCREF( const_unicode_digest_8496a86118d1e1696c6e4da2b8658b71 );
    PyTuple_SET_ITEM( const_tuple_1144fdac22177e659ece2dafadf0b7e6_tuple, 6, const_unicode_digest_83c9e37d6e93d1aeb2f519c8d23ab8a3 ); Py_INCREF( const_unicode_digest_83c9e37d6e93d1aeb2f519c8d23ab8a3 );
    const_tuple_6b3e9d7d85648178d3c04c6f21e43d0d_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_6b3e9d7d85648178d3c04c6f21e43d0d_tuple, 0, const_unicode_digest_918613226874eb7500a1f3d0c51ed063 ); Py_INCREF( const_unicode_digest_918613226874eb7500a1f3d0c51ed063 );
    PyTuple_SET_ITEM( const_tuple_6b3e9d7d85648178d3c04c6f21e43d0d_tuple, 1, const_unicode_plain_k ); Py_INCREF( const_unicode_plain_k );
    const_str_plain__HungarianStemmer__vowels = UNSTREAM_STRING( &constant_bin[ 750986 ], 25, 1 );
    const_tuple_unicode_plain_igst_tuple = PyTuple_New( 1 );
    const_unicode_plain_igst = UNSTREAM_UNICODE( &constant_bin[ 751011 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_igst_tuple, 0, const_unicode_plain_igst ); Py_INCREF( const_unicode_plain_igst );
    const_tuple_unicode_digest_3237b32eb23cee6617f0a3a9251acea5_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_digest_3237b32eb23cee6617f0a3a9251acea5_tuple, 0, const_unicode_digest_3237b32eb23cee6617f0a3a9251acea5 ); Py_INCREF( const_unicode_digest_3237b32eb23cee6617f0a3a9251acea5 );
    const_unicode_digest_20042556b9dae87c3a9051aba782c2ad = UNSTREAM_UNICODE( &constant_bin[ 751015 ], 228 );
    const_unicode_digest_7116690f828f2ee99b0ed34103592a1e = UNSTREAM_UNICODE( &constant_bin[ 751243 ], 767 );
    const_tuple_e4ead1c0f352d0adb324f18db20cdc82_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_e4ead1c0f352d0adb324f18db20cdc82_tuple, 0, const_unicode_digest_3f3cd3bd59d11c8ca1bb917c4367f3d2 ); Py_INCREF( const_unicode_digest_3f3cd3bd59d11c8ca1bb917c4367f3d2 );
    PyTuple_SET_ITEM( const_tuple_e4ead1c0f352d0adb324f18db20cdc82_tuple, 1, const_unicode_plain_b ); Py_INCREF( const_unicode_plain_b );
    const_str_plain__SpanishStemmer__step0_suffixes = UNSTREAM_STRING( &constant_bin[ 752010 ], 31, 1 );
    const_tuple_4ff17472e9edf8f0913f0db95c096470_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_4ff17472e9edf8f0913f0db95c096470_tuple, 0, const_unicode_plain_atrice ); Py_INCREF( const_unicode_plain_atrice );
    PyTuple_SET_ITEM( const_tuple_4ff17472e9edf8f0913f0db95c096470_tuple, 1, const_unicode_plain_ateur ); Py_INCREF( const_unicode_plain_ateur );
    PyTuple_SET_ITEM( const_tuple_4ff17472e9edf8f0913f0db95c096470_tuple, 2, const_unicode_plain_ation ); Py_INCREF( const_unicode_plain_ation );
    PyTuple_SET_ITEM( const_tuple_4ff17472e9edf8f0913f0db95c096470_tuple, 3, const_unicode_plain_atrices ); Py_INCREF( const_unicode_plain_atrices );
    PyTuple_SET_ITEM( const_tuple_4ff17472e9edf8f0913f0db95c096470_tuple, 4, const_unicode_plain_ateurs ); Py_INCREF( const_unicode_plain_ateurs );
    PyTuple_SET_ITEM( const_tuple_4ff17472e9edf8f0913f0db95c096470_tuple, 5, const_unicode_plain_ations ); Py_INCREF( const_unicode_plain_ations );
    const_unicode_plain_ative = UNSTREAM_UNICODE( &constant_bin[ 55494 ], 5 );
    const_unicode_digest_626611eaee72b4edd9db2579f29436e1 = UNSTREAM_UNICODE( &constant_bin[ 715872 ], 4 );
    const_tuple_7e838b0b675132306448d0bcce1e1d9e_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_7e838b0b675132306448d0bcce1e1d9e_tuple, 0, const_unicode_digest_ce9df3550e776a650bc3e9bdd7e6ddd6 ); Py_INCREF( const_unicode_digest_ce9df3550e776a650bc3e9bdd7e6ddd6 );
    PyTuple_SET_ITEM( const_tuple_7e838b0b675132306448d0bcce1e1d9e_tuple, 1, const_unicode_plain_U ); Py_INCREF( const_unicode_plain_U );
    const_str_plain__DanishStemmer__s_ending = UNSTREAM_STRING( &constant_bin[ 752041 ], 24, 1 );
    const_tuple_tuple_b52820215875207b84eb2621e3500b61_tuple_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_tuple_b52820215875207b84eb2621e3500b61_tuple_tuple, 0, const_tuple_b52820215875207b84eb2621e3500b61_tuple ); Py_INCREF( const_tuple_b52820215875207b84eb2621e3500b61_tuple );
    const_unicode_plain_bdfghklmnrt = UNSTREAM_UNICODE( &constant_bin[ 752065 ], 11 );
    const_unicode_plain_ions = UNSTREAM_UNICODE( &constant_bin[ 397 ], 4 );
    const_tuple_86e5eb77e1efe2c861d16de6e61a1b9f_tuple = PyTuple_New( 5 );
    const_unicode_digest_cc4fcf0fb97b833d8496392e844c7513 = UNSTREAM_UNICODE( &constant_bin[ 752076 ], 4 );
    PyTuple_SET_ITEM( const_tuple_86e5eb77e1efe2c861d16de6e61a1b9f_tuple, 0, const_unicode_digest_cc4fcf0fb97b833d8496392e844c7513 ); Py_INCREF( const_unicode_digest_cc4fcf0fb97b833d8496392e844c7513 );
    PyTuple_SET_ITEM( const_tuple_86e5eb77e1efe2c861d16de6e61a1b9f_tuple, 1, const_unicode_digest_c1edc8989f7425d5407e0a0b6e78f352 ); Py_INCREF( const_unicode_digest_c1edc8989f7425d5407e0a0b6e78f352 );
    const_unicode_digest_21a72cd6d7e4999bb2f337c11dbc7fbd = UNSTREAM_UNICODE( &constant_bin[ 752080 ], 3 );
    PyTuple_SET_ITEM( const_tuple_86e5eb77e1efe2c861d16de6e61a1b9f_tuple, 2, const_unicode_digest_21a72cd6d7e4999bb2f337c11dbc7fbd ); Py_INCREF( const_unicode_digest_21a72cd6d7e4999bb2f337c11dbc7fbd );
    PyTuple_SET_ITEM( const_tuple_86e5eb77e1efe2c861d16de6e61a1b9f_tuple, 3, const_unicode_digest_e63c459e332a345d194c722a57cc0493 ); Py_INCREF( const_unicode_digest_e63c459e332a345d194c722a57cc0493 );
    PyTuple_SET_ITEM( const_tuple_86e5eb77e1efe2c861d16de6e61a1b9f_tuple, 4, const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 ); Py_INCREF( const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 );
    const_tuple_546d6552b3521163be5f081fa48ff42c_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_546d6552b3521163be5f081fa48ff42c_tuple, 0, const_unicode_plain_U ); Py_INCREF( const_unicode_plain_U );
    PyTuple_SET_ITEM( const_tuple_546d6552b3521163be5f081fa48ff42c_tuple, 1, const_unicode_digest_ce9df3550e776a650bc3e9bdd7e6ddd6 ); Py_INCREF( const_unicode_digest_ce9df3550e776a650bc3e9bdd7e6ddd6 );
    const_tuple_58419de004459738a3a5586548685aa7_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_58419de004459738a3a5586548685aa7_tuple, 0, const_unicode_digest_127608a3534fe68c04fb1f948fc9474c ); Py_INCREF( const_unicode_digest_127608a3534fe68c04fb1f948fc9474c );
    PyTuple_SET_ITEM( const_tuple_58419de004459738a3a5586548685aa7_tuple, 1, const_unicode_digest_f68de3ef8c13e5dd2853b6c8fa86ca8b ); Py_INCREF( const_unicode_digest_f68de3ef8c13e5dd2853b6c8fa86ca8b );
    const_tuple_unicode_plain_kse_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_kse_tuple, 0, const_unicode_plain_kse ); Py_INCREF( const_unicode_plain_kse );
    const_tuple_unicode_plain_issement_unicode_plain_issements_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_issement_unicode_plain_issements_tuple, 0, const_unicode_plain_issement ); Py_INCREF( const_unicode_plain_issement );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_issement_unicode_plain_issements_tuple, 1, const_unicode_plain_issements ); Py_INCREF( const_unicode_plain_issements );
    const_tuple_str_plain_cls_str_plain_language_str_plain_kwargs_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_cls_str_plain_language_str_plain_kwargs_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_str_plain_cls_str_plain_language_str_plain_kwargs_tuple, 1, const_str_plain_language ); Py_INCREF( const_str_plain_language );
    PyTuple_SET_ITEM( const_tuple_str_plain_cls_str_plain_language_str_plain_kwargs_tuple, 2, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    const_str_plain_SpanishStemmer = UNSTREAM_STRING( &constant_bin[ 716215 ], 14, 1 );
    const_tuple_706e42975b2d521bea0c9b1cf76e71b1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_706e42975b2d521bea0c9b1cf76e71b1_tuple, 0, const_unicode_plain_zh ); Py_INCREF( const_unicode_plain_zh );
    PyTuple_SET_ITEM( const_tuple_706e42975b2d521bea0c9b1cf76e71b1_tuple, 1, const_unicode_digest_368915a3c46e6f7596ff543d222c3685 ); Py_INCREF( const_unicode_digest_368915a3c46e6f7596ff543d222c3685 );
    const_unicode_digest_08c166a915d14fca1c8754bb3a41f4e5 = UNSTREAM_UNICODE( &constant_bin[ 752083 ], 775 );
    const_unicode_plain_ent = UNSTREAM_UNICODE( &constant_bin[ 287 ], 3 );
    const_tuple_ab93cd02888dc6ebbce56f88252cffc0_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_ab93cd02888dc6ebbce56f88252cffc0_tuple, 0, const_unicode_digest_05aa8be1d717976fd4c7556b7bb2385d ); Py_INCREF( const_unicode_digest_05aa8be1d717976fd4c7556b7bb2385d );
    PyTuple_SET_ITEM( const_tuple_ab93cd02888dc6ebbce56f88252cffc0_tuple, 1, const_unicode_digest_d85f3012ea5ecdbc85dd1a91802ee13f ); Py_INCREF( const_unicode_digest_d85f3012ea5ecdbc85dd1a91802ee13f );
    const_str_plain__FrenchStemmer__rv_french = UNSTREAM_STRING( &constant_bin[ 752858 ], 25, 1 );
    const_tuple_cbfa83547dce568f2d6d71f7d9d28e8b_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_cbfa83547dce568f2d6d71f7d9d28e8b_tuple, 0, const_unicode_plain_elig ); Py_INCREF( const_unicode_plain_elig );
    PyTuple_SET_ITEM( const_tuple_cbfa83547dce568f2d6d71f7d9d28e8b_tuple, 1, const_unicode_digest_62db8fd5ae2a265479a2e1db31f73b57 ); Py_INCREF( const_unicode_digest_62db8fd5ae2a265479a2e1db31f73b57 );
    PyTuple_SET_ITEM( const_tuple_cbfa83547dce568f2d6d71f7d9d28e8b_tuple, 2, const_unicode_plain_lig ); Py_INCREF( const_unicode_plain_lig );
    PyTuple_SET_ITEM( const_tuple_cbfa83547dce568f2d6d71f7d9d28e8b_tuple, 3, const_unicode_plain_els ); Py_INCREF( const_unicode_plain_els );
    PyTuple_SET_ITEM( const_tuple_cbfa83547dce568f2d6d71f7d9d28e8b_tuple, 4, const_unicode_plain_ig ); Py_INCREF( const_unicode_plain_ig );
    const_tuple_unicode_plain_se_unicode_plain_s_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_se_unicode_plain_s_tuple, 0, const_unicode_plain_se ); Py_INCREF( const_unicode_plain_se );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_se_unicode_plain_s_tuple, 1, const_unicode_plain_s ); Py_INCREF( const_unicode_plain_s );
    const_tuple_84a1aa2866c339e3e02dfed8263c6c26_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_84a1aa2866c339e3e02dfed8263c6c26_tuple, 0, const_unicode_digest_dad43f0f2031badc6c0270183056a256 ); Py_INCREF( const_unicode_digest_dad43f0f2031badc6c0270183056a256 );
    PyTuple_SET_ITEM( const_tuple_84a1aa2866c339e3e02dfed8263c6c26_tuple, 1, const_unicode_plain_l ); Py_INCREF( const_unicode_plain_l );
    const_tuple_unicode_plain_spanish_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_spanish_tuple, 0, const_unicode_plain_spanish ); Py_INCREF( const_unicode_plain_spanish );
    const_tuple_9d9f88c0da17928013fbc5e2ed0ab940_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 752883 ], 373 );
    const_tuple_tuple_unicode_plain_os_unicode_plain_ic_tuple_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_tuple_unicode_plain_os_unicode_plain_ic_tuple_tuple, 0, const_tuple_unicode_plain_os_unicode_plain_ic_tuple ); Py_INCREF( const_tuple_unicode_plain_os_unicode_plain_ic_tuple );
    const_str_plain_ItalianStemmer = UNSTREAM_STRING( &constant_bin[ 717260 ], 14, 1 );
    const_tuple_6d37e7b6a6ae7a3e19ade00ac9b563e8_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_6d37e7b6a6ae7a3e19ade00ac9b563e8_tuple, 0, const_unicode_digest_84a0b5e9b34f1ec00ad17f36447d4895 ); Py_INCREF( const_unicode_digest_84a0b5e9b34f1ec00ad17f36447d4895 );
    PyTuple_SET_ITEM( const_tuple_6d37e7b6a6ae7a3e19ade00ac9b563e8_tuple, 1, const_unicode_plain_t ); Py_INCREF( const_unicode_plain_t );
    const_str_plain__SpanishStemmer__step1_suffixes = UNSTREAM_STRING( &constant_bin[ 753256 ], 31, 1 );
    const_unicode_plain_aIent = UNSTREAM_UNICODE( &constant_bin[ 730191 ], 5 );
    const_tuple_e45c40ce2ad015b19a2b8e10309e6bc9_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_e45c40ce2ad015b19a2b8e10309e6bc9_tuple, 0, const_unicode_digest_c9a690f7fe0c72cf00bea9a18e61efa8 ); Py_INCREF( const_unicode_digest_c9a690f7fe0c72cf00bea9a18e61efa8 );
    PyTuple_SET_ITEM( const_tuple_e45c40ce2ad015b19a2b8e10309e6bc9_tuple, 1, const_unicode_digest_23b04996d96763e38f1b5692ca7258cb ); Py_INCREF( const_unicode_digest_23b04996d96763e38f1b5692ca7258cb );
    const_unicode_digest_bd3557e54eebb95f2fb09a4dc708d82c = UNSTREAM_UNICODE( &constant_bin[ 715855 ], 4 );
    PyTuple_SET_ITEM( const_tuple_e45c40ce2ad015b19a2b8e10309e6bc9_tuple, 2, const_unicode_digest_bd3557e54eebb95f2fb09a4dc708d82c ); Py_INCREF( const_unicode_digest_bd3557e54eebb95f2fb09a4dc708d82c );
    PyTuple_SET_ITEM( const_tuple_e45c40ce2ad015b19a2b8e10309e6bc9_tuple, 3, const_unicode_digest_626611eaee72b4edd9db2579f29436e1 ); Py_INCREF( const_unicode_digest_626611eaee72b4edd9db2579f29436e1 );
    const_unicode_plain_ente = UNSTREAM_UNICODE( &constant_bin[ 6412 ], 4 );
    const_tuple_c91f679374c05c952ac066e817ce23bb_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_c91f679374c05c952ac066e817ce23bb_tuple, 0, const_unicode_plain_E ); Py_INCREF( const_unicode_plain_E );
    PyTuple_SET_ITEM( const_tuple_c91f679374c05c952ac066e817ce23bb_tuple, 1, const_unicode_digest_049db6e58dec8faeb2bd7cd1632b9df3 ); Py_INCREF( const_unicode_digest_049db6e58dec8faeb2bd7cd1632b9df3 );
    const_tuple_unicode_plain_enza_unicode_plain_enze_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_enza_unicode_plain_enze_tuple, 0, const_unicode_plain_enza ); Py_INCREF( const_unicode_plain_enza );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_enza_unicode_plain_enze_tuple, 1, const_unicode_plain_enze ); Py_INCREF( const_unicode_plain_enze );
    const_unicode_plain_gem = UNSTREAM_UNICODE( &constant_bin[ 342213 ], 3 );
    const_tuple_unicode_plain_romanian_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_romanian_tuple, 0, const_unicode_plain_romanian ); Py_INCREF( const_unicode_plain_romanian );
    const_unicode_digest_835ae20366f52774a0028b17a200037f = UNSTREAM_UNICODE( &constant_bin[ 753287 ], 913 );
    const_unicode_plain_niss = UNSTREAM_UNICODE( &constant_bin[ 754200 ], 4 );
    const_tuple_101625999447a7120805ecb8b80f61a1_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 754204 ], 490 );
    const_tuple_24449a48f5acd393d523907a440b8902_tuple = PyTuple_New( 18 );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 0, const_unicode_plain_assions ); Py_INCREF( const_unicode_plain_assions );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 1, const_unicode_plain_assent ); Py_INCREF( const_unicode_plain_assent );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 2, const_unicode_plain_assiez ); Py_INCREF( const_unicode_plain_assiez );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 3, const_unicode_plain_aIent ); Py_INCREF( const_unicode_plain_aIent );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 4, const_unicode_plain_antes ); Py_INCREF( const_unicode_plain_antes );
    const_unicode_plain_asses = UNSTREAM_UNICODE( &constant_bin[ 13066 ], 5 );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 5, const_unicode_plain_asses ); Py_INCREF( const_unicode_plain_asses );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 6, const_unicode_digest_ea671a3167dde5a7597226999705a682 ); Py_INCREF( const_unicode_digest_ea671a3167dde5a7597226999705a682 );
    const_unicode_digest_7441709481b0843ac867d466ecf0483a = UNSTREAM_UNICODE( &constant_bin[ 748598 ], 5 );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 7, const_unicode_digest_7441709481b0843ac867d466ecf0483a ); Py_INCREF( const_unicode_digest_7441709481b0843ac867d466ecf0483a );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 8, const_unicode_plain_ante ); Py_INCREF( const_unicode_plain_ante );
    const_unicode_plain_ants = UNSTREAM_UNICODE( &constant_bin[ 20486 ], 4 );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 9, const_unicode_plain_ants ); Py_INCREF( const_unicode_plain_ants );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 10, const_unicode_plain_asse ); Py_INCREF( const_unicode_plain_asse );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 11, const_unicode_plain_ais ); Py_INCREF( const_unicode_plain_ais );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 12, const_unicode_plain_ait ); Py_INCREF( const_unicode_plain_ait );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 13, const_unicode_plain_ant ); Py_INCREF( const_unicode_plain_ant );
    const_unicode_digest_4f69c0f86ee64623c992c2f4a3e66589 = UNSTREAM_UNICODE( &constant_bin[ 748598 ], 3 );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 14, const_unicode_digest_4f69c0f86ee64623c992c2f4a3e66589 ); Py_INCREF( const_unicode_digest_4f69c0f86ee64623c992c2f4a3e66589 );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 15, const_unicode_plain_ai ); Py_INCREF( const_unicode_plain_ai );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 16, const_unicode_plain_as ); Py_INCREF( const_unicode_plain_as );
    PyTuple_SET_ITEM( const_tuple_24449a48f5acd393d523907a440b8902_tuple, 17, const_unicode_plain_a ); Py_INCREF( const_unicode_plain_a );
    const_tuple_924391ca6475244603f15fd2a11094db_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_924391ca6475244603f15fd2a11094db_tuple, 0, const_unicode_digest_e7ce7cb4ba2d4a776b39a66620ed1dd1 ); Py_INCREF( const_unicode_digest_e7ce7cb4ba2d4a776b39a66620ed1dd1 );
    PyTuple_SET_ITEM( const_tuple_924391ca6475244603f15fd2a11094db_tuple, 1, const_unicode_digest_c39ed51721b386e12be8129686b300e9 ); Py_INCREF( const_unicode_digest_c39ed51721b386e12be8129686b300e9 );
    PyTuple_SET_ITEM( const_tuple_924391ca6475244603f15fd2a11094db_tuple, 2, const_unicode_digest_9c795e2fded76151d524a7e3b0c93812 ); Py_INCREF( const_unicode_digest_9c795e2fded76151d524a7e3b0c93812 );
    PyTuple_SET_ITEM( const_tuple_924391ca6475244603f15fd2a11094db_tuple, 3, const_unicode_plain_ivshi ); Py_INCREF( const_unicode_plain_ivshi );
    PyTuple_SET_ITEM( const_tuple_924391ca6475244603f15fd2a11094db_tuple, 4, const_unicode_plain_yvshi ); Py_INCREF( const_unicode_plain_yvshi );
    PyTuple_SET_ITEM( const_tuple_924391ca6475244603f15fd2a11094db_tuple, 5, const_unicode_plain_vshi ); Py_INCREF( const_unicode_plain_vshi );
    PyTuple_SET_ITEM( const_tuple_924391ca6475244603f15fd2a11094db_tuple, 6, const_unicode_plain_iv ); Py_INCREF( const_unicode_plain_iv );
    PyTuple_SET_ITEM( const_tuple_924391ca6475244603f15fd2a11094db_tuple, 7, const_unicode_plain_yv ); Py_INCREF( const_unicode_plain_yv );
    PyTuple_SET_ITEM( const_tuple_924391ca6475244603f15fd2a11094db_tuple, 8, const_unicode_plain_v ); Py_INCREF( const_unicode_plain_v );
    const_tuple_e181b636e1bca13587d7f801cd876854_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_e181b636e1bca13587d7f801cd876854_tuple, 0, const_unicode_digest_1d5999dd62a3ceefe08991005d874c28 ); Py_INCREF( const_unicode_digest_1d5999dd62a3ceefe08991005d874c28 );
    PyTuple_SET_ITEM( const_tuple_e181b636e1bca13587d7f801cd876854_tuple, 1, const_unicode_digest_b191da371eceef3749c8dae83e8df957 ); Py_INCREF( const_unicode_digest_b191da371eceef3749c8dae83e8df957 );
    const_unicode_plain_ing = UNSTREAM_UNICODE( &constant_bin[ 518 ], 3 );
    const_tuple_d636691f4239271d257787e7cd8440ef_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_d636691f4239271d257787e7cd8440ef_tuple, 0, const_unicode_plain_han ); Py_INCREF( const_unicode_plain_han );
    PyTuple_SET_ITEM( const_tuple_d636691f4239271d257787e7cd8440ef_tuple, 1, const_unicode_plain_hen ); Py_INCREF( const_unicode_plain_hen );
    PyTuple_SET_ITEM( const_tuple_d636691f4239271d257787e7cd8440ef_tuple, 2, const_unicode_plain_hin ); Py_INCREF( const_unicode_plain_hin );
    const_unicode_plain_hon = UNSTREAM_UNICODE( &constant_bin[ 1786 ], 3 );
    PyTuple_SET_ITEM( const_tuple_d636691f4239271d257787e7cd8440ef_tuple, 3, const_unicode_plain_hon ); Py_INCREF( const_unicode_plain_hon );
    PyTuple_SET_ITEM( const_tuple_d636691f4239271d257787e7cd8440ef_tuple, 4, const_unicode_digest_9fc494b9e47f1ff7a0348a3457292ff5 ); Py_INCREF( const_unicode_digest_9fc494b9e47f1ff7a0348a3457292ff5 );
    PyTuple_SET_ITEM( const_tuple_d636691f4239271d257787e7cd8440ef_tuple, 5, const_unicode_digest_a9e8d2a2a8d68bee730286a6aab6c160 ); Py_INCREF( const_unicode_digest_a9e8d2a2a8d68bee730286a6aab6c160 );
    const_unicode_digest_1e0319293f93f7c8ac7b55f33d210950 = UNSTREAM_UNICODE( &constant_bin[ 715280 ], 6 );
    const_tuple_99d8f76ba257f5f1c6aa6c5cddac83df_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_99d8f76ba257f5f1c6aa6c5cddac83df_tuple, 0, const_unicode_digest_18aab37aeef33c8a44b9d8a110c581c9 ); Py_INCREF( const_unicode_digest_18aab37aeef33c8a44b9d8a110c581c9 );
    PyTuple_SET_ITEM( const_tuple_99d8f76ba257f5f1c6aa6c5cddac83df_tuple, 1, const_unicode_digest_935145b6cd49804fb37dd37262b564a8 ); Py_INCREF( const_unicode_digest_935145b6cd49804fb37dd37262b564a8 );
    const_str_digest_c7298b4f3c76de2d7a6153f9e0251ff7 = UNSTREAM_STRING( &constant_bin[ 754694 ], 43, 1 );
    const_tuple_c56562ec649ffe624ba416666af1ee3f_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 754737 ], 240 );
    const_tuple_22a4e3b3cd8a67f5d9f5dd4508b37871_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_22a4e3b3cd8a67f5d9f5dd4508b37871_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_22a4e3b3cd8a67f5d9f5dd4508b37871_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_22a4e3b3cd8a67f5d9f5dd4508b37871_tuple, 2, const_str_plain_step3_success ); Py_INCREF( const_str_plain_step3_success );
    PyTuple_SET_ITEM( const_tuple_22a4e3b3cd8a67f5d9f5dd4508b37871_tuple, 3, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_22a4e3b3cd8a67f5d9f5dd4508b37871_tuple, 4, const_str_plain_r2 ); Py_INCREF( const_str_plain_r2 );
    PyTuple_SET_ITEM( const_tuple_22a4e3b3cd8a67f5d9f5dd4508b37871_tuple, 5, const_str_plain_suffix ); Py_INCREF( const_str_plain_suffix );
    PyTuple_SET_ITEM( const_tuple_22a4e3b3cd8a67f5d9f5dd4508b37871_tuple, 6, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_str_plain__GermanStemmer__s_ending = UNSTREAM_STRING( &constant_bin[ 754977 ], 24, 1 );
    const_tuple_bc2b3a79dd230f51972e38fb3dacac9e_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 755001 ], 1149 );
    const_tuple_unicode_plain_at_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_at_tuple, 0, const_unicode_plain_at ); Py_INCREF( const_unicode_plain_at );
    const_str_plain__FinnishStemmer__step3_suffixes = UNSTREAM_STRING( &constant_bin[ 756150 ], 31, 1 );
    const_tuple_tuple_0d91b14694a1e22a71f0e20a0419e2c8_tuple_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_tuple_0d91b14694a1e22a71f0e20a0419e2c8_tuple_tuple, 0, const_tuple_0d91b14694a1e22a71f0e20a0419e2c8_tuple ); Py_INCREF( const_tuple_0d91b14694a1e22a71f0e20a0419e2c8_tuple );
    const_unicode_plain_las = UNSTREAM_UNICODE( &constant_bin[ 1585 ], 3 );
    const_unicode_digest_d8f26d655477f9b71d21bab6c06796f1 = UNSTREAM_UNICODE( &constant_bin[ 715110 ], 7 );
    const_tuple_e0fe9f2b0a779e4be824cff8d4b76b90_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 756181 ], 364 );
    const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple = PyTuple_New( 12 );
    PyTuple_SET_ITEM( const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple, 0, const_unicode_plain_ativ ); Py_INCREF( const_unicode_plain_ativ );
    PyTuple_SET_ITEM( const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple, 1, const_unicode_plain_ativa ); Py_INCREF( const_unicode_plain_ativa );
    PyTuple_SET_ITEM( const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple, 2, const_unicode_plain_ative ); Py_INCREF( const_unicode_plain_ative );
    PyTuple_SET_ITEM( const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple, 3, const_unicode_plain_ativi ); Py_INCREF( const_unicode_plain_ativi );
    PyTuple_SET_ITEM( const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple, 4, const_unicode_digest_1e0319293f93f7c8ac7b55f33d210950 ); Py_INCREF( const_unicode_digest_1e0319293f93f7c8ac7b55f33d210950 );
    PyTuple_SET_ITEM( const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple, 5, const_unicode_digest_d8f26d655477f9b71d21bab6c06796f1 ); Py_INCREF( const_unicode_digest_d8f26d655477f9b71d21bab6c06796f1 );
    PyTuple_SET_ITEM( const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple, 6, const_unicode_plain_atoare ); Py_INCREF( const_unicode_plain_atoare );
    PyTuple_SET_ITEM( const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple, 7, const_unicode_plain_ator ); Py_INCREF( const_unicode_plain_ator );
    PyTuple_SET_ITEM( const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple, 8, const_unicode_plain_atori ); Py_INCREF( const_unicode_plain_atori );
    PyTuple_SET_ITEM( const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple, 9, const_unicode_digest_e84f43da3f98baa3d85ec8f3b279d739 ); Py_INCREF( const_unicode_digest_e84f43da3f98baa3d85ec8f3b279d739 );
    PyTuple_SET_ITEM( const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple, 10, const_unicode_digest_d02bfaed01174018b3e64a8ff0cb3bae ); Py_INCREF( const_unicode_digest_d02bfaed01174018b3e64a8ff0cb3bae );
    PyTuple_SET_ITEM( const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple, 11, const_unicode_digest_1dca722d965c7a1888eed7a3d3498641 ); Py_INCREF( const_unicode_digest_1dca722d965c7a1888eed7a3d3498641 );
    const_tuple_3b7d4e44f32e024571c694878f45a271_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_3b7d4e44f32e024571c694878f45a271_tuple, 0, const_unicode_plain_y ); Py_INCREF( const_unicode_plain_y );
    PyTuple_SET_ITEM( const_tuple_3b7d4e44f32e024571c694878f45a271_tuple, 1, const_unicode_digest_7da2661aa14b31c867bd40685ca18c20 ); Py_INCREF( const_unicode_digest_7da2661aa14b31c867bd40685ca18c20 );
    const_unicode_plain_selas = UNSTREAM_UNICODE( &constant_bin[ 748744 ], 5 );
    const_str_plain_GermanStemmer = UNSTREAM_STRING( &constant_bin[ 713537 ], 13, 1 );
    const_tuple_unicode_plain_end_unicode_plain_ing_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_end_unicode_plain_ing_tuple, 0, const_unicode_plain_end ); Py_INCREF( const_unicode_plain_end );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_end_unicode_plain_ing_tuple, 1, const_unicode_plain_ing ); Py_INCREF( const_unicode_plain_ing );
    const_tuple_fe4d09a5deefee50a47d3d66a36a6f27_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 756545 ], 246 );
    const_tuple_unicode_plain_i_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_i_tuple, 0, const_unicode_plain_i ); Py_INCREF( const_unicode_plain_i );
    const_tuple_unicode_plain_ar_unicode_plain_er_unicode_plain_ir_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ar_unicode_plain_er_unicode_plain_ir_tuple, 0, const_unicode_plain_ar ); Py_INCREF( const_unicode_plain_ar );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ar_unicode_plain_er_unicode_plain_ir_tuple, 1, const_unicode_plain_er ); Py_INCREF( const_unicode_plain_er );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ar_unicode_plain_er_unicode_plain_ir_tuple, 2, const_unicode_plain_ir ); Py_INCREF( const_unicode_plain_ir );
    const_tuple_tuple_unicode_plain_ch_unicode_plain_gh_tuple_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_tuple_unicode_plain_ch_unicode_plain_gh_tuple_tuple, 0, const_tuple_unicode_plain_ch_unicode_plain_gh_tuple ); Py_INCREF( const_tuple_unicode_plain_ch_unicode_plain_gh_tuple );
    const_str_plain__DanishStemmer__double_consonants = UNSTREAM_STRING( &constant_bin[ 756791 ], 33, 1 );
    const_unicode_plain_nos = UNSTREAM_UNICODE( &constant_bin[ 80329 ], 3 );
    const_unicode_plain_ence = UNSTREAM_UNICODE( &constant_bin[ 267 ], 4 );
    const_str_plain__HungarianStemmer__step7_suffixes = UNSTREAM_STRING( &constant_bin[ 756824 ], 33, 1 );
    const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple = PyTuple_New( 13 );
    PyTuple_SET_ITEM( const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple, 0, const_unicode_plain_selas ); Py_INCREF( const_unicode_plain_selas );
    PyTuple_SET_ITEM( const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple, 1, const_unicode_plain_selos ); Py_INCREF( const_unicode_plain_selos );
    PyTuple_SET_ITEM( const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple, 2, const_unicode_plain_sela ); Py_INCREF( const_unicode_plain_sela );
    PyTuple_SET_ITEM( const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple, 3, const_unicode_plain_selo ); Py_INCREF( const_unicode_plain_selo );
    PyTuple_SET_ITEM( const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple, 4, const_unicode_plain_las ); Py_INCREF( const_unicode_plain_las );
    PyTuple_SET_ITEM( const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple, 5, const_unicode_plain_les ); Py_INCREF( const_unicode_plain_les );
    const_unicode_plain_los = UNSTREAM_UNICODE( &constant_bin[ 18079 ], 3 );
    PyTuple_SET_ITEM( const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple, 6, const_unicode_plain_los ); Py_INCREF( const_unicode_plain_los );
    PyTuple_SET_ITEM( const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple, 7, const_unicode_plain_nos ); Py_INCREF( const_unicode_plain_nos );
    PyTuple_SET_ITEM( const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple, 8, const_unicode_plain_me ); Py_INCREF( const_unicode_plain_me );
    PyTuple_SET_ITEM( const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple, 9, const_unicode_plain_se ); Py_INCREF( const_unicode_plain_se );
    PyTuple_SET_ITEM( const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple, 10, const_unicode_plain_la ); Py_INCREF( const_unicode_plain_la );
    PyTuple_SET_ITEM( const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple, 11, const_unicode_plain_le ); Py_INCREF( const_unicode_plain_le );
    PyTuple_SET_ITEM( const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple, 12, const_unicode_plain_lo ); Py_INCREF( const_unicode_plain_lo );
    const_tuple_6f6fa85f530d51930aae374e32e24830_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_6f6fa85f530d51930aae374e32e24830_tuple, 0, const_unicode_plain_uzione ); Py_INCREF( const_unicode_plain_uzione );
    PyTuple_SET_ITEM( const_tuple_6f6fa85f530d51930aae374e32e24830_tuple, 1, const_unicode_plain_uzioni ); Py_INCREF( const_unicode_plain_uzioni );
    PyTuple_SET_ITEM( const_tuple_6f6fa85f530d51930aae374e32e24830_tuple, 2, const_unicode_plain_usione ); Py_INCREF( const_unicode_plain_usione );
    PyTuple_SET_ITEM( const_tuple_6f6fa85f530d51930aae374e32e24830_tuple, 3, const_unicode_plain_usioni ); Py_INCREF( const_unicode_plain_usioni );
    const_tuple_unicode_plain_ence_unicode_plain_ences_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ence_unicode_plain_ences_tuple, 0, const_unicode_plain_ence ); Py_INCREF( const_unicode_plain_ence );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ence_unicode_plain_ences_tuple, 1, const_unicode_plain_ences ); Py_INCREF( const_unicode_plain_ences );
    const_tuple_1e4323b1b66c39a2ee23b1e8a230c8f4_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_1e4323b1b66c39a2ee23b1e8a230c8f4_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_1e4323b1b66c39a2ee23b1e8a230c8f4_tuple, 1, const_str_plain_word ); Py_INCREF( const_str_plain_word );
    PyTuple_SET_ITEM( const_tuple_1e4323b1b66c39a2ee23b1e8a230c8f4_tuple, 2, const_str_plain_vowels ); Py_INCREF( const_str_plain_vowels );
    PyTuple_SET_ITEM( const_tuple_1e4323b1b66c39a2ee23b1e8a230c8f4_tuple, 3, const_str_plain_r1 ); Py_INCREF( const_str_plain_r1 );
    PyTuple_SET_ITEM( const_tuple_1e4323b1b66c39a2ee23b1e8a230c8f4_tuple, 4, const_str_plain_r2 ); Py_INCREF( const_str_plain_r2 );
    PyTuple_SET_ITEM( const_tuple_1e4323b1b66c39a2ee23b1e8a230c8f4_tuple, 5, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    const_tuple_2bffbad65294b3b0c0243910f8264539_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_2bffbad65294b3b0c0243910f8264539_tuple, 0, const_unicode_plain_k ); Py_INCREF( const_unicode_plain_k );
    PyTuple_SET_ITEM( const_tuple_2bffbad65294b3b0c0243910f8264539_tuple, 1, const_unicode_digest_d387eb741b638d13b223a4147a8219a0 ); Py_INCREF( const_unicode_digest_d387eb741b638d13b223a4147a8219a0 );
    const_tuple_unicode_plain_Y_unicode_plain_y_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_Y_unicode_plain_y_tuple, 0, const_unicode_plain_Y ); Py_INCREF( const_unicode_plain_Y );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_Y_unicode_plain_y_tuple, 1, const_unicode_plain_y ); Py_INCREF( const_unicode_plain_y );
    const_str_plain___cyrillic_to_roman = UNSTREAM_STRING( &constant_bin[ 737694 ], 19, 1 );
    const_unicode_digest_023601b36901462335c12f4c2f34eab0 = UNSTREAM_UNICODE( &constant_bin[ 756857 ], 878 );
    const_unicode_digest_5c44415f6ed9e791b54dc6fa231033cb = UNSTREAM_UNICODE( &constant_bin[ 757735 ], 230 );
    const_tuple_6d5213587a06b3895cede7973921d993_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_6d5213587a06b3895cede7973921d993_tuple, 0, const_unicode_plain_e ); Py_INCREF( const_unicode_plain_e );
    PyTuple_SET_ITEM( const_tuple_6d5213587a06b3895cede7973921d993_tuple, 1, const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 ); Py_INCREF( const_unicode_digest_bacc7c1e69811c177681ce974f1a7873 );
    const_tuple_unicode_plain_ira_unicode_plain_iras_tuple = PyTuple_New( 2 );
    const_unicode_plain_ira = UNSTREAM_UNICODE( &constant_bin[ 422268 ], 3 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ira_unicode_plain_iras_tuple, 0, const_unicode_plain_ira ); Py_INCREF( const_unicode_plain_ira );
    const_unicode_plain_iras = UNSTREAM_UNICODE( &constant_bin[ 422268 ], 4 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ira_unicode_plain_iras_tuple, 1, const_unicode_plain_iras ); Py_INCREF( const_unicode_plain_iras );
    const_str_plain__PortugueseStemmer__step2_suffixes = UNSTREAM_STRING( &constant_bin[ 757965 ], 34, 1 );
    const_tuple_860ff0d7fde116990e75009b9e4efd2f_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_860ff0d7fde116990e75009b9e4efd2f_tuple, 0, const_tuple_unicode_plain_ante_unicode_plain_able_unicode_plain_ible_tuple ); Py_INCREF( const_tuple_unicode_plain_ante_unicode_plain_able_unicode_plain_ible_tuple );
    const_str_plain__SpanishStemmer__step2b_suffixes = UNSTREAM_STRING( &constant_bin[ 757999 ], 32, 1 );
    const_tuple_f2d4b6f3b89b147e63c897b250a64eb1_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_f2d4b6f3b89b147e63c897b250a64eb1_tuple, 0, const_unicode_plain_baar ); Py_INCREF( const_unicode_plain_baar );
    PyTuple_SET_ITEM( const_tuple_f2d4b6f3b89b147e63c897b250a64eb1_tuple, 1, const_unicode_plain_lijk ); Py_INCREF( const_unicode_plain_lijk );
    const_unicode_plain_bar = UNSTREAM_UNICODE( &constant_bin[ 118325 ], 3 );
    PyTuple_SET_ITEM( const_tuple_f2d4b6f3b89b147e63c897b250a64eb1_tuple, 2, const_unicode_plain_bar ); Py_INCREF( const_unicode_plain_bar );
    PyTuple_SET_ITEM( const_tuple_f2d4b6f3b89b147e63c897b250a64eb1_tuple, 3, const_unicode_plain_end ); Py_INCREF( const_unicode_plain_end );
    PyTuple_SET_ITEM( const_tuple_f2d4b6f3b89b147e63c897b250a64eb1_tuple, 4, const_unicode_plain_ing ); Py_INCREF( const_unicode_plain_ing );
    PyTuple_SET_ITEM( const_tuple_f2d4b6f3b89b147e63c897b250a64eb1_tuple, 5, const_unicode_plain_ig ); Py_INCREF( const_unicode_plain_ig );
    const_tuple_ac5041baf699e514050e7e516f7e6b3c_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_ac5041baf699e514050e7e516f7e6b3c_tuple, 0, const_unicode_digest_127608a3534fe68c04fb1f948fc9474c ); Py_INCREF( const_unicode_digest_127608a3534fe68c04fb1f948fc9474c );
    PyTuple_SET_ITEM( const_tuple_ac5041baf699e514050e7e516f7e6b3c_tuple, 1, const_unicode_plain_u ); Py_INCREF( const_unicode_plain_u );
    const_tuple_f5a1fbff148ca09e046ddc38ac31b566_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 758031 ], 327 );
    const_str_plain__DanishStemmer__consonants = UNSTREAM_STRING( &constant_bin[ 758358 ], 26, 1 );
    const_tuple_055154112601037720a87eaf42da26be_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_055154112601037720a87eaf42da26be_tuple, 0, const_unicode_digest_5f92f4b226019badebfbef2c5e93e54a ); Py_INCREF( const_unicode_digest_5f92f4b226019badebfbef2c5e93e54a );
    PyTuple_SET_ITEM( const_tuple_055154112601037720a87eaf42da26be_tuple, 1, const_unicode_digest_44e5ee9fcc8c01e5dab4e245ebb4499c ); Py_INCREF( const_unicode_digest_44e5ee9fcc8c01e5dab4e245ebb4499c );
    const_tuple_unicode_plain_encia_unicode_plain_encias_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_encia_unicode_plain_encias_tuple, 0, const_unicode_plain_encia ); Py_INCREF( const_unicode_plain_encia );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_encia_unicode_plain_encias_tuple, 1, const_unicode_plain_encias ); Py_INCREF( const_unicode_plain_encias );
    const_tuple_0f5e8bfba6ac77c9b30b565f0f40fbe9_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_0f5e8bfba6ac77c9b30b565f0f40fbe9_tuple, 0, const_unicode_plain_u ); Py_INCREF( const_unicode_plain_u );
    PyTuple_SET_ITEM( const_tuple_0f5e8bfba6ac77c9b30b565f0f40fbe9_tuple, 1, const_unicode_digest_99ba77effd8e91845b225bae4bdde4ff ); Py_INCREF( const_unicode_digest_99ba77effd8e91845b225bae4bdde4ff );
    const_str_plain__DutchStemmer__step3b_suffixes = UNSTREAM_STRING( &constant_bin[ 758384 ], 30, 1 );
    const_tuple_unicode_plain_danish_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_danish_tuple, 0, const_unicode_plain_danish ); Py_INCREF( const_unicode_plain_danish );
    const_tuple_c7db4b0079ad3df0cf65655e34767d18_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_c7db4b0079ad3df0cf65655e34767d18_tuple, 0, const_unicode_digest_185c6d9894f4ed8a07665716865b99d7 ); Py_INCREF( const_unicode_digest_185c6d9894f4ed8a07665716865b99d7 );
    PyTuple_SET_ITEM( const_tuple_c7db4b0079ad3df0cf65655e34767d18_tuple, 1, const_unicode_plain_d ); Py_INCREF( const_unicode_plain_d );
    const_str_plain__ItalianStemmer__step0_suffixes = UNSTREAM_STRING( &constant_bin[ 758414 ], 31, 1 );
    const_tuple_bd83cadbf93eff15b5b969c939dc876e_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_bd83cadbf93eff15b5b969c939dc876e_tuple, 0, const_unicode_chr_39 ); Py_INCREF( const_unicode_chr_39 );
    PyTuple_SET_ITEM( const_tuple_bd83cadbf93eff15b5b969c939dc876e_tuple, 1, const_unicode_digest_c8940e591bfc889f1eedf45e19e49889 ); Py_INCREF( const_unicode_digest_c8940e591bfc889f1eedf45e19e49889 );
    const_unicode_plain_log = UNSTREAM_UNICODE( &constant_bin[ 605 ], 3 );
    const_tuple_unicode_plain_y_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_y_tuple, 0, const_unicode_plain_y ); Py_INCREF( const_unicode_plain_y );
    const_unicode_plain_bcdfghjklmnoprtvy = UNSTREAM_UNICODE( &constant_bin[ 734766 ], 17 );
    const_str_plain__DutchStemmer__step1_suffixes = UNSTREAM_STRING( &constant_bin[ 758445 ], 29, 1 );
    const_unicode_digest_447616c6c69e23ddf1149fc938d915f0 = UNSTREAM_UNICODE( &constant_bin[ 758474 ], 12 );
    const_tuple_4bebaa77fa75c2380a82e9edda1cfbe5_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_4bebaa77fa75c2380a82e9edda1cfbe5_tuple, 0, const_unicode_digest_c037c04b68df914b0113d18587e61c4f ); Py_INCREF( const_unicode_digest_c037c04b68df914b0113d18587e61c4f );
    PyTuple_SET_ITEM( const_tuple_4bebaa77fa75c2380a82e9edda1cfbe5_tuple, 1, const_unicode_plain_u ); Py_INCREF( const_unicode_plain_u );
    const_str_plain__HungarianStemmer__step6_suffixes = UNSTREAM_STRING( &constant_bin[ 758486 ], 33, 1 );
    const_tuple_unicode_plain_ment_unicode_plain_ments_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ment_unicode_plain_ments_tuple, 0, const_unicode_plain_ment ); Py_INCREF( const_unicode_plain_ment );
    PyTuple_SET_ITEM( const_tuple_unicode_plain_ment_unicode_plain_ments_tuple, 1, const_unicode_plain_ments ); Py_INCREF( const_unicode_plain_ments );

    constants_created = true;
}

#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_nltk$stem$snowball( void )
{
    // The module may not have been used at all.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_53b2ef4568157189cba278a57d42775c;
static PyCodeObject *codeobj_c7fb3173e9bd546d002cfa28c8a4468c;
static PyCodeObject *codeobj_243c4190efbb3c785a0635605d43f575;
static PyCodeObject *codeobj_a996ca38f0445b44e45ba5eb069e4574;
static PyCodeObject *codeobj_b43fa8fb94544c04a6f2d05e9123b316;
static PyCodeObject *codeobj_0e81928e7aeb07816c6a2f33bb9fc9d3;
static PyCodeObject *codeobj_d05027475ab0453d912e220ccd2119c9;
static PyCodeObject *codeobj_4e74bcc9a19b69bc9cadf240f2165ca1;
static PyCodeObject *codeobj_3fed6816e3a20e546c6c4bc55e0c98aa;
static PyCodeObject *codeobj_e33d382ef1750bd8c017514a1536a042;
static PyCodeObject *codeobj_db9382194eb17074b035efca03ecccdd;
static PyCodeObject *codeobj_73e63468ae4bbcaa58e6727983b3ecfb;
static PyCodeObject *codeobj_a23e49f2726f6f860501c7287cb93d0c;
static PyCodeObject *codeobj_e0fb2f7f15383b3c5cf041d32e1eb5ce;
static PyCodeObject *codeobj_2234ca157113cfc2c16998e25bd077a1;
static PyCodeObject *codeobj_5925dadbdbcb7522f2840618af6470ad;
static PyCodeObject *codeobj_ccfa7c786e79bfc49a82689d5dcf8f55;
static PyCodeObject *codeobj_036c5898c5d68d401edf79ea0b1c72fd;
static PyCodeObject *codeobj_1c71aba6b7d55771191b8babc12b24ba;
static PyCodeObject *codeobj_dd2928d8e8c41c79730127e0ebcb14f3;
static PyCodeObject *codeobj_3b7a6830f9db608ff7a466fa87e07c1a;
static PyCodeObject *codeobj_b5b69d6e30ecfcc2bbdf301ba1783573;
static PyCodeObject *codeobj_f5d007b48c80586982a1e994dfc49279;
static PyCodeObject *codeobj_c291c3a3150eaddb0391313781f9c5e8;
static PyCodeObject *codeobj_b8e3267eed385f2afcfa7820714635b8;
static PyCodeObject *codeobj_bf12e7d340de9a095d26f12b190c4152;
static PyCodeObject *codeobj_4cc9a59394940b6b38dc5c650346725d;

static void createModuleCodeObjects(void)
{
    module_filename_obj = const_str_digest_16d3a0b90457c34a4aa3a9ea88cd53fa;
    codeobj_53b2ef4568157189cba278a57d42775c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_SnowballStemmer, 30, const_tuple_empty, 0, CO_NEWLOCALS | CO_NOFREE );
    codeobj_c7fb3173e9bd546d002cfa28c8a4468c = MAKE_CODEOBJ( module_filename_obj, const_str_plain___cyrillic_to_roman, 2766, const_tuple_str_plain_self_str_plain_word_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_243c4190efbb3c785a0635605d43f575 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 119, const_tuple_2c67993aee2f31d2756d82af9e03e493_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a996ca38f0445b44e45ba5eb069e4574 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___new__, 73, const_tuple_str_plain_cls_str_plain_language_str_plain_kwargs_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_b43fa8fb94544c04a6f2d05e9123b316 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___r1_hungarian, 1589, const_tuple_3e0da8f75319f78863662807e8f7110c_tuple, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0e81928e7aeb07816c6a2f33bb9fc9d3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___regions_russian, 2708, const_tuple_f14c6160942c709d6c6b39a59c1d1717_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d05027475ab0453d912e220ccd2119c9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___repr__, 143, const_tuple_str_plain_self_tuple, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4e74bcc9a19b69bc9cadf240f2165ca1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___roman_to_cyrillic, 2821, const_tuple_str_plain_self_str_plain_word_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3fed6816e3a20e546c6c4bc55e0c98aa = MAKE_CODEOBJ( module_filename_obj, const_str_plain___rv_french, 1176, const_tuple_55e4d7c7908ecacbc7c86ad971c24be6_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e33d382ef1750bd8c017514a1536a042 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__r1_scandinavian, 160, const_tuple_168f2837f58da07ff91508cb546bdebf_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_db9382194eb17074b035efca03ecccdd = MAKE_CODEOBJ( module_filename_obj, const_str_plain__r1r2_standard, 204, const_tuple_1e4323b1b66c39a2ee23b1e8a230c8f4_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_73e63468ae4bbcaa58e6727983b3ecfb = MAKE_CODEOBJ( module_filename_obj, const_str_plain__rv_standard, 250, const_tuple_55e4d7c7908ecacbc7c86ad971c24be6_tuple, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a23e49f2726f6f860501c7287cb93d0c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_demo, 3196, const_tuple_4df1dda7855fe3f9d13b179b8c5138cc_tuple, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e0fb2f7f15383b3c5cf041d32e1eb5ce = MAKE_CODEOBJ( module_filename_obj, const_str_plain_snowball, 1, const_tuple_empty, 0, CO_NOFREE );
    codeobj_2234ca157113cfc2c16998e25bd077a1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stem, 338, const_tuple_acdd760e1bb6662d8992cc7f57800467_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_5925dadbdbcb7522f2840618af6470ad = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stem, 434, const_tuple_27af1ba8496868e7ab5749bd0fe10cda_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ccfa7c786e79bfc49a82689d5dcf8f55 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stem, 641, const_tuple_22a4e3b3cd8a67f5d9f5dd4508b37871_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_036c5898c5d68d401edf79ea0b1c72fd = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stem, 909, const_tuple_11a34057217f37049e02e1d6509e49b5_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1c71aba6b7d55771191b8babc12b24ba = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stem, 1246, const_tuple_0c9b07086b916378dc0b3d71d89a3128_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_dd2928d8e8c41c79730127e0ebcb14f3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stem, 1440, const_tuple_f04082947c75bd88e75e8064122acab2_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3b7a6830f9db608ff7a466fa87e07c1a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stem, 1693, const_tuple_7a8814b76c381411a5ff594ced61a9e5_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b5b69d6e30ecfcc2bbdf301ba1783573 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stem, 1903, const_tuple_str_plain_self_str_plain_word_str_plain_r1_str_plain_suffix_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f5d007b48c80586982a1e994dfc49279 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stem, 2017, const_tuple_327bd67ed55c6e3030521e5592ac2208_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_c291c3a3150eaddb0391313781f9c5e8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stem, 2245, const_tuple_aee507605771beac2449897a25c3e0b8_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b8e3267eed385f2afcfa7820714635b8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stem, 2535, const_tuple_6ddb6c660b5c86f5034c5335fd1d6cdc_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_bf12e7d340de9a095d26f12b190c4152 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stem, 2930, const_tuple_c1d5cd1fbabe9523917ca65d7abdb78e_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4cc9a59394940b6b38dc5c650346725d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stem, 3146, const_tuple_str_plain_self_str_plain_word_str_plain_r1_str_plain_suffix_tuple, 2, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
}

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_1_SnowballStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_2__ScandinavianStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_3__StandardStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_4_DanishStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_5_DutchStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_6_FinnishStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_7_FrenchStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_8_GermanStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_9_HungarianStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_10_ItalianStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_11_NorwegianStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_12_PortugueseStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_13_RomanianStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_14_RussianStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_15_SpanishStemmer( PyObject **python_pars );


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_16_SwedishStemmer( PyObject **python_pars );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_10_ItalianStemmer$$$function_1_stem(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_11_NorwegianStemmer$$$function_1_stem(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_12_PortugueseStemmer$$$function_1_stem(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_13_RomanianStemmer$$$function_1_stem(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_1_stem(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_2___regions_russian(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_3___cyrillic_to_roman(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_4___roman_to_cyrillic(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_15_SpanishStemmer$$$function_1_stem(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_16_SwedishStemmer$$$function_1_stem(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_1___new__(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_2___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_3___repr__(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_2__ScandinavianStemmer$$$function_1__r1_scandinavian(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_3__StandardStemmer$$$function_1__r1r2_standard(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_3__StandardStemmer$$$function_2__rv_standard(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_4_DanishStemmer$$$function_1_stem(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_5_DutchStemmer$$$function_1_stem(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_6_FinnishStemmer$$$function_1_stem(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_1_stem(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_2___rv_french(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_8_GermanStemmer$$$function_1_stem(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_1_stem(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_2___r1_hungarian(  );


static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$function_1_demo(  );


// The module function definitions.
NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_1_SnowballStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var_languages = NULL;
    PyObject *var___new__ = NULL;
    PyObject *var___init__ = NULL;
    PyObject *var___repr__ = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_name_1;
    PyObject *tmp_defaults_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_1c20dde2a1bfb75af39bec4b5b13d281;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_tuple_717d3b4480fc553b12c2cd6d84bb54f8_tuple;
    assert( var_languages == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var_languages = tmp_assign_source_3;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_53b2ef4568157189cba278a57d42775c, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_staticmethod );
    assert( tmp_called_name_1 != NULL );
    tmp_args_element_name_1 = MAKE_FUNCTION_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_1___new__(  );
    frame_function->f_lineno = 73;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        goto frame_exception_exit_1;
    }
    assert( var___new__ == NULL );
    var___new__ = tmp_assign_source_4;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( var___module__ )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain___module__,
                    var___module__
                );

                assert( res == 0 );
            }

            if ( var___doc__ )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain___doc__,
                    var___doc__
                );

                assert( res == 0 );
            }

            if ( var_languages )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_languages,
                    var_languages
                );

                assert( res == 0 );
            }

            if ( var___new__ )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain___new__,
                    var___new__
                );

                assert( res == 0 );
            }

            if ( var___init__ )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain___init__,
                    var___init__
                );

                assert( res == 0 );
            }

            if ( var___repr__ )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain___repr__,
                    var___repr__
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_defaults_1 = const_tuple_false_tuple;
    tmp_assign_source_5 = MAKE_FUNCTION_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_2___init__( INCREASE_REFCOUNT( tmp_defaults_1 ) );
    assert( var___init__ == NULL );
    var___init__ = tmp_assign_source_5;

    tmp_assign_source_6 = MAKE_FUNCTION_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_3___repr__(  );
    assert( var___repr__ == NULL );
    var___repr__ = tmp_assign_source_6;

    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var_languages )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_languages,
            var_languages
        );

        assert( res == 0 );
    }

    if ( var___new__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___new__,
            var___new__
        );

        assert( res == 0 );
    }

    if ( var___init__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___init__,
            var___init__
        );

        assert( res == 0 );
    }

    if ( var___repr__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___repr__,
            var___repr__
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_1_SnowballStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var_languages );
    Py_DECREF( var_languages );
    var_languages = NULL;

    CHECK_OBJECT( (PyObject *)var___new__ );
    Py_DECREF( var___new__ );
    var___new__ = NULL;

    CHECK_OBJECT( (PyObject *)var___init__ );
    Py_DECREF( var___init__ );
    var___init__ = NULL;

    CHECK_OBJECT( (PyObject *)var___repr__ );
    Py_DECREF( var___repr__ );
    var___repr__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var_languages );
    Py_DECREF( var_languages );
    var_languages = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_1_SnowballStemmer );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_1___new__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[ 0 ];
    PyObject *par_language = python_pars[ 1 ];
    PyObject *par_kwargs = python_pars[ 2 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_Eq_4;
    int tmp_cmp_Eq_5;
    int tmp_cmp_Eq_6;
    int tmp_cmp_Eq_7;
    int tmp_cmp_Eq_8;
    int tmp_cmp_Eq_9;
    int tmp_cmp_Eq_10;
    int tmp_cmp_Eq_11;
    int tmp_cmp_Eq_12;
    int tmp_cmp_Eq_13;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_frame_locals;
    PyObject *tmp_left_name_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_a996ca38f0445b44e45ba5eb069e4574, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_language;

    tmp_compare_right_1 = const_str_plain_danish;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 88;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 89;
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___new__ );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 89;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_DanishStemmer );

    if (unlikely( tmp_args_element_name_1 == NULL ))
    {
        tmp_args_element_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DanishStemmer );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DanishStemmer" );
        exception_tb = NULL;

        exception_lineno = 89;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 89;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 89;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_compare_left_2 = par_language;

    tmp_compare_right_2 = const_str_plain_dutch;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 90;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 91;
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___new__ );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 91;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_DutchStemmer );

    if (unlikely( tmp_args_element_name_2 == NULL ))
    {
        tmp_args_element_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DutchStemmer );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "DutchStemmer" );
        exception_tb = NULL;

        exception_lineno = 91;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 91;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 91;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_2;
    branch_no_2:;
    tmp_compare_left_3 = par_language;

    tmp_compare_right_3 = const_str_plain_finnish;
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 92;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_3 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 93;
        goto frame_exception_exit_1;
    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain___new__ );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_FinnishStemmer );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_FinnishStemmer );
    }

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "FinnishStemmer" );
        exception_tb = NULL;

        exception_lineno = 93;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 93;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_3;
    branch_no_3:;
    tmp_compare_left_4 = par_language;

    tmp_compare_right_4 = const_str_plain_french;
    tmp_cmp_Eq_4 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_Eq_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 94;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_4 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 95;
        goto frame_exception_exit_1;
    }

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain___new__ );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_FrenchStemmer );

    if (unlikely( tmp_args_element_name_4 == NULL ))
    {
        tmp_args_element_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_FrenchStemmer );
    }

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "FrenchStemmer" );
        exception_tb = NULL;

        exception_lineno = 95;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 95;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 95;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_4;
    branch_no_4:;
    tmp_compare_left_5 = par_language;

    tmp_compare_right_5 = const_str_plain_german;
    tmp_cmp_Eq_5 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_Eq_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 96;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_5 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 97;
        goto frame_exception_exit_1;
    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain___new__ );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 97;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_GermanStemmer );

    if (unlikely( tmp_args_element_name_5 == NULL ))
    {
        tmp_args_element_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_GermanStemmer );
    }

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "GermanStemmer" );
        exception_tb = NULL;

        exception_lineno = 97;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 97;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 97;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_5;
    branch_no_5:;
    tmp_compare_left_6 = par_language;

    tmp_compare_right_6 = const_str_plain_hungarian;
    tmp_cmp_Eq_6 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_cmp_Eq_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 98;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_6 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 99;
        goto frame_exception_exit_1;
    }

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain___new__ );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 99;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_HungarianStemmer );

    if (unlikely( tmp_args_element_name_6 == NULL ))
    {
        tmp_args_element_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_HungarianStemmer );
    }

    if ( tmp_args_element_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_6 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "HungarianStemmer" );
        exception_tb = NULL;

        exception_lineno = 99;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 99;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_called_name_6 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 99;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_6;
    branch_no_6:;
    tmp_compare_left_7 = par_language;

    tmp_compare_right_7 = const_str_plain_italian;
    tmp_cmp_Eq_7 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_cmp_Eq_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 100;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_7 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_source_name_7 == NULL ))
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 101;
        goto frame_exception_exit_1;
    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain___new__ );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_7 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_ItalianStemmer );

    if (unlikely( tmp_args_element_name_7 == NULL ))
    {
        tmp_args_element_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ItalianStemmer );
    }

    if ( tmp_args_element_name_7 == NULL )
    {
        Py_DECREF( tmp_called_name_7 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "ItalianStemmer" );
        exception_tb = NULL;

        exception_lineno = 101;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 101;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_7;
    branch_no_7:;
    tmp_compare_left_8 = par_language;

    tmp_compare_right_8 = const_str_plain_norwegian;
    tmp_cmp_Eq_8 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_8, tmp_compare_right_8 );
    if ( tmp_cmp_Eq_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 102;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_8 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 103;
        goto frame_exception_exit_1;
    }

    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain___new__ );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_NorwegianStemmer );

    if (unlikely( tmp_args_element_name_8 == NULL ))
    {
        tmp_args_element_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NorwegianStemmer );
    }

    if ( tmp_args_element_name_8 == NULL )
    {
        Py_DECREF( tmp_called_name_8 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "NorwegianStemmer" );
        exception_tb = NULL;

        exception_lineno = 103;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 103;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_called_name_8 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_8;
    branch_no_8:;
    tmp_compare_left_9 = par_language;

    tmp_compare_right_9 = const_str_plain_portuguese;
    tmp_cmp_Eq_9 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_9, tmp_compare_right_9 );
    if ( tmp_cmp_Eq_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 104;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_9 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 105;
        goto frame_exception_exit_1;
    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain___new__ );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 105;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_PortugueseStemmer );

    if (unlikely( tmp_args_element_name_9 == NULL ))
    {
        tmp_args_element_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PortugueseStemmer );
    }

    if ( tmp_args_element_name_9 == NULL )
    {
        Py_DECREF( tmp_called_name_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "PortugueseStemmer" );
        exception_tb = NULL;

        exception_lineno = 105;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 105;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
    }

    Py_DECREF( tmp_called_name_9 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 105;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_9;
    branch_no_9:;
    tmp_compare_left_10 = par_language;

    tmp_compare_right_10 = const_str_plain_romanian;
    tmp_cmp_Eq_10 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_10, tmp_compare_right_10 );
    if ( tmp_cmp_Eq_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 106;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_10 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_source_name_10 == NULL ))
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 107;
        goto frame_exception_exit_1;
    }

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain___new__ );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_10 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_RomanianStemmer );

    if (unlikely( tmp_args_element_name_10 == NULL ))
    {
        tmp_args_element_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RomanianStemmer );
    }

    if ( tmp_args_element_name_10 == NULL )
    {
        Py_DECREF( tmp_called_name_10 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "RomanianStemmer" );
        exception_tb = NULL;

        exception_lineno = 107;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 107;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
    }

    Py_DECREF( tmp_called_name_10 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_10;
    branch_no_10:;
    tmp_compare_left_11 = par_language;

    tmp_compare_right_11 = const_str_plain_russian;
    tmp_cmp_Eq_11 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_11, tmp_compare_right_11 );
    if ( tmp_cmp_Eq_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 108;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_11 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_source_name_11 == NULL ))
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 109;
        goto frame_exception_exit_1;
    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain___new__ );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 109;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_11 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_RussianStemmer );

    if (unlikely( tmp_args_element_name_11 == NULL ))
    {
        tmp_args_element_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RussianStemmer );
    }

    if ( tmp_args_element_name_11 == NULL )
    {
        Py_DECREF( tmp_called_name_11 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "RussianStemmer" );
        exception_tb = NULL;

        exception_lineno = 109;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 109;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
    }

    Py_DECREF( tmp_called_name_11 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 109;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_11;
    branch_no_11:;
    tmp_compare_left_12 = par_language;

    tmp_compare_right_12 = const_str_plain_spanish;
    tmp_cmp_Eq_12 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_12, tmp_compare_right_12 );
    if ( tmp_cmp_Eq_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 110;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_12 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_source_name_12 == NULL ))
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 111;
        goto frame_exception_exit_1;
    }

    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain___new__ );
    if ( tmp_called_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_12 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SpanishStemmer );

    if (unlikely( tmp_args_element_name_12 == NULL ))
    {
        tmp_args_element_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SpanishStemmer );
    }

    if ( tmp_args_element_name_12 == NULL )
    {
        Py_DECREF( tmp_called_name_12 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SpanishStemmer" );
        exception_tb = NULL;

        exception_lineno = 111;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 111;
    {
        PyObject *call_args[] = { tmp_args_element_name_12 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
    }

    Py_DECREF( tmp_called_name_12 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_12;
    branch_no_12:;
    tmp_compare_left_13 = par_language;

    tmp_compare_right_13 = const_str_plain_swedish;
    tmp_cmp_Eq_13 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_13, tmp_compare_right_13 );
    if ( tmp_cmp_Eq_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 112;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_13 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_source_name_13 == NULL ))
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 113;
        goto frame_exception_exit_1;
    }

    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain___new__ );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 113;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_13 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SwedishStemmer );

    if (unlikely( tmp_args_element_name_13 == NULL ))
    {
        tmp_args_element_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SwedishStemmer );
    }

    if ( tmp_args_element_name_13 == NULL )
    {
        Py_DECREF( tmp_called_name_13 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SwedishStemmer" );
        exception_tb = NULL;

        exception_lineno = 113;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 113;
    {
        PyObject *call_args[] = { tmp_args_element_name_13 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, call_args );
    }

    Py_DECREF( tmp_called_name_13 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 113;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    goto branch_end_13;
    branch_no_13:;
    tmp_left_name_1 = const_unicode_digest_216f6d9a84a1a1672910f2cf0438da6d;
    tmp_right_name_1 = par_language;

    tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 115;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 115;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_1 );
    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 115;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    branch_end_13:;
    branch_end_12:;
    branch_end_11:;
    branch_end_10:;
    branch_end_9:;
    branch_end_8:;
    branch_end_7:;
    branch_end_6:;
    branch_end_5:;
    branch_end_4:;
    branch_end_3:;
    branch_end_2:;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_cls )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_cls,
                    par_cls
                );

                assert( res == 0 );
            }

            if ( par_language )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_language,
                    par_language
                );

                assert( res == 0 );
            }

            if ( par_kwargs )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_kwargs,
                    par_kwargs
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_1___new__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_language );
    Py_DECREF( par_language );
    par_language = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_language );
    Py_DECREF( par_language );
    par_language = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_1___new__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_2___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_language = python_pars[ 1 ];
    PyObject *par_ignore_stopwords = python_pars[ 2 ];
    PyObject *var_word = NULL;
    PyObject *tmp_list_contraction_1__$0 = NULL;
    PyObject *tmp_list_contraction_1__contraction_result = NULL;
    PyObject *tmp_list_contraction_1__iter_value_0 = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_append_list_1;
    PyObject *tmp_append_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    int tmp_cmp_Eq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_raise_type_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_243c4190efbb3c785a0635605d43f575, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_cond_value_1 = par_ignore_stopwords;

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 131;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_compare_left_1 = par_language;

    tmp_compare_right_1 = const_str_plain_romanian;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_make_exception_arg_1 = const_unicode_digest_47b81fed7d8bf3e0cf07fd58da1fea1c;
    frame_function->f_lineno = 133;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 133;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    goto frame_exception_exit_1;
    goto branch_end_2;
    branch_no_2:;
    // Tried code:
    tmp_called_instance_1 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_stopwords );

    if (unlikely( tmp_called_instance_1 == NULL ))
    {
        tmp_called_instance_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_stopwords );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "stopwords" );
        exception_tb = NULL;

        exception_lineno = 138;
        goto try_except_handler_2;
    }

    tmp_args_element_name_1 = par_language;

    PyThreadState_GET()->frame->f_lineno = 138;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_words, call_args );
    }

    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 138;
        goto try_except_handler_2;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 137;
        goto try_except_handler_2;
    }
    assert( tmp_list_contraction_1__$0 == NULL );
    tmp_list_contraction_1__$0 = tmp_assign_source_1;

    tmp_assign_source_2 = PyList_New( 0 );
    assert( tmp_list_contraction_1__contraction_result == NULL );
    tmp_list_contraction_1__contraction_result = tmp_assign_source_2;

    loop_start_1:;
    tmp_next_source_1 = tmp_list_contraction_1__$0;

    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            PyThreadState_GET()->frame->f_lineno = 137;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_list_contraction_1__iter_value_0;
        tmp_list_contraction_1__iter_value_0 = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    tmp_assign_source_4 = tmp_list_contraction_1__iter_value_0;

    {
        PyObject *old = var_word;
        var_word = tmp_assign_source_4;
        Py_INCREF( var_word );
        Py_XDECREF( old );
    }

    tmp_append_list_1 = tmp_list_contraction_1__contraction_result;

    tmp_called_instance_2 = var_word;

    PyThreadState_GET()->frame->f_lineno = 137;
    tmp_append_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_decode, &PyTuple_GET_ITEM( const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple, 0 ) );

    if ( tmp_append_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 137;
        goto try_except_handler_2;
    }
    assert( PyList_Check( tmp_append_list_1 ) );
    tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
    Py_DECREF( tmp_append_value_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 137;
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 137;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_outline_return_value_1 = tmp_list_contraction_1__contraction_result;

    Py_INCREF( tmp_outline_return_value_1 );
    goto try_return_handler_2;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_2___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_list_contraction_1__$0 );
    Py_DECREF( tmp_list_contraction_1__$0 );
    tmp_list_contraction_1__$0 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_list_contraction_1__contraction_result );
    Py_DECREF( tmp_list_contraction_1__contraction_result );
    tmp_list_contraction_1__contraction_result = NULL;

    Py_XDECREF( tmp_list_contraction_1__iter_value_0 );
    tmp_list_contraction_1__iter_value_0 = NULL;

    goto outline_result_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_list_contraction_1__$0 );
    tmp_list_contraction_1__$0 = NULL;

    Py_XDECREF( tmp_list_contraction_1__contraction_result );
    tmp_list_contraction_1__contraction_result = NULL;

    Py_XDECREF( tmp_list_contraction_1__iter_value_0 );
    tmp_list_contraction_1__iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_2___init__ );
    return NULL;
    outline_result_1:;
    tmp_assattr_name_1 = tmp_outline_return_value_1;
    tmp_assattr_target_1 = par_self;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_stopwords, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_1 );

        exception_lineno = 137;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_1 );
    branch_end_2:;
    goto branch_end_1;
    branch_no_1:;
    tmp_assattr_name_2 = PySet_New( NULL );
    tmp_assattr_target_2 = par_self;

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_stopwords, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 140;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_language )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_language,
                    par_language
                );

                assert( res == 0 );
            }

            if ( par_ignore_stopwords )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_ignore_stopwords,
                    par_ignore_stopwords
                );

                assert( res == 0 );
            }

            if ( var_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    var_word
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_2___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_language );
    Py_DECREF( par_language );
    par_language = NULL;

    CHECK_OBJECT( (PyObject *)par_ignore_stopwords );
    Py_DECREF( par_ignore_stopwords );
    par_ignore_stopwords = NULL;

    Py_XDECREF( var_word );
    var_word = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_language );
    Py_DECREF( par_language );
    par_language = NULL;

    CHECK_OBJECT( (PyObject *)par_ignore_stopwords );
    Py_DECREF( par_ignore_stopwords );
    par_ignore_stopwords = NULL;

    Py_XDECREF( var_word );
    var_word = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_2___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_3___repr__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_left_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_type_arg_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_d05027475ab0453d912e220ccd2119c9, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_left_name_1 = const_str_digest_c0c3759da123e387798315e75d2fed70;
    tmp_type_arg_1 = par_self;

    tmp_source_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_source_name_1 != NULL );
    tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___name__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 148;
        goto frame_exception_exit_1;
    }
    tmp_return_value = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 148;
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_3___repr__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_3___repr__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_2__ScandinavianStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__r1_scandinavian = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_4fc4f204afd06910124f7168bb008746;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_nltk$stem$snowball$$$class_2__ScandinavianStemmer$$$function_1__r1_scandinavian(  );
    assert( var__r1_scandinavian == NULL );
    var__r1_scandinavian = tmp_assign_source_3;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__r1_scandinavian )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__r1_scandinavian,
            var__r1_scandinavian
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_2__ScandinavianStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__r1_scandinavian );
    Py_DECREF( var__r1_scandinavian );
    var__r1_scandinavian = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__r1_scandinavian );
    Py_DECREF( var__r1_scandinavian );
    var__r1_scandinavian = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_2__ScandinavianStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_2__ScandinavianStemmer$$$function_1__r1_scandinavian( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *par_vowels = python_pars[ 2 ];
    PyObject *var_r1 = NULL;
    PyObject *var_i = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    int tmp_cmp_GtE_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_next_source_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    Py_ssize_t tmp_slice_index_upper_1;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_xrange_high_1;
    PyObject *tmp_xrange_low_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_unicode_empty;
    assert( var_r1 == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_r1 = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_e33d382ef1750bd8c017514a1536a042, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_xrange_low_1 = const_int_pos_1;
    tmp_len_arg_1 = par_word;

    tmp_xrange_high_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_xrange_high_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 182;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = BUILTIN_XRANGE2( tmp_xrange_low_1, tmp_xrange_high_1 );
    Py_DECREF( tmp_xrange_high_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 182;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 182;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_2;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 182;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    tmp_assign_source_4 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_4;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_1 = par_word;

    tmp_subscript_name_1 = var_i;

    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 183;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_1 = par_vowels;

    tmp_and_left_value_1 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 183;
        goto try_except_handler_2;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    assert( !(tmp_and_left_truth_1 == -1) );
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_subscribed_name_2 = par_word;

    tmp_left_name_1 = var_i;

    tmp_right_name_1 = const_int_pos_1;
    tmp_subscript_name_2 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_subscript_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 183;
        goto try_except_handler_2;
    }
    tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    Py_DECREF( tmp_subscript_name_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 183;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_2 = par_vowels;

    tmp_and_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 183;
        goto try_except_handler_2;
    }
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    assert( !(tmp_cond_truth_1 == -1) );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_slice_source_1 = par_word;

    tmp_left_name_2 = var_i;

    tmp_right_name_2 = const_int_pos_1;
    tmp_slice_upper_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_slice_upper_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_2;
    }
    tmp_len_arg_2 = LOOKUP_SLICE( tmp_slice_source_1, Py_None, tmp_slice_upper_1 );
    Py_DECREF( tmp_slice_upper_1 );
    if ( tmp_len_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_2;
    }
    tmp_compexpr_left_3 = BUILTIN_LEN( tmp_len_arg_2 );
    Py_DECREF( tmp_len_arg_2 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_3 = const_int_pos_3;
    tmp_and_left_value_2 = RICH_COMPARE_LT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_2;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    if ( tmp_and_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_2 );

        exception_lineno = 184;
        goto try_except_handler_2;
    }
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    Py_DECREF( tmp_and_left_value_2 );
    tmp_slice_source_2 = par_word;

    tmp_left_name_3 = var_i;

    tmp_right_name_3 = const_int_pos_1;
    tmp_slice_upper_2 = BINARY_OPERATION_ADD( tmp_left_name_3, tmp_right_name_3 );
    if ( tmp_slice_upper_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_2;
    }
    tmp_len_arg_3 = LOOKUP_SLICE( tmp_slice_source_2, Py_None, tmp_slice_upper_2 );
    Py_DECREF( tmp_slice_upper_2 );
    if ( tmp_len_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_2;
    }
    tmp_compexpr_left_4 = BUILTIN_LEN( tmp_len_arg_3 );
    Py_DECREF( tmp_len_arg_3 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_4 = const_int_0;
    tmp_and_right_value_2 = RICH_COMPARE_GT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 184;
        goto try_except_handler_2;
    }
    tmp_cond_value_2 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_cond_value_2 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 184;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_sliceslicedel_index_lower_1 = 3;
    tmp_slice_index_upper_1 = PY_SSIZE_T_MAX;
    tmp_slice_source_3 = par_word;

    tmp_assign_source_5 = LOOKUP_INDEX_SLICE( tmp_slice_source_3, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 185;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_5;
        Py_DECREF( old );
    }

    goto branch_end_2;
    branch_no_2:;
    tmp_slice_source_4 = par_word;

    tmp_left_name_4 = var_i;

    tmp_right_name_4 = const_int_pos_1;
    tmp_slice_upper_3 = BINARY_OPERATION_ADD( tmp_left_name_4, tmp_right_name_4 );
    if ( tmp_slice_upper_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 186;
        goto try_except_handler_2;
    }
    tmp_len_arg_4 = LOOKUP_SLICE( tmp_slice_source_4, Py_None, tmp_slice_upper_3 );
    Py_DECREF( tmp_slice_upper_3 );
    if ( tmp_len_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 186;
        goto try_except_handler_2;
    }
    tmp_compare_left_1 = BUILTIN_LEN( tmp_len_arg_4 );
    Py_DECREF( tmp_len_arg_4 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 186;
        goto try_except_handler_2;
    }
    tmp_compare_right_1 = const_int_pos_3;
    tmp_cmp_GtE_1 = RICH_COMPARE_BOOL_GE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_GtE_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 186;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_GtE_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_slice_source_5 = par_word;

    tmp_left_name_5 = var_i;

    tmp_right_name_5 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_ADD( tmp_left_name_5, tmp_right_name_5 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 187;
        goto try_except_handler_2;
    }
    tmp_assign_source_6 = LOOKUP_SLICE( tmp_slice_source_5, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_lower_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 187;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_6;
        Py_DECREF( old );
    }

    goto branch_end_3;
    branch_no_3:;
    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_2;
    branch_end_3:;
    branch_end_2:;
    goto loop_end_1;
    branch_no_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 182;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__iter_value );
    Py_DECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = var_r1;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 192;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( par_vowels )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_vowels,
                    par_vowels
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_2__ScandinavianStemmer$$$function_1__r1_scandinavian );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    CHECK_OBJECT( (PyObject *)par_vowels );
    Py_DECREF( par_vowels );
    par_vowels = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    CHECK_OBJECT( (PyObject *)par_vowels );
    Py_DECREF( par_vowels );
    par_vowels = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_2__ScandinavianStemmer$$$function_1__r1_scandinavian );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_3__StandardStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__r1r2_standard = NULL;
    PyObject *var__rv_standard = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_f93b9eb49ae41784f77c7dc9cf4ff867;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = MAKE_FUNCTION_nltk$stem$snowball$$$class_3__StandardStemmer$$$function_1__r1r2_standard(  );
    assert( var__r1r2_standard == NULL );
    var__r1r2_standard = tmp_assign_source_3;

    tmp_assign_source_4 = MAKE_FUNCTION_nltk$stem$snowball$$$class_3__StandardStemmer$$$function_2__rv_standard(  );
    assert( var__rv_standard == NULL );
    var__rv_standard = tmp_assign_source_4;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__r1r2_standard )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__r1r2_standard,
            var__r1r2_standard
        );

        assert( res == 0 );
    }

    if ( var__rv_standard )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__rv_standard,
            var__rv_standard
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_3__StandardStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__r1r2_standard );
    Py_DECREF( var__r1r2_standard );
    var__r1r2_standard = NULL;

    CHECK_OBJECT( (PyObject *)var__rv_standard );
    Py_DECREF( var__rv_standard );
    var__rv_standard = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__r1r2_standard );
    Py_DECREF( var__r1r2_standard );
    var__r1r2_standard = NULL;

    CHECK_OBJECT( (PyObject *)var__rv_standard );
    Py_DECREF( var__rv_standard );
    var__rv_standard = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_3__StandardStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_3__StandardStemmer$$$function_1__r1r2_standard( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *par_vowels = python_pars[ 2 ];
    PyObject *var_r1 = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_i = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_xrange_high_1;
    PyObject *tmp_xrange_high_2;
    PyObject *tmp_xrange_low_1;
    PyObject *tmp_xrange_low_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_unicode_empty;
    assert( var_r1 == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_r1 = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_empty;
    assert( var_r2 == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var_r2 = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_db9382194eb17074b035efca03ecccdd, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_xrange_low_1 = const_int_pos_1;
    tmp_len_arg_1 = par_word;

    tmp_xrange_high_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_xrange_high_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 236;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = BUILTIN_XRANGE2( tmp_xrange_low_1, tmp_xrange_high_1 );
    Py_DECREF( tmp_xrange_high_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 236;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 236;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_3;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 236;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_assign_source_5 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_5;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_1 = par_word;

    tmp_subscript_name_1 = var_i;

    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 237;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_1 = par_vowels;

    tmp_and_left_value_1 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 237;
        goto try_except_handler_2;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    assert( !(tmp_and_left_truth_1 == -1) );
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_subscribed_name_2 = par_word;

    tmp_left_name_1 = var_i;

    tmp_right_name_1 = const_int_pos_1;
    tmp_subscript_name_2 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_subscript_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 237;
        goto try_except_handler_2;
    }
    tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    Py_DECREF( tmp_subscript_name_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 237;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_2 = par_vowels;

    tmp_and_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 237;
        goto try_except_handler_2;
    }
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    assert( !(tmp_cond_truth_1 == -1) );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_slice_source_1 = par_word;

    tmp_left_name_2 = var_i;

    tmp_right_name_2 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 238;
        goto try_except_handler_2;
    }
    tmp_assign_source_6 = LOOKUP_SLICE( tmp_slice_source_1, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_lower_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 238;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_6;
        Py_DECREF( old );
    }

    goto loop_end_1;
    branch_no_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 236;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_xrange_low_2 = const_int_pos_1;
    tmp_len_arg_2 = var_r1;

    tmp_xrange_high_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_xrange_high_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 241;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_2 = BUILTIN_XRANGE2( tmp_xrange_low_2, tmp_xrange_high_2 );
    Py_DECREF( tmp_xrange_high_2 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 241;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 241;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_7;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_8 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_8 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 241;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    tmp_assign_source_9 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_9;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_3 = var_r1;

    tmp_subscript_name_3 = var_i;

    tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 242;
        goto try_except_handler_3;
    }
    tmp_compexpr_right_3 = par_vowels;

    tmp_and_left_value_2 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 242;
        goto try_except_handler_3;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    assert( !(tmp_and_left_truth_2 == -1) );
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_subscribed_name_4 = var_r1;

    tmp_left_name_3 = var_i;

    tmp_right_name_3 = const_int_pos_1;
    tmp_subscript_name_4 = BINARY_OPERATION_SUB( tmp_left_name_3, tmp_right_name_3 );
    if ( tmp_subscript_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 242;
        goto try_except_handler_3;
    }
    tmp_compexpr_left_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    Py_DECREF( tmp_subscript_name_4 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 242;
        goto try_except_handler_3;
    }
    tmp_compexpr_right_4 = par_vowels;

    tmp_and_right_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 242;
        goto try_except_handler_3;
    }
    tmp_cond_value_2 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_cond_value_2 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    assert( !(tmp_cond_truth_2 == -1) );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_slice_source_2 = var_r1;

    tmp_left_name_4 = var_i;

    tmp_right_name_4 = const_int_pos_1;
    tmp_slice_lower_2 = BINARY_OPERATION_ADD( tmp_left_name_4, tmp_right_name_4 );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 243;
        goto try_except_handler_3;
    }
    tmp_assign_source_10 = LOOKUP_SLICE( tmp_slice_source_2, tmp_slice_lower_2, Py_None );
    Py_DECREF( tmp_slice_lower_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 243;
        goto try_except_handler_3;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_10;
        Py_DECREF( old );
    }

    goto loop_end_2;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 241;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( par_vowels )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_vowels,
                    par_vowels
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_r2 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r2,
                    var_r2
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_return_value = PyTuple_New( 2 );
    tmp_tuple_element_1 = var_r1;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_r2;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_3__StandardStemmer$$$function_1__r1r2_standard );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    CHECK_OBJECT( (PyObject *)par_vowels );
    Py_DECREF( par_vowels );
    par_vowels = NULL;

    CHECK_OBJECT( (PyObject *)var_r1 );
    Py_DECREF( var_r1 );
    var_r1 = NULL;

    CHECK_OBJECT( (PyObject *)var_r2 );
    Py_DECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    CHECK_OBJECT( (PyObject *)par_vowels );
    Py_DECREF( par_vowels );
    par_vowels = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_3__StandardStemmer$$$function_1__r1r2_standard );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_3__StandardStemmer$$$function_2__rv_standard( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *par_vowels = python_pars[ 2 ];
    PyObject *var_rv = NULL;
    PyObject *var_i = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    int tmp_cmp_GtE_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_NotIn_1;
    int tmp_cmp_NotIn_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_xrange_high_1;
    PyObject *tmp_xrange_high_2;
    PyObject *tmp_xrange_low_1;
    PyObject *tmp_xrange_low_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_unicode_empty;
    assert( var_rv == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_rv = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_73e63468ae4bbcaa58e6727983b3ecfb, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_len_arg_1 = par_word;

    tmp_compare_left_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 273;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = const_int_pos_2;
    tmp_cmp_GtE_1 = RICH_COMPARE_BOOL_GE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_GtE_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 273;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_GtE_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_subscribed_name_1 = par_word;

    tmp_subscript_name_1 = const_int_pos_1;
    tmp_compare_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 274;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_2 = par_vowels;

    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_NotIn_1 == -1) );
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_cmp_NotIn_1 == 0 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_xrange_low_1 = const_int_pos_2;
    tmp_len_arg_2 = par_word;

    tmp_xrange_high_1 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_xrange_high_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = BUILTIN_XRANGE2( tmp_xrange_low_1, tmp_xrange_high_1 );
    Py_DECREF( tmp_xrange_high_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_2;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 275;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    tmp_assign_source_4 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_4;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_2 = par_word;

    tmp_subscript_name_2 = var_i;

    tmp_compare_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 276;
        goto try_except_handler_2;
    }
    tmp_compare_right_3 = par_vowels;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_left_3 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_slice_source_1 = par_word;

    tmp_left_name_1 = var_i;

    tmp_right_name_1 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 277;
        goto try_except_handler_2;
    }
    tmp_assign_source_5 = LOOKUP_SLICE( tmp_slice_source_1, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_lower_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 277;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_5;
        Py_DECREF( old );
    }

    goto loop_end_1;
    branch_no_3:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    goto branch_end_2;
    branch_no_2:;
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = 2;
    tmp_slice_source_2 = par_word;

    tmp_compare_left_4 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_compare_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_4 = par_vowels;

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_2 == -1) );
    Py_DECREF( tmp_compare_left_4 );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_xrange_low_2 = const_int_pos_2;
    tmp_len_arg_3 = par_word;

    tmp_xrange_high_2 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_xrange_high_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_2 = BUILTIN_XRANGE2( tmp_xrange_low_2, tmp_xrange_high_2 );
    Py_DECREF( tmp_xrange_high_2 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_6;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_7 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 281;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_7;
        Py_XDECREF( old );
    }

    tmp_assign_source_8 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_8;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_3 = par_word;

    tmp_subscript_name_3 = var_i;

    tmp_compare_left_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_compare_left_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 282;
        goto try_except_handler_3;
    }
    tmp_compare_right_5 = par_vowels;

    tmp_cmp_NotIn_2 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_NotIn_2 == -1) );
    Py_DECREF( tmp_compare_left_5 );
    if ( tmp_cmp_NotIn_2 == 0 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_slice_source_3 = par_word;

    tmp_left_name_2 = var_i;

    tmp_right_name_2 = const_int_pos_1;
    tmp_slice_lower_2 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 283;
        goto try_except_handler_3;
    }
    tmp_assign_source_9 = LOOKUP_SLICE( tmp_slice_source_3, tmp_slice_lower_2, Py_None );
    Py_DECREF( tmp_slice_lower_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 283;
        goto try_except_handler_3;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_9;
        Py_DECREF( old );
    }

    goto loop_end_2;
    branch_no_5:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 281;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    goto branch_end_4;
    branch_no_4:;
    tmp_sliceslicedel_index_lower_2 = 3;
    tmp_slice_index_upper_2 = PY_SSIZE_T_MAX;
    tmp_slice_source_4 = par_word;

    tmp_assign_source_10 = LOOKUP_INDEX_SLICE( tmp_slice_source_4, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 286;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_10;
        Py_DECREF( old );
    }

    branch_end_4:;
    branch_end_2:;
    branch_no_1:;
    tmp_return_value = var_rv;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 288;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( par_vowels )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_vowels,
                    par_vowels
                );

                assert( res == 0 );
            }

            if ( var_rv )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_rv,
                    var_rv
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_3__StandardStemmer$$$function_2__rv_standard );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    CHECK_OBJECT( (PyObject *)par_vowels );
    Py_DECREF( par_vowels );
    par_vowels = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    CHECK_OBJECT( (PyObject *)par_vowels );
    Py_DECREF( par_vowels );
    par_vowels = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_3__StandardStemmer$$$function_2__rv_standard );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_4_DanishStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__DanishStemmer__vowels = NULL;
    PyObject *var__DanishStemmer__consonants = NULL;
    PyObject *var__DanishStemmer__double_consonants = NULL;
    PyObject *var__DanishStemmer__s_ending = NULL;
    PyObject *var__DanishStemmer__step1_suffixes = NULL;
    PyObject *var__DanishStemmer__step2_suffixes = NULL;
    PyObject *var__DanishStemmer__step3_suffixes = NULL;
    PyObject *var_stem = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_2b7cc6faba20e3dd422dc9bcdec90fc7;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_unicode_digest_095a177b51f187e5ba20c32fce88fe1d;
    assert( var__DanishStemmer__vowels == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var__DanishStemmer__vowels = tmp_assign_source_3;

    tmp_assign_source_4 = const_unicode_plain_bcdfghjklmnpqrstvwxz;
    assert( var__DanishStemmer__consonants == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var__DanishStemmer__consonants = tmp_assign_source_4;

    tmp_assign_source_5 = const_tuple_7c19c3129287ed1c05bdd2c2c1c5213c_tuple;
    assert( var__DanishStemmer__double_consonants == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__DanishStemmer__double_consonants = tmp_assign_source_5;

    tmp_assign_source_6 = const_unicode_digest_4a809d79c92d963f27fdaf2f296354f2;
    assert( var__DanishStemmer__s_ending == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var__DanishStemmer__s_ending = tmp_assign_source_6;

    tmp_assign_source_7 = const_tuple_3fa6ac1f53c663536627dc5946b5597b_tuple;
    assert( var__DanishStemmer__step1_suffixes == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var__DanishStemmer__step1_suffixes = tmp_assign_source_7;

    tmp_assign_source_8 = const_tuple_a3d49bbeb2468d8677161c823ade854c_tuple;
    assert( var__DanishStemmer__step2_suffixes == NULL );
    Py_INCREF( tmp_assign_source_8 );
    var__DanishStemmer__step2_suffixes = tmp_assign_source_8;

    tmp_assign_source_9 = const_tuple_cbfa83547dce568f2d6d71f7d9d28e8b_tuple;
    assert( var__DanishStemmer__step3_suffixes == NULL );
    Py_INCREF( tmp_assign_source_9 );
    var__DanishStemmer__step3_suffixes = tmp_assign_source_9;

    tmp_assign_source_10 = MAKE_FUNCTION_nltk$stem$snowball$$$class_4_DanishStemmer$$$function_1_stem(  );
    assert( var_stem == NULL );
    var_stem = tmp_assign_source_10;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__DanishStemmer__vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__DanishStemmer__vowels,
            var__DanishStemmer__vowels
        );

        assert( res == 0 );
    }

    if ( var__DanishStemmer__consonants )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__DanishStemmer__consonants,
            var__DanishStemmer__consonants
        );

        assert( res == 0 );
    }

    if ( var__DanishStemmer__double_consonants )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__DanishStemmer__double_consonants,
            var__DanishStemmer__double_consonants
        );

        assert( res == 0 );
    }

    if ( var__DanishStemmer__s_ending )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__DanishStemmer__s_ending,
            var__DanishStemmer__s_ending
        );

        assert( res == 0 );
    }

    if ( var__DanishStemmer__step1_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__DanishStemmer__step1_suffixes,
            var__DanishStemmer__step1_suffixes
        );

        assert( res == 0 );
    }

    if ( var__DanishStemmer__step2_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__DanishStemmer__step2_suffixes,
            var__DanishStemmer__step2_suffixes
        );

        assert( res == 0 );
    }

    if ( var__DanishStemmer__step3_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__DanishStemmer__step3_suffixes,
            var__DanishStemmer__step3_suffixes
        );

        assert( res == 0 );
    }

    if ( var_stem )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_stem,
            var_stem
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_4_DanishStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__vowels );
    Py_DECREF( var__DanishStemmer__vowels );
    var__DanishStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__consonants );
    Py_DECREF( var__DanishStemmer__consonants );
    var__DanishStemmer__consonants = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__double_consonants );
    Py_DECREF( var__DanishStemmer__double_consonants );
    var__DanishStemmer__double_consonants = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__s_ending );
    Py_DECREF( var__DanishStemmer__s_ending );
    var__DanishStemmer__s_ending = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__step1_suffixes );
    Py_DECREF( var__DanishStemmer__step1_suffixes );
    var__DanishStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__step2_suffixes );
    Py_DECREF( var__DanishStemmer__step2_suffixes );
    var__DanishStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__step3_suffixes );
    Py_DECREF( var__DanishStemmer__step3_suffixes );
    var__DanishStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__vowels );
    Py_DECREF( var__DanishStemmer__vowels );
    var__DanishStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__consonants );
    Py_DECREF( var__DanishStemmer__consonants );
    var__DanishStemmer__consonants = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__double_consonants );
    Py_DECREF( var__DanishStemmer__double_consonants );
    var__DanishStemmer__double_consonants = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__s_ending );
    Py_DECREF( var__DanishStemmer__s_ending );
    var__DanishStemmer__s_ending = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__step1_suffixes );
    Py_DECREF( var__DanishStemmer__step1_suffixes );
    var__DanishStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__step2_suffixes );
    Py_DECREF( var__DanishStemmer__step2_suffixes );
    var__DanishStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__DanishStemmer__step3_suffixes );
    Py_DECREF( var__DanishStemmer__step3_suffixes );
    var__DanishStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_4_DanishStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_4_DanishStemmer$$$function_1_stem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_r1 = NULL;
    PyObject *var_suffix = NULL;
    PyObject *var_double_cons = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    PyObject *tmp_operand_name_4;
    PyObject *tmp_return_value;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    Py_ssize_t tmp_slice_index_upper_6;
    Py_ssize_t tmp_slice_index_upper_7;
    Py_ssize_t tmp_slice_index_upper_8;
    Py_ssize_t tmp_slice_index_upper_9;
    Py_ssize_t tmp_slice_index_upper_10;
    Py_ssize_t tmp_slice_index_upper_11;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_source_10;
    PyObject *tmp_slice_source_11;
    PyObject *tmp_slice_source_12;
    PyObject *tmp_slice_source_13;
    PyObject *tmp_slice_source_14;
    PyObject *tmp_slice_source_15;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    PyObject *tmp_slice_upper_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_6;
    Py_ssize_t tmp_sliceslicedel_index_lower_7;
    Py_ssize_t tmp_sliceslicedel_index_lower_8;
    Py_ssize_t tmp_sliceslicedel_index_lower_9;
    Py_ssize_t tmp_sliceslicedel_index_lower_10;
    Py_ssize_t tmp_sliceslicedel_index_lower_11;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_2234ca157113cfc2c16998e25bd077a1, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_word;

    tmp_source_name_1 = par_self;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stopwords );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 348;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_called_instance_1 = par_word;

    frame_function->f_lineno = 352;
    tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_lower );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 352;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_1;
        Py_DECREF( old );
    }

    tmp_source_name_2 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__r1_scandinavian );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 356;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_word;

    tmp_source_name_3 = par_self;

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__DanishStemmer__vowels );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 356;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 356;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 356;
        goto frame_exception_exit_1;
    }
    assert( var_r1 == NULL );
    var_r1 = tmp_assign_source_2;

    tmp_source_name_4 = par_self;

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__DanishStemmer__step1_suffixes );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 363;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 363;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_3;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 363;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_assign_source_5 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_5;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_2 = var_r1;

    tmp_args_element_name_3 = var_suffix;

    frame_function->f_lineno = 364;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_cond_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 364;
        goto try_except_handler_2;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 364;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_compare_left_2 = var_suffix;

    tmp_compare_right_2 = const_unicode_plain_s;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 365;
        goto try_except_handler_2;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_subscribed_name_1 = par_word;

    tmp_subscript_name_1 = const_int_neg_2;
    tmp_compare_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 366;
        goto try_except_handler_2;
    }
    tmp_source_name_5 = par_self;

    tmp_compare_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__DanishStemmer__s_ending );
    if ( tmp_compare_right_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_3 );

        exception_lineno = 366;
        goto try_except_handler_2;
    }
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_2 == -1) );
    Py_DECREF( tmp_compare_left_3 );
    Py_DECREF( tmp_compare_right_3 );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = -1;
    tmp_slice_source_1 = par_word;

    tmp_assign_source_6 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 367;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_6;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = -1;
    tmp_slice_source_2 = var_r1;

    tmp_assign_source_7 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 368;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_7;
        Py_DECREF( old );
    }

    branch_no_4:;
    goto branch_end_3;
    branch_no_3:;
    tmp_slice_source_3 = par_word;

    tmp_len_arg_1 = var_suffix;

    tmp_operand_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 370;
        goto try_except_handler_2;
    }
    tmp_slice_upper_1 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_slice_upper_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 370;
        goto try_except_handler_2;
    }
    tmp_assign_source_8 = LOOKUP_SLICE( tmp_slice_source_3, Py_None, tmp_slice_upper_1 );
    Py_DECREF( tmp_slice_upper_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 370;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_8;
        Py_DECREF( old );
    }

    tmp_slice_source_4 = var_r1;

    tmp_len_arg_2 = var_suffix;

    tmp_operand_name_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 371;
        goto try_except_handler_2;
    }
    tmp_slice_upper_2 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_slice_upper_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 371;
        goto try_except_handler_2;
    }
    tmp_assign_source_9 = LOOKUP_SLICE( tmp_slice_source_4, Py_None, tmp_slice_upper_2 );
    Py_DECREF( tmp_slice_upper_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 371;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_9;
        Py_DECREF( old );
    }

    branch_end_3:;
    goto loop_end_1;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 363;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_source_name_6 = par_self;

    tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__DanishStemmer__step2_suffixes );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 375;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 375;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_10;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_11 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_11 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 375;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    tmp_assign_source_12 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_12;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_3 = var_r1;

    if ( tmp_called_instance_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 376;
        goto try_except_handler_3;
    }

    tmp_args_element_name_4 = var_suffix;

    frame_function->f_lineno = 376;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_cond_value_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 376;
        goto try_except_handler_3;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 376;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -1;
    tmp_slice_source_5 = par_word;

    if ( tmp_slice_source_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 377;
        goto try_except_handler_3;
    }

    tmp_assign_source_13 = LOOKUP_INDEX_SLICE( tmp_slice_source_5, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 377;
        goto try_except_handler_3;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_13;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = -1;
    tmp_slice_source_6 = var_r1;

    if ( tmp_slice_source_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 378;
        goto try_except_handler_3;
    }

    tmp_assign_source_14 = LOOKUP_INDEX_SLICE( tmp_slice_source_6, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 378;
        goto try_except_handler_3;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_14;
        Py_XDECREF( old );
    }

    goto loop_end_2;
    branch_no_5:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 375;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_called_instance_4 = var_r1;

    if ( tmp_called_instance_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 382;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 382;
    tmp_cond_value_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_igst_tuple, 0 ) );

    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 382;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 382;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = -2;
    tmp_slice_source_7 = par_word;

    if ( tmp_slice_source_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 383;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_15 = LOOKUP_INDEX_SLICE( tmp_slice_source_7, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 383;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_15;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_6 = 0;
    tmp_slice_index_upper_6 = -2;
    tmp_slice_source_8 = var_r1;

    if ( tmp_slice_source_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 384;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_16 = LOOKUP_INDEX_SLICE( tmp_slice_source_8, tmp_sliceslicedel_index_lower_6, tmp_slice_index_upper_6 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 384;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_16;
        Py_XDECREF( old );
    }

    branch_no_6:;
    tmp_source_name_7 = par_self;

    tmp_iter_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__DanishStemmer__step3_suffixes );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 386;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_17 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 386;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_17;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_18 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_18 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 386;
            goto try_except_handler_4;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_18;
        Py_XDECREF( old );
    }

    tmp_assign_source_19 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_19;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_5 = var_r1;

    if ( tmp_called_instance_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 387;
        goto try_except_handler_4;
    }

    tmp_args_element_name_5 = var_suffix;

    frame_function->f_lineno = 387;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_cond_value_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 387;
        goto try_except_handler_4;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        exception_lineno = 387;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_compare_left_4 = var_suffix;

    tmp_compare_right_4 = const_unicode_digest_62db8fd5ae2a265479a2e1db31f73b57;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 388;
        goto try_except_handler_4;
    }
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_sliceslicedel_index_lower_7 = 0;
    tmp_slice_index_upper_7 = -1;
    tmp_slice_source_9 = par_word;

    if ( tmp_slice_source_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 389;
        goto try_except_handler_4;
    }

    tmp_assign_source_20 = LOOKUP_INDEX_SLICE( tmp_slice_source_9, tmp_sliceslicedel_index_lower_7, tmp_slice_index_upper_7 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 389;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_20;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_8 = 0;
    tmp_slice_index_upper_8 = -1;
    tmp_slice_source_10 = var_r1;

    if ( tmp_slice_source_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 390;
        goto try_except_handler_4;
    }

    tmp_assign_source_21 = LOOKUP_INDEX_SLICE( tmp_slice_source_10, tmp_sliceslicedel_index_lower_8, tmp_slice_index_upper_8 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 390;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_21;
        Py_XDECREF( old );
    }

    goto branch_end_8;
    branch_no_8:;
    tmp_slice_source_11 = par_word;

    if ( tmp_slice_source_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 392;
        goto try_except_handler_4;
    }

    tmp_len_arg_3 = var_suffix;

    tmp_operand_name_3 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_operand_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 392;
        goto try_except_handler_4;
    }
    tmp_slice_upper_3 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_slice_upper_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 392;
        goto try_except_handler_4;
    }
    tmp_assign_source_22 = LOOKUP_SLICE( tmp_slice_source_11, Py_None, tmp_slice_upper_3 );
    Py_DECREF( tmp_slice_upper_3 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 392;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_22;
        Py_XDECREF( old );
    }

    tmp_slice_source_12 = var_r1;

    if ( tmp_slice_source_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 393;
        goto try_except_handler_4;
    }

    tmp_len_arg_4 = var_suffix;

    tmp_operand_name_4 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_operand_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 393;
        goto try_except_handler_4;
    }
    tmp_slice_upper_4 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_4 );
    Py_DECREF( tmp_operand_name_4 );
    if ( tmp_slice_upper_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 393;
        goto try_except_handler_4;
    }
    tmp_assign_source_23 = LOOKUP_SLICE( tmp_slice_source_12, Py_None, tmp_slice_upper_4 );
    Py_DECREF( tmp_slice_upper_4 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 393;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_23;
        Py_XDECREF( old );
    }

    tmp_source_name_8 = var_r1;

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_endswith );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 395;
        goto try_except_handler_4;
    }
    tmp_source_name_9 = par_self;

    tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__DanishStemmer__step2_suffixes );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 395;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 395;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_cond_value_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 395;
        goto try_except_handler_4;
    }
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        exception_lineno = 395;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_sliceslicedel_index_lower_9 = 0;
    tmp_slice_index_upper_9 = -1;
    tmp_slice_source_13 = par_word;

    tmp_assign_source_24 = LOOKUP_INDEX_SLICE( tmp_slice_source_13, tmp_sliceslicedel_index_lower_9, tmp_slice_index_upper_9 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 396;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_24;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_10 = 0;
    tmp_slice_index_upper_10 = -1;
    tmp_slice_source_14 = var_r1;

    tmp_assign_source_25 = LOOKUP_INDEX_SLICE( tmp_slice_source_14, tmp_sliceslicedel_index_lower_10, tmp_slice_index_upper_10 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 397;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_25;
        Py_DECREF( old );
    }

    branch_no_9:;
    branch_end_8:;
    goto loop_end_3;
    branch_no_7:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 386;
        goto try_except_handler_4;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_source_name_10 = par_self;

    tmp_iter_arg_4 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__DanishStemmer__double_consonants );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 401;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_26 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 401;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator == NULL );
    tmp_for_loop_4__for_iterator = tmp_assign_source_26;

    // Tried code:
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    tmp_assign_source_27 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_27 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 401;
            goto try_except_handler_5;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_27;
        Py_XDECREF( old );
    }

    tmp_assign_source_28 = tmp_for_loop_4__iter_value;

    {
        PyObject *old = var_double_cons;
        var_double_cons = tmp_assign_source_28;
        Py_INCREF( var_double_cons );
        Py_XDECREF( old );
    }

    tmp_called_instance_6 = par_word;

    if ( tmp_called_instance_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 402;
        goto try_except_handler_5;
    }

    tmp_args_element_name_7 = var_double_cons;

    frame_function->f_lineno = 402;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_and_left_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_endswith, call_args );
    }

    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 402;
        goto try_except_handler_5;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 402;
        goto try_except_handler_5;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_len_arg_5 = par_word;

    if ( tmp_len_arg_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 402;
        goto try_except_handler_5;
    }

    tmp_compexpr_left_1 = BUILTIN_LEN( tmp_len_arg_5 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 402;
        goto try_except_handler_5;
    }
    tmp_compexpr_right_1 = const_int_pos_3;
    tmp_and_right_value_1 = RICH_COMPARE_GT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 402;
        goto try_except_handler_5;
    }
    tmp_cond_value_6 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_6 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        exception_lineno = 402;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_sliceslicedel_index_lower_11 = 0;
    tmp_slice_index_upper_11 = -1;
    tmp_slice_source_15 = par_word;

    if ( tmp_slice_source_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 403;
        goto try_except_handler_5;
    }

    tmp_assign_source_29 = LOOKUP_INDEX_SLICE( tmp_slice_source_15, tmp_sliceslicedel_index_lower_11, tmp_slice_index_upper_11 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 403;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_29;
        Py_XDECREF( old );
    }

    goto loop_end_4;
    branch_no_10:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 401;
        goto try_except_handler_5;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    tmp_return_value = par_word;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 407;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_suffix )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_suffix,
                    var_suffix
                );

                assert( res == 0 );
            }

            if ( var_double_cons )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_double_cons,
                    var_double_cons
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_4_DanishStemmer$$$function_1_stem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    Py_XDECREF( var_double_cons );
    var_double_cons = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    Py_XDECREF( var_double_cons );
    var_double_cons = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_4_DanishStemmer$$$function_1_stem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_5_DutchStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__DutchStemmer__vowels = NULL;
    PyObject *var__DutchStemmer__step1_suffixes = NULL;
    PyObject *var__DutchStemmer__step3b_suffixes = NULL;
    PyObject *var_stem = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_f39ca2c1237dc556001a56894b0789f2;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_unicode_digest_e72e12f7bd4091cd7d49885da0d54666;
    assert( var__DutchStemmer__vowels == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var__DutchStemmer__vowels = tmp_assign_source_3;

    tmp_assign_source_4 = const_tuple_06b9bf63a73548cded550ebb4a44d0a1_tuple;
    assert( var__DutchStemmer__step1_suffixes == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var__DutchStemmer__step1_suffixes = tmp_assign_source_4;

    tmp_assign_source_5 = const_tuple_f2d4b6f3b89b147e63c897b250a64eb1_tuple;
    assert( var__DutchStemmer__step3b_suffixes == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__DutchStemmer__step3b_suffixes = tmp_assign_source_5;

    tmp_assign_source_6 = MAKE_FUNCTION_nltk$stem$snowball$$$class_5_DutchStemmer$$$function_1_stem(  );
    assert( var_stem == NULL );
    var_stem = tmp_assign_source_6;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__DutchStemmer__vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__DutchStemmer__vowels,
            var__DutchStemmer__vowels
        );

        assert( res == 0 );
    }

    if ( var__DutchStemmer__step1_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__DutchStemmer__step1_suffixes,
            var__DutchStemmer__step1_suffixes
        );

        assert( res == 0 );
    }

    if ( var__DutchStemmer__step3b_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__DutchStemmer__step3b_suffixes,
            var__DutchStemmer__step3b_suffixes
        );

        assert( res == 0 );
    }

    if ( var_stem )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_stem,
            var_stem
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_5_DutchStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__DutchStemmer__vowels );
    Py_DECREF( var__DutchStemmer__vowels );
    var__DutchStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__DutchStemmer__step1_suffixes );
    Py_DECREF( var__DutchStemmer__step1_suffixes );
    var__DutchStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__DutchStemmer__step3b_suffixes );
    Py_DECREF( var__DutchStemmer__step3b_suffixes );
    var__DutchStemmer__step3b_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__DutchStemmer__vowels );
    Py_DECREF( var__DutchStemmer__vowels );
    var__DutchStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__DutchStemmer__step1_suffixes );
    Py_DECREF( var__DutchStemmer__step1_suffixes );
    var__DutchStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__DutchStemmer__step3b_suffixes );
    Py_DECREF( var__DutchStemmer__step3b_suffixes );
    var__DutchStemmer__step3b_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_5_DutchStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_5_DutchStemmer$$$function_1_stem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_step2_success = NULL;
    PyObject *var_i = NULL;
    PyObject *var_r1 = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_suffix = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    int tmp_and_left_truth_3;
    int tmp_and_left_truth_4;
    int tmp_and_left_truth_5;
    int tmp_and_left_truth_6;
    int tmp_and_left_truth_7;
    int tmp_and_left_truth_8;
    int tmp_and_left_truth_9;
    int tmp_and_left_truth_10;
    int tmp_and_left_truth_11;
    int tmp_and_left_truth_12;
    int tmp_and_left_truth_13;
    int tmp_and_left_truth_14;
    int tmp_and_left_truth_15;
    int tmp_and_left_truth_16;
    int tmp_and_left_truth_17;
    int tmp_and_left_truth_18;
    int tmp_and_left_truth_19;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_left_value_3;
    PyObject *tmp_and_left_value_4;
    PyObject *tmp_and_left_value_5;
    PyObject *tmp_and_left_value_6;
    PyObject *tmp_and_left_value_7;
    PyObject *tmp_and_left_value_8;
    PyObject *tmp_and_left_value_9;
    PyObject *tmp_and_left_value_10;
    PyObject *tmp_and_left_value_11;
    PyObject *tmp_and_left_value_12;
    PyObject *tmp_and_left_value_13;
    PyObject *tmp_and_left_value_14;
    PyObject *tmp_and_left_value_15;
    PyObject *tmp_and_left_value_16;
    PyObject *tmp_and_left_value_17;
    PyObject *tmp_and_left_value_18;
    PyObject *tmp_and_left_value_19;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_and_right_value_3;
    PyObject *tmp_and_right_value_4;
    PyObject *tmp_and_right_value_5;
    PyObject *tmp_and_right_value_6;
    PyObject *tmp_and_right_value_7;
    PyObject *tmp_and_right_value_8;
    PyObject *tmp_and_right_value_9;
    PyObject *tmp_and_right_value_10;
    PyObject *tmp_and_right_value_11;
    PyObject *tmp_and_right_value_12;
    PyObject *tmp_and_right_value_13;
    PyObject *tmp_and_right_value_14;
    PyObject *tmp_and_right_value_15;
    PyObject *tmp_and_right_value_16;
    PyObject *tmp_and_right_value_17;
    PyObject *tmp_and_right_value_18;
    PyObject *tmp_and_right_value_19;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_instance_12;
    PyObject *tmp_called_instance_13;
    PyObject *tmp_called_instance_14;
    PyObject *tmp_called_instance_15;
    PyObject *tmp_called_instance_16;
    PyObject *tmp_called_instance_17;
    PyObject *tmp_called_instance_18;
    PyObject *tmp_called_instance_19;
    PyObject *tmp_called_instance_20;
    PyObject *tmp_called_instance_21;
    PyObject *tmp_called_instance_22;
    PyObject *tmp_called_instance_23;
    PyObject *tmp_called_instance_24;
    PyObject *tmp_called_instance_25;
    PyObject *tmp_called_instance_26;
    PyObject *tmp_called_instance_27;
    PyObject *tmp_called_instance_28;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_Eq_4;
    int tmp_cmp_GtE_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_left_7;
    PyObject *tmp_compexpr_left_8;
    PyObject *tmp_compexpr_left_9;
    PyObject *tmp_compexpr_left_10;
    PyObject *tmp_compexpr_left_11;
    PyObject *tmp_compexpr_left_12;
    PyObject *tmp_compexpr_left_13;
    PyObject *tmp_compexpr_left_14;
    PyObject *tmp_compexpr_left_15;
    PyObject *tmp_compexpr_left_16;
    PyObject *tmp_compexpr_left_17;
    PyObject *tmp_compexpr_left_18;
    PyObject *tmp_compexpr_left_19;
    PyObject *tmp_compexpr_left_20;
    PyObject *tmp_compexpr_left_21;
    PyObject *tmp_compexpr_left_22;
    PyObject *tmp_compexpr_left_23;
    PyObject *tmp_compexpr_left_24;
    PyObject *tmp_compexpr_left_25;
    PyObject *tmp_compexpr_left_26;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    PyObject *tmp_compexpr_right_7;
    PyObject *tmp_compexpr_right_8;
    PyObject *tmp_compexpr_right_9;
    PyObject *tmp_compexpr_right_10;
    PyObject *tmp_compexpr_right_11;
    PyObject *tmp_compexpr_right_12;
    PyObject *tmp_compexpr_right_13;
    PyObject *tmp_compexpr_right_14;
    PyObject *tmp_compexpr_right_15;
    PyObject *tmp_compexpr_right_16;
    PyObject *tmp_compexpr_right_17;
    PyObject *tmp_compexpr_right_18;
    PyObject *tmp_compexpr_right_19;
    PyObject *tmp_compexpr_right_20;
    PyObject *tmp_compexpr_right_21;
    PyObject *tmp_compexpr_right_22;
    PyObject *tmp_compexpr_right_23;
    PyObject *tmp_compexpr_right_24;
    PyObject *tmp_compexpr_right_25;
    PyObject *tmp_compexpr_right_26;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    int tmp_cond_truth_17;
    int tmp_cond_truth_18;
    int tmp_cond_truth_19;
    int tmp_cond_truth_20;
    int tmp_cond_truth_21;
    int tmp_cond_truth_22;
    int tmp_cond_truth_23;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_cond_value_17;
    PyObject *tmp_cond_value_18;
    PyObject *tmp_cond_value_19;
    PyObject *tmp_cond_value_20;
    PyObject *tmp_cond_value_21;
    PyObject *tmp_cond_value_22;
    PyObject *tmp_cond_value_23;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_left_name_6;
    PyObject *tmp_left_name_7;
    PyObject *tmp_left_name_8;
    PyObject *tmp_left_name_9;
    PyObject *tmp_left_name_10;
    PyObject *tmp_left_name_11;
    PyObject *tmp_left_name_12;
    PyObject *tmp_left_name_13;
    PyObject *tmp_left_name_14;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_len_arg_6;
    PyObject *tmp_len_arg_7;
    PyObject *tmp_len_arg_8;
    PyObject *tmp_len_arg_9;
    PyObject *tmp_len_arg_10;
    PyObject *tmp_len_arg_11;
    PyObject *tmp_len_arg_12;
    PyObject *tmp_len_arg_13;
    PyObject *tmp_len_arg_14;
    PyObject *tmp_len_arg_15;
    PyObject *tmp_len_arg_16;
    PyObject *tmp_len_arg_17;
    PyObject *tmp_len_arg_18;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    PyObject *tmp_operand_name_4;
    PyObject *tmp_operand_name_5;
    PyObject *tmp_operand_name_6;
    PyObject *tmp_operand_name_7;
    PyObject *tmp_operand_name_8;
    PyObject *tmp_operand_name_9;
    PyObject *tmp_operand_name_10;
    PyObject *tmp_operand_name_11;
    PyObject *tmp_operand_name_12;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    PyObject *tmp_right_name_6;
    PyObject *tmp_right_name_7;
    PyObject *tmp_right_name_8;
    PyObject *tmp_right_name_9;
    PyObject *tmp_right_name_10;
    PyObject *tmp_right_name_11;
    PyObject *tmp_right_name_12;
    PyObject *tmp_right_name_13;
    PyObject *tmp_right_name_14;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    Py_ssize_t tmp_slice_index_upper_6;
    Py_ssize_t tmp_slice_index_upper_7;
    Py_ssize_t tmp_slice_index_upper_8;
    Py_ssize_t tmp_slice_index_upper_9;
    Py_ssize_t tmp_slice_index_upper_10;
    Py_ssize_t tmp_slice_index_upper_11;
    Py_ssize_t tmp_slice_index_upper_12;
    Py_ssize_t tmp_slice_index_upper_13;
    Py_ssize_t tmp_slice_index_upper_14;
    Py_ssize_t tmp_slice_index_upper_15;
    Py_ssize_t tmp_slice_index_upper_16;
    Py_ssize_t tmp_slice_index_upper_17;
    Py_ssize_t tmp_slice_index_upper_18;
    Py_ssize_t tmp_slice_index_upper_19;
    Py_ssize_t tmp_slice_index_upper_20;
    Py_ssize_t tmp_slice_index_upper_21;
    Py_ssize_t tmp_slice_index_upper_22;
    Py_ssize_t tmp_slice_index_upper_23;
    Py_ssize_t tmp_slice_index_upper_24;
    Py_ssize_t tmp_slice_index_upper_25;
    Py_ssize_t tmp_slice_index_upper_26;
    Py_ssize_t tmp_slice_index_upper_27;
    Py_ssize_t tmp_slice_index_upper_28;
    Py_ssize_t tmp_slice_index_upper_29;
    Py_ssize_t tmp_slice_index_upper_30;
    Py_ssize_t tmp_slice_index_upper_31;
    Py_ssize_t tmp_slice_index_upper_32;
    Py_ssize_t tmp_slice_index_upper_33;
    Py_ssize_t tmp_slice_index_upper_34;
    Py_ssize_t tmp_slice_index_upper_35;
    Py_ssize_t tmp_slice_index_upper_36;
    Py_ssize_t tmp_slice_index_upper_37;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_lower_3;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_source_10;
    PyObject *tmp_slice_source_11;
    PyObject *tmp_slice_source_12;
    PyObject *tmp_slice_source_13;
    PyObject *tmp_slice_source_14;
    PyObject *tmp_slice_source_15;
    PyObject *tmp_slice_source_16;
    PyObject *tmp_slice_source_17;
    PyObject *tmp_slice_source_18;
    PyObject *tmp_slice_source_19;
    PyObject *tmp_slice_source_20;
    PyObject *tmp_slice_source_21;
    PyObject *tmp_slice_source_22;
    PyObject *tmp_slice_source_23;
    PyObject *tmp_slice_source_24;
    PyObject *tmp_slice_source_25;
    PyObject *tmp_slice_source_26;
    PyObject *tmp_slice_source_27;
    PyObject *tmp_slice_source_28;
    PyObject *tmp_slice_source_29;
    PyObject *tmp_slice_source_30;
    PyObject *tmp_slice_source_31;
    PyObject *tmp_slice_source_32;
    PyObject *tmp_slice_source_33;
    PyObject *tmp_slice_source_34;
    PyObject *tmp_slice_source_35;
    PyObject *tmp_slice_source_36;
    PyObject *tmp_slice_source_37;
    PyObject *tmp_slice_source_38;
    PyObject *tmp_slice_source_39;
    PyObject *tmp_slice_source_40;
    PyObject *tmp_slice_source_41;
    PyObject *tmp_slice_source_42;
    PyObject *tmp_slice_source_43;
    PyObject *tmp_slice_source_44;
    PyObject *tmp_slice_source_45;
    PyObject *tmp_slice_source_46;
    PyObject *tmp_slice_source_47;
    PyObject *tmp_slice_source_48;
    PyObject *tmp_slice_source_49;
    PyObject *tmp_slice_source_50;
    PyObject *tmp_slice_source_51;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    PyObject *tmp_slice_upper_4;
    PyObject *tmp_slice_upper_5;
    PyObject *tmp_slice_upper_6;
    PyObject *tmp_slice_upper_7;
    PyObject *tmp_slice_upper_8;
    PyObject *tmp_slice_upper_9;
    PyObject *tmp_slice_upper_10;
    PyObject *tmp_slice_upper_11;
    PyObject *tmp_slice_upper_12;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_6;
    Py_ssize_t tmp_sliceslicedel_index_lower_7;
    Py_ssize_t tmp_sliceslicedel_index_lower_8;
    Py_ssize_t tmp_sliceslicedel_index_lower_9;
    Py_ssize_t tmp_sliceslicedel_index_lower_10;
    Py_ssize_t tmp_sliceslicedel_index_lower_11;
    Py_ssize_t tmp_sliceslicedel_index_lower_12;
    Py_ssize_t tmp_sliceslicedel_index_lower_13;
    Py_ssize_t tmp_sliceslicedel_index_lower_14;
    Py_ssize_t tmp_sliceslicedel_index_lower_15;
    Py_ssize_t tmp_sliceslicedel_index_lower_16;
    Py_ssize_t tmp_sliceslicedel_index_lower_17;
    Py_ssize_t tmp_sliceslicedel_index_lower_18;
    Py_ssize_t tmp_sliceslicedel_index_lower_19;
    Py_ssize_t tmp_sliceslicedel_index_lower_20;
    Py_ssize_t tmp_sliceslicedel_index_lower_21;
    Py_ssize_t tmp_sliceslicedel_index_lower_22;
    Py_ssize_t tmp_sliceslicedel_index_lower_23;
    Py_ssize_t tmp_sliceslicedel_index_lower_24;
    Py_ssize_t tmp_sliceslicedel_index_lower_25;
    Py_ssize_t tmp_sliceslicedel_index_lower_26;
    Py_ssize_t tmp_sliceslicedel_index_lower_27;
    Py_ssize_t tmp_sliceslicedel_index_lower_28;
    Py_ssize_t tmp_sliceslicedel_index_lower_29;
    Py_ssize_t tmp_sliceslicedel_index_lower_30;
    Py_ssize_t tmp_sliceslicedel_index_lower_31;
    Py_ssize_t tmp_sliceslicedel_index_lower_32;
    Py_ssize_t tmp_sliceslicedel_index_lower_33;
    Py_ssize_t tmp_sliceslicedel_index_lower_34;
    Py_ssize_t tmp_sliceslicedel_index_lower_35;
    Py_ssize_t tmp_sliceslicedel_index_lower_36;
    Py_ssize_t tmp_sliceslicedel_index_lower_37;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscribed_name_6;
    PyObject *tmp_subscribed_name_7;
    PyObject *tmp_subscribed_name_8;
    PyObject *tmp_subscribed_name_9;
    PyObject *tmp_subscribed_name_10;
    PyObject *tmp_subscribed_name_11;
    PyObject *tmp_subscribed_name_12;
    PyObject *tmp_subscribed_name_13;
    PyObject *tmp_subscribed_name_14;
    PyObject *tmp_subscribed_name_15;
    PyObject *tmp_subscribed_name_16;
    PyObject *tmp_subscribed_name_17;
    PyObject *tmp_subscribed_name_18;
    PyObject *tmp_subscribed_name_19;
    PyObject *tmp_subscribed_name_20;
    PyObject *tmp_subscribed_name_21;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_subscript_name_6;
    PyObject *tmp_subscript_name_7;
    PyObject *tmp_subscript_name_8;
    PyObject *tmp_subscript_name_9;
    PyObject *tmp_subscript_name_10;
    PyObject *tmp_subscript_name_11;
    PyObject *tmp_subscript_name_12;
    PyObject *tmp_subscript_name_13;
    PyObject *tmp_subscript_name_14;
    PyObject *tmp_subscript_name_15;
    PyObject *tmp_subscript_name_16;
    PyObject *tmp_subscript_name_17;
    PyObject *tmp_subscript_name_18;
    PyObject *tmp_subscript_name_19;
    PyObject *tmp_subscript_name_20;
    PyObject *tmp_subscript_name_21;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_xrange_high_1;
    PyObject *tmp_xrange_high_2;
    PyObject *tmp_xrange_high_3;
    PyObject *tmp_xrange_low_1;
    PyObject *tmp_xrange_low_2;
    PyObject *tmp_xrange_low_3;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_5925dadbdbcb7522f2840618af6470ad, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_word;

    tmp_source_name_1 = par_self;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stopwords );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 444;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_assign_source_1 = Py_False;
    assert( var_step2_success == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_step2_success = tmp_assign_source_1;

    tmp_called_instance_11 = par_word;

    frame_function->f_lineno = 450;
    tmp_called_instance_10 = CALL_METHOD_NO_ARGS( tmp_called_instance_11, const_str_plain_lower );
    if ( tmp_called_instance_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 450;
    tmp_called_instance_9 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_10, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_f44649f09d155153fdd0c05ccaa583de_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_10 );
    if ( tmp_called_instance_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 450;
    tmp_called_instance_8 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_9, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_5eff0911f36248c31970c9d9669b12e2_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_9 );
    if ( tmp_called_instance_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 450;
    tmp_called_instance_7 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_8, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_faa874bf6d816f5651d9d6023ce7cd7e_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_8 );
    if ( tmp_called_instance_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 450;
    tmp_called_instance_6 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_7, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_af47b87413332a5bef6ea1fc7af3c92e_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_7 );
    if ( tmp_called_instance_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 450;
    tmp_called_instance_5 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_6, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_dc8d33361ac7399a3d0f321f8e95c4b2_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_6 );
    if ( tmp_called_instance_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 450;
    tmp_called_instance_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_7d08e9422131a5a7b78d6201634372ca_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_5 );
    if ( tmp_called_instance_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 450;
    tmp_called_instance_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_f50d420abe67f802b4d39b10e9741aa9_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_4 );
    if ( tmp_called_instance_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 450;
    tmp_called_instance_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_14a12a5482d894dcd4ddfab6cd3d2db3_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_3 );
    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 450;
    tmp_called_instance_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_4bebaa77fa75c2380a82e9edda1cfbe5_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 450;
    tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_ac5041baf699e514050e7e516f7e6b3c_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_2;
        Py_DECREF( old );
    }

    tmp_called_instance_12 = par_word;

    frame_function->f_lineno = 459;
    tmp_cond_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_12, const_str_plain_startswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_y_tuple, 0 ) );

    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 459;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 459;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_2 = const_unicode_empty;
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_join );
    assert( tmp_called_name_1 != NULL );
    tmp_args_element_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = const_unicode_plain_Y;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_1, 0, tmp_tuple_element_1 );
    tmp_sliceslicedel_index_lower_1 = 1;
    tmp_slice_index_upper_1 = PY_SSIZE_T_MAX;
    tmp_slice_source_1 = par_word;

    tmp_tuple_element_1 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 460;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_1, 1, tmp_tuple_element_1 );
    frame_function->f_lineno = 460;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 460;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_3;
        Py_DECREF( old );
    }

    branch_no_2:;
    tmp_xrange_low_1 = const_int_pos_1;
    tmp_len_arg_1 = par_word;

    tmp_xrange_high_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_xrange_high_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 462;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = BUILTIN_XRANGE2( tmp_xrange_low_1, tmp_xrange_high_1 );
    Py_DECREF( tmp_xrange_high_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 462;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 462;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_4;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 462;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_assign_source_6 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_6;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_1 = par_word;

    if ( tmp_subscribed_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 463;
        goto try_except_handler_2;
    }

    tmp_left_name_1 = var_i;

    tmp_right_name_1 = const_int_pos_1;
    tmp_subscript_name_1 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_subscript_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 463;
        goto try_except_handler_2;
    }
    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 463;
        goto try_except_handler_2;
    }
    tmp_source_name_3 = par_self;

    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__DutchStemmer__vowels );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_1 );

        exception_lineno = 463;
        goto try_except_handler_2;
    }
    tmp_and_left_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 463;
        goto try_except_handler_2;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    assert( !(tmp_and_left_truth_1 == -1) );
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_subscribed_name_2 = par_word;

    if ( tmp_subscribed_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 463;
        goto try_except_handler_2;
    }

    tmp_subscript_name_2 = var_i;

    tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 463;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_2 = const_unicode_plain_y;
    tmp_and_right_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 463;
        goto try_except_handler_2;
    }
    tmp_cond_value_2 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    Py_INCREF( tmp_and_left_value_1 );
    tmp_cond_value_2 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 463;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_4 = const_unicode_empty;
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_join );
    assert( tmp_called_name_2 != NULL );
    tmp_args_element_name_2 = PyTuple_New( 3 );
    tmp_slice_source_2 = par_word;

    if ( tmp_slice_source_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 464;
        goto try_except_handler_2;
    }

    tmp_slice_upper_1 = var_i;

    tmp_tuple_element_2 = LOOKUP_SLICE( tmp_slice_source_2, Py_None, tmp_slice_upper_1 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 464;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_2, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = const_unicode_plain_Y;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_2, 1, tmp_tuple_element_2 );
    tmp_slice_source_3 = par_word;

    if ( tmp_slice_source_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 464;
        goto try_except_handler_2;
    }

    tmp_left_name_2 = var_i;

    tmp_right_name_2 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 464;
        goto try_except_handler_2;
    }
    tmp_tuple_element_2 = LOOKUP_SLICE( tmp_slice_source_3, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_lower_1 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 464;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_2, 2, tmp_tuple_element_2 );
    frame_function->f_lineno = 464;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 464;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_7;
        Py_XDECREF( old );
    }

    branch_no_3:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 462;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_xrange_low_2 = const_int_pos_1;
    tmp_len_arg_2 = par_word;

    if ( tmp_len_arg_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 466;
        goto frame_exception_exit_1;
    }

    tmp_left_name_3 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_left_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 466;
        goto frame_exception_exit_1;
    }
    tmp_right_name_3 = const_int_pos_1;
    tmp_xrange_high_2 = BINARY_OPERATION_SUB( tmp_left_name_3, tmp_right_name_3 );
    Py_DECREF( tmp_left_name_3 );
    if ( tmp_xrange_high_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 466;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_2 = BUILTIN_XRANGE2( tmp_xrange_low_2, tmp_xrange_high_2 );
    Py_DECREF( tmp_xrange_high_2 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 466;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 466;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_8;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 466;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    tmp_assign_source_10 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_10;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_3 = par_word;

    if ( tmp_subscribed_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 467;
        goto try_except_handler_3;
    }

    tmp_left_name_4 = var_i;

    tmp_right_name_4 = const_int_pos_1;
    tmp_subscript_name_3 = BINARY_OPERATION_SUB( tmp_left_name_4, tmp_right_name_4 );
    if ( tmp_subscript_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 467;
        goto try_except_handler_3;
    }
    tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    Py_DECREF( tmp_subscript_name_3 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 467;
        goto try_except_handler_3;
    }
    tmp_source_name_5 = par_self;

    tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__DutchStemmer__vowels );
    if ( tmp_compexpr_right_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_3 );

        exception_lineno = 467;
        goto try_except_handler_3;
    }
    tmp_and_left_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    Py_DECREF( tmp_compexpr_right_3 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 467;
        goto try_except_handler_3;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    assert( !(tmp_and_left_truth_2 == -1) );
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_subscribed_name_4 = par_word;

    if ( tmp_subscribed_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 467;
        goto try_except_handler_3;
    }

    tmp_subscript_name_4 = var_i;

    tmp_compexpr_left_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 467;
        goto try_except_handler_3;
    }
    tmp_compexpr_right_4 = const_unicode_plain_i;
    tmp_and_left_value_3 = RICH_COMPARE_EQ( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_and_left_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 467;
        goto try_except_handler_3;
    }
    tmp_and_left_truth_3 = CHECK_IF_TRUE( tmp_and_left_value_3 );
    if ( tmp_and_left_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_3 );

        exception_lineno = 468;
        goto try_except_handler_3;
    }
    if ( tmp_and_left_truth_3 == 1 )
    {
        goto and_right_3;
    }
    else
    {
        goto and_left_3;
    }
    and_right_3:;
    Py_DECREF( tmp_and_left_value_3 );
    tmp_subscribed_name_5 = par_word;

    if ( tmp_subscribed_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 468;
        goto try_except_handler_3;
    }

    tmp_left_name_5 = var_i;

    tmp_right_name_5 = const_int_pos_1;
    tmp_subscript_name_5 = BINARY_OPERATION_ADD( tmp_left_name_5, tmp_right_name_5 );
    if ( tmp_subscript_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 468;
        goto try_except_handler_3;
    }
    tmp_compexpr_left_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    Py_DECREF( tmp_subscript_name_5 );
    if ( tmp_compexpr_left_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 468;
        goto try_except_handler_3;
    }
    tmp_source_name_6 = par_self;

    tmp_compexpr_right_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__DutchStemmer__vowels );
    if ( tmp_compexpr_right_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_5 );

        exception_lineno = 468;
        goto try_except_handler_3;
    }
    tmp_and_right_value_3 = SEQUENCE_CONTAINS( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    Py_DECREF( tmp_compexpr_left_5 );
    Py_DECREF( tmp_compexpr_right_5 );
    if ( tmp_and_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 468;
        goto try_except_handler_3;
    }
    Py_INCREF( tmp_and_right_value_3 );
    tmp_and_right_value_2 = tmp_and_right_value_3;
    goto and_end_3;
    and_left_3:;
    tmp_and_right_value_2 = tmp_and_left_value_3;
    and_end_3:;
    tmp_cond_value_3 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    Py_INCREF( tmp_and_left_value_2 );
    tmp_cond_value_3 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 468;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_7 = const_unicode_empty;
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_join );
    assert( tmp_called_name_3 != NULL );
    tmp_args_element_name_3 = PyTuple_New( 3 );
    tmp_slice_source_4 = par_word;

    if ( tmp_slice_source_4 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 469;
        goto try_except_handler_3;
    }

    tmp_slice_upper_2 = var_i;

    tmp_tuple_element_3 = LOOKUP_SLICE( tmp_slice_source_4, Py_None, tmp_slice_upper_2 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 469;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_3, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = const_unicode_plain_I;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_element_name_3, 1, tmp_tuple_element_3 );
    tmp_slice_source_5 = par_word;

    if ( tmp_slice_source_5 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 469;
        goto try_except_handler_3;
    }

    tmp_left_name_6 = var_i;

    tmp_right_name_6 = const_int_pos_1;
    tmp_slice_lower_2 = BINARY_OPERATION_ADD( tmp_left_name_6, tmp_right_name_6 );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 469;
        goto try_except_handler_3;
    }
    tmp_tuple_element_3 = LOOKUP_SLICE( tmp_slice_source_5, tmp_slice_lower_2, Py_None );
    Py_DECREF( tmp_slice_lower_2 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 469;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_3, 2, tmp_tuple_element_3 );
    frame_function->f_lineno = 469;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 469;
        goto try_except_handler_3;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    branch_no_4:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 466;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Tried code:
    tmp_source_name_8 = par_self;

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__r1r2_standard );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 471;
        goto try_except_handler_4;
    }
    tmp_args_element_name_4 = par_word;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 471;
        goto try_except_handler_4;
    }

    tmp_source_name_9 = par_self;

    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__DutchStemmer__vowels );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 471;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 471;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_iter_arg_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 471;
        goto try_except_handler_4;
    }
    tmp_assign_source_12 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 471;
        goto try_except_handler_4;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_12;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_13 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_13 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 471;
        goto try_except_handler_5;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_13;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_14 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_14 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 471;
        goto try_except_handler_5;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_14;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_5;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_5;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_4;
    // End of try:
    try_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_15 = tmp_tuple_unpack_1__element_1;

    assert( var_r1 == NULL );
    Py_INCREF( tmp_assign_source_15 );
    var_r1 = tmp_assign_source_15;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_16 = tmp_tuple_unpack_1__element_2;

    assert( var_r2 == NULL );
    Py_INCREF( tmp_assign_source_16 );
    var_r2 = tmp_assign_source_16;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_xrange_low_3 = const_int_pos_1;
    tmp_len_arg_3 = par_word;

    if ( tmp_len_arg_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 475;
        goto frame_exception_exit_1;
    }

    tmp_xrange_high_3 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_xrange_high_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 475;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_4 = BUILTIN_XRANGE2( tmp_xrange_low_3, tmp_xrange_high_3 );
    Py_DECREF( tmp_xrange_high_3 );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 475;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_17 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 475;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_17;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_18 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_18 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 475;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_18;
        Py_XDECREF( old );
    }

    tmp_assign_source_19 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_19;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_6 = par_word;

    if ( tmp_subscribed_name_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 476;
        goto try_except_handler_6;
    }

    tmp_subscript_name_6 = var_i;

    tmp_compexpr_left_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
    if ( tmp_compexpr_left_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 476;
        goto try_except_handler_6;
    }
    tmp_source_name_10 = par_self;

    tmp_compexpr_right_6 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__DutchStemmer__vowels );
    if ( tmp_compexpr_right_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_6 );

        exception_lineno = 476;
        goto try_except_handler_6;
    }
    tmp_and_left_value_4 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
    Py_DECREF( tmp_compexpr_left_6 );
    Py_DECREF( tmp_compexpr_right_6 );
    if ( tmp_and_left_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 476;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_4 = CHECK_IF_TRUE( tmp_and_left_value_4 );
    assert( !(tmp_and_left_truth_4 == -1) );
    if ( tmp_and_left_truth_4 == 1 )
    {
        goto and_right_4;
    }
    else
    {
        goto and_left_4;
    }
    and_right_4:;
    tmp_subscribed_name_7 = par_word;

    if ( tmp_subscribed_name_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 476;
        goto try_except_handler_6;
    }

    tmp_left_name_7 = var_i;

    tmp_right_name_7 = const_int_pos_1;
    tmp_subscript_name_7 = BINARY_OPERATION_SUB( tmp_left_name_7, tmp_right_name_7 );
    if ( tmp_subscript_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 476;
        goto try_except_handler_6;
    }
    tmp_compexpr_left_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_7 );
    Py_DECREF( tmp_subscript_name_7 );
    if ( tmp_compexpr_left_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 476;
        goto try_except_handler_6;
    }
    tmp_source_name_11 = par_self;

    tmp_compexpr_right_7 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__DutchStemmer__vowels );
    if ( tmp_compexpr_right_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_7 );

        exception_lineno = 476;
        goto try_except_handler_6;
    }
    tmp_and_right_value_4 = SEQUENCE_CONTAINS( tmp_compexpr_left_7, tmp_compexpr_right_7 );
    Py_DECREF( tmp_compexpr_left_7 );
    Py_DECREF( tmp_compexpr_right_7 );
    if ( tmp_and_right_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 476;
        goto try_except_handler_6;
    }
    tmp_cond_value_4 = tmp_and_right_value_4;
    goto and_end_4;
    and_left_4:;
    tmp_cond_value_4 = tmp_and_left_value_4;
    and_end_4:;
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    assert( !(tmp_cond_truth_4 == -1) );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_slice_source_6 = par_word;

    if ( tmp_slice_source_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 477;
        goto try_except_handler_6;
    }

    tmp_left_name_8 = var_i;

    tmp_right_name_8 = const_int_pos_1;
    tmp_slice_upper_3 = BINARY_OPERATION_ADD( tmp_left_name_8, tmp_right_name_8 );
    if ( tmp_slice_upper_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 477;
        goto try_except_handler_6;
    }
    tmp_len_arg_4 = LOOKUP_SLICE( tmp_slice_source_6, Py_None, tmp_slice_upper_3 );
    Py_DECREF( tmp_slice_upper_3 );
    if ( tmp_len_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 477;
        goto try_except_handler_6;
    }
    tmp_compexpr_left_8 = BUILTIN_LEN( tmp_len_arg_4 );
    Py_DECREF( tmp_len_arg_4 );
    if ( tmp_compexpr_left_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 477;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_8 = const_int_pos_3;
    tmp_and_left_value_5 = RICH_COMPARE_LT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
    Py_DECREF( tmp_compexpr_left_8 );
    if ( tmp_and_left_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 477;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_5 = CHECK_IF_TRUE( tmp_and_left_value_5 );
    if ( tmp_and_left_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_5 );

        exception_lineno = 477;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_5 == 1 )
    {
        goto and_right_5;
    }
    else
    {
        goto and_left_5;
    }
    and_right_5:;
    Py_DECREF( tmp_and_left_value_5 );
    tmp_slice_source_7 = par_word;

    if ( tmp_slice_source_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 477;
        goto try_except_handler_6;
    }

    tmp_left_name_9 = var_i;

    tmp_right_name_9 = const_int_pos_1;
    tmp_slice_upper_4 = BINARY_OPERATION_ADD( tmp_left_name_9, tmp_right_name_9 );
    if ( tmp_slice_upper_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 477;
        goto try_except_handler_6;
    }
    tmp_len_arg_5 = LOOKUP_SLICE( tmp_slice_source_7, Py_None, tmp_slice_upper_4 );
    Py_DECREF( tmp_slice_upper_4 );
    if ( tmp_len_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 477;
        goto try_except_handler_6;
    }
    tmp_compexpr_left_9 = BUILTIN_LEN( tmp_len_arg_5 );
    Py_DECREF( tmp_len_arg_5 );
    if ( tmp_compexpr_left_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 477;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_9 = const_int_0;
    tmp_and_right_value_5 = RICH_COMPARE_GT( tmp_compexpr_left_9, tmp_compexpr_right_9 );
    Py_DECREF( tmp_compexpr_left_9 );
    if ( tmp_and_right_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 477;
        goto try_except_handler_6;
    }
    tmp_cond_value_5 = tmp_and_right_value_5;
    goto and_end_5;
    and_left_5:;
    tmp_cond_value_5 = tmp_and_left_value_5;
    and_end_5:;
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        exception_lineno = 477;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_sliceslicedel_index_lower_2 = 3;
    tmp_slice_index_upper_2 = PY_SSIZE_T_MAX;
    tmp_slice_source_8 = par_word;

    if ( tmp_slice_source_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 478;
        goto try_except_handler_6;
    }

    tmp_assign_source_20 = LOOKUP_INDEX_SLICE( tmp_slice_source_8, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 478;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_20;
        Py_DECREF( old );
    }

    goto branch_end_6;
    branch_no_6:;
    tmp_slice_source_9 = par_word;

    if ( tmp_slice_source_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 479;
        goto try_except_handler_6;
    }

    tmp_left_name_10 = var_i;

    tmp_right_name_10 = const_int_pos_1;
    tmp_slice_upper_5 = BINARY_OPERATION_ADD( tmp_left_name_10, tmp_right_name_10 );
    if ( tmp_slice_upper_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 479;
        goto try_except_handler_6;
    }
    tmp_len_arg_6 = LOOKUP_SLICE( tmp_slice_source_9, Py_None, tmp_slice_upper_5 );
    Py_DECREF( tmp_slice_upper_5 );
    if ( tmp_len_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 479;
        goto try_except_handler_6;
    }
    tmp_compare_left_2 = BUILTIN_LEN( tmp_len_arg_6 );
    Py_DECREF( tmp_len_arg_6 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 479;
        goto try_except_handler_6;
    }
    tmp_compare_right_2 = const_int_0;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        exception_lineno = 479;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_return_value = par_word;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 480;
        goto try_except_handler_6;
    }

    Py_INCREF( tmp_return_value );
    goto try_return_handler_6;
    branch_no_7:;
    branch_end_6:;
    goto loop_end_3;
    branch_no_5:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 475;
        goto try_except_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_5;
    // Return handler code:
    try_return_handler_6:;
    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__iter_value );
    Py_DECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_source_name_12 = par_self;

    tmp_iter_arg_5 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain__DutchStemmer__step1_suffixes );
    if ( tmp_iter_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 484;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_21 = MAKE_ITERATOR( tmp_iter_arg_5 );
    Py_DECREF( tmp_iter_arg_5 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 484;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator == NULL );
    tmp_for_loop_4__for_iterator = tmp_assign_source_21;

    // Tried code:
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    tmp_assign_source_22 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_22 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 484;
            goto try_except_handler_7;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_22;
        Py_XDECREF( old );
    }

    tmp_assign_source_23 = tmp_for_loop_4__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_23;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_13 = var_r1;

    if ( tmp_called_instance_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 485;
        goto try_except_handler_7;
    }

    tmp_args_element_name_6 = var_suffix;

    frame_function->f_lineno = 485;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_cond_value_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_13, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 485;
        goto try_except_handler_7;
    }
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        exception_lineno = 485;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_compare_left_3 = var_suffix;

    tmp_compare_right_3 = const_unicode_plain_heden;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 486;
        goto try_except_handler_7;
    }
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_source_name_13 = const_unicode_empty;
    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_join );
    assert( tmp_called_name_5 != NULL );
    tmp_args_element_name_7 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -5;
    tmp_slice_source_10 = par_word;

    if ( tmp_slice_source_10 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_7 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 487;
        goto try_except_handler_7;
    }

    tmp_tuple_element_4 = LOOKUP_INDEX_SLICE( tmp_slice_source_10, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 487;
        goto try_except_handler_7;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_7, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_unicode_plain_heid;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_element_name_7, 1, tmp_tuple_element_4 );
    frame_function->f_lineno = 487;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_assign_source_24 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 487;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_24;
        Py_XDECREF( old );
    }

    tmp_source_name_14 = const_unicode_empty;
    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_join );
    assert( tmp_called_name_6 != NULL );
    tmp_args_element_name_8 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = -5;
    tmp_slice_source_11 = var_r1;

    if ( tmp_slice_source_11 == NULL )
    {
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 488;
        goto try_except_handler_7;
    }

    tmp_tuple_element_5 = LOOKUP_INDEX_SLICE( tmp_slice_source_11, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 488;
        goto try_except_handler_7;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_8, 0, tmp_tuple_element_5 );
    tmp_tuple_element_5 = const_unicode_plain_heid;
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_args_element_name_8, 1, tmp_tuple_element_5 );
    frame_function->f_lineno = 488;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_assign_source_25 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_8 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 488;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_25;
        Py_XDECREF( old );
    }

    tmp_called_instance_14 = var_r2;

    frame_function->f_lineno = 489;
    tmp_cond_value_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_14, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_heden_tuple, 0 ) );

    if ( tmp_cond_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 489;
        goto try_except_handler_7;
    }
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        exception_lineno = 489;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_source_name_15 = const_unicode_empty;
    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_join );
    assert( tmp_called_name_7 != NULL );
    tmp_args_element_name_9 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = -5;
    tmp_slice_source_12 = var_r2;

    tmp_tuple_element_6 = LOOKUP_INDEX_SLICE( tmp_slice_source_12, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_tuple_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 490;
        goto try_except_handler_7;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_9, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = const_unicode_plain_heid;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_args_element_name_9, 1, tmp_tuple_element_6 );
    frame_function->f_lineno = 490;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_assign_source_26 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 490;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_26;
        Py_DECREF( old );
    }

    branch_no_10:;
    goto branch_end_9;
    branch_no_9:;
    tmp_compexpr_left_10 = var_suffix;

    tmp_compexpr_right_10 = const_tuple_unicode_plain_ene_unicode_plain_en_tuple;
    tmp_and_left_value_6 = SEQUENCE_CONTAINS( tmp_compexpr_left_10, tmp_compexpr_right_10 );
    if ( tmp_and_left_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 492;
        goto try_except_handler_7;
    }
    tmp_and_left_truth_6 = CHECK_IF_TRUE( tmp_and_left_value_6 );
    assert( !(tmp_and_left_truth_6 == -1) );
    if ( tmp_and_left_truth_6 == 1 )
    {
        goto and_right_6;
    }
    else
    {
        goto and_left_6;
    }
    and_right_6:;
    tmp_called_instance_15 = par_word;

    if ( tmp_called_instance_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 493;
        goto try_except_handler_7;
    }

    frame_function->f_lineno = 493;
    tmp_operand_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_15, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_heden_tuple, 0 ) );

    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 493;
        goto try_except_handler_7;
    }
    tmp_and_left_value_7 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_and_left_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 493;
        goto try_except_handler_7;
    }
    tmp_and_left_truth_7 = CHECK_IF_TRUE( tmp_and_left_value_7 );
    if ( tmp_and_left_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 495;
        goto try_except_handler_7;
    }
    if ( tmp_and_left_truth_7 == 1 )
    {
        goto and_right_7;
    }
    else
    {
        goto and_left_7;
    }
    and_right_7:;
    tmp_subscribed_name_8 = par_word;

    if ( tmp_subscribed_name_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 494;
        goto try_except_handler_7;
    }

    tmp_len_arg_7 = var_suffix;

    tmp_operand_name_2 = BUILTIN_LEN( tmp_len_arg_7 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 494;
        goto try_except_handler_7;
    }
    tmp_left_name_11 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_left_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 494;
        goto try_except_handler_7;
    }
    tmp_right_name_11 = const_int_pos_1;
    tmp_subscript_name_8 = BINARY_OPERATION_SUB( tmp_left_name_11, tmp_right_name_11 );
    Py_DECREF( tmp_left_name_11 );
    if ( tmp_subscript_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 494;
        goto try_except_handler_7;
    }
    tmp_compexpr_left_11 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
    Py_DECREF( tmp_subscript_name_8 );
    if ( tmp_compexpr_left_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 494;
        goto try_except_handler_7;
    }
    tmp_source_name_16 = par_self;

    tmp_compexpr_right_11 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain__DutchStemmer__vowels );
    if ( tmp_compexpr_right_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_11 );

        exception_lineno = 494;
        goto try_except_handler_7;
    }
    tmp_and_left_value_8 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
    Py_DECREF( tmp_compexpr_left_11 );
    Py_DECREF( tmp_compexpr_right_11 );
    if ( tmp_and_left_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 494;
        goto try_except_handler_7;
    }
    tmp_and_left_truth_8 = CHECK_IF_TRUE( tmp_and_left_value_8 );
    assert( !(tmp_and_left_truth_8 == -1) );
    if ( tmp_and_left_truth_8 == 1 )
    {
        goto and_right_8;
    }
    else
    {
        goto and_left_8;
    }
    and_right_8:;
    tmp_slice_source_13 = par_word;

    if ( tmp_slice_source_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 495;
        goto try_except_handler_7;
    }

    tmp_len_arg_8 = var_suffix;

    tmp_operand_name_3 = BUILTIN_LEN( tmp_len_arg_8 );
    if ( tmp_operand_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 495;
        goto try_except_handler_7;
    }
    tmp_left_name_12 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_left_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 495;
        goto try_except_handler_7;
    }
    tmp_right_name_12 = const_int_pos_3;
    tmp_slice_lower_3 = BINARY_OPERATION_SUB( tmp_left_name_12, tmp_right_name_12 );
    Py_DECREF( tmp_left_name_12 );
    if ( tmp_slice_lower_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 495;
        goto try_except_handler_7;
    }
    tmp_len_arg_9 = var_suffix;

    tmp_operand_name_4 = BUILTIN_LEN( tmp_len_arg_9 );
    if ( tmp_operand_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_3 );

        exception_lineno = 495;
        goto try_except_handler_7;
    }
    tmp_slice_upper_6 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_4 );
    Py_DECREF( tmp_operand_name_4 );
    if ( tmp_slice_upper_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_3 );

        exception_lineno = 495;
        goto try_except_handler_7;
    }
    tmp_compexpr_left_12 = LOOKUP_SLICE( tmp_slice_source_13, tmp_slice_lower_3, tmp_slice_upper_6 );
    Py_DECREF( tmp_slice_lower_3 );
    Py_DECREF( tmp_slice_upper_6 );
    if ( tmp_compexpr_left_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 495;
        goto try_except_handler_7;
    }
    tmp_compexpr_right_12 = const_unicode_plain_gem;
    tmp_and_right_value_8 = RICH_COMPARE_NE( tmp_compexpr_left_12, tmp_compexpr_right_12 );
    Py_DECREF( tmp_compexpr_left_12 );
    if ( tmp_and_right_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 495;
        goto try_except_handler_7;
    }
    tmp_and_right_value_7 = tmp_and_right_value_8;
    goto and_end_8;
    and_left_8:;
    Py_INCREF( tmp_and_left_value_8 );
    tmp_and_right_value_7 = tmp_and_left_value_8;
    and_end_8:;
    tmp_and_right_value_6 = tmp_and_right_value_7;
    goto and_end_7;
    and_left_7:;
    Py_INCREF( tmp_and_left_value_7 );
    tmp_and_right_value_6 = tmp_and_left_value_7;
    and_end_7:;
    tmp_cond_value_8 = tmp_and_right_value_6;
    goto and_end_6;
    and_left_6:;
    Py_INCREF( tmp_and_left_value_6 );
    tmp_cond_value_8 = tmp_and_left_value_6;
    and_end_6:;
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        exception_lineno = 495;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_slice_source_14 = par_word;

    if ( tmp_slice_source_14 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 496;
        goto try_except_handler_7;
    }

    tmp_len_arg_10 = var_suffix;

    tmp_operand_name_5 = BUILTIN_LEN( tmp_len_arg_10 );
    if ( tmp_operand_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 496;
        goto try_except_handler_7;
    }
    tmp_slice_upper_7 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_5 );
    Py_DECREF( tmp_operand_name_5 );
    if ( tmp_slice_upper_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 496;
        goto try_except_handler_7;
    }
    tmp_assign_source_27 = LOOKUP_SLICE( tmp_slice_source_14, Py_None, tmp_slice_upper_7 );
    Py_DECREF( tmp_slice_upper_7 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 496;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_27;
        Py_XDECREF( old );
    }

    tmp_slice_source_15 = var_r1;

    if ( tmp_slice_source_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 497;
        goto try_except_handler_7;
    }

    tmp_len_arg_11 = var_suffix;

    tmp_operand_name_6 = BUILTIN_LEN( tmp_len_arg_11 );
    if ( tmp_operand_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 497;
        goto try_except_handler_7;
    }
    tmp_slice_upper_8 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_6 );
    Py_DECREF( tmp_operand_name_6 );
    if ( tmp_slice_upper_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 497;
        goto try_except_handler_7;
    }
    tmp_assign_source_28 = LOOKUP_SLICE( tmp_slice_source_15, Py_None, tmp_slice_upper_8 );
    Py_DECREF( tmp_slice_upper_8 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 497;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_28;
        Py_XDECREF( old );
    }

    tmp_slice_source_16 = var_r2;

    tmp_len_arg_12 = var_suffix;

    tmp_operand_name_7 = BUILTIN_LEN( tmp_len_arg_12 );
    if ( tmp_operand_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 498;
        goto try_except_handler_7;
    }
    tmp_slice_upper_9 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_7 );
    Py_DECREF( tmp_operand_name_7 );
    if ( tmp_slice_upper_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 498;
        goto try_except_handler_7;
    }
    tmp_assign_source_29 = LOOKUP_SLICE( tmp_slice_source_16, Py_None, tmp_slice_upper_9 );
    Py_DECREF( tmp_slice_upper_9 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 498;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_29;
        Py_DECREF( old );
    }

    tmp_called_instance_16 = par_word;

    frame_function->f_lineno = 499;
    tmp_cond_value_9 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_16, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_60742b409240155d476c25dac1be289b_tuple, 0 ) );

    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 499;
        goto try_except_handler_7;
    }
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        exception_lineno = 499;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_sliceslicedel_index_lower_6 = 0;
    tmp_slice_index_upper_6 = -1;
    tmp_slice_source_17 = par_word;

    tmp_assign_source_30 = LOOKUP_INDEX_SLICE( tmp_slice_source_17, tmp_sliceslicedel_index_lower_6, tmp_slice_index_upper_6 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 500;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_30;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_7 = 0;
    tmp_slice_index_upper_7 = -1;
    tmp_slice_source_18 = var_r1;

    tmp_assign_source_31 = LOOKUP_INDEX_SLICE( tmp_slice_source_18, tmp_sliceslicedel_index_lower_7, tmp_slice_index_upper_7 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 501;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_31;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_8 = 0;
    tmp_slice_index_upper_8 = -1;
    tmp_slice_source_19 = var_r2;

    tmp_assign_source_32 = LOOKUP_INDEX_SLICE( tmp_slice_source_19, tmp_sliceslicedel_index_lower_8, tmp_slice_index_upper_8 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 502;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_32;
        Py_DECREF( old );
    }

    branch_no_12:;
    goto branch_end_11;
    branch_no_11:;
    tmp_compexpr_left_13 = var_suffix;

    tmp_compexpr_right_13 = const_tuple_unicode_plain_se_unicode_plain_s_tuple;
    tmp_and_left_value_9 = SEQUENCE_CONTAINS( tmp_compexpr_left_13, tmp_compexpr_right_13 );
    if ( tmp_and_left_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 504;
        goto try_except_handler_7;
    }
    tmp_and_left_truth_9 = CHECK_IF_TRUE( tmp_and_left_value_9 );
    assert( !(tmp_and_left_truth_9 == -1) );
    if ( tmp_and_left_truth_9 == 1 )
    {
        goto and_right_9;
    }
    else
    {
        goto and_left_9;
    }
    and_right_9:;
    tmp_subscribed_name_9 = par_word;

    if ( tmp_subscribed_name_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 505;
        goto try_except_handler_7;
    }

    tmp_len_arg_13 = var_suffix;

    tmp_operand_name_8 = BUILTIN_LEN( tmp_len_arg_13 );
    if ( tmp_operand_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 505;
        goto try_except_handler_7;
    }
    tmp_left_name_13 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_8 );
    Py_DECREF( tmp_operand_name_8 );
    if ( tmp_left_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 505;
        goto try_except_handler_7;
    }
    tmp_right_name_13 = const_int_pos_1;
    tmp_subscript_name_9 = BINARY_OPERATION_SUB( tmp_left_name_13, tmp_right_name_13 );
    Py_DECREF( tmp_left_name_13 );
    if ( tmp_subscript_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 505;
        goto try_except_handler_7;
    }
    tmp_compexpr_left_14 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_9, tmp_subscript_name_9 );
    Py_DECREF( tmp_subscript_name_9 );
    if ( tmp_compexpr_left_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 505;
        goto try_except_handler_7;
    }
    tmp_source_name_17 = par_self;

    tmp_compexpr_right_14 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain__DutchStemmer__vowels );
    if ( tmp_compexpr_right_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_14 );

        exception_lineno = 505;
        goto try_except_handler_7;
    }
    tmp_and_left_value_10 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_14, tmp_compexpr_right_14 );
    Py_DECREF( tmp_compexpr_left_14 );
    Py_DECREF( tmp_compexpr_right_14 );
    if ( tmp_and_left_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 505;
        goto try_except_handler_7;
    }
    tmp_and_left_truth_10 = CHECK_IF_TRUE( tmp_and_left_value_10 );
    assert( !(tmp_and_left_truth_10 == -1) );
    if ( tmp_and_left_truth_10 == 1 )
    {
        goto and_right_10;
    }
    else
    {
        goto and_left_10;
    }
    and_right_10:;
    tmp_subscribed_name_10 = par_word;

    if ( tmp_subscribed_name_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 506;
        goto try_except_handler_7;
    }

    tmp_len_arg_14 = var_suffix;

    tmp_operand_name_9 = BUILTIN_LEN( tmp_len_arg_14 );
    if ( tmp_operand_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 506;
        goto try_except_handler_7;
    }
    tmp_left_name_14 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_9 );
    Py_DECREF( tmp_operand_name_9 );
    if ( tmp_left_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 506;
        goto try_except_handler_7;
    }
    tmp_right_name_14 = const_int_pos_1;
    tmp_subscript_name_10 = BINARY_OPERATION_SUB( tmp_left_name_14, tmp_right_name_14 );
    Py_DECREF( tmp_left_name_14 );
    if ( tmp_subscript_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 506;
        goto try_except_handler_7;
    }
    tmp_compexpr_left_15 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_10, tmp_subscript_name_10 );
    Py_DECREF( tmp_subscript_name_10 );
    if ( tmp_compexpr_left_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 506;
        goto try_except_handler_7;
    }
    tmp_compexpr_right_15 = const_unicode_plain_j;
    tmp_and_right_value_10 = RICH_COMPARE_NE( tmp_compexpr_left_15, tmp_compexpr_right_15 );
    Py_DECREF( tmp_compexpr_left_15 );
    if ( tmp_and_right_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 506;
        goto try_except_handler_7;
    }
    tmp_and_right_value_9 = tmp_and_right_value_10;
    goto and_end_10;
    and_left_10:;
    Py_INCREF( tmp_and_left_value_10 );
    tmp_and_right_value_9 = tmp_and_left_value_10;
    and_end_10:;
    tmp_cond_value_10 = tmp_and_right_value_9;
    goto and_end_9;
    and_left_9:;
    Py_INCREF( tmp_and_left_value_9 );
    tmp_cond_value_10 = tmp_and_left_value_9;
    and_end_9:;
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        exception_lineno = 506;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_slice_source_20 = par_word;

    if ( tmp_slice_source_20 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 507;
        goto try_except_handler_7;
    }

    tmp_len_arg_15 = var_suffix;

    tmp_operand_name_10 = BUILTIN_LEN( tmp_len_arg_15 );
    if ( tmp_operand_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 507;
        goto try_except_handler_7;
    }
    tmp_slice_upper_10 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_10 );
    Py_DECREF( tmp_operand_name_10 );
    if ( tmp_slice_upper_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 507;
        goto try_except_handler_7;
    }
    tmp_assign_source_33 = LOOKUP_SLICE( tmp_slice_source_20, Py_None, tmp_slice_upper_10 );
    Py_DECREF( tmp_slice_upper_10 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 507;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_33;
        Py_XDECREF( old );
    }

    tmp_slice_source_21 = var_r1;

    if ( tmp_slice_source_21 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 508;
        goto try_except_handler_7;
    }

    tmp_len_arg_16 = var_suffix;

    tmp_operand_name_11 = BUILTIN_LEN( tmp_len_arg_16 );
    if ( tmp_operand_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 508;
        goto try_except_handler_7;
    }
    tmp_slice_upper_11 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_11 );
    Py_DECREF( tmp_operand_name_11 );
    if ( tmp_slice_upper_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 508;
        goto try_except_handler_7;
    }
    tmp_assign_source_34 = LOOKUP_SLICE( tmp_slice_source_21, Py_None, tmp_slice_upper_11 );
    Py_DECREF( tmp_slice_upper_11 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 508;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_34;
        Py_XDECREF( old );
    }

    tmp_slice_source_22 = var_r2;

    tmp_len_arg_17 = var_suffix;

    tmp_operand_name_12 = BUILTIN_LEN( tmp_len_arg_17 );
    if ( tmp_operand_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 509;
        goto try_except_handler_7;
    }
    tmp_slice_upper_12 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_12 );
    Py_DECREF( tmp_operand_name_12 );
    if ( tmp_slice_upper_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 509;
        goto try_except_handler_7;
    }
    tmp_assign_source_35 = LOOKUP_SLICE( tmp_slice_source_22, Py_None, tmp_slice_upper_12 );
    Py_DECREF( tmp_slice_upper_12 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 509;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_35;
        Py_DECREF( old );
    }

    branch_no_13:;
    branch_end_11:;
    branch_end_9:;
    goto loop_end_4;
    branch_no_8:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 484;
        goto try_except_handler_7;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    tmp_called_instance_17 = var_r1;

    if ( tmp_called_instance_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 513;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 513;
    tmp_and_left_value_11 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_17, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_e_tuple, 0 ) );

    if ( tmp_and_left_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 513;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_11 = CHECK_IF_TRUE( tmp_and_left_value_11 );
    if ( tmp_and_left_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_11 );

        exception_lineno = 513;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_11 == 1 )
    {
        goto and_right_11;
    }
    else
    {
        goto and_left_11;
    }
    and_right_11:;
    Py_DECREF( tmp_and_left_value_11 );
    tmp_subscribed_name_11 = par_word;

    if ( tmp_subscribed_name_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 513;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_11 = const_int_neg_2;
    tmp_compexpr_left_16 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_11, tmp_subscript_name_11 );
    if ( tmp_compexpr_left_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 513;
        goto frame_exception_exit_1;
    }
    tmp_source_name_18 = par_self;

    tmp_compexpr_right_16 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain__DutchStemmer__vowels );
    if ( tmp_compexpr_right_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_16 );

        exception_lineno = 513;
        goto frame_exception_exit_1;
    }
    tmp_and_right_value_11 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_16, tmp_compexpr_right_16 );
    Py_DECREF( tmp_compexpr_left_16 );
    Py_DECREF( tmp_compexpr_right_16 );
    if ( tmp_and_right_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 513;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_and_right_value_11 );
    tmp_cond_value_11 = tmp_and_right_value_11;
    goto and_end_11;
    and_left_11:;
    tmp_cond_value_11 = tmp_and_left_value_11;
    and_end_11:;
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_11 );

        exception_lineno = 513;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_assign_source_36 = Py_True;
    {
        PyObject *old = var_step2_success;
        assert( old != NULL );
        var_step2_success = tmp_assign_source_36;
        Py_INCREF( var_step2_success );
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_9 = 0;
    tmp_slice_index_upper_9 = -1;
    tmp_slice_source_23 = par_word;

    if ( tmp_slice_source_23 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 515;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_37 = LOOKUP_INDEX_SLICE( tmp_slice_source_23, tmp_sliceslicedel_index_lower_9, tmp_slice_index_upper_9 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 515;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_37;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_10 = 0;
    tmp_slice_index_upper_10 = -1;
    tmp_slice_source_24 = var_r1;

    if ( tmp_slice_source_24 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 516;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_38 = LOOKUP_INDEX_SLICE( tmp_slice_source_24, tmp_sliceslicedel_index_lower_10, tmp_slice_index_upper_10 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 516;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_38;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_11 = 0;
    tmp_slice_index_upper_11 = -1;
    tmp_slice_source_25 = var_r2;

    if ( tmp_slice_source_25 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 517;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_39 = LOOKUP_INDEX_SLICE( tmp_slice_source_25, tmp_sliceslicedel_index_lower_11, tmp_slice_index_upper_11 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 517;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_39;
        Py_XDECREF( old );
    }

    tmp_called_instance_18 = par_word;

    frame_function->f_lineno = 519;
    tmp_cond_value_12 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_18, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_60742b409240155d476c25dac1be289b_tuple, 0 ) );

    if ( tmp_cond_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 519;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_12 );

        exception_lineno = 519;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_sliceslicedel_index_lower_12 = 0;
    tmp_slice_index_upper_12 = -1;
    tmp_slice_source_26 = par_word;

    tmp_assign_source_40 = LOOKUP_INDEX_SLICE( tmp_slice_source_26, tmp_sliceslicedel_index_lower_12, tmp_slice_index_upper_12 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 520;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_40;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_13 = 0;
    tmp_slice_index_upper_13 = -1;
    tmp_slice_source_27 = var_r1;

    tmp_assign_source_41 = LOOKUP_INDEX_SLICE( tmp_slice_source_27, tmp_sliceslicedel_index_lower_13, tmp_slice_index_upper_13 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 521;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_41;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_14 = 0;
    tmp_slice_index_upper_14 = -1;
    tmp_slice_source_28 = var_r2;

    tmp_assign_source_42 = LOOKUP_INDEX_SLICE( tmp_slice_source_28, tmp_sliceslicedel_index_lower_14, tmp_slice_index_upper_14 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 522;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_42;
        Py_DECREF( old );
    }

    branch_no_15:;
    branch_no_14:;
    tmp_called_instance_19 = var_r2;

    if ( tmp_called_instance_19 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 525;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 525;
    tmp_and_left_value_12 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_19, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_heid_tuple, 0 ) );

    if ( tmp_and_left_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 525;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_12 = CHECK_IF_TRUE( tmp_and_left_value_12 );
    if ( tmp_and_left_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_12 );

        exception_lineno = 525;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_12 == 1 )
    {
        goto and_right_12;
    }
    else
    {
        goto and_left_12;
    }
    and_right_12:;
    Py_DECREF( tmp_and_left_value_12 );
    tmp_subscribed_name_12 = par_word;

    if ( tmp_subscribed_name_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 525;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_12 = const_int_neg_5;
    tmp_compexpr_left_17 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_12, tmp_subscript_name_12 );
    if ( tmp_compexpr_left_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 525;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_17 = const_unicode_plain_c;
    tmp_and_right_value_12 = RICH_COMPARE_NE( tmp_compexpr_left_17, tmp_compexpr_right_17 );
    Py_DECREF( tmp_compexpr_left_17 );
    if ( tmp_and_right_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 525;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_13 = tmp_and_right_value_12;
    goto and_end_12;
    and_left_12:;
    tmp_cond_value_13 = tmp_and_left_value_12;
    and_end_12:;
    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_13 );

        exception_lineno = 525;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_sliceslicedel_index_lower_15 = 0;
    tmp_slice_index_upper_15 = -4;
    tmp_slice_source_29 = par_word;

    if ( tmp_slice_source_29 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 526;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_43 = LOOKUP_INDEX_SLICE( tmp_slice_source_29, tmp_sliceslicedel_index_lower_15, tmp_slice_index_upper_15 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 526;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_43;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_16 = 0;
    tmp_slice_index_upper_16 = -4;
    tmp_slice_source_30 = var_r1;

    if ( tmp_slice_source_30 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 527;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_44 = LOOKUP_INDEX_SLICE( tmp_slice_source_30, tmp_sliceslicedel_index_lower_16, tmp_slice_index_upper_16 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 527;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_44;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_17 = 0;
    tmp_slice_index_upper_17 = -4;
    tmp_slice_source_31 = var_r2;

    if ( tmp_slice_source_31 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 528;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_45 = LOOKUP_INDEX_SLICE( tmp_slice_source_31, tmp_sliceslicedel_index_lower_17, tmp_slice_index_upper_17 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 528;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_45;
        Py_XDECREF( old );
    }

    tmp_called_instance_20 = var_r1;

    frame_function->f_lineno = 530;
    tmp_and_left_value_13 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_20, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_en_tuple, 0 ) );

    if ( tmp_and_left_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 530;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_13 = CHECK_IF_TRUE( tmp_and_left_value_13 );
    if ( tmp_and_left_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_13 );

        exception_lineno = 531;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_13 == 1 )
    {
        goto and_right_13;
    }
    else
    {
        goto and_left_13;
    }
    and_right_13:;
    Py_DECREF( tmp_and_left_value_13 );
    tmp_subscribed_name_13 = par_word;

    tmp_subscript_name_13 = const_int_neg_3;
    tmp_compexpr_left_18 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_13, tmp_subscript_name_13 );
    if ( tmp_compexpr_left_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 530;
        goto frame_exception_exit_1;
    }
    tmp_source_name_19 = par_self;

    tmp_compexpr_right_18 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain__DutchStemmer__vowels );
    if ( tmp_compexpr_right_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_18 );

        exception_lineno = 530;
        goto frame_exception_exit_1;
    }
    tmp_and_left_value_14 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_18, tmp_compexpr_right_18 );
    Py_DECREF( tmp_compexpr_left_18 );
    Py_DECREF( tmp_compexpr_right_18 );
    if ( tmp_and_left_value_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 530;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_14 = CHECK_IF_TRUE( tmp_and_left_value_14 );
    assert( !(tmp_and_left_truth_14 == -1) );
    if ( tmp_and_left_truth_14 == 1 )
    {
        goto and_right_14;
    }
    else
    {
        goto and_left_14;
    }
    and_right_14:;
    tmp_sliceslicedel_index_lower_18 = -5;
    tmp_slice_index_upper_18 = -2;
    tmp_slice_source_32 = par_word;

    tmp_compexpr_left_19 = LOOKUP_INDEX_SLICE( tmp_slice_source_32, tmp_sliceslicedel_index_lower_18, tmp_slice_index_upper_18 );
    if ( tmp_compexpr_left_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 531;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_19 = const_unicode_plain_gem;
    tmp_and_right_value_14 = RICH_COMPARE_NE( tmp_compexpr_left_19, tmp_compexpr_right_19 );
    Py_DECREF( tmp_compexpr_left_19 );
    if ( tmp_and_right_value_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 531;
        goto frame_exception_exit_1;
    }
    tmp_and_right_value_13 = tmp_and_right_value_14;
    goto and_end_14;
    and_left_14:;
    Py_INCREF( tmp_and_left_value_14 );
    tmp_and_right_value_13 = tmp_and_left_value_14;
    and_end_14:;
    tmp_cond_value_14 = tmp_and_right_value_13;
    goto and_end_13;
    and_left_13:;
    tmp_cond_value_14 = tmp_and_left_value_13;
    and_end_13:;
    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_14 );

        exception_lineno = 531;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_sliceslicedel_index_lower_19 = 0;
    tmp_slice_index_upper_19 = -2;
    tmp_slice_source_33 = par_word;

    tmp_assign_source_46 = LOOKUP_INDEX_SLICE( tmp_slice_source_33, tmp_sliceslicedel_index_lower_19, tmp_slice_index_upper_19 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 532;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_46;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_20 = 0;
    tmp_slice_index_upper_20 = -2;
    tmp_slice_source_34 = var_r1;

    tmp_assign_source_47 = LOOKUP_INDEX_SLICE( tmp_slice_source_34, tmp_sliceslicedel_index_lower_20, tmp_slice_index_upper_20 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 533;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_47;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_21 = 0;
    tmp_slice_index_upper_21 = -2;
    tmp_slice_source_35 = var_r2;

    tmp_assign_source_48 = LOOKUP_INDEX_SLICE( tmp_slice_source_35, tmp_sliceslicedel_index_lower_21, tmp_slice_index_upper_21 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 534;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_48;
        Py_DECREF( old );
    }

    tmp_called_instance_21 = par_word;

    frame_function->f_lineno = 536;
    tmp_cond_value_15 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_21, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_60742b409240155d476c25dac1be289b_tuple, 0 ) );

    if ( tmp_cond_value_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 536;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_15 );

        exception_lineno = 536;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_sliceslicedel_index_lower_22 = 0;
    tmp_slice_index_upper_22 = -1;
    tmp_slice_source_36 = par_word;

    tmp_assign_source_49 = LOOKUP_INDEX_SLICE( tmp_slice_source_36, tmp_sliceslicedel_index_lower_22, tmp_slice_index_upper_22 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 537;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_49;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_23 = 0;
    tmp_slice_index_upper_23 = -1;
    tmp_slice_source_37 = var_r1;

    tmp_assign_source_50 = LOOKUP_INDEX_SLICE( tmp_slice_source_37, tmp_sliceslicedel_index_lower_23, tmp_slice_index_upper_23 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 538;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_50;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_24 = 0;
    tmp_slice_index_upper_24 = -1;
    tmp_slice_source_38 = var_r2;

    tmp_assign_source_51 = LOOKUP_INDEX_SLICE( tmp_slice_source_38, tmp_sliceslicedel_index_lower_24, tmp_slice_index_upper_24 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 539;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_51;
        Py_DECREF( old );
    }

    branch_no_18:;
    branch_no_17:;
    branch_no_16:;
    tmp_source_name_20 = par_self;

    tmp_iter_arg_6 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain__DutchStemmer__step3b_suffixes );
    if ( tmp_iter_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 542;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_52 = MAKE_ITERATOR( tmp_iter_arg_6 );
    Py_DECREF( tmp_iter_arg_6 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 542;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_5__for_iterator == NULL );
    tmp_for_loop_5__for_iterator = tmp_assign_source_52;

    // Tried code:
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator;

    tmp_assign_source_53 = ITERATOR_NEXT( tmp_next_source_5 );
    if ( tmp_assign_source_53 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_5;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 542;
            goto try_except_handler_8;
        }
    }

    {
        PyObject *old = tmp_for_loop_5__iter_value;
        tmp_for_loop_5__iter_value = tmp_assign_source_53;
        Py_XDECREF( old );
    }

    tmp_assign_source_54 = tmp_for_loop_5__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_54;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_22 = var_r2;

    if ( tmp_called_instance_22 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 543;
        goto try_except_handler_8;
    }

    tmp_args_element_name_10 = var_suffix;

    frame_function->f_lineno = 543;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_cond_value_16 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_22, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 543;
        goto try_except_handler_8;
    }
    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_16 );

        exception_lineno = 543;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_compare_left_4 = var_suffix;

    tmp_compare_right_4 = const_tuple_unicode_plain_end_unicode_plain_ing_tuple;
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_sliceslicedel_index_lower_25 = 0;
    tmp_slice_index_upper_25 = -3;
    tmp_slice_source_39 = par_word;

    if ( tmp_slice_source_39 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 545;
        goto try_except_handler_8;
    }

    tmp_assign_source_55 = LOOKUP_INDEX_SLICE( tmp_slice_source_39, tmp_sliceslicedel_index_lower_25, tmp_slice_index_upper_25 );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 545;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_55;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_26 = 0;
    tmp_slice_index_upper_26 = -3;
    tmp_slice_source_40 = var_r2;

    if ( tmp_slice_source_40 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 546;
        goto try_except_handler_8;
    }

    tmp_assign_source_56 = LOOKUP_INDEX_SLICE( tmp_slice_source_40, tmp_sliceslicedel_index_lower_26, tmp_slice_index_upper_26 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 546;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_56;
        Py_XDECREF( old );
    }

    tmp_called_instance_23 = var_r2;

    frame_function->f_lineno = 548;
    tmp_and_left_value_15 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_23, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_ig_tuple, 0 ) );

    if ( tmp_and_left_value_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 548;
        goto try_except_handler_8;
    }
    tmp_and_left_truth_15 = CHECK_IF_TRUE( tmp_and_left_value_15 );
    if ( tmp_and_left_truth_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_15 );

        exception_lineno = 548;
        goto try_except_handler_8;
    }
    if ( tmp_and_left_truth_15 == 1 )
    {
        goto and_right_15;
    }
    else
    {
        goto and_left_15;
    }
    and_right_15:;
    Py_DECREF( tmp_and_left_value_15 );
    tmp_subscribed_name_14 = par_word;

    tmp_subscript_name_14 = const_int_neg_3;
    tmp_compexpr_left_20 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_14, tmp_subscript_name_14 );
    if ( tmp_compexpr_left_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 548;
        goto try_except_handler_8;
    }
    tmp_compexpr_right_20 = const_unicode_plain_e;
    tmp_and_right_value_15 = RICH_COMPARE_NE( tmp_compexpr_left_20, tmp_compexpr_right_20 );
    Py_DECREF( tmp_compexpr_left_20 );
    if ( tmp_and_right_value_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 548;
        goto try_except_handler_8;
    }
    tmp_cond_value_17 = tmp_and_right_value_15;
    goto and_end_15;
    and_left_15:;
    tmp_cond_value_17 = tmp_and_left_value_15;
    and_end_15:;
    tmp_cond_truth_17 = CHECK_IF_TRUE( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_17 );

        exception_lineno = 548;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_sliceslicedel_index_lower_27 = 0;
    tmp_slice_index_upper_27 = -2;
    tmp_slice_source_41 = par_word;

    tmp_assign_source_57 = LOOKUP_INDEX_SLICE( tmp_slice_source_41, tmp_sliceslicedel_index_lower_27, tmp_slice_index_upper_27 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 549;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_57;
        Py_DECREF( old );
    }

    goto branch_end_21;
    branch_no_21:;
    tmp_called_instance_24 = par_word;

    frame_function->f_lineno = 551;
    tmp_cond_value_18 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_24, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_60742b409240155d476c25dac1be289b_tuple, 0 ) );

    if ( tmp_cond_value_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 551;
        goto try_except_handler_8;
    }
    tmp_cond_truth_18 = CHECK_IF_TRUE( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_18 );

        exception_lineno = 551;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_sliceslicedel_index_lower_28 = 0;
    tmp_slice_index_upper_28 = -1;
    tmp_slice_source_42 = par_word;

    tmp_assign_source_58 = LOOKUP_INDEX_SLICE( tmp_slice_source_42, tmp_sliceslicedel_index_lower_28, tmp_slice_index_upper_28 );
    if ( tmp_assign_source_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 552;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_58;
        Py_DECREF( old );
    }

    branch_no_22:;
    branch_end_21:;
    goto branch_end_20;
    branch_no_20:;
    tmp_compexpr_left_21 = var_suffix;

    tmp_compexpr_right_21 = const_unicode_plain_ig;
    tmp_and_left_value_16 = RICH_COMPARE_EQ( tmp_compexpr_left_21, tmp_compexpr_right_21 );
    if ( tmp_and_left_value_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 554;
        goto try_except_handler_8;
    }
    tmp_and_left_truth_16 = CHECK_IF_TRUE( tmp_and_left_value_16 );
    if ( tmp_and_left_truth_16 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_16 );

        exception_lineno = 554;
        goto try_except_handler_8;
    }
    if ( tmp_and_left_truth_16 == 1 )
    {
        goto and_right_16;
    }
    else
    {
        goto and_left_16;
    }
    and_right_16:;
    Py_DECREF( tmp_and_left_value_16 );
    tmp_subscribed_name_15 = par_word;

    if ( tmp_subscribed_name_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 554;
        goto try_except_handler_8;
    }

    tmp_subscript_name_15 = const_int_neg_3;
    tmp_compexpr_left_22 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_15, tmp_subscript_name_15 );
    if ( tmp_compexpr_left_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 554;
        goto try_except_handler_8;
    }
    tmp_compexpr_right_22 = const_unicode_plain_e;
    tmp_and_right_value_16 = RICH_COMPARE_NE( tmp_compexpr_left_22, tmp_compexpr_right_22 );
    Py_DECREF( tmp_compexpr_left_22 );
    if ( tmp_and_right_value_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 554;
        goto try_except_handler_8;
    }
    tmp_cond_value_19 = tmp_and_right_value_16;
    goto and_end_16;
    and_left_16:;
    tmp_cond_value_19 = tmp_and_left_value_16;
    and_end_16:;
    tmp_cond_truth_19 = CHECK_IF_TRUE( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_19 );

        exception_lineno = 554;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == 1 )
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_sliceslicedel_index_lower_29 = 0;
    tmp_slice_index_upper_29 = -2;
    tmp_slice_source_43 = par_word;

    if ( tmp_slice_source_43 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 555;
        goto try_except_handler_8;
    }

    tmp_assign_source_59 = LOOKUP_INDEX_SLICE( tmp_slice_source_43, tmp_sliceslicedel_index_lower_29, tmp_slice_index_upper_29 );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_59;
        Py_XDECREF( old );
    }

    goto branch_end_23;
    branch_no_23:;
    tmp_compare_left_5 = var_suffix;

    tmp_compare_right_5 = const_unicode_plain_lijk;
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 557;
        goto try_except_handler_8;
    }
    if ( tmp_cmp_Eq_3 == 1 )
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_sliceslicedel_index_lower_30 = 0;
    tmp_slice_index_upper_30 = -4;
    tmp_slice_source_44 = par_word;

    if ( tmp_slice_source_44 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 558;
        goto try_except_handler_8;
    }

    tmp_assign_source_60 = LOOKUP_INDEX_SLICE( tmp_slice_source_44, tmp_sliceslicedel_index_lower_30, tmp_slice_index_upper_30 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 558;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_60;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_31 = 0;
    tmp_slice_index_upper_31 = -4;
    tmp_slice_source_45 = var_r1;

    if ( tmp_slice_source_45 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 559;
        goto try_except_handler_8;
    }

    tmp_assign_source_61 = LOOKUP_INDEX_SLICE( tmp_slice_source_45, tmp_sliceslicedel_index_lower_31, tmp_slice_index_upper_31 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 559;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_61;
        Py_XDECREF( old );
    }

    tmp_called_instance_25 = var_r1;

    frame_function->f_lineno = 561;
    tmp_and_left_value_17 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_25, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_e_tuple, 0 ) );

    if ( tmp_and_left_value_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 561;
        goto try_except_handler_8;
    }
    tmp_and_left_truth_17 = CHECK_IF_TRUE( tmp_and_left_value_17 );
    if ( tmp_and_left_truth_17 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_17 );

        exception_lineno = 561;
        goto try_except_handler_8;
    }
    if ( tmp_and_left_truth_17 == 1 )
    {
        goto and_right_17;
    }
    else
    {
        goto and_left_17;
    }
    and_right_17:;
    Py_DECREF( tmp_and_left_value_17 );
    tmp_subscribed_name_16 = par_word;

    tmp_subscript_name_16 = const_int_neg_2;
    tmp_compexpr_left_23 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_16, tmp_subscript_name_16 );
    if ( tmp_compexpr_left_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 561;
        goto try_except_handler_8;
    }
    tmp_source_name_21 = par_self;

    tmp_compexpr_right_23 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain__DutchStemmer__vowels );
    if ( tmp_compexpr_right_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_23 );

        exception_lineno = 561;
        goto try_except_handler_8;
    }
    tmp_and_right_value_17 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_23, tmp_compexpr_right_23 );
    Py_DECREF( tmp_compexpr_left_23 );
    Py_DECREF( tmp_compexpr_right_23 );
    if ( tmp_and_right_value_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 561;
        goto try_except_handler_8;
    }
    Py_INCREF( tmp_and_right_value_17 );
    tmp_cond_value_20 = tmp_and_right_value_17;
    goto and_end_17;
    and_left_17:;
    tmp_cond_value_20 = tmp_and_left_value_17;
    and_end_17:;
    tmp_cond_truth_20 = CHECK_IF_TRUE( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_20 );

        exception_lineno = 561;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == 1 )
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    tmp_sliceslicedel_index_lower_32 = 0;
    tmp_slice_index_upper_32 = -1;
    tmp_slice_source_46 = par_word;

    tmp_assign_source_62 = LOOKUP_INDEX_SLICE( tmp_slice_source_46, tmp_sliceslicedel_index_lower_32, tmp_slice_index_upper_32 );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 562;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_62;
        Py_DECREF( old );
    }

    tmp_called_instance_26 = par_word;

    frame_function->f_lineno = 563;
    tmp_cond_value_21 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_26, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_60742b409240155d476c25dac1be289b_tuple, 0 ) );

    if ( tmp_cond_value_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 563;
        goto try_except_handler_8;
    }
    tmp_cond_truth_21 = CHECK_IF_TRUE( tmp_cond_value_21 );
    if ( tmp_cond_truth_21 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_21 );

        exception_lineno = 563;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_21 );
    if ( tmp_cond_truth_21 == 1 )
    {
        goto branch_yes_26;
    }
    else
    {
        goto branch_no_26;
    }
    branch_yes_26:;
    tmp_sliceslicedel_index_lower_33 = 0;
    tmp_slice_index_upper_33 = -1;
    tmp_slice_source_47 = par_word;

    tmp_assign_source_63 = LOOKUP_INDEX_SLICE( tmp_slice_source_47, tmp_sliceslicedel_index_lower_33, tmp_slice_index_upper_33 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 564;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_63;
        Py_DECREF( old );
    }

    branch_no_26:;
    branch_no_25:;
    goto branch_end_24;
    branch_no_24:;
    tmp_compare_left_6 = var_suffix;

    tmp_compare_right_6 = const_unicode_plain_baar;
    tmp_cmp_Eq_4 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_cmp_Eq_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;
        goto try_except_handler_8;
    }
    if ( tmp_cmp_Eq_4 == 1 )
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_sliceslicedel_index_lower_34 = 0;
    tmp_slice_index_upper_34 = -4;
    tmp_slice_source_48 = par_word;

    if ( tmp_slice_source_48 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 567;
        goto try_except_handler_8;
    }

    tmp_assign_source_64 = LOOKUP_INDEX_SLICE( tmp_slice_source_48, tmp_sliceslicedel_index_lower_34, tmp_slice_index_upper_34 );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 567;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_64;
        Py_XDECREF( old );
    }

    goto branch_end_27;
    branch_no_27:;
    tmp_compexpr_left_24 = var_suffix;

    tmp_compexpr_right_24 = const_unicode_plain_bar;
    tmp_and_left_value_18 = RICH_COMPARE_EQ( tmp_compexpr_left_24, tmp_compexpr_right_24 );
    if ( tmp_and_left_value_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 569;
        goto try_except_handler_8;
    }
    tmp_and_left_truth_18 = CHECK_IF_TRUE( tmp_and_left_value_18 );
    if ( tmp_and_left_truth_18 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_18 );

        exception_lineno = 569;
        goto try_except_handler_8;
    }
    if ( tmp_and_left_truth_18 == 1 )
    {
        goto and_right_18;
    }
    else
    {
        goto and_left_18;
    }
    and_right_18:;
    Py_DECREF( tmp_and_left_value_18 );
    tmp_and_right_value_18 = var_step2_success;

    Py_INCREF( tmp_and_right_value_18 );
    tmp_cond_value_22 = tmp_and_right_value_18;
    goto and_end_18;
    and_left_18:;
    tmp_cond_value_22 = tmp_and_left_value_18;
    and_end_18:;
    tmp_cond_truth_22 = CHECK_IF_TRUE( tmp_cond_value_22 );
    if ( tmp_cond_truth_22 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_22 );

        exception_lineno = 569;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_22 );
    if ( tmp_cond_truth_22 == 1 )
    {
        goto branch_yes_28;
    }
    else
    {
        goto branch_no_28;
    }
    branch_yes_28:;
    tmp_sliceslicedel_index_lower_35 = 0;
    tmp_slice_index_upper_35 = -3;
    tmp_slice_source_49 = par_word;

    if ( tmp_slice_source_49 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 570;
        goto try_except_handler_8;
    }

    tmp_assign_source_65 = LOOKUP_INDEX_SLICE( tmp_slice_source_49, tmp_sliceslicedel_index_lower_35, tmp_slice_index_upper_35 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 570;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_65;
        Py_XDECREF( old );
    }

    branch_no_28:;
    branch_end_27:;
    branch_end_24:;
    branch_end_23:;
    branch_end_20:;
    goto loop_end_5;
    branch_no_19:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 542;
        goto try_except_handler_8;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    tmp_len_arg_18 = par_word;

    if ( tmp_len_arg_18 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 574;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_7 = BUILTIN_LEN( tmp_len_arg_18 );
    if ( tmp_compare_left_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 574;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_7 = const_int_pos_4;
    tmp_cmp_GtE_1 = RICH_COMPARE_BOOL_GE( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_cmp_GtE_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_7 );

        exception_lineno = 574;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_7 );
    if ( tmp_cmp_GtE_1 == 1 )
    {
        goto branch_yes_29;
    }
    else
    {
        goto branch_no_29;
    }
    branch_yes_29:;
    tmp_subscribed_name_17 = par_word;

    if ( tmp_subscribed_name_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 575;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_17 = const_int_neg_1;
    tmp_compexpr_left_25 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_17, tmp_subscript_name_17 );
    if ( tmp_compexpr_left_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;
        goto frame_exception_exit_1;
    }
    tmp_source_name_22 = par_self;

    tmp_compexpr_right_25 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain__DutchStemmer__vowels );
    if ( tmp_compexpr_right_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_25 );

        exception_lineno = 575;
        goto frame_exception_exit_1;
    }
    tmp_and_left_value_19 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_25, tmp_compexpr_right_25 );
    Py_DECREF( tmp_compexpr_left_25 );
    Py_DECREF( tmp_compexpr_right_25 );
    if ( tmp_and_left_value_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_19 = CHECK_IF_TRUE( tmp_and_left_value_19 );
    assert( !(tmp_and_left_truth_19 == -1) );
    if ( tmp_and_left_truth_19 == 1 )
    {
        goto and_right_19;
    }
    else
    {
        goto and_left_19;
    }
    and_right_19:;
    tmp_subscribed_name_18 = par_word;

    if ( tmp_subscribed_name_18 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 575;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_18 = const_int_neg_1;
    tmp_compexpr_left_26 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_18, tmp_subscript_name_18 );
    if ( tmp_compexpr_left_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_26 = const_unicode_plain_I;
    tmp_and_right_value_19 = RICH_COMPARE_NE( tmp_compexpr_left_26, tmp_compexpr_right_26 );
    Py_DECREF( tmp_compexpr_left_26 );
    if ( tmp_and_right_value_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_23 = tmp_and_right_value_19;
    goto and_end_19;
    and_left_19:;
    Py_INCREF( tmp_and_left_value_19 );
    tmp_cond_value_23 = tmp_and_left_value_19;
    and_end_19:;
    tmp_cond_truth_23 = CHECK_IF_TRUE( tmp_cond_value_23 );
    if ( tmp_cond_truth_23 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_23 );

        exception_lineno = 575;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_23 );
    if ( tmp_cond_truth_23 == 1 )
    {
        goto branch_yes_30;
    }
    else
    {
        goto branch_no_30;
    }
    branch_yes_30:;
    tmp_sliceslicedel_index_lower_36 = -3;
    tmp_slice_index_upper_36 = -1;
    tmp_slice_source_50 = par_word;

    if ( tmp_slice_source_50 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 576;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_8 = LOOKUP_INDEX_SLICE( tmp_slice_source_50, tmp_sliceslicedel_index_lower_36, tmp_slice_index_upper_36 );
    if ( tmp_compare_left_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 576;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_8 = const_tuple_7d48bd73d82ed9770b83395402452efb_tuple;
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_3 == -1) );
    Py_DECREF( tmp_compare_left_8 );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_31;
    }
    else
    {
        goto branch_no_31;
    }
    branch_yes_31:;
    tmp_subscribed_name_19 = par_word;

    if ( tmp_subscribed_name_19 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 577;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_19 = const_int_neg_4;
    tmp_compare_left_9 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_19, tmp_subscript_name_19 );
    if ( tmp_compare_left_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 577;
        goto frame_exception_exit_1;
    }
    tmp_source_name_23 = par_self;

    tmp_compare_right_9 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain__DutchStemmer__vowels );
    if ( tmp_compare_right_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_9 );

        exception_lineno = 577;
        goto frame_exception_exit_1;
    }
    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    assert( !(tmp_cmp_NotIn_1 == -1) );
    Py_DECREF( tmp_compare_left_9 );
    Py_DECREF( tmp_compare_right_9 );
    if ( tmp_cmp_NotIn_1 == 0 )
    {
        goto branch_yes_32;
    }
    else
    {
        goto branch_no_32;
    }
    branch_yes_32:;
    tmp_source_name_24 = const_unicode_empty;
    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_join );
    assert( tmp_called_name_8 != NULL );
    tmp_args_element_name_11 = PyTuple_New( 3 );
    tmp_sliceslicedel_index_lower_37 = 0;
    tmp_slice_index_upper_37 = -3;
    tmp_slice_source_51 = par_word;

    if ( tmp_slice_source_51 == NULL )
    {
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_7 = LOOKUP_INDEX_SLICE( tmp_slice_source_51, tmp_sliceslicedel_index_lower_37, tmp_slice_index_upper_37 );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_11, 0, tmp_tuple_element_7 );
    tmp_subscribed_name_20 = par_word;

    if ( tmp_subscribed_name_20 == NULL )
    {
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_20 = const_int_neg_3;
    tmp_tuple_element_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_20, tmp_subscript_name_20 );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_11, 1, tmp_tuple_element_7 );
    tmp_subscribed_name_21 = par_word;

    if ( tmp_subscribed_name_21 == NULL )
    {
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_11 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_21 = const_int_neg_1;
    tmp_tuple_element_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_21, tmp_subscript_name_21 );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 578;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_11, 2, tmp_tuple_element_7 );
    frame_function->f_lineno = 578;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_assign_source_66 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 578;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_66;
        Py_XDECREF( old );
    }

    branch_no_32:;
    branch_no_31:;
    branch_no_30:;
    branch_no_29:;
    tmp_called_instance_28 = par_word;

    if ( tmp_called_instance_28 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 581;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 581;
    tmp_called_instance_27 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_28, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_unicode_plain_I_unicode_plain_i_tuple, 0 ) );

    if ( tmp_called_instance_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 581;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 581;
    tmp_assign_source_67 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_27, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_unicode_plain_Y_unicode_plain_y_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_27 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 581;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_67;
        Py_XDECREF( old );
    }


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_step2_success )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_step2_success,
                    var_step2_success
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_r2 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r2,
                    var_r2
                );

                assert( res == 0 );
            }

            if ( var_suffix )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_suffix,
                    var_suffix
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_5_DutchStemmer$$$function_1_stem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step2_success );
    var_step2_success = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step2_success );
    var_step2_success = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_5_DutchStemmer$$$function_1_stem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_6_FinnishStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__FinnishStemmer__vowels = NULL;
    PyObject *var__FinnishStemmer__restricted_vowels = NULL;
    PyObject *var__FinnishStemmer__long_vowels = NULL;
    PyObject *var__FinnishStemmer__consonants = NULL;
    PyObject *var__FinnishStemmer__double_consonants = NULL;
    PyObject *var__FinnishStemmer__step1_suffixes = NULL;
    PyObject *var__FinnishStemmer__step2_suffixes = NULL;
    PyObject *var__FinnishStemmer__step3_suffixes = NULL;
    PyObject *var__FinnishStemmer__step4_suffixes = NULL;
    PyObject *var_stem = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_08bbb694960a2d85c41e434aeac51be4;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_unicode_digest_56e09ae969d5eb64a4ae0231607b3734;
    assert( var__FinnishStemmer__vowels == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var__FinnishStemmer__vowels = tmp_assign_source_3;

    tmp_assign_source_4 = const_unicode_digest_33f74bcf797191a3ac5f1ea6f198c5bf;
    assert( var__FinnishStemmer__restricted_vowels == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var__FinnishStemmer__restricted_vowels = tmp_assign_source_4;

    tmp_assign_source_5 = const_tuple_1144fdac22177e659ece2dafadf0b7e6_tuple;
    assert( var__FinnishStemmer__long_vowels == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__FinnishStemmer__long_vowels = tmp_assign_source_5;

    tmp_assign_source_6 = const_unicode_plain_bcdfghjklmnpqrstvwxz;
    assert( var__FinnishStemmer__consonants == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var__FinnishStemmer__consonants = tmp_assign_source_6;

    tmp_assign_source_7 = const_tuple_7c19c3129287ed1c05bdd2c2c1c5213c_tuple;
    assert( var__FinnishStemmer__double_consonants == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var__FinnishStemmer__double_consonants = tmp_assign_source_7;

    tmp_assign_source_8 = const_tuple_686bde844e12f4df5b9937dab286cac9_tuple;
    assert( var__FinnishStemmer__step1_suffixes == NULL );
    Py_INCREF( tmp_assign_source_8 );
    var__FinnishStemmer__step1_suffixes = tmp_assign_source_8;

    tmp_assign_source_9 = const_tuple_76d08bdc702514b83a9210a870492acd_tuple;
    assert( var__FinnishStemmer__step2_suffixes == NULL );
    Py_INCREF( tmp_assign_source_9 );
    var__FinnishStemmer__step2_suffixes = tmp_assign_source_9;

    tmp_assign_source_10 = const_tuple_0802c11868d410b647d2c8bac75ddc7d_tuple;
    assert( var__FinnishStemmer__step3_suffixes == NULL );
    Py_INCREF( tmp_assign_source_10 );
    var__FinnishStemmer__step3_suffixes = tmp_assign_source_10;

    tmp_assign_source_11 = const_tuple_10cdd6acc5619dc3627ed2666719fe7c_tuple;
    assert( var__FinnishStemmer__step4_suffixes == NULL );
    Py_INCREF( tmp_assign_source_11 );
    var__FinnishStemmer__step4_suffixes = tmp_assign_source_11;

    tmp_assign_source_12 = MAKE_FUNCTION_nltk$stem$snowball$$$class_6_FinnishStemmer$$$function_1_stem(  );
    assert( var_stem == NULL );
    var_stem = tmp_assign_source_12;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__FinnishStemmer__vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FinnishStemmer__vowels,
            var__FinnishStemmer__vowels
        );

        assert( res == 0 );
    }

    if ( var__FinnishStemmer__restricted_vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FinnishStemmer__restricted_vowels,
            var__FinnishStemmer__restricted_vowels
        );

        assert( res == 0 );
    }

    if ( var__FinnishStemmer__long_vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FinnishStemmer__long_vowels,
            var__FinnishStemmer__long_vowels
        );

        assert( res == 0 );
    }

    if ( var__FinnishStemmer__consonants )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FinnishStemmer__consonants,
            var__FinnishStemmer__consonants
        );

        assert( res == 0 );
    }

    if ( var__FinnishStemmer__double_consonants )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FinnishStemmer__double_consonants,
            var__FinnishStemmer__double_consonants
        );

        assert( res == 0 );
    }

    if ( var__FinnishStemmer__step1_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FinnishStemmer__step1_suffixes,
            var__FinnishStemmer__step1_suffixes
        );

        assert( res == 0 );
    }

    if ( var__FinnishStemmer__step2_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FinnishStemmer__step2_suffixes,
            var__FinnishStemmer__step2_suffixes
        );

        assert( res == 0 );
    }

    if ( var__FinnishStemmer__step3_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FinnishStemmer__step3_suffixes,
            var__FinnishStemmer__step3_suffixes
        );

        assert( res == 0 );
    }

    if ( var__FinnishStemmer__step4_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FinnishStemmer__step4_suffixes,
            var__FinnishStemmer__step4_suffixes
        );

        assert( res == 0 );
    }

    if ( var_stem )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_stem,
            var_stem
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_6_FinnishStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__vowels );
    Py_DECREF( var__FinnishStemmer__vowels );
    var__FinnishStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__restricted_vowels );
    Py_DECREF( var__FinnishStemmer__restricted_vowels );
    var__FinnishStemmer__restricted_vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__long_vowels );
    Py_DECREF( var__FinnishStemmer__long_vowels );
    var__FinnishStemmer__long_vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__consonants );
    Py_DECREF( var__FinnishStemmer__consonants );
    var__FinnishStemmer__consonants = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__double_consonants );
    Py_DECREF( var__FinnishStemmer__double_consonants );
    var__FinnishStemmer__double_consonants = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__step1_suffixes );
    Py_DECREF( var__FinnishStemmer__step1_suffixes );
    var__FinnishStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__step2_suffixes );
    Py_DECREF( var__FinnishStemmer__step2_suffixes );
    var__FinnishStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__step3_suffixes );
    Py_DECREF( var__FinnishStemmer__step3_suffixes );
    var__FinnishStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__step4_suffixes );
    Py_DECREF( var__FinnishStemmer__step4_suffixes );
    var__FinnishStemmer__step4_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__vowels );
    Py_DECREF( var__FinnishStemmer__vowels );
    var__FinnishStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__restricted_vowels );
    Py_DECREF( var__FinnishStemmer__restricted_vowels );
    var__FinnishStemmer__restricted_vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__long_vowels );
    Py_DECREF( var__FinnishStemmer__long_vowels );
    var__FinnishStemmer__long_vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__consonants );
    Py_DECREF( var__FinnishStemmer__consonants );
    var__FinnishStemmer__consonants = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__double_consonants );
    Py_DECREF( var__FinnishStemmer__double_consonants );
    var__FinnishStemmer__double_consonants = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__step1_suffixes );
    Py_DECREF( var__FinnishStemmer__step1_suffixes );
    var__FinnishStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__step2_suffixes );
    Py_DECREF( var__FinnishStemmer__step2_suffixes );
    var__FinnishStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__step3_suffixes );
    Py_DECREF( var__FinnishStemmer__step3_suffixes );
    var__FinnishStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__FinnishStemmer__step4_suffixes );
    Py_DECREF( var__FinnishStemmer__step4_suffixes );
    var__FinnishStemmer__step4_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_6_FinnishStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_6_FinnishStemmer$$$function_1_stem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_step3_success = NULL;
    PyObject *var_r1 = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_suffix = NULL;
    PyObject *var_i = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    int tmp_and_left_truth_3;
    int tmp_and_left_truth_4;
    int tmp_and_left_truth_5;
    int tmp_and_left_truth_6;
    int tmp_and_left_truth_7;
    int tmp_and_left_truth_8;
    int tmp_and_left_truth_9;
    int tmp_and_left_truth_10;
    int tmp_and_left_truth_11;
    int tmp_and_left_truth_12;
    int tmp_and_left_truth_13;
    int tmp_and_left_truth_14;
    int tmp_and_left_truth_15;
    int tmp_and_left_truth_16;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_left_value_3;
    PyObject *tmp_and_left_value_4;
    PyObject *tmp_and_left_value_5;
    PyObject *tmp_and_left_value_6;
    PyObject *tmp_and_left_value_7;
    PyObject *tmp_and_left_value_8;
    PyObject *tmp_and_left_value_9;
    PyObject *tmp_and_left_value_10;
    PyObject *tmp_and_left_value_11;
    PyObject *tmp_and_left_value_12;
    PyObject *tmp_and_left_value_13;
    PyObject *tmp_and_left_value_14;
    PyObject *tmp_and_left_value_15;
    PyObject *tmp_and_left_value_16;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_and_right_value_3;
    PyObject *tmp_and_right_value_4;
    PyObject *tmp_and_right_value_5;
    PyObject *tmp_and_right_value_6;
    PyObject *tmp_and_right_value_7;
    PyObject *tmp_and_right_value_8;
    PyObject *tmp_and_right_value_9;
    PyObject *tmp_and_right_value_10;
    PyObject *tmp_and_right_value_11;
    PyObject *tmp_and_right_value_12;
    PyObject *tmp_and_right_value_13;
    PyObject *tmp_and_right_value_14;
    PyObject *tmp_and_right_value_15;
    PyObject *tmp_and_right_value_16;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_instance_12;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_Eq_4;
    int tmp_cmp_Eq_5;
    int tmp_cmp_Eq_6;
    int tmp_cmp_Eq_7;
    int tmp_cmp_Eq_8;
    int tmp_cmp_Eq_9;
    int tmp_cmp_Eq_10;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    int tmp_cmp_In_10;
    int tmp_cmp_In_11;
    int tmp_cmp_In_12;
    int tmp_cmp_In_13;
    int tmp_cmp_In_14;
    int tmp_cmp_NotEq_1;
    int tmp_cmp_NotEq_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_left_17;
    PyObject *tmp_compare_left_18;
    PyObject *tmp_compare_left_19;
    PyObject *tmp_compare_left_20;
    PyObject *tmp_compare_left_21;
    PyObject *tmp_compare_left_22;
    PyObject *tmp_compare_left_23;
    PyObject *tmp_compare_left_24;
    PyObject *tmp_compare_left_25;
    PyObject *tmp_compare_left_26;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_compare_right_17;
    PyObject *tmp_compare_right_18;
    PyObject *tmp_compare_right_19;
    PyObject *tmp_compare_right_20;
    PyObject *tmp_compare_right_21;
    PyObject *tmp_compare_right_22;
    PyObject *tmp_compare_right_23;
    PyObject *tmp_compare_right_24;
    PyObject *tmp_compare_right_25;
    PyObject *tmp_compare_right_26;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_left_7;
    PyObject *tmp_compexpr_left_8;
    PyObject *tmp_compexpr_left_9;
    PyObject *tmp_compexpr_left_10;
    PyObject *tmp_compexpr_left_11;
    PyObject *tmp_compexpr_left_12;
    PyObject *tmp_compexpr_left_13;
    PyObject *tmp_compexpr_left_14;
    PyObject *tmp_compexpr_left_15;
    PyObject *tmp_compexpr_left_16;
    PyObject *tmp_compexpr_left_17;
    PyObject *tmp_compexpr_left_18;
    PyObject *tmp_compexpr_left_19;
    PyObject *tmp_compexpr_left_20;
    PyObject *tmp_compexpr_left_21;
    PyObject *tmp_compexpr_left_22;
    PyObject *tmp_compexpr_left_23;
    PyObject *tmp_compexpr_left_24;
    PyObject *tmp_compexpr_left_25;
    PyObject *tmp_compexpr_left_26;
    PyObject *tmp_compexpr_left_27;
    PyObject *tmp_compexpr_left_28;
    PyObject *tmp_compexpr_left_29;
    PyObject *tmp_compexpr_left_30;
    PyObject *tmp_compexpr_left_31;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    PyObject *tmp_compexpr_right_7;
    PyObject *tmp_compexpr_right_8;
    PyObject *tmp_compexpr_right_9;
    PyObject *tmp_compexpr_right_10;
    PyObject *tmp_compexpr_right_11;
    PyObject *tmp_compexpr_right_12;
    PyObject *tmp_compexpr_right_13;
    PyObject *tmp_compexpr_right_14;
    PyObject *tmp_compexpr_right_15;
    PyObject *tmp_compexpr_right_16;
    PyObject *tmp_compexpr_right_17;
    PyObject *tmp_compexpr_right_18;
    PyObject *tmp_compexpr_right_19;
    PyObject *tmp_compexpr_right_20;
    PyObject *tmp_compexpr_right_21;
    PyObject *tmp_compexpr_right_22;
    PyObject *tmp_compexpr_right_23;
    PyObject *tmp_compexpr_right_24;
    PyObject *tmp_compexpr_right_25;
    PyObject *tmp_compexpr_right_26;
    PyObject *tmp_compexpr_right_27;
    PyObject *tmp_compexpr_right_28;
    PyObject *tmp_compexpr_right_29;
    PyObject *tmp_compexpr_right_30;
    PyObject *tmp_compexpr_right_31;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    int tmp_cond_truth_17;
    int tmp_cond_truth_18;
    int tmp_cond_truth_19;
    int tmp_cond_truth_20;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_cond_value_17;
    PyObject *tmp_cond_value_18;
    PyObject *tmp_cond_value_19;
    PyObject *tmp_cond_value_20;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_left_name_6;
    PyObject *tmp_left_name_7;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_len_arg_6;
    PyObject *tmp_len_arg_7;
    PyObject *tmp_len_arg_8;
    PyObject *tmp_len_arg_9;
    PyObject *tmp_len_arg_10;
    PyObject *tmp_len_arg_11;
    PyObject *tmp_len_arg_12;
    PyObject *tmp_len_arg_13;
    PyObject *tmp_len_arg_14;
    PyObject *tmp_len_arg_15;
    PyObject *tmp_len_arg_16;
    PyObject *tmp_len_arg_17;
    PyObject *tmp_len_arg_18;
    PyObject *tmp_len_arg_19;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    PyObject *tmp_operand_name_4;
    PyObject *tmp_operand_name_5;
    PyObject *tmp_operand_name_6;
    PyObject *tmp_operand_name_7;
    PyObject *tmp_operand_name_8;
    PyObject *tmp_operand_name_9;
    PyObject *tmp_operand_name_10;
    PyObject *tmp_operand_name_11;
    PyObject *tmp_operand_name_12;
    PyObject *tmp_operand_name_13;
    PyObject *tmp_operand_name_14;
    PyObject *tmp_operand_name_15;
    PyObject *tmp_operand_name_16;
    PyObject *tmp_operand_name_17;
    PyObject *tmp_operand_name_18;
    PyObject *tmp_operand_name_19;
    PyObject *tmp_operand_name_20;
    PyObject *tmp_operand_name_21;
    PyObject *tmp_operand_name_22;
    int tmp_or_left_truth_1;
    int tmp_or_left_truth_2;
    int tmp_or_left_truth_3;
    int tmp_or_left_truth_4;
    int tmp_or_left_truth_5;
    int tmp_or_left_truth_6;
    int tmp_or_left_truth_7;
    int tmp_or_left_truth_8;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_left_value_2;
    PyObject *tmp_or_left_value_3;
    PyObject *tmp_or_left_value_4;
    PyObject *tmp_or_left_value_5;
    PyObject *tmp_or_left_value_6;
    PyObject *tmp_or_left_value_7;
    PyObject *tmp_or_left_value_8;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_or_right_value_2;
    PyObject *tmp_or_right_value_3;
    PyObject *tmp_or_right_value_4;
    PyObject *tmp_or_right_value_5;
    PyObject *tmp_or_right_value_6;
    PyObject *tmp_or_right_value_7;
    PyObject *tmp_or_right_value_8;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    PyObject *tmp_right_name_6;
    PyObject *tmp_right_name_7;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    Py_ssize_t tmp_slice_index_upper_6;
    Py_ssize_t tmp_slice_index_upper_7;
    Py_ssize_t tmp_slice_index_upper_8;
    Py_ssize_t tmp_slice_index_upper_9;
    Py_ssize_t tmp_slice_index_upper_10;
    Py_ssize_t tmp_slice_index_upper_11;
    Py_ssize_t tmp_slice_index_upper_12;
    Py_ssize_t tmp_slice_index_upper_13;
    Py_ssize_t tmp_slice_index_upper_14;
    Py_ssize_t tmp_slice_index_upper_15;
    Py_ssize_t tmp_slice_index_upper_16;
    Py_ssize_t tmp_slice_index_upper_17;
    Py_ssize_t tmp_slice_index_upper_18;
    Py_ssize_t tmp_slice_index_upper_19;
    Py_ssize_t tmp_slice_index_upper_20;
    Py_ssize_t tmp_slice_index_upper_21;
    Py_ssize_t tmp_slice_index_upper_22;
    Py_ssize_t tmp_slice_index_upper_23;
    Py_ssize_t tmp_slice_index_upper_24;
    Py_ssize_t tmp_slice_index_upper_25;
    Py_ssize_t tmp_slice_index_upper_26;
    Py_ssize_t tmp_slice_index_upper_27;
    Py_ssize_t tmp_slice_index_upper_28;
    Py_ssize_t tmp_slice_index_upper_29;
    Py_ssize_t tmp_slice_index_upper_30;
    Py_ssize_t tmp_slice_index_upper_31;
    Py_ssize_t tmp_slice_index_upper_32;
    Py_ssize_t tmp_slice_index_upper_33;
    Py_ssize_t tmp_slice_index_upper_34;
    Py_ssize_t tmp_slice_index_upper_35;
    Py_ssize_t tmp_slice_index_upper_36;
    Py_ssize_t tmp_slice_index_upper_37;
    Py_ssize_t tmp_slice_index_upper_38;
    Py_ssize_t tmp_slice_index_upper_39;
    Py_ssize_t tmp_slice_index_upper_40;
    Py_ssize_t tmp_slice_index_upper_41;
    Py_ssize_t tmp_slice_index_upper_42;
    Py_ssize_t tmp_slice_index_upper_43;
    Py_ssize_t tmp_slice_index_upper_44;
    Py_ssize_t tmp_slice_index_upper_45;
    Py_ssize_t tmp_slice_index_upper_46;
    Py_ssize_t tmp_slice_index_upper_47;
    Py_ssize_t tmp_slice_index_upper_48;
    Py_ssize_t tmp_slice_index_upper_49;
    Py_ssize_t tmp_slice_index_upper_50;
    Py_ssize_t tmp_slice_index_upper_51;
    Py_ssize_t tmp_slice_index_upper_52;
    Py_ssize_t tmp_slice_index_upper_53;
    Py_ssize_t tmp_slice_index_upper_54;
    Py_ssize_t tmp_slice_index_upper_55;
    Py_ssize_t tmp_slice_index_upper_56;
    Py_ssize_t tmp_slice_index_upper_57;
    Py_ssize_t tmp_slice_index_upper_58;
    Py_ssize_t tmp_slice_index_upper_59;
    Py_ssize_t tmp_slice_index_upper_60;
    Py_ssize_t tmp_slice_index_upper_61;
    Py_ssize_t tmp_slice_index_upper_62;
    Py_ssize_t tmp_slice_index_upper_63;
    Py_ssize_t tmp_slice_index_upper_64;
    Py_ssize_t tmp_slice_index_upper_65;
    Py_ssize_t tmp_slice_index_upper_66;
    Py_ssize_t tmp_slice_index_upper_67;
    Py_ssize_t tmp_slice_index_upper_68;
    Py_ssize_t tmp_slice_index_upper_69;
    Py_ssize_t tmp_slice_index_upper_70;
    Py_ssize_t tmp_slice_index_upper_71;
    Py_ssize_t tmp_slice_index_upper_72;
    Py_ssize_t tmp_slice_index_upper_73;
    Py_ssize_t tmp_slice_index_upper_74;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_lower_3;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_source_10;
    PyObject *tmp_slice_source_11;
    PyObject *tmp_slice_source_12;
    PyObject *tmp_slice_source_13;
    PyObject *tmp_slice_source_14;
    PyObject *tmp_slice_source_15;
    PyObject *tmp_slice_source_16;
    PyObject *tmp_slice_source_17;
    PyObject *tmp_slice_source_18;
    PyObject *tmp_slice_source_19;
    PyObject *tmp_slice_source_20;
    PyObject *tmp_slice_source_21;
    PyObject *tmp_slice_source_22;
    PyObject *tmp_slice_source_23;
    PyObject *tmp_slice_source_24;
    PyObject *tmp_slice_source_25;
    PyObject *tmp_slice_source_26;
    PyObject *tmp_slice_source_27;
    PyObject *tmp_slice_source_28;
    PyObject *tmp_slice_source_29;
    PyObject *tmp_slice_source_30;
    PyObject *tmp_slice_source_31;
    PyObject *tmp_slice_source_32;
    PyObject *tmp_slice_source_33;
    PyObject *tmp_slice_source_34;
    PyObject *tmp_slice_source_35;
    PyObject *tmp_slice_source_36;
    PyObject *tmp_slice_source_37;
    PyObject *tmp_slice_source_38;
    PyObject *tmp_slice_source_39;
    PyObject *tmp_slice_source_40;
    PyObject *tmp_slice_source_41;
    PyObject *tmp_slice_source_42;
    PyObject *tmp_slice_source_43;
    PyObject *tmp_slice_source_44;
    PyObject *tmp_slice_source_45;
    PyObject *tmp_slice_source_46;
    PyObject *tmp_slice_source_47;
    PyObject *tmp_slice_source_48;
    PyObject *tmp_slice_source_49;
    PyObject *tmp_slice_source_50;
    PyObject *tmp_slice_source_51;
    PyObject *tmp_slice_source_52;
    PyObject *tmp_slice_source_53;
    PyObject *tmp_slice_source_54;
    PyObject *tmp_slice_source_55;
    PyObject *tmp_slice_source_56;
    PyObject *tmp_slice_source_57;
    PyObject *tmp_slice_source_58;
    PyObject *tmp_slice_source_59;
    PyObject *tmp_slice_source_60;
    PyObject *tmp_slice_source_61;
    PyObject *tmp_slice_source_62;
    PyObject *tmp_slice_source_63;
    PyObject *tmp_slice_source_64;
    PyObject *tmp_slice_source_65;
    PyObject *tmp_slice_source_66;
    PyObject *tmp_slice_source_67;
    PyObject *tmp_slice_source_68;
    PyObject *tmp_slice_source_69;
    PyObject *tmp_slice_source_70;
    PyObject *tmp_slice_source_71;
    PyObject *tmp_slice_source_72;
    PyObject *tmp_slice_source_73;
    PyObject *tmp_slice_source_74;
    PyObject *tmp_slice_source_75;
    PyObject *tmp_slice_source_76;
    PyObject *tmp_slice_source_77;
    PyObject *tmp_slice_source_78;
    PyObject *tmp_slice_source_79;
    PyObject *tmp_slice_source_80;
    PyObject *tmp_slice_source_81;
    PyObject *tmp_slice_source_82;
    PyObject *tmp_slice_source_83;
    PyObject *tmp_slice_source_84;
    PyObject *tmp_slice_source_85;
    PyObject *tmp_slice_source_86;
    PyObject *tmp_slice_source_87;
    PyObject *tmp_slice_source_88;
    PyObject *tmp_slice_source_89;
    PyObject *tmp_slice_source_90;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    PyObject *tmp_slice_upper_4;
    PyObject *tmp_slice_upper_5;
    PyObject *tmp_slice_upper_6;
    PyObject *tmp_slice_upper_7;
    PyObject *tmp_slice_upper_8;
    PyObject *tmp_slice_upper_9;
    PyObject *tmp_slice_upper_10;
    PyObject *tmp_slice_upper_11;
    PyObject *tmp_slice_upper_12;
    PyObject *tmp_slice_upper_13;
    PyObject *tmp_slice_upper_14;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_6;
    Py_ssize_t tmp_sliceslicedel_index_lower_7;
    Py_ssize_t tmp_sliceslicedel_index_lower_8;
    Py_ssize_t tmp_sliceslicedel_index_lower_9;
    Py_ssize_t tmp_sliceslicedel_index_lower_10;
    Py_ssize_t tmp_sliceslicedel_index_lower_11;
    Py_ssize_t tmp_sliceslicedel_index_lower_12;
    Py_ssize_t tmp_sliceslicedel_index_lower_13;
    Py_ssize_t tmp_sliceslicedel_index_lower_14;
    Py_ssize_t tmp_sliceslicedel_index_lower_15;
    Py_ssize_t tmp_sliceslicedel_index_lower_16;
    Py_ssize_t tmp_sliceslicedel_index_lower_17;
    Py_ssize_t tmp_sliceslicedel_index_lower_18;
    Py_ssize_t tmp_sliceslicedel_index_lower_19;
    Py_ssize_t tmp_sliceslicedel_index_lower_20;
    Py_ssize_t tmp_sliceslicedel_index_lower_21;
    Py_ssize_t tmp_sliceslicedel_index_lower_22;
    Py_ssize_t tmp_sliceslicedel_index_lower_23;
    Py_ssize_t tmp_sliceslicedel_index_lower_24;
    Py_ssize_t tmp_sliceslicedel_index_lower_25;
    Py_ssize_t tmp_sliceslicedel_index_lower_26;
    Py_ssize_t tmp_sliceslicedel_index_lower_27;
    Py_ssize_t tmp_sliceslicedel_index_lower_28;
    Py_ssize_t tmp_sliceslicedel_index_lower_29;
    Py_ssize_t tmp_sliceslicedel_index_lower_30;
    Py_ssize_t tmp_sliceslicedel_index_lower_31;
    Py_ssize_t tmp_sliceslicedel_index_lower_32;
    Py_ssize_t tmp_sliceslicedel_index_lower_33;
    Py_ssize_t tmp_sliceslicedel_index_lower_34;
    Py_ssize_t tmp_sliceslicedel_index_lower_35;
    Py_ssize_t tmp_sliceslicedel_index_lower_36;
    Py_ssize_t tmp_sliceslicedel_index_lower_37;
    Py_ssize_t tmp_sliceslicedel_index_lower_38;
    Py_ssize_t tmp_sliceslicedel_index_lower_39;
    Py_ssize_t tmp_sliceslicedel_index_lower_40;
    Py_ssize_t tmp_sliceslicedel_index_lower_41;
    Py_ssize_t tmp_sliceslicedel_index_lower_42;
    Py_ssize_t tmp_sliceslicedel_index_lower_43;
    Py_ssize_t tmp_sliceslicedel_index_lower_44;
    Py_ssize_t tmp_sliceslicedel_index_lower_45;
    Py_ssize_t tmp_sliceslicedel_index_lower_46;
    Py_ssize_t tmp_sliceslicedel_index_lower_47;
    Py_ssize_t tmp_sliceslicedel_index_lower_48;
    Py_ssize_t tmp_sliceslicedel_index_lower_49;
    Py_ssize_t tmp_sliceslicedel_index_lower_50;
    Py_ssize_t tmp_sliceslicedel_index_lower_51;
    Py_ssize_t tmp_sliceslicedel_index_lower_52;
    Py_ssize_t tmp_sliceslicedel_index_lower_53;
    Py_ssize_t tmp_sliceslicedel_index_lower_54;
    Py_ssize_t tmp_sliceslicedel_index_lower_55;
    Py_ssize_t tmp_sliceslicedel_index_lower_56;
    Py_ssize_t tmp_sliceslicedel_index_lower_57;
    Py_ssize_t tmp_sliceslicedel_index_lower_58;
    Py_ssize_t tmp_sliceslicedel_index_lower_59;
    Py_ssize_t tmp_sliceslicedel_index_lower_60;
    Py_ssize_t tmp_sliceslicedel_index_lower_61;
    Py_ssize_t tmp_sliceslicedel_index_lower_62;
    Py_ssize_t tmp_sliceslicedel_index_lower_63;
    Py_ssize_t tmp_sliceslicedel_index_lower_64;
    Py_ssize_t tmp_sliceslicedel_index_lower_65;
    Py_ssize_t tmp_sliceslicedel_index_lower_66;
    Py_ssize_t tmp_sliceslicedel_index_lower_67;
    Py_ssize_t tmp_sliceslicedel_index_lower_68;
    Py_ssize_t tmp_sliceslicedel_index_lower_69;
    Py_ssize_t tmp_sliceslicedel_index_lower_70;
    Py_ssize_t tmp_sliceslicedel_index_lower_71;
    Py_ssize_t tmp_sliceslicedel_index_lower_72;
    Py_ssize_t tmp_sliceslicedel_index_lower_73;
    Py_ssize_t tmp_sliceslicedel_index_lower_74;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscribed_name_6;
    PyObject *tmp_subscribed_name_7;
    PyObject *tmp_subscribed_name_8;
    PyObject *tmp_subscribed_name_9;
    PyObject *tmp_subscribed_name_10;
    PyObject *tmp_subscribed_name_11;
    PyObject *tmp_subscribed_name_12;
    PyObject *tmp_subscribed_name_13;
    PyObject *tmp_subscribed_name_14;
    PyObject *tmp_subscribed_name_15;
    PyObject *tmp_subscribed_name_16;
    PyObject *tmp_subscribed_name_17;
    PyObject *tmp_subscribed_name_18;
    PyObject *tmp_subscribed_name_19;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_subscript_name_6;
    PyObject *tmp_subscript_name_7;
    PyObject *tmp_subscript_name_8;
    PyObject *tmp_subscript_name_9;
    PyObject *tmp_subscript_name_10;
    PyObject *tmp_subscript_name_11;
    PyObject *tmp_subscript_name_12;
    PyObject *tmp_subscript_name_13;
    PyObject *tmp_subscript_name_14;
    PyObject *tmp_subscript_name_15;
    PyObject *tmp_subscript_name_16;
    PyObject *tmp_subscript_name_17;
    PyObject *tmp_subscript_name_18;
    PyObject *tmp_subscript_name_19;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_xrange_high_1;
    PyObject *tmp_xrange_low_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_ccfa7c786e79bfc49a82689d5dcf8f55, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_word;

    tmp_source_name_1 = par_self;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stopwords );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 651;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_assign_source_1 = Py_False;
    assert( var_step3_success == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_step3_success = tmp_assign_source_1;

    tmp_called_instance_1 = par_word;

    frame_function->f_lineno = 656;
    tmp_assign_source_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_lower );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 656;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_2;
        Py_DECREF( old );
    }

    // Tried code:
    tmp_source_name_2 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__r1r2_standard );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 658;
        goto try_except_handler_2;
    }
    tmp_args_element_name_1 = par_word;

    tmp_source_name_3 = par_self;

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__FinnishStemmer__vowels );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 658;
        goto try_except_handler_2;
    }
    frame_function->f_lineno = 658;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 658;
        goto try_except_handler_2;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 658;
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 658;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 658;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;

    assert( var_r1 == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var_r1 = tmp_assign_source_6;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;

    assert( var_r2 == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var_r2 = tmp_assign_source_7;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_4 = par_self;

    tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__FinnishStemmer__step1_suffixes );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 661;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 661;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_8;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_9 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 661;
            goto try_except_handler_4;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    tmp_assign_source_10 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_10;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_2 = var_r1;

    tmp_args_element_name_3 = var_suffix;

    frame_function->f_lineno = 662;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_cond_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 662;
        goto try_except_handler_4;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 662;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_compare_left_2 = var_suffix;

    tmp_compare_right_2 = const_unicode_plain_sti;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 663;
        goto try_except_handler_4;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_compare_left_3 = var_suffix;

    tmp_compare_right_3 = var_r2;

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = -3;
    tmp_slice_source_1 = par_word;

    tmp_assign_source_11 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 665;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_11;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = -3;
    tmp_slice_source_2 = var_r1;

    tmp_assign_source_12 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 666;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_12;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -3;
    tmp_slice_source_3 = var_r2;

    tmp_assign_source_13 = LOOKUP_INDEX_SLICE( tmp_slice_source_3, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 667;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_13;
        Py_DECREF( old );
    }

    branch_no_4:;
    goto branch_end_3;
    branch_no_3:;
    tmp_subscribed_name_1 = par_word;

    tmp_len_arg_1 = var_suffix;

    tmp_operand_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;
        goto try_except_handler_4;
    }
    tmp_left_name_1 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;
        goto try_except_handler_4;
    }
    tmp_right_name_1 = const_int_pos_1;
    tmp_subscript_name_1 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_subscript_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;
        goto try_except_handler_4;
    }
    tmp_compare_left_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_compare_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;
        goto try_except_handler_4;
    }
    tmp_compare_right_4 = const_unicode_digest_38dcfca46c19c228cb9d722e84c91dad;
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_3 == -1) );
    Py_DECREF( tmp_compare_left_4 );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_slice_source_4 = par_word;

    tmp_len_arg_2 = var_suffix;

    tmp_operand_name_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 670;
        goto try_except_handler_4;
    }
    tmp_slice_upper_1 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_slice_upper_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 670;
        goto try_except_handler_4;
    }
    tmp_assign_source_14 = LOOKUP_SLICE( tmp_slice_source_4, Py_None, tmp_slice_upper_1 );
    Py_DECREF( tmp_slice_upper_1 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 670;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_14;
        Py_DECREF( old );
    }

    tmp_slice_source_5 = var_r1;

    tmp_len_arg_3 = var_suffix;

    tmp_operand_name_3 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_operand_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 671;
        goto try_except_handler_4;
    }
    tmp_slice_upper_2 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_slice_upper_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 671;
        goto try_except_handler_4;
    }
    tmp_assign_source_15 = LOOKUP_SLICE( tmp_slice_source_5, Py_None, tmp_slice_upper_2 );
    Py_DECREF( tmp_slice_upper_2 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 671;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_15;
        Py_DECREF( old );
    }

    tmp_slice_source_6 = var_r2;

    tmp_len_arg_4 = var_suffix;

    tmp_operand_name_4 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_operand_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 672;
        goto try_except_handler_4;
    }
    tmp_slice_upper_3 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_4 );
    Py_DECREF( tmp_operand_name_4 );
    if ( tmp_slice_upper_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 672;
        goto try_except_handler_4;
    }
    tmp_assign_source_16 = LOOKUP_SLICE( tmp_slice_source_6, Py_None, tmp_slice_upper_3 );
    Py_DECREF( tmp_slice_upper_3 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 672;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_16;
        Py_DECREF( old );
    }

    branch_no_5:;
    branch_end_3:;
    goto loop_end_1;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 661;
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_source_name_5 = par_self;

    tmp_iter_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__FinnishStemmer__step2_suffixes );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 676;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_17 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 676;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_17;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_18 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_18 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 676;
            goto try_except_handler_5;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_18;
        Py_XDECREF( old );
    }

    tmp_assign_source_19 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_19;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_3 = var_r1;

    if ( tmp_called_instance_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 677;
        goto try_except_handler_5;
    }

    tmp_args_element_name_4 = var_suffix;

    frame_function->f_lineno = 677;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_cond_value_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 677;
        goto try_except_handler_5;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 677;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_compare_left_5 = var_suffix;

    tmp_compare_right_5 = const_unicode_plain_si;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 678;
        goto try_except_handler_5;
    }
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_subscribed_name_2 = par_word;

    if ( tmp_subscribed_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 679;
        goto try_except_handler_5;
    }

    tmp_subscript_name_2 = const_int_neg_3;
    tmp_compare_left_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_compare_left_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 679;
        goto try_except_handler_5;
    }
    tmp_compare_right_6 = const_unicode_plain_k;
    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_6 );

        exception_lineno = 679;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_compare_left_6 );
    if ( tmp_cmp_NotEq_1 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = -2;
    tmp_slice_source_7 = par_word;

    if ( tmp_slice_source_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 680;
        goto try_except_handler_5;
    }

    tmp_assign_source_20 = LOOKUP_INDEX_SLICE( tmp_slice_source_7, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 680;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_20;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = -2;
    tmp_slice_source_8 = var_r1;

    if ( tmp_slice_source_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 681;
        goto try_except_handler_5;
    }

    tmp_assign_source_21 = LOOKUP_INDEX_SLICE( tmp_slice_source_8, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 681;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_21;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_6 = 0;
    tmp_slice_index_upper_6 = -2;
    tmp_slice_source_9 = var_r2;

    if ( tmp_slice_source_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 682;
        goto try_except_handler_5;
    }

    tmp_assign_source_22 = LOOKUP_INDEX_SLICE( tmp_slice_source_9, tmp_sliceslicedel_index_lower_6, tmp_slice_index_upper_6 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 682;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_22;
        Py_XDECREF( old );
    }

    branch_no_8:;
    goto branch_end_7;
    branch_no_7:;
    tmp_compare_left_7 = var_suffix;

    tmp_compare_right_7 = const_unicode_plain_ni;
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 684;
        goto try_except_handler_5;
    }
    if ( tmp_cmp_Eq_3 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_sliceslicedel_index_lower_7 = 0;
    tmp_slice_index_upper_7 = -2;
    tmp_slice_source_10 = par_word;

    if ( tmp_slice_source_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 685;
        goto try_except_handler_5;
    }

    tmp_assign_source_23 = LOOKUP_INDEX_SLICE( tmp_slice_source_10, tmp_sliceslicedel_index_lower_7, tmp_slice_index_upper_7 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 685;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_23;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_8 = 0;
    tmp_slice_index_upper_8 = -2;
    tmp_slice_source_11 = var_r1;

    if ( tmp_slice_source_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 686;
        goto try_except_handler_5;
    }

    tmp_assign_source_24 = LOOKUP_INDEX_SLICE( tmp_slice_source_11, tmp_sliceslicedel_index_lower_8, tmp_slice_index_upper_8 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 686;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_24;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_9 = 0;
    tmp_slice_index_upper_9 = -2;
    tmp_slice_source_12 = var_r2;

    if ( tmp_slice_source_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 687;
        goto try_except_handler_5;
    }

    tmp_assign_source_25 = LOOKUP_INDEX_SLICE( tmp_slice_source_12, tmp_sliceslicedel_index_lower_9, tmp_slice_index_upper_9 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 687;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_25;
        Py_XDECREF( old );
    }

    tmp_called_instance_4 = par_word;

    frame_function->f_lineno = 688;
    tmp_cond_value_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_kse_tuple, 0 ) );

    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 688;
        goto try_except_handler_5;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 688;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_source_name_6 = const_unicode_empty;
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_join );
    assert( tmp_called_name_2 != NULL );
    tmp_args_element_name_5 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_10 = 0;
    tmp_slice_index_upper_10 = -3;
    tmp_slice_source_13 = par_word;

    tmp_tuple_element_1 = LOOKUP_INDEX_SLICE( tmp_slice_source_13, tmp_sliceslicedel_index_lower_10, tmp_slice_index_upper_10 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 689;
        goto try_except_handler_5;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_5, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_unicode_plain_ksi;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_5, 1, tmp_tuple_element_1 );
    frame_function->f_lineno = 689;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_assign_source_26 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 689;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_26;
        Py_DECREF( old );
    }

    branch_no_10:;
    tmp_called_instance_5 = var_r1;

    frame_function->f_lineno = 691;
    tmp_cond_value_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_kse_tuple, 0 ) );

    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 691;
        goto try_except_handler_5;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        exception_lineno = 691;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_source_name_7 = const_unicode_empty;
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_join );
    assert( tmp_called_name_3 != NULL );
    tmp_args_element_name_6 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_11 = 0;
    tmp_slice_index_upper_11 = -3;
    tmp_slice_source_14 = var_r1;

    tmp_tuple_element_2 = LOOKUP_INDEX_SLICE( tmp_slice_source_14, tmp_sliceslicedel_index_lower_11, tmp_slice_index_upper_11 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_6 );

        exception_lineno = 692;
        goto try_except_handler_5;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_6, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = const_unicode_plain_ksi;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_6, 1, tmp_tuple_element_2 );
    frame_function->f_lineno = 692;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_assign_source_27 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 692;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_27;
        Py_DECREF( old );
    }

    branch_no_11:;
    tmp_called_instance_6 = var_r2;

    frame_function->f_lineno = 694;
    tmp_cond_value_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_kse_tuple, 0 ) );

    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 694;
        goto try_except_handler_5;
    }
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        exception_lineno = 694;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_source_name_8 = const_unicode_empty;
    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_join );
    assert( tmp_called_name_4 != NULL );
    tmp_args_element_name_7 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_12 = 0;
    tmp_slice_index_upper_12 = -3;
    tmp_slice_source_15 = var_r2;

    tmp_tuple_element_3 = LOOKUP_INDEX_SLICE( tmp_slice_source_15, tmp_sliceslicedel_index_lower_12, tmp_slice_index_upper_12 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_7 );

        exception_lineno = 695;
        goto try_except_handler_5;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_7, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = const_unicode_plain_ksi;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_element_name_7, 1, tmp_tuple_element_3 );
    frame_function->f_lineno = 695;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_assign_source_28 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 695;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_28;
        Py_DECREF( old );
    }

    branch_no_12:;
    goto branch_end_9;
    branch_no_9:;
    tmp_compare_left_8 = var_suffix;

    tmp_compare_right_8 = const_unicode_plain_an;
    tmp_cmp_Eq_4 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_8, tmp_compare_right_8 );
    if ( tmp_cmp_Eq_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 697;
        goto try_except_handler_5;
    }
    if ( tmp_cmp_Eq_4 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_sliceslicedel_index_lower_13 = -4;
    tmp_slice_index_upper_13 = -2;
    tmp_slice_source_16 = par_word;

    if ( tmp_slice_source_16 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 698;
        goto try_except_handler_5;
    }

    tmp_compexpr_left_1 = LOOKUP_INDEX_SLICE( tmp_slice_source_16, tmp_sliceslicedel_index_lower_13, tmp_slice_index_upper_13 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 698;
        goto try_except_handler_5;
    }
    tmp_compexpr_right_1 = const_tuple_unicode_plain_ta_unicode_plain_na_tuple;
    tmp_or_left_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 698;
        goto try_except_handler_5;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    assert( !(tmp_or_left_truth_1 == -1) );
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_sliceslicedel_index_lower_14 = -5;
    tmp_slice_index_upper_14 = -2;
    tmp_slice_source_17 = par_word;

    if ( tmp_slice_source_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 699;
        goto try_except_handler_5;
    }

    tmp_compexpr_left_2 = LOOKUP_INDEX_SLICE( tmp_slice_source_17, tmp_sliceslicedel_index_lower_14, tmp_slice_index_upper_14 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 699;
        goto try_except_handler_5;
    }
    tmp_compexpr_right_2 = const_tuple_b779db4c86c3fc5363d8606238f57437_tuple;
    tmp_or_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 699;
        goto try_except_handler_5;
    }
    tmp_cond_value_6 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_6 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    assert( !(tmp_cond_truth_6 == -1) );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_sliceslicedel_index_lower_15 = 0;
    tmp_slice_index_upper_15 = -2;
    tmp_slice_source_18 = par_word;

    if ( tmp_slice_source_18 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 700;
        goto try_except_handler_5;
    }

    tmp_assign_source_29 = LOOKUP_INDEX_SLICE( tmp_slice_source_18, tmp_sliceslicedel_index_lower_15, tmp_slice_index_upper_15 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 700;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_29;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_16 = 0;
    tmp_slice_index_upper_16 = -2;
    tmp_slice_source_19 = var_r1;

    if ( tmp_slice_source_19 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 701;
        goto try_except_handler_5;
    }

    tmp_assign_source_30 = LOOKUP_INDEX_SLICE( tmp_slice_source_19, tmp_sliceslicedel_index_lower_16, tmp_slice_index_upper_16 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 701;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_30;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_17 = 0;
    tmp_slice_index_upper_17 = -2;
    tmp_slice_source_20 = var_r2;

    if ( tmp_slice_source_20 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 702;
        goto try_except_handler_5;
    }

    tmp_assign_source_31 = LOOKUP_INDEX_SLICE( tmp_slice_source_20, tmp_sliceslicedel_index_lower_17, tmp_slice_index_upper_17 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_31;
        Py_XDECREF( old );
    }

    branch_no_14:;
    goto branch_end_13;
    branch_no_13:;
    tmp_compare_left_9 = var_suffix;

    tmp_compare_right_9 = const_unicode_digest_9273dfd762661b0bce44d5ca0a733faa;
    tmp_cmp_Eq_5 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_9, tmp_compare_right_9 );
    if ( tmp_cmp_Eq_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 704;
        goto try_except_handler_5;
    }
    if ( tmp_cmp_Eq_5 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_sliceslicedel_index_lower_18 = -4;
    tmp_slice_index_upper_18 = -2;
    tmp_slice_source_21 = par_word;

    if ( tmp_slice_source_21 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 705;
        goto try_except_handler_5;
    }

    tmp_compexpr_left_3 = LOOKUP_INDEX_SLICE( tmp_slice_source_21, tmp_sliceslicedel_index_lower_18, tmp_slice_index_upper_18 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 705;
        goto try_except_handler_5;
    }
    tmp_compexpr_right_3 = const_tuple_a55a0316c7ece74c8344bc9c2b75b9f6_tuple;
    tmp_or_left_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    if ( tmp_or_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 705;
        goto try_except_handler_5;
    }
    tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
    assert( !(tmp_or_left_truth_2 == -1) );
    if ( tmp_or_left_truth_2 == 1 )
    {
        goto or_left_2;
    }
    else
    {
        goto or_right_2;
    }
    or_right_2:;
    tmp_sliceslicedel_index_lower_19 = -5;
    tmp_slice_index_upper_19 = -2;
    tmp_slice_source_22 = par_word;

    if ( tmp_slice_source_22 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 706;
        goto try_except_handler_5;
    }

    tmp_compexpr_left_4 = LOOKUP_INDEX_SLICE( tmp_slice_source_22, tmp_sliceslicedel_index_lower_19, tmp_slice_index_upper_19 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 706;
        goto try_except_handler_5;
    }
    tmp_compexpr_right_4 = const_tuple_e45c40ce2ad015b19a2b8e10309e6bc9_tuple;
    tmp_or_right_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_or_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 706;
        goto try_except_handler_5;
    }
    tmp_cond_value_7 = tmp_or_right_value_2;
    goto or_end_2;
    or_left_2:;
    tmp_cond_value_7 = tmp_or_left_value_2;
    or_end_2:;
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    assert( !(tmp_cond_truth_7 == -1) );
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_sliceslicedel_index_lower_20 = 0;
    tmp_slice_index_upper_20 = -2;
    tmp_slice_source_23 = par_word;

    if ( tmp_slice_source_23 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 708;
        goto try_except_handler_5;
    }

    tmp_assign_source_32 = LOOKUP_INDEX_SLICE( tmp_slice_source_23, tmp_sliceslicedel_index_lower_20, tmp_slice_index_upper_20 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 708;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_32;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_21 = 0;
    tmp_slice_index_upper_21 = -2;
    tmp_slice_source_24 = var_r1;

    if ( tmp_slice_source_24 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 709;
        goto try_except_handler_5;
    }

    tmp_assign_source_33 = LOOKUP_INDEX_SLICE( tmp_slice_source_24, tmp_sliceslicedel_index_lower_21, tmp_slice_index_upper_21 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 709;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_33;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_22 = 0;
    tmp_slice_index_upper_22 = -2;
    tmp_slice_source_25 = var_r2;

    if ( tmp_slice_source_25 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 710;
        goto try_except_handler_5;
    }

    tmp_assign_source_34 = LOOKUP_INDEX_SLICE( tmp_slice_source_25, tmp_sliceslicedel_index_lower_22, tmp_slice_index_upper_22 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 710;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_34;
        Py_XDECREF( old );
    }

    branch_no_16:;
    goto branch_end_15;
    branch_no_15:;
    tmp_compare_left_10 = var_suffix;

    tmp_compare_right_10 = const_unicode_plain_en;
    tmp_cmp_Eq_6 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_10, tmp_compare_right_10 );
    if ( tmp_cmp_Eq_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 712;
        goto try_except_handler_5;
    }
    if ( tmp_cmp_Eq_6 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_sliceslicedel_index_lower_23 = -5;
    tmp_slice_index_upper_23 = -2;
    tmp_slice_source_26 = par_word;

    if ( tmp_slice_source_26 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 713;
        goto try_except_handler_5;
    }

    tmp_compare_left_11 = LOOKUP_INDEX_SLICE( tmp_slice_source_26, tmp_sliceslicedel_index_lower_23, tmp_slice_index_upper_23 );
    if ( tmp_compare_left_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 713;
        goto try_except_handler_5;
    }
    tmp_compare_right_11 = const_tuple_unicode_plain_lle_unicode_plain_ine_tuple;
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    assert( !(tmp_cmp_In_4 == -1) );
    Py_DECREF( tmp_compare_left_11 );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_sliceslicedel_index_lower_24 = 0;
    tmp_slice_index_upper_24 = -2;
    tmp_slice_source_27 = par_word;

    if ( tmp_slice_source_27 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 714;
        goto try_except_handler_5;
    }

    tmp_assign_source_35 = LOOKUP_INDEX_SLICE( tmp_slice_source_27, tmp_sliceslicedel_index_lower_24, tmp_slice_index_upper_24 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 714;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_35;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_25 = 0;
    tmp_slice_index_upper_25 = -2;
    tmp_slice_source_28 = var_r1;

    if ( tmp_slice_source_28 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 715;
        goto try_except_handler_5;
    }

    tmp_assign_source_36 = LOOKUP_INDEX_SLICE( tmp_slice_source_28, tmp_sliceslicedel_index_lower_25, tmp_slice_index_upper_25 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 715;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_36;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_26 = 0;
    tmp_slice_index_upper_26 = -2;
    tmp_slice_source_29 = var_r2;

    if ( tmp_slice_source_29 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 716;
        goto try_except_handler_5;
    }

    tmp_assign_source_37 = LOOKUP_INDEX_SLICE( tmp_slice_source_29, tmp_sliceslicedel_index_lower_26, tmp_slice_index_upper_26 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 716;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_37;
        Py_XDECREF( old );
    }

    branch_no_18:;
    goto branch_end_17;
    branch_no_17:;
    tmp_sliceslicedel_index_lower_27 = 0;
    tmp_slice_index_upper_27 = -3;
    tmp_slice_source_30 = par_word;

    if ( tmp_slice_source_30 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 718;
        goto try_except_handler_5;
    }

    tmp_assign_source_38 = LOOKUP_INDEX_SLICE( tmp_slice_source_30, tmp_sliceslicedel_index_lower_27, tmp_slice_index_upper_27 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 718;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_38;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_28 = 0;
    tmp_slice_index_upper_28 = -3;
    tmp_slice_source_31 = var_r1;

    if ( tmp_slice_source_31 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 719;
        goto try_except_handler_5;
    }

    tmp_assign_source_39 = LOOKUP_INDEX_SLICE( tmp_slice_source_31, tmp_sliceslicedel_index_lower_28, tmp_slice_index_upper_28 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 719;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_39;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_29 = 0;
    tmp_slice_index_upper_29 = -3;
    tmp_slice_source_32 = var_r2;

    if ( tmp_slice_source_32 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 720;
        goto try_except_handler_5;
    }

    tmp_assign_source_40 = LOOKUP_INDEX_SLICE( tmp_slice_source_32, tmp_sliceslicedel_index_lower_29, tmp_slice_index_upper_29 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 720;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_40;
        Py_XDECREF( old );
    }

    branch_end_17:;
    branch_end_15:;
    branch_end_13:;
    branch_end_9:;
    branch_end_7:;
    goto loop_end_2;
    branch_no_6:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 676;
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_source_name_9 = par_self;

    tmp_iter_arg_4 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__FinnishStemmer__step3_suffixes );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 724;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_41 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 724;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_41;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_42 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_42 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 724;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_42;
        Py_XDECREF( old );
    }

    tmp_assign_source_43 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_43;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_7 = var_r1;

    if ( tmp_called_instance_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 725;
        goto try_except_handler_6;
    }

    tmp_args_element_name_8 = var_suffix;

    frame_function->f_lineno = 725;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_cond_value_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 725;
        goto try_except_handler_6;
    }
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        exception_lineno = 725;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_compare_left_12 = var_suffix;

    tmp_compare_right_12 = const_tuple_d636691f4239271d257787e7cd8440ef_tuple;
    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    assert( !(tmp_cmp_In_5 == -1) );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_compexpr_left_5 = var_suffix;

    tmp_compexpr_right_5 = const_unicode_plain_han;
    tmp_and_left_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 728;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 728;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_subscribed_name_3 = par_word;

    if ( tmp_subscribed_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 728;
        goto try_except_handler_6;
    }

    tmp_subscript_name_3 = const_int_neg_4;
    tmp_compexpr_left_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_compexpr_left_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 728;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_6 = const_unicode_plain_a;
    tmp_and_right_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_6, tmp_compexpr_right_6 );
    Py_DECREF( tmp_compexpr_left_6 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 728;
        goto try_except_handler_6;
    }
    tmp_or_left_value_3 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_or_left_value_3 = tmp_and_left_value_1;
    and_end_1:;
    tmp_or_left_truth_3 = CHECK_IF_TRUE( tmp_or_left_value_3 );
    if ( tmp_or_left_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_3 );

        exception_lineno = 733;
        goto try_except_handler_6;
    }
    if ( tmp_or_left_truth_3 == 1 )
    {
        goto or_left_3;
    }
    else
    {
        goto or_right_3;
    }
    or_right_3:;
    Py_DECREF( tmp_or_left_value_3 );
    tmp_compexpr_left_7 = var_suffix;

    tmp_compexpr_right_7 = const_unicode_plain_hen;
    tmp_and_left_value_2 = RICH_COMPARE_EQ( tmp_compexpr_left_7, tmp_compexpr_right_7 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 729;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    if ( tmp_and_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_2 );

        exception_lineno = 729;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    Py_DECREF( tmp_and_left_value_2 );
    tmp_subscribed_name_4 = par_word;

    if ( tmp_subscribed_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 729;
        goto try_except_handler_6;
    }

    tmp_subscript_name_4 = const_int_neg_4;
    tmp_compexpr_left_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_compexpr_left_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 729;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_8 = const_unicode_plain_e;
    tmp_and_right_value_2 = RICH_COMPARE_EQ( tmp_compexpr_left_8, tmp_compexpr_right_8 );
    Py_DECREF( tmp_compexpr_left_8 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 729;
        goto try_except_handler_6;
    }
    tmp_or_left_value_4 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_or_left_value_4 = tmp_and_left_value_2;
    and_end_2:;
    tmp_or_left_truth_4 = CHECK_IF_TRUE( tmp_or_left_value_4 );
    if ( tmp_or_left_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_4 );

        exception_lineno = 733;
        goto try_except_handler_6;
    }
    if ( tmp_or_left_truth_4 == 1 )
    {
        goto or_left_4;
    }
    else
    {
        goto or_right_4;
    }
    or_right_4:;
    Py_DECREF( tmp_or_left_value_4 );
    tmp_compexpr_left_9 = var_suffix;

    tmp_compexpr_right_9 = const_unicode_plain_hin;
    tmp_and_left_value_3 = RICH_COMPARE_EQ( tmp_compexpr_left_9, tmp_compexpr_right_9 );
    if ( tmp_and_left_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 730;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_3 = CHECK_IF_TRUE( tmp_and_left_value_3 );
    if ( tmp_and_left_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_3 );

        exception_lineno = 730;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_3 == 1 )
    {
        goto and_right_3;
    }
    else
    {
        goto and_left_3;
    }
    and_right_3:;
    Py_DECREF( tmp_and_left_value_3 );
    tmp_subscribed_name_5 = par_word;

    if ( tmp_subscribed_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 730;
        goto try_except_handler_6;
    }

    tmp_subscript_name_5 = const_int_neg_4;
    tmp_compexpr_left_10 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    if ( tmp_compexpr_left_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 730;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_10 = const_unicode_plain_i;
    tmp_and_right_value_3 = RICH_COMPARE_EQ( tmp_compexpr_left_10, tmp_compexpr_right_10 );
    Py_DECREF( tmp_compexpr_left_10 );
    if ( tmp_and_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 730;
        goto try_except_handler_6;
    }
    tmp_or_left_value_5 = tmp_and_right_value_3;
    goto and_end_3;
    and_left_3:;
    tmp_or_left_value_5 = tmp_and_left_value_3;
    and_end_3:;
    tmp_or_left_truth_5 = CHECK_IF_TRUE( tmp_or_left_value_5 );
    if ( tmp_or_left_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_5 );

        exception_lineno = 733;
        goto try_except_handler_6;
    }
    if ( tmp_or_left_truth_5 == 1 )
    {
        goto or_left_5;
    }
    else
    {
        goto or_right_5;
    }
    or_right_5:;
    Py_DECREF( tmp_or_left_value_5 );
    tmp_compexpr_left_11 = var_suffix;

    tmp_compexpr_right_11 = const_unicode_plain_hon;
    tmp_and_left_value_4 = RICH_COMPARE_EQ( tmp_compexpr_left_11, tmp_compexpr_right_11 );
    if ( tmp_and_left_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 731;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_4 = CHECK_IF_TRUE( tmp_and_left_value_4 );
    if ( tmp_and_left_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_4 );

        exception_lineno = 731;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_4 == 1 )
    {
        goto and_right_4;
    }
    else
    {
        goto and_left_4;
    }
    and_right_4:;
    Py_DECREF( tmp_and_left_value_4 );
    tmp_subscribed_name_6 = par_word;

    if ( tmp_subscribed_name_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 731;
        goto try_except_handler_6;
    }

    tmp_subscript_name_6 = const_int_neg_4;
    tmp_compexpr_left_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
    if ( tmp_compexpr_left_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 731;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_12 = const_unicode_plain_o;
    tmp_and_right_value_4 = RICH_COMPARE_EQ( tmp_compexpr_left_12, tmp_compexpr_right_12 );
    Py_DECREF( tmp_compexpr_left_12 );
    if ( tmp_and_right_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 731;
        goto try_except_handler_6;
    }
    tmp_or_left_value_6 = tmp_and_right_value_4;
    goto and_end_4;
    and_left_4:;
    tmp_or_left_value_6 = tmp_and_left_value_4;
    and_end_4:;
    tmp_or_left_truth_6 = CHECK_IF_TRUE( tmp_or_left_value_6 );
    if ( tmp_or_left_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_6 );

        exception_lineno = 733;
        goto try_except_handler_6;
    }
    if ( tmp_or_left_truth_6 == 1 )
    {
        goto or_left_6;
    }
    else
    {
        goto or_right_6;
    }
    or_right_6:;
    Py_DECREF( tmp_or_left_value_6 );
    tmp_compexpr_left_13 = var_suffix;

    tmp_compexpr_right_13 = const_unicode_digest_9fc494b9e47f1ff7a0348a3457292ff5;
    tmp_and_left_value_5 = RICH_COMPARE_EQ( tmp_compexpr_left_13, tmp_compexpr_right_13 );
    if ( tmp_and_left_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 732;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_5 = CHECK_IF_TRUE( tmp_and_left_value_5 );
    if ( tmp_and_left_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_5 );

        exception_lineno = 732;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_5 == 1 )
    {
        goto and_right_5;
    }
    else
    {
        goto and_left_5;
    }
    and_right_5:;
    Py_DECREF( tmp_and_left_value_5 );
    tmp_subscribed_name_7 = par_word;

    if ( tmp_subscribed_name_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 732;
        goto try_except_handler_6;
    }

    tmp_subscript_name_7 = const_int_neg_4;
    tmp_compexpr_left_14 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_7 );
    if ( tmp_compexpr_left_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 732;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_14 = const_unicode_digest_20ff30c165c4f43f97c9f9d947a045d0;
    tmp_and_right_value_5 = RICH_COMPARE_EQ( tmp_compexpr_left_14, tmp_compexpr_right_14 );
    Py_DECREF( tmp_compexpr_left_14 );
    if ( tmp_and_right_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 732;
        goto try_except_handler_6;
    }
    tmp_or_left_value_7 = tmp_and_right_value_5;
    goto and_end_5;
    and_left_5:;
    tmp_or_left_value_7 = tmp_and_left_value_5;
    and_end_5:;
    tmp_or_left_truth_7 = CHECK_IF_TRUE( tmp_or_left_value_7 );
    if ( tmp_or_left_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_7 );

        exception_lineno = 733;
        goto try_except_handler_6;
    }
    if ( tmp_or_left_truth_7 == 1 )
    {
        goto or_left_7;
    }
    else
    {
        goto or_right_7;
    }
    or_right_7:;
    Py_DECREF( tmp_or_left_value_7 );
    tmp_compexpr_left_15 = var_suffix;

    tmp_compexpr_right_15 = const_unicode_digest_a9e8d2a2a8d68bee730286a6aab6c160;
    tmp_and_left_value_6 = RICH_COMPARE_EQ( tmp_compexpr_left_15, tmp_compexpr_right_15 );
    if ( tmp_and_left_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 733;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_6 = CHECK_IF_TRUE( tmp_and_left_value_6 );
    if ( tmp_and_left_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_6 );

        exception_lineno = 733;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_6 == 1 )
    {
        goto and_right_6;
    }
    else
    {
        goto and_left_6;
    }
    and_right_6:;
    Py_DECREF( tmp_and_left_value_6 );
    tmp_subscribed_name_8 = par_word;

    if ( tmp_subscribed_name_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 733;
        goto try_except_handler_6;
    }

    tmp_subscript_name_8 = const_int_neg_4;
    tmp_compexpr_left_16 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
    if ( tmp_compexpr_left_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 733;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_16 = const_unicode_digest_910b3064909c53702273cb45d3dac832;
    tmp_and_right_value_6 = RICH_COMPARE_EQ( tmp_compexpr_left_16, tmp_compexpr_right_16 );
    Py_DECREF( tmp_compexpr_left_16 );
    if ( tmp_and_right_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 733;
        goto try_except_handler_6;
    }
    tmp_or_right_value_7 = tmp_and_right_value_6;
    goto and_end_6;
    and_left_6:;
    tmp_or_right_value_7 = tmp_and_left_value_6;
    and_end_6:;
    tmp_or_right_value_6 = tmp_or_right_value_7;
    goto or_end_7;
    or_left_7:;
    tmp_or_right_value_6 = tmp_or_left_value_7;
    or_end_7:;
    tmp_or_right_value_5 = tmp_or_right_value_6;
    goto or_end_6;
    or_left_6:;
    tmp_or_right_value_5 = tmp_or_left_value_6;
    or_end_6:;
    tmp_or_right_value_4 = tmp_or_right_value_5;
    goto or_end_5;
    or_left_5:;
    tmp_or_right_value_4 = tmp_or_left_value_5;
    or_end_5:;
    tmp_or_right_value_3 = tmp_or_right_value_4;
    goto or_end_4;
    or_left_4:;
    tmp_or_right_value_3 = tmp_or_left_value_4;
    or_end_4:;
    tmp_cond_value_9 = tmp_or_right_value_3;
    goto or_end_3;
    or_left_3:;
    tmp_cond_value_9 = tmp_or_left_value_3;
    or_end_3:;
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        exception_lineno = 733;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_sliceslicedel_index_lower_30 = 0;
    tmp_slice_index_upper_30 = -3;
    tmp_slice_source_33 = par_word;

    if ( tmp_slice_source_33 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 734;
        goto try_except_handler_6;
    }

    tmp_assign_source_44 = LOOKUP_INDEX_SLICE( tmp_slice_source_33, tmp_sliceslicedel_index_lower_30, tmp_slice_index_upper_30 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 734;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_44;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_31 = 0;
    tmp_slice_index_upper_31 = -3;
    tmp_slice_source_34 = var_r1;

    if ( tmp_slice_source_34 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 735;
        goto try_except_handler_6;
    }

    tmp_assign_source_45 = LOOKUP_INDEX_SLICE( tmp_slice_source_34, tmp_sliceslicedel_index_lower_31, tmp_slice_index_upper_31 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 735;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_45;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_32 = 0;
    tmp_slice_index_upper_32 = -3;
    tmp_slice_source_35 = var_r2;

    if ( tmp_slice_source_35 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 736;
        goto try_except_handler_6;
    }

    tmp_assign_source_46 = LOOKUP_INDEX_SLICE( tmp_slice_source_35, tmp_sliceslicedel_index_lower_32, tmp_slice_index_upper_32 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 736;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_46;
        Py_XDECREF( old );
    }

    tmp_assign_source_47 = Py_True;
    {
        PyObject *old = var_step3_success;
        assert( old != NULL );
        var_step3_success = tmp_assign_source_47;
        Py_INCREF( var_step3_success );
        Py_DECREF( old );
    }

    branch_no_21:;
    goto branch_end_20;
    branch_no_20:;
    tmp_compare_left_13 = var_suffix;

    tmp_compare_right_13 = const_tuple_unicode_plain_siin_unicode_plain_den_unicode_plain_tten_tuple;
    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_13, tmp_compare_left_13 );
    assert( !(tmp_cmp_In_6 == -1) );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_subscribed_name_9 = par_word;

    if ( tmp_subscribed_name_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 740;
        goto try_except_handler_6;
    }

    tmp_len_arg_5 = var_suffix;

    tmp_operand_name_5 = BUILTIN_LEN( tmp_len_arg_5 );
    if ( tmp_operand_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;
        goto try_except_handler_6;
    }
    tmp_left_name_2 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_5 );
    Py_DECREF( tmp_operand_name_5 );
    if ( tmp_left_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;
        goto try_except_handler_6;
    }
    tmp_right_name_2 = const_int_pos_1;
    tmp_subscript_name_9 = BINARY_OPERATION_SUB( tmp_left_name_2, tmp_right_name_2 );
    Py_DECREF( tmp_left_name_2 );
    if ( tmp_subscript_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;
        goto try_except_handler_6;
    }
    tmp_compexpr_left_17 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_9, tmp_subscript_name_9 );
    Py_DECREF( tmp_subscript_name_9 );
    if ( tmp_compexpr_left_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_17 = const_unicode_plain_i;
    tmp_and_left_value_7 = RICH_COMPARE_EQ( tmp_compexpr_left_17, tmp_compexpr_right_17 );
    Py_DECREF( tmp_compexpr_left_17 );
    if ( tmp_and_left_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_7 = CHECK_IF_TRUE( tmp_and_left_value_7 );
    if ( tmp_and_left_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_7 );

        exception_lineno = 741;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_7 == 1 )
    {
        goto and_right_7;
    }
    else
    {
        goto and_left_7;
    }
    and_right_7:;
    Py_DECREF( tmp_and_left_value_7 );
    tmp_subscribed_name_10 = par_word;

    if ( tmp_subscribed_name_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 741;
        goto try_except_handler_6;
    }

    tmp_len_arg_6 = var_suffix;

    tmp_operand_name_6 = BUILTIN_LEN( tmp_len_arg_6 );
    if ( tmp_operand_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 741;
        goto try_except_handler_6;
    }
    tmp_left_name_3 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_6 );
    Py_DECREF( tmp_operand_name_6 );
    if ( tmp_left_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 741;
        goto try_except_handler_6;
    }
    tmp_right_name_3 = const_int_pos_2;
    tmp_subscript_name_10 = BINARY_OPERATION_SUB( tmp_left_name_3, tmp_right_name_3 );
    Py_DECREF( tmp_left_name_3 );
    if ( tmp_subscript_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 741;
        goto try_except_handler_6;
    }
    tmp_compexpr_left_18 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_10, tmp_subscript_name_10 );
    Py_DECREF( tmp_subscript_name_10 );
    if ( tmp_compexpr_left_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 741;
        goto try_except_handler_6;
    }
    tmp_source_name_10 = par_self;

    tmp_compexpr_right_18 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__FinnishStemmer__restricted_vowels );
    if ( tmp_compexpr_right_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_18 );

        exception_lineno = 741;
        goto try_except_handler_6;
    }
    tmp_and_right_value_7 = SEQUENCE_CONTAINS( tmp_compexpr_left_18, tmp_compexpr_right_18 );
    Py_DECREF( tmp_compexpr_left_18 );
    Py_DECREF( tmp_compexpr_right_18 );
    if ( tmp_and_right_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 741;
        goto try_except_handler_6;
    }
    Py_INCREF( tmp_and_right_value_7 );
    tmp_cond_value_10 = tmp_and_right_value_7;
    goto and_end_7;
    and_left_7:;
    tmp_cond_value_10 = tmp_and_left_value_7;
    and_end_7:;
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        exception_lineno = 741;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_slice_source_36 = par_word;

    if ( tmp_slice_source_36 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 742;
        goto try_except_handler_6;
    }

    tmp_len_arg_7 = var_suffix;

    tmp_operand_name_7 = BUILTIN_LEN( tmp_len_arg_7 );
    if ( tmp_operand_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 742;
        goto try_except_handler_6;
    }
    tmp_slice_upper_4 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_7 );
    Py_DECREF( tmp_operand_name_7 );
    if ( tmp_slice_upper_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 742;
        goto try_except_handler_6;
    }
    tmp_assign_source_48 = LOOKUP_SLICE( tmp_slice_source_36, Py_None, tmp_slice_upper_4 );
    Py_DECREF( tmp_slice_upper_4 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 742;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_48;
        Py_XDECREF( old );
    }

    tmp_slice_source_37 = var_r1;

    if ( tmp_slice_source_37 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 743;
        goto try_except_handler_6;
    }

    tmp_len_arg_8 = var_suffix;

    tmp_operand_name_8 = BUILTIN_LEN( tmp_len_arg_8 );
    if ( tmp_operand_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 743;
        goto try_except_handler_6;
    }
    tmp_slice_upper_5 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_8 );
    Py_DECREF( tmp_operand_name_8 );
    if ( tmp_slice_upper_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 743;
        goto try_except_handler_6;
    }
    tmp_assign_source_49 = LOOKUP_SLICE( tmp_slice_source_37, Py_None, tmp_slice_upper_5 );
    Py_DECREF( tmp_slice_upper_5 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 743;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_49;
        Py_XDECREF( old );
    }

    tmp_slice_source_38 = var_r2;

    if ( tmp_slice_source_38 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 744;
        goto try_except_handler_6;
    }

    tmp_len_arg_9 = var_suffix;

    tmp_operand_name_9 = BUILTIN_LEN( tmp_len_arg_9 );
    if ( tmp_operand_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 744;
        goto try_except_handler_6;
    }
    tmp_slice_upper_6 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_9 );
    Py_DECREF( tmp_operand_name_9 );
    if ( tmp_slice_upper_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 744;
        goto try_except_handler_6;
    }
    tmp_assign_source_50 = LOOKUP_SLICE( tmp_slice_source_38, Py_None, tmp_slice_upper_6 );
    Py_DECREF( tmp_slice_upper_6 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 744;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_50;
        Py_XDECREF( old );
    }

    tmp_assign_source_51 = Py_True;
    {
        PyObject *old = var_step3_success;
        assert( old != NULL );
        var_step3_success = tmp_assign_source_51;
        Py_INCREF( var_step3_success );
        Py_DECREF( old );
    }

    goto branch_end_23;
    branch_no_23:;
    goto loop_start_3;
    branch_end_23:;
    goto branch_end_22;
    branch_no_22:;
    tmp_compare_left_14 = var_suffix;

    tmp_compare_right_14 = const_unicode_plain_seen;
    tmp_cmp_Eq_7 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_14, tmp_compare_right_14 );
    if ( tmp_cmp_Eq_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 749;
        goto try_except_handler_6;
    }
    if ( tmp_cmp_Eq_7 == 1 )
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_sliceslicedel_index_lower_33 = -6;
    tmp_slice_index_upper_33 = -4;
    tmp_slice_source_39 = par_word;

    if ( tmp_slice_source_39 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 750;
        goto try_except_handler_6;
    }

    tmp_compare_left_15 = LOOKUP_INDEX_SLICE( tmp_slice_source_39, tmp_sliceslicedel_index_lower_33, tmp_slice_index_upper_33 );
    if ( tmp_compare_left_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 750;
        goto try_except_handler_6;
    }
    tmp_source_name_11 = par_self;

    tmp_compare_right_15 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__FinnishStemmer__long_vowels );
    if ( tmp_compare_right_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_15 );

        exception_lineno = 750;
        goto try_except_handler_6;
    }
    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_15, tmp_compare_left_15 );
    assert( !(tmp_cmp_In_7 == -1) );
    Py_DECREF( tmp_compare_left_15 );
    Py_DECREF( tmp_compare_right_15 );
    if ( tmp_cmp_In_7 == 1 )
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    tmp_sliceslicedel_index_lower_34 = 0;
    tmp_slice_index_upper_34 = -4;
    tmp_slice_source_40 = par_word;

    if ( tmp_slice_source_40 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 751;
        goto try_except_handler_6;
    }

    tmp_assign_source_52 = LOOKUP_INDEX_SLICE( tmp_slice_source_40, tmp_sliceslicedel_index_lower_34, tmp_slice_index_upper_34 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 751;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_52;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_35 = 0;
    tmp_slice_index_upper_35 = -4;
    tmp_slice_source_41 = var_r1;

    if ( tmp_slice_source_41 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 752;
        goto try_except_handler_6;
    }

    tmp_assign_source_53 = LOOKUP_INDEX_SLICE( tmp_slice_source_41, tmp_sliceslicedel_index_lower_35, tmp_slice_index_upper_35 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 752;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_53;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_36 = 0;
    tmp_slice_index_upper_36 = -4;
    tmp_slice_source_42 = var_r2;

    if ( tmp_slice_source_42 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 753;
        goto try_except_handler_6;
    }

    tmp_assign_source_54 = LOOKUP_INDEX_SLICE( tmp_slice_source_42, tmp_sliceslicedel_index_lower_36, tmp_slice_index_upper_36 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 753;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_54;
        Py_XDECREF( old );
    }

    tmp_assign_source_55 = Py_True;
    {
        PyObject *old = var_step3_success;
        assert( old != NULL );
        var_step3_success = tmp_assign_source_55;
        Py_INCREF( var_step3_success );
        Py_DECREF( old );
    }

    goto branch_end_25;
    branch_no_25:;
    goto loop_start_3;
    branch_end_25:;
    goto branch_end_24;
    branch_no_24:;
    tmp_compare_left_16 = var_suffix;

    tmp_compare_right_16 = const_tuple_0509c6307855288cb6eaf8fcd977fb03_tuple;
    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_16, tmp_compare_left_16 );
    assert( !(tmp_cmp_In_8 == -1) );
    if ( tmp_cmp_In_8 == 1 )
    {
        goto branch_yes_26;
    }
    else
    {
        goto branch_no_26;
    }
    branch_yes_26:;
    tmp_subscribed_name_11 = par_word;

    if ( tmp_subscribed_name_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 759;
        goto try_except_handler_6;
    }

    tmp_subscript_name_11 = const_int_neg_2;
    tmp_compexpr_left_19 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_11, tmp_subscript_name_11 );
    if ( tmp_compexpr_left_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 759;
        goto try_except_handler_6;
    }
    tmp_source_name_12 = par_self;

    tmp_compexpr_right_19 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain__FinnishStemmer__vowels );
    if ( tmp_compexpr_right_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_19 );

        exception_lineno = 759;
        goto try_except_handler_6;
    }
    tmp_and_left_value_8 = SEQUENCE_CONTAINS( tmp_compexpr_left_19, tmp_compexpr_right_19 );
    Py_DECREF( tmp_compexpr_left_19 );
    Py_DECREF( tmp_compexpr_right_19 );
    if ( tmp_and_left_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 759;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_8 = CHECK_IF_TRUE( tmp_and_left_value_8 );
    assert( !(tmp_and_left_truth_8 == -1) );
    if ( tmp_and_left_truth_8 == 1 )
    {
        goto and_right_8;
    }
    else
    {
        goto and_left_8;
    }
    and_right_8:;
    tmp_subscribed_name_12 = par_word;

    if ( tmp_subscribed_name_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 759;
        goto try_except_handler_6;
    }

    tmp_subscript_name_12 = const_int_neg_3;
    tmp_compexpr_left_20 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_12, tmp_subscript_name_12 );
    if ( tmp_compexpr_left_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 759;
        goto try_except_handler_6;
    }
    tmp_source_name_13 = par_self;

    tmp_compexpr_right_20 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain__FinnishStemmer__consonants );
    if ( tmp_compexpr_right_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_20 );

        exception_lineno = 759;
        goto try_except_handler_6;
    }
    tmp_and_right_value_8 = SEQUENCE_CONTAINS( tmp_compexpr_left_20, tmp_compexpr_right_20 );
    Py_DECREF( tmp_compexpr_left_20 );
    Py_DECREF( tmp_compexpr_right_20 );
    if ( tmp_and_right_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 759;
        goto try_except_handler_6;
    }
    tmp_cond_value_11 = tmp_and_right_value_8;
    goto and_end_8;
    and_left_8:;
    tmp_cond_value_11 = tmp_and_left_value_8;
    and_end_8:;
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    assert( !(tmp_cond_truth_11 == -1) );
    if ( tmp_cond_truth_11 == 1 )
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_sliceslicedel_index_lower_37 = 0;
    tmp_slice_index_upper_37 = -1;
    tmp_slice_source_43 = par_word;

    if ( tmp_slice_source_43 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 760;
        goto try_except_handler_6;
    }

    tmp_assign_source_56 = LOOKUP_INDEX_SLICE( tmp_slice_source_43, tmp_sliceslicedel_index_lower_37, tmp_slice_index_upper_37 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 760;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_56;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_38 = 0;
    tmp_slice_index_upper_38 = -1;
    tmp_slice_source_44 = var_r1;

    if ( tmp_slice_source_44 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 761;
        goto try_except_handler_6;
    }

    tmp_assign_source_57 = LOOKUP_INDEX_SLICE( tmp_slice_source_44, tmp_sliceslicedel_index_lower_38, tmp_slice_index_upper_38 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 761;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_57;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_39 = 0;
    tmp_slice_index_upper_39 = -1;
    tmp_slice_source_45 = var_r2;

    if ( tmp_slice_source_45 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 762;
        goto try_except_handler_6;
    }

    tmp_assign_source_58 = LOOKUP_INDEX_SLICE( tmp_slice_source_45, tmp_sliceslicedel_index_lower_39, tmp_slice_index_upper_39 );
    if ( tmp_assign_source_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 762;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_58;
        Py_XDECREF( old );
    }

    tmp_assign_source_59 = Py_True;
    {
        PyObject *old = var_step3_success;
        assert( old != NULL );
        var_step3_success = tmp_assign_source_59;
        Py_INCREF( var_step3_success );
        Py_DECREF( old );
    }

    branch_no_27:;
    goto branch_end_26;
    branch_no_26:;
    tmp_compare_left_17 = var_suffix;

    tmp_compare_right_17 = const_tuple_2566c2645d55f81f1fb46fa785260a31_tuple;
    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_17, tmp_compare_left_17 );
    assert( !(tmp_cmp_In_9 == -1) );
    if ( tmp_cmp_In_9 == 1 )
    {
        goto branch_yes_28;
    }
    else
    {
        goto branch_no_28;
    }
    branch_yes_28:;
    tmp_subscribed_name_13 = par_word;

    if ( tmp_subscribed_name_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 766;
        goto try_except_handler_6;
    }

    tmp_subscript_name_13 = const_int_neg_4;
    tmp_compare_left_18 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_13, tmp_subscript_name_13 );
    if ( tmp_compare_left_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 766;
        goto try_except_handler_6;
    }
    tmp_compare_right_18 = const_unicode_plain_e;
    tmp_cmp_Eq_8 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_18, tmp_compare_right_18 );
    if ( tmp_cmp_Eq_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_18 );

        exception_lineno = 766;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_compare_left_18 );
    if ( tmp_cmp_Eq_8 == 1 )
    {
        goto branch_yes_29;
    }
    else
    {
        goto branch_no_29;
    }
    branch_yes_29:;
    tmp_sliceslicedel_index_lower_40 = 0;
    tmp_slice_index_upper_40 = -3;
    tmp_slice_source_46 = par_word;

    if ( tmp_slice_source_46 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 767;
        goto try_except_handler_6;
    }

    tmp_assign_source_60 = LOOKUP_INDEX_SLICE( tmp_slice_source_46, tmp_sliceslicedel_index_lower_40, tmp_slice_index_upper_40 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 767;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_60;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_41 = 0;
    tmp_slice_index_upper_41 = -3;
    tmp_slice_source_47 = var_r1;

    if ( tmp_slice_source_47 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 768;
        goto try_except_handler_6;
    }

    tmp_assign_source_61 = LOOKUP_INDEX_SLICE( tmp_slice_source_47, tmp_sliceslicedel_index_lower_41, tmp_slice_index_upper_41 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 768;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_61;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_42 = 0;
    tmp_slice_index_upper_42 = -3;
    tmp_slice_source_48 = var_r2;

    if ( tmp_slice_source_48 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 769;
        goto try_except_handler_6;
    }

    tmp_assign_source_62 = LOOKUP_INDEX_SLICE( tmp_slice_source_48, tmp_sliceslicedel_index_lower_42, tmp_slice_index_upper_42 );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 769;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_62;
        Py_XDECREF( old );
    }

    tmp_assign_source_63 = Py_True;
    {
        PyObject *old = var_step3_success;
        assert( old != NULL );
        var_step3_success = tmp_assign_source_63;
        Py_INCREF( var_step3_success );
        Py_DECREF( old );
    }

    branch_no_29:;
    goto branch_end_28;
    branch_no_28:;
    tmp_compare_left_19 = var_suffix;

    tmp_compare_right_19 = const_unicode_plain_n;
    tmp_cmp_Eq_9 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_19, tmp_compare_right_19 );
    if ( tmp_cmp_Eq_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 772;
        goto try_except_handler_6;
    }
    if ( tmp_cmp_Eq_9 == 1 )
    {
        goto branch_yes_30;
    }
    else
    {
        goto branch_no_30;
    }
    branch_yes_30:;
    tmp_sliceslicedel_index_lower_43 = 0;
    tmp_slice_index_upper_43 = -1;
    tmp_slice_source_49 = par_word;

    if ( tmp_slice_source_49 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 773;
        goto try_except_handler_6;
    }

    tmp_assign_source_64 = LOOKUP_INDEX_SLICE( tmp_slice_source_49, tmp_sliceslicedel_index_lower_43, tmp_slice_index_upper_43 );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 773;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_64;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_44 = 0;
    tmp_slice_index_upper_44 = -1;
    tmp_slice_source_50 = var_r1;

    if ( tmp_slice_source_50 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 774;
        goto try_except_handler_6;
    }

    tmp_assign_source_65 = LOOKUP_INDEX_SLICE( tmp_slice_source_50, tmp_sliceslicedel_index_lower_44, tmp_slice_index_upper_44 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 774;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_65;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_45 = 0;
    tmp_slice_index_upper_45 = -1;
    tmp_slice_source_51 = var_r2;

    if ( tmp_slice_source_51 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 775;
        goto try_except_handler_6;
    }

    tmp_assign_source_66 = LOOKUP_INDEX_SLICE( tmp_slice_source_51, tmp_sliceslicedel_index_lower_45, tmp_slice_index_upper_45 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 775;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_66;
        Py_XDECREF( old );
    }

    tmp_assign_source_67 = Py_True;
    {
        PyObject *old = var_step3_success;
        assert( old != NULL );
        var_step3_success = tmp_assign_source_67;
        Py_INCREF( var_step3_success );
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_46 = -2;
    tmp_slice_index_upper_46 = PY_SSIZE_T_MAX;
    tmp_slice_source_52 = par_word;

    tmp_compexpr_left_21 = LOOKUP_INDEX_SLICE( tmp_slice_source_52, tmp_sliceslicedel_index_lower_46, tmp_slice_index_upper_46 );
    if ( tmp_compexpr_left_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 778;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_21 = const_unicode_plain_ie;
    tmp_or_left_value_8 = RICH_COMPARE_EQ( tmp_compexpr_left_21, tmp_compexpr_right_21 );
    Py_DECREF( tmp_compexpr_left_21 );
    if ( tmp_or_left_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 778;
        goto try_except_handler_6;
    }
    tmp_or_left_truth_8 = CHECK_IF_TRUE( tmp_or_left_value_8 );
    if ( tmp_or_left_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_8 );

        exception_lineno = 778;
        goto try_except_handler_6;
    }
    if ( tmp_or_left_truth_8 == 1 )
    {
        goto or_left_8;
    }
    else
    {
        goto or_right_8;
    }
    or_right_8:;
    Py_DECREF( tmp_or_left_value_8 );
    tmp_sliceslicedel_index_lower_47 = -2;
    tmp_slice_index_upper_47 = PY_SSIZE_T_MAX;
    tmp_slice_source_53 = par_word;

    tmp_compexpr_left_22 = LOOKUP_INDEX_SLICE( tmp_slice_source_53, tmp_sliceslicedel_index_lower_47, tmp_slice_index_upper_47 );
    if ( tmp_compexpr_left_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 778;
        goto try_except_handler_6;
    }
    tmp_source_name_14 = par_self;

    tmp_compexpr_right_22 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain__FinnishStemmer__long_vowels );
    if ( tmp_compexpr_right_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_22 );

        exception_lineno = 778;
        goto try_except_handler_6;
    }
    tmp_or_right_value_8 = SEQUENCE_CONTAINS( tmp_compexpr_left_22, tmp_compexpr_right_22 );
    Py_DECREF( tmp_compexpr_left_22 );
    Py_DECREF( tmp_compexpr_right_22 );
    if ( tmp_or_right_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 778;
        goto try_except_handler_6;
    }
    Py_INCREF( tmp_or_right_value_8 );
    tmp_cond_value_12 = tmp_or_right_value_8;
    goto or_end_8;
    or_left_8:;
    tmp_cond_value_12 = tmp_or_left_value_8;
    or_end_8:;
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_12 );

        exception_lineno = 778;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == 1 )
    {
        goto branch_yes_31;
    }
    else
    {
        goto branch_no_31;
    }
    branch_yes_31:;
    tmp_sliceslicedel_index_lower_48 = 0;
    tmp_slice_index_upper_48 = -1;
    tmp_slice_source_54 = par_word;

    tmp_assign_source_68 = LOOKUP_INDEX_SLICE( tmp_slice_source_54, tmp_sliceslicedel_index_lower_48, tmp_slice_index_upper_48 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 779;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_68;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_49 = 0;
    tmp_slice_index_upper_49 = -1;
    tmp_slice_source_55 = var_r1;

    tmp_assign_source_69 = LOOKUP_INDEX_SLICE( tmp_slice_source_55, tmp_sliceslicedel_index_lower_49, tmp_slice_index_upper_49 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 780;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_69;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_50 = 0;
    tmp_slice_index_upper_50 = -1;
    tmp_slice_source_56 = var_r2;

    tmp_assign_source_70 = LOOKUP_INDEX_SLICE( tmp_slice_source_56, tmp_sliceslicedel_index_lower_50, tmp_slice_index_upper_50 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 781;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_70;
        Py_DECREF( old );
    }

    branch_no_31:;
    goto branch_end_30;
    branch_no_30:;
    tmp_slice_source_57 = par_word;

    if ( tmp_slice_source_57 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 783;
        goto try_except_handler_6;
    }

    tmp_len_arg_10 = var_suffix;

    tmp_operand_name_10 = BUILTIN_LEN( tmp_len_arg_10 );
    if ( tmp_operand_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 783;
        goto try_except_handler_6;
    }
    tmp_slice_upper_7 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_10 );
    Py_DECREF( tmp_operand_name_10 );
    if ( tmp_slice_upper_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 783;
        goto try_except_handler_6;
    }
    tmp_assign_source_71 = LOOKUP_SLICE( tmp_slice_source_57, Py_None, tmp_slice_upper_7 );
    Py_DECREF( tmp_slice_upper_7 );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 783;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_71;
        Py_XDECREF( old );
    }

    tmp_slice_source_58 = var_r1;

    if ( tmp_slice_source_58 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 784;
        goto try_except_handler_6;
    }

    tmp_len_arg_11 = var_suffix;

    tmp_operand_name_11 = BUILTIN_LEN( tmp_len_arg_11 );
    if ( tmp_operand_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 784;
        goto try_except_handler_6;
    }
    tmp_slice_upper_8 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_11 );
    Py_DECREF( tmp_operand_name_11 );
    if ( tmp_slice_upper_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 784;
        goto try_except_handler_6;
    }
    tmp_assign_source_72 = LOOKUP_SLICE( tmp_slice_source_58, Py_None, tmp_slice_upper_8 );
    Py_DECREF( tmp_slice_upper_8 );
    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 784;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_72;
        Py_XDECREF( old );
    }

    tmp_slice_source_59 = var_r2;

    if ( tmp_slice_source_59 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 785;
        goto try_except_handler_6;
    }

    tmp_len_arg_12 = var_suffix;

    tmp_operand_name_12 = BUILTIN_LEN( tmp_len_arg_12 );
    if ( tmp_operand_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 785;
        goto try_except_handler_6;
    }
    tmp_slice_upper_9 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_12 );
    Py_DECREF( tmp_operand_name_12 );
    if ( tmp_slice_upper_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 785;
        goto try_except_handler_6;
    }
    tmp_assign_source_73 = LOOKUP_SLICE( tmp_slice_source_59, Py_None, tmp_slice_upper_9 );
    Py_DECREF( tmp_slice_upper_9 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 785;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_73;
        Py_XDECREF( old );
    }

    tmp_assign_source_74 = Py_True;
    {
        PyObject *old = var_step3_success;
        assert( old != NULL );
        var_step3_success = tmp_assign_source_74;
        Py_INCREF( var_step3_success );
        Py_DECREF( old );
    }

    branch_end_30:;
    branch_end_28:;
    branch_end_26:;
    branch_end_24:;
    branch_end_22:;
    branch_end_20:;
    goto loop_end_3;
    branch_no_19:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 724;
        goto try_except_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_source_name_15 = par_self;

    tmp_iter_arg_5 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain__FinnishStemmer__step4_suffixes );
    if ( tmp_iter_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 790;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_75 = MAKE_ITERATOR( tmp_iter_arg_5 );
    Py_DECREF( tmp_iter_arg_5 );
    if ( tmp_assign_source_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 790;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator == NULL );
    tmp_for_loop_4__for_iterator = tmp_assign_source_75;

    // Tried code:
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    tmp_assign_source_76 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_76 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 790;
            goto try_except_handler_7;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_76;
        Py_XDECREF( old );
    }

    tmp_assign_source_77 = tmp_for_loop_4__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_77;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_8 = var_r2;

    if ( tmp_called_instance_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 791;
        goto try_except_handler_7;
    }

    tmp_args_element_name_9 = var_suffix;

    frame_function->f_lineno = 791;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_cond_value_13 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 791;
        goto try_except_handler_7;
    }
    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_13 );

        exception_lineno = 791;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == 1 )
    {
        goto branch_yes_32;
    }
    else
    {
        goto branch_no_32;
    }
    branch_yes_32:;
    tmp_compare_left_20 = var_suffix;

    tmp_compare_right_20 = const_tuple_dc95324d683a695f32532b06ec019a96_tuple;
    tmp_cmp_In_10 = PySequence_Contains( tmp_compare_right_20, tmp_compare_left_20 );
    assert( !(tmp_cmp_In_10 == -1) );
    if ( tmp_cmp_In_10 == 1 )
    {
        goto branch_yes_33;
    }
    else
    {
        goto branch_no_33;
    }
    branch_yes_33:;
    tmp_sliceslicedel_index_lower_51 = -5;
    tmp_slice_index_upper_51 = -3;
    tmp_slice_source_60 = par_word;

    if ( tmp_slice_source_60 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 794;
        goto try_except_handler_7;
    }

    tmp_compare_left_21 = LOOKUP_INDEX_SLICE( tmp_slice_source_60, tmp_sliceslicedel_index_lower_51, tmp_slice_index_upper_51 );
    if ( tmp_compare_left_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 794;
        goto try_except_handler_7;
    }
    tmp_compare_right_21 = const_unicode_plain_po;
    tmp_cmp_NotEq_2 = RICH_COMPARE_BOOL_NE( tmp_compare_left_21, tmp_compare_right_21 );
    if ( tmp_cmp_NotEq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_21 );

        exception_lineno = 794;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_compare_left_21 );
    if ( tmp_cmp_NotEq_2 == 1 )
    {
        goto branch_yes_34;
    }
    else
    {
        goto branch_no_34;
    }
    branch_yes_34:;
    tmp_sliceslicedel_index_lower_52 = 0;
    tmp_slice_index_upper_52 = -3;
    tmp_slice_source_61 = par_word;

    if ( tmp_slice_source_61 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 795;
        goto try_except_handler_7;
    }

    tmp_assign_source_78 = LOOKUP_INDEX_SLICE( tmp_slice_source_61, tmp_sliceslicedel_index_lower_52, tmp_slice_index_upper_52 );
    if ( tmp_assign_source_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 795;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_78;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_53 = 0;
    tmp_slice_index_upper_53 = -3;
    tmp_slice_source_62 = var_r1;

    if ( tmp_slice_source_62 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 796;
        goto try_except_handler_7;
    }

    tmp_assign_source_79 = LOOKUP_INDEX_SLICE( tmp_slice_source_62, tmp_sliceslicedel_index_lower_53, tmp_slice_index_upper_53 );
    if ( tmp_assign_source_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 796;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_79;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_54 = 0;
    tmp_slice_index_upper_54 = -3;
    tmp_slice_source_63 = var_r2;

    if ( tmp_slice_source_63 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 797;
        goto try_except_handler_7;
    }

    tmp_assign_source_80 = LOOKUP_INDEX_SLICE( tmp_slice_source_63, tmp_sliceslicedel_index_lower_54, tmp_slice_index_upper_54 );
    if ( tmp_assign_source_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 797;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_80;
        Py_XDECREF( old );
    }

    branch_no_34:;
    goto branch_end_33;
    branch_no_33:;
    tmp_slice_source_64 = par_word;

    if ( tmp_slice_source_64 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 799;
        goto try_except_handler_7;
    }

    tmp_len_arg_13 = var_suffix;

    tmp_operand_name_13 = BUILTIN_LEN( tmp_len_arg_13 );
    if ( tmp_operand_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 799;
        goto try_except_handler_7;
    }
    tmp_slice_upper_10 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_13 );
    Py_DECREF( tmp_operand_name_13 );
    if ( tmp_slice_upper_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 799;
        goto try_except_handler_7;
    }
    tmp_assign_source_81 = LOOKUP_SLICE( tmp_slice_source_64, Py_None, tmp_slice_upper_10 );
    Py_DECREF( tmp_slice_upper_10 );
    if ( tmp_assign_source_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 799;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_81;
        Py_XDECREF( old );
    }

    tmp_slice_source_65 = var_r1;

    if ( tmp_slice_source_65 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 800;
        goto try_except_handler_7;
    }

    tmp_len_arg_14 = var_suffix;

    tmp_operand_name_14 = BUILTIN_LEN( tmp_len_arg_14 );
    if ( tmp_operand_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 800;
        goto try_except_handler_7;
    }
    tmp_slice_upper_11 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_14 );
    Py_DECREF( tmp_operand_name_14 );
    if ( tmp_slice_upper_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 800;
        goto try_except_handler_7;
    }
    tmp_assign_source_82 = LOOKUP_SLICE( tmp_slice_source_65, Py_None, tmp_slice_upper_11 );
    Py_DECREF( tmp_slice_upper_11 );
    if ( tmp_assign_source_82 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 800;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_82;
        Py_XDECREF( old );
    }

    tmp_slice_source_66 = var_r2;

    if ( tmp_slice_source_66 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 801;
        goto try_except_handler_7;
    }

    tmp_len_arg_15 = var_suffix;

    tmp_operand_name_15 = BUILTIN_LEN( tmp_len_arg_15 );
    if ( tmp_operand_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 801;
        goto try_except_handler_7;
    }
    tmp_slice_upper_12 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_15 );
    Py_DECREF( tmp_operand_name_15 );
    if ( tmp_slice_upper_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 801;
        goto try_except_handler_7;
    }
    tmp_assign_source_83 = LOOKUP_SLICE( tmp_slice_source_66, Py_None, tmp_slice_upper_12 );
    Py_DECREF( tmp_slice_upper_12 );
    if ( tmp_assign_source_83 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 801;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_83;
        Py_XDECREF( old );
    }

    branch_end_33:;
    goto loop_end_4;
    branch_no_32:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 790;
        goto try_except_handler_7;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    tmp_and_left_value_9 = var_step3_success;

    if ( tmp_and_left_value_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step3_success" );
        exception_tb = NULL;

        exception_lineno = 805;
        goto frame_exception_exit_1;
    }

    tmp_and_left_truth_9 = CHECK_IF_TRUE( tmp_and_left_value_9 );
    if ( tmp_and_left_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_9 == 1 )
    {
        goto and_right_9;
    }
    else
    {
        goto and_left_9;
    }
    and_right_9:;
    tmp_len_arg_16 = var_r1;

    if ( tmp_len_arg_16 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 805;
        goto frame_exception_exit_1;
    }

    tmp_compexpr_left_23 = BUILTIN_LEN( tmp_len_arg_16 );
    if ( tmp_compexpr_left_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_23 = const_int_pos_1;
    tmp_and_left_value_10 = RICH_COMPARE_GE( tmp_compexpr_left_23, tmp_compexpr_right_23 );
    Py_DECREF( tmp_compexpr_left_23 );
    if ( tmp_and_left_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_10 = CHECK_IF_TRUE( tmp_and_left_value_10 );
    if ( tmp_and_left_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_10 );

        exception_lineno = 805;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_10 == 1 )
    {
        goto and_right_10;
    }
    else
    {
        goto and_left_10;
    }
    and_right_10:;
    Py_DECREF( tmp_and_left_value_10 );
    tmp_subscribed_name_14 = var_r1;

    if ( tmp_subscribed_name_14 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 805;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_14 = const_int_neg_1;
    tmp_compexpr_left_24 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_14, tmp_subscript_name_14 );
    if ( tmp_compexpr_left_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_24 = const_unicode_plain_ij;
    tmp_and_right_value_10 = SEQUENCE_CONTAINS( tmp_compexpr_left_24, tmp_compexpr_right_24 );
    Py_DECREF( tmp_compexpr_left_24 );
    if ( tmp_and_right_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_and_right_value_10 );
    tmp_and_right_value_9 = tmp_and_right_value_10;
    goto and_end_10;
    and_left_10:;
    tmp_and_right_value_9 = tmp_and_left_value_10;
    and_end_10:;
    tmp_cond_value_14 = tmp_and_right_value_9;
    goto and_end_9;
    and_left_9:;
    Py_INCREF( tmp_and_left_value_9 );
    tmp_cond_value_14 = tmp_and_left_value_9;
    and_end_9:;
    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_14 );

        exception_lineno = 805;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == 1 )
    {
        goto branch_yes_35;
    }
    else
    {
        goto branch_no_35;
    }
    branch_yes_35:;
    tmp_sliceslicedel_index_lower_55 = 0;
    tmp_slice_index_upper_55 = -1;
    tmp_slice_source_67 = par_word;

    if ( tmp_slice_source_67 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 806;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_84 = LOOKUP_INDEX_SLICE( tmp_slice_source_67, tmp_sliceslicedel_index_lower_55, tmp_slice_index_upper_55 );
    if ( tmp_assign_source_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 806;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_84;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_56 = 0;
    tmp_slice_index_upper_56 = -1;
    tmp_slice_source_68 = var_r1;

    if ( tmp_slice_source_68 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 807;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_85 = LOOKUP_INDEX_SLICE( tmp_slice_source_68, tmp_sliceslicedel_index_lower_56, tmp_slice_index_upper_56 );
    if ( tmp_assign_source_85 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 807;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_85;
        Py_XDECREF( old );
    }

    goto branch_end_35;
    branch_no_35:;
    tmp_operand_name_16 = var_step3_success;

    if ( tmp_operand_name_16 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step3_success" );
        exception_tb = NULL;

        exception_lineno = 809;
        goto frame_exception_exit_1;
    }

    tmp_and_left_value_11 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_16 );
    if ( tmp_and_left_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 809;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_11 = CHECK_IF_TRUE( tmp_and_left_value_11 );
    if ( tmp_and_left_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 810;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_11 == 1 )
    {
        goto and_right_11;
    }
    else
    {
        goto and_left_11;
    }
    and_right_11:;
    tmp_len_arg_17 = var_r1;

    if ( tmp_len_arg_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 809;
        goto frame_exception_exit_1;
    }

    tmp_compexpr_left_25 = BUILTIN_LEN( tmp_len_arg_17 );
    if ( tmp_compexpr_left_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 809;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_25 = const_int_pos_2;
    tmp_and_left_value_12 = RICH_COMPARE_GE( tmp_compexpr_left_25, tmp_compexpr_right_25 );
    Py_DECREF( tmp_compexpr_left_25 );
    if ( tmp_and_left_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 809;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_12 = CHECK_IF_TRUE( tmp_and_left_value_12 );
    if ( tmp_and_left_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_12 );

        exception_lineno = 810;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_12 == 1 )
    {
        goto and_right_12;
    }
    else
    {
        goto and_left_12;
    }
    and_right_12:;
    Py_DECREF( tmp_and_left_value_12 );
    tmp_subscribed_name_15 = var_r1;

    if ( tmp_subscribed_name_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 810;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_15 = const_int_neg_1;
    tmp_compexpr_left_26 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_15, tmp_subscript_name_15 );
    if ( tmp_compexpr_left_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 810;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_26 = const_unicode_plain_t;
    tmp_and_left_value_13 = RICH_COMPARE_EQ( tmp_compexpr_left_26, tmp_compexpr_right_26 );
    Py_DECREF( tmp_compexpr_left_26 );
    if ( tmp_and_left_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 810;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_13 = CHECK_IF_TRUE( tmp_and_left_value_13 );
    if ( tmp_and_left_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_13 );

        exception_lineno = 810;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_13 == 1 )
    {
        goto and_right_13;
    }
    else
    {
        goto and_left_13;
    }
    and_right_13:;
    Py_DECREF( tmp_and_left_value_13 );
    tmp_subscribed_name_16 = var_r1;

    if ( tmp_subscribed_name_16 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 810;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_16 = const_int_neg_2;
    tmp_compexpr_left_27 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_16, tmp_subscript_name_16 );
    if ( tmp_compexpr_left_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 810;
        goto frame_exception_exit_1;
    }
    tmp_source_name_16 = par_self;

    tmp_compexpr_right_27 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain__FinnishStemmer__vowels );
    if ( tmp_compexpr_right_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_27 );

        exception_lineno = 810;
        goto frame_exception_exit_1;
    }
    tmp_and_right_value_13 = SEQUENCE_CONTAINS( tmp_compexpr_left_27, tmp_compexpr_right_27 );
    Py_DECREF( tmp_compexpr_left_27 );
    Py_DECREF( tmp_compexpr_right_27 );
    if ( tmp_and_right_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 810;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_and_right_value_13 );
    tmp_and_right_value_12 = tmp_and_right_value_13;
    goto and_end_13;
    and_left_13:;
    tmp_and_right_value_12 = tmp_and_left_value_13;
    and_end_13:;
    tmp_and_right_value_11 = tmp_and_right_value_12;
    goto and_end_12;
    and_left_12:;
    tmp_and_right_value_11 = tmp_and_left_value_12;
    and_end_12:;
    tmp_cond_value_15 = tmp_and_right_value_11;
    goto and_end_11;
    and_left_11:;
    Py_INCREF( tmp_and_left_value_11 );
    tmp_cond_value_15 = tmp_and_left_value_11;
    and_end_11:;
    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_15 );

        exception_lineno = 810;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == 1 )
    {
        goto branch_yes_36;
    }
    else
    {
        goto branch_no_36;
    }
    branch_yes_36:;
    tmp_sliceslicedel_index_lower_57 = 0;
    tmp_slice_index_upper_57 = -1;
    tmp_slice_source_69 = par_word;

    if ( tmp_slice_source_69 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 811;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_86 = LOOKUP_INDEX_SLICE( tmp_slice_source_69, tmp_sliceslicedel_index_lower_57, tmp_slice_index_upper_57 );
    if ( tmp_assign_source_86 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 811;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_86;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_58 = 0;
    tmp_slice_index_upper_58 = -1;
    tmp_slice_source_70 = var_r1;

    if ( tmp_slice_source_70 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 812;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_87 = LOOKUP_INDEX_SLICE( tmp_slice_source_70, tmp_sliceslicedel_index_lower_58, tmp_slice_index_upper_58 );
    if ( tmp_assign_source_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 812;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_87;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_59 = 0;
    tmp_slice_index_upper_59 = -1;
    tmp_slice_source_71 = var_r2;

    if ( tmp_slice_source_71 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 813;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_88 = LOOKUP_INDEX_SLICE( tmp_slice_source_71, tmp_sliceslicedel_index_lower_59, tmp_slice_index_upper_59 );
    if ( tmp_assign_source_88 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 813;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_88;
        Py_XDECREF( old );
    }

    tmp_called_instance_9 = var_r2;

    frame_function->f_lineno = 814;
    tmp_cond_value_16 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_imma_tuple, 0 ) );

    if ( tmp_cond_value_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 814;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_16 );

        exception_lineno = 814;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == 1 )
    {
        goto branch_yes_37;
    }
    else
    {
        goto branch_no_37;
    }
    branch_yes_37:;
    tmp_sliceslicedel_index_lower_60 = 0;
    tmp_slice_index_upper_60 = -4;
    tmp_slice_source_72 = par_word;

    tmp_assign_source_89 = LOOKUP_INDEX_SLICE( tmp_slice_source_72, tmp_sliceslicedel_index_lower_60, tmp_slice_index_upper_60 );
    if ( tmp_assign_source_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 815;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_89;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_61 = 0;
    tmp_slice_index_upper_61 = -4;
    tmp_slice_source_73 = var_r1;

    tmp_assign_source_90 = LOOKUP_INDEX_SLICE( tmp_slice_source_73, tmp_sliceslicedel_index_lower_61, tmp_slice_index_upper_61 );
    if ( tmp_assign_source_90 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 816;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_90;
        Py_DECREF( old );
    }

    goto branch_end_37;
    branch_no_37:;
    tmp_called_instance_10 = var_r2;

    frame_function->f_lineno = 817;
    tmp_and_left_value_14 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_mma_tuple, 0 ) );

    if ( tmp_and_left_value_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 817;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_14 = CHECK_IF_TRUE( tmp_and_left_value_14 );
    if ( tmp_and_left_truth_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_14 );

        exception_lineno = 817;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_14 == 1 )
    {
        goto and_right_14;
    }
    else
    {
        goto and_left_14;
    }
    and_right_14:;
    Py_DECREF( tmp_and_left_value_14 );
    tmp_sliceslicedel_index_lower_62 = -5;
    tmp_slice_index_upper_62 = -3;
    tmp_slice_source_74 = var_r2;

    tmp_compexpr_left_28 = LOOKUP_INDEX_SLICE( tmp_slice_source_74, tmp_sliceslicedel_index_lower_62, tmp_slice_index_upper_62 );
    if ( tmp_compexpr_left_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 817;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_28 = const_unicode_plain_po;
    tmp_and_right_value_14 = RICH_COMPARE_NE( tmp_compexpr_left_28, tmp_compexpr_right_28 );
    Py_DECREF( tmp_compexpr_left_28 );
    if ( tmp_and_right_value_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 817;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_17 = tmp_and_right_value_14;
    goto and_end_14;
    and_left_14:;
    tmp_cond_value_17 = tmp_and_left_value_14;
    and_end_14:;
    tmp_cond_truth_17 = CHECK_IF_TRUE( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_17 );

        exception_lineno = 817;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == 1 )
    {
        goto branch_yes_38;
    }
    else
    {
        goto branch_no_38;
    }
    branch_yes_38:;
    tmp_sliceslicedel_index_lower_63 = 0;
    tmp_slice_index_upper_63 = -3;
    tmp_slice_source_75 = par_word;

    tmp_assign_source_91 = LOOKUP_INDEX_SLICE( tmp_slice_source_75, tmp_sliceslicedel_index_lower_63, tmp_slice_index_upper_63 );
    if ( tmp_assign_source_91 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 818;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_91;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_64 = 0;
    tmp_slice_index_upper_64 = -3;
    tmp_slice_source_76 = var_r1;

    tmp_assign_source_92 = LOOKUP_INDEX_SLICE( tmp_slice_source_76, tmp_sliceslicedel_index_lower_64, tmp_slice_index_upper_64 );
    if ( tmp_assign_source_92 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 819;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_92;
        Py_DECREF( old );
    }

    branch_no_38:;
    branch_end_37:;
    branch_no_36:;
    branch_end_35:;
    tmp_sliceslicedel_index_lower_65 = -2;
    tmp_slice_index_upper_65 = PY_SSIZE_T_MAX;
    tmp_slice_source_77 = var_r1;

    if ( tmp_slice_source_77 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 822;
        goto frame_exception_exit_1;
    }

    tmp_compare_left_22 = LOOKUP_INDEX_SLICE( tmp_slice_source_77, tmp_sliceslicedel_index_lower_65, tmp_slice_index_upper_65 );
    if ( tmp_compare_left_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;
        goto frame_exception_exit_1;
    }
    tmp_source_name_17 = par_self;

    tmp_compare_right_22 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain__FinnishStemmer__long_vowels );
    if ( tmp_compare_right_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_22 );

        exception_lineno = 822;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_11 = PySequence_Contains( tmp_compare_right_22, tmp_compare_left_22 );
    assert( !(tmp_cmp_In_11 == -1) );
    Py_DECREF( tmp_compare_left_22 );
    Py_DECREF( tmp_compare_right_22 );
    if ( tmp_cmp_In_11 == 1 )
    {
        goto branch_yes_39;
    }
    else
    {
        goto branch_no_39;
    }
    branch_yes_39:;
    tmp_sliceslicedel_index_lower_66 = 0;
    tmp_slice_index_upper_66 = -1;
    tmp_slice_source_78 = par_word;

    if ( tmp_slice_source_78 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 823;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_93 = LOOKUP_INDEX_SLICE( tmp_slice_source_78, tmp_sliceslicedel_index_lower_66, tmp_slice_index_upper_66 );
    if ( tmp_assign_source_93 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 823;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_93;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_67 = 0;
    tmp_slice_index_upper_67 = -1;
    tmp_slice_source_79 = var_r1;

    if ( tmp_slice_source_79 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 824;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_94 = LOOKUP_INDEX_SLICE( tmp_slice_source_79, tmp_sliceslicedel_index_lower_67, tmp_slice_index_upper_67 );
    if ( tmp_assign_source_94 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 824;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_94;
        Py_XDECREF( old );
    }

    branch_no_39:;
    tmp_len_arg_18 = var_r1;

    if ( tmp_len_arg_18 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 826;
        goto frame_exception_exit_1;
    }

    tmp_compexpr_left_29 = BUILTIN_LEN( tmp_len_arg_18 );
    if ( tmp_compexpr_left_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 826;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_29 = const_int_pos_2;
    tmp_and_left_value_15 = RICH_COMPARE_GE( tmp_compexpr_left_29, tmp_compexpr_right_29 );
    Py_DECREF( tmp_compexpr_left_29 );
    if ( tmp_and_left_value_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 826;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_15 = CHECK_IF_TRUE( tmp_and_left_value_15 );
    if ( tmp_and_left_truth_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_15 );

        exception_lineno = 827;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_15 == 1 )
    {
        goto and_right_15;
    }
    else
    {
        goto and_left_15;
    }
    and_right_15:;
    Py_DECREF( tmp_and_left_value_15 );
    tmp_subscribed_name_17 = var_r1;

    if ( tmp_subscribed_name_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 826;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_17 = const_int_neg_2;
    tmp_compexpr_left_30 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_17, tmp_subscript_name_17 );
    if ( tmp_compexpr_left_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 826;
        goto frame_exception_exit_1;
    }
    tmp_source_name_18 = par_self;

    tmp_compexpr_right_30 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain__FinnishStemmer__consonants );
    if ( tmp_compexpr_right_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_30 );

        exception_lineno = 826;
        goto frame_exception_exit_1;
    }
    tmp_and_left_value_16 = SEQUENCE_CONTAINS( tmp_compexpr_left_30, tmp_compexpr_right_30 );
    Py_DECREF( tmp_compexpr_left_30 );
    Py_DECREF( tmp_compexpr_right_30 );
    if ( tmp_and_left_value_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 826;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_16 = CHECK_IF_TRUE( tmp_and_left_value_16 );
    assert( !(tmp_and_left_truth_16 == -1) );
    if ( tmp_and_left_truth_16 == 1 )
    {
        goto and_right_16;
    }
    else
    {
        goto and_left_16;
    }
    and_right_16:;
    tmp_subscribed_name_18 = var_r1;

    if ( tmp_subscribed_name_18 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 827;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_18 = const_int_neg_1;
    tmp_compexpr_left_31 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_18, tmp_subscript_name_18 );
    if ( tmp_compexpr_left_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 827;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_31 = const_unicode_digest_c4c0cdb9d05e856c7575106e9c55e55d;
    tmp_and_right_value_16 = SEQUENCE_CONTAINS( tmp_compexpr_left_31, tmp_compexpr_right_31 );
    Py_DECREF( tmp_compexpr_left_31 );
    if ( tmp_and_right_value_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 827;
        goto frame_exception_exit_1;
    }
    tmp_and_right_value_15 = tmp_and_right_value_16;
    goto and_end_16;
    and_left_16:;
    tmp_and_right_value_15 = tmp_and_left_value_16;
    and_end_16:;
    Py_INCREF( tmp_and_right_value_15 );
    tmp_cond_value_18 = tmp_and_right_value_15;
    goto and_end_15;
    and_left_15:;
    tmp_cond_value_18 = tmp_and_left_value_15;
    and_end_15:;
    tmp_cond_truth_18 = CHECK_IF_TRUE( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_18 );

        exception_lineno = 827;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == 1 )
    {
        goto branch_yes_40;
    }
    else
    {
        goto branch_no_40;
    }
    branch_yes_40:;
    tmp_sliceslicedel_index_lower_68 = 0;
    tmp_slice_index_upper_68 = -1;
    tmp_slice_source_80 = par_word;

    if ( tmp_slice_source_80 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 828;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_95 = LOOKUP_INDEX_SLICE( tmp_slice_source_80, tmp_sliceslicedel_index_lower_68, tmp_slice_index_upper_68 );
    if ( tmp_assign_source_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 828;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_95;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_69 = 0;
    tmp_slice_index_upper_69 = -1;
    tmp_slice_source_81 = var_r1;

    if ( tmp_slice_source_81 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 829;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_96 = LOOKUP_INDEX_SLICE( tmp_slice_source_81, tmp_sliceslicedel_index_lower_69, tmp_slice_index_upper_69 );
    if ( tmp_assign_source_96 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 829;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_96;
        Py_XDECREF( old );
    }

    branch_no_40:;
    tmp_called_instance_11 = var_r1;

    if ( tmp_called_instance_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 831;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 831;
    tmp_cond_value_19 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_tuple_unicode_plain_oj_unicode_plain_uj_tuple_tuple, 0 ) );

    if ( tmp_cond_value_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 831;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_19 = CHECK_IF_TRUE( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_19 );

        exception_lineno = 831;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == 1 )
    {
        goto branch_yes_41;
    }
    else
    {
        goto branch_no_41;
    }
    branch_yes_41:;
    tmp_sliceslicedel_index_lower_70 = 0;
    tmp_slice_index_upper_70 = -1;
    tmp_slice_source_82 = par_word;

    if ( tmp_slice_source_82 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 832;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_97 = LOOKUP_INDEX_SLICE( tmp_slice_source_82, tmp_sliceslicedel_index_lower_70, tmp_slice_index_upper_70 );
    if ( tmp_assign_source_97 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 832;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_97;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_71 = 0;
    tmp_slice_index_upper_71 = -1;
    tmp_slice_source_83 = var_r1;

    if ( tmp_slice_source_83 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 833;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_98 = LOOKUP_INDEX_SLICE( tmp_slice_source_83, tmp_sliceslicedel_index_lower_71, tmp_slice_index_upper_71 );
    if ( tmp_assign_source_98 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 833;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_98;
        Py_XDECREF( old );
    }

    branch_no_41:;
    tmp_called_instance_12 = var_r1;

    if ( tmp_called_instance_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 835;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 835;
    tmp_cond_value_20 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_12, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_jo_tuple, 0 ) );

    if ( tmp_cond_value_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 835;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_20 = CHECK_IF_TRUE( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_20 );

        exception_lineno = 835;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == 1 )
    {
        goto branch_yes_42;
    }
    else
    {
        goto branch_no_42;
    }
    branch_yes_42:;
    tmp_sliceslicedel_index_lower_72 = 0;
    tmp_slice_index_upper_72 = -1;
    tmp_slice_source_84 = par_word;

    if ( tmp_slice_source_84 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 836;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_99 = LOOKUP_INDEX_SLICE( tmp_slice_source_84, tmp_sliceslicedel_index_lower_72, tmp_slice_index_upper_72 );
    if ( tmp_assign_source_99 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 836;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_99;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_73 = 0;
    tmp_slice_index_upper_73 = -1;
    tmp_slice_source_85 = var_r1;

    if ( tmp_slice_source_85 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 837;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_100 = LOOKUP_INDEX_SLICE( tmp_slice_source_85, tmp_sliceslicedel_index_lower_73, tmp_slice_index_upper_73 );
    if ( tmp_assign_source_100 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 837;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_100;
        Py_XDECREF( old );
    }

    branch_no_42:;
    tmp_xrange_low_1 = const_int_pos_1;
    tmp_len_arg_19 = par_word;

    if ( tmp_len_arg_19 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 841;
        goto frame_exception_exit_1;
    }

    tmp_xrange_high_1 = BUILTIN_LEN( tmp_len_arg_19 );
    if ( tmp_xrange_high_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_6 = BUILTIN_XRANGE2( tmp_xrange_low_1, tmp_xrange_high_1 );
    Py_DECREF( tmp_xrange_high_1 );
    if ( tmp_iter_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_101 = MAKE_ITERATOR( tmp_iter_arg_6 );
    Py_DECREF( tmp_iter_arg_6 );
    if ( tmp_assign_source_101 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_5__for_iterator == NULL );
    tmp_for_loop_5__for_iterator = tmp_assign_source_101;

    // Tried code:
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator;

    tmp_assign_source_102 = ITERATOR_NEXT( tmp_next_source_5 );
    if ( tmp_assign_source_102 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_5;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 841;
            goto try_except_handler_8;
        }
    }

    {
        PyObject *old = tmp_for_loop_5__iter_value;
        tmp_for_loop_5__iter_value = tmp_assign_source_102;
        Py_XDECREF( old );
    }

    tmp_assign_source_103 = tmp_for_loop_5__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_103;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_19 = par_word;

    if ( tmp_subscribed_name_19 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 842;
        goto try_except_handler_8;
    }

    tmp_operand_name_17 = var_i;

    tmp_subscript_name_19 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_17 );
    if ( tmp_subscript_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 842;
        goto try_except_handler_8;
    }
    tmp_compare_left_23 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_19, tmp_subscript_name_19 );
    Py_DECREF( tmp_subscript_name_19 );
    if ( tmp_compare_left_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 842;
        goto try_except_handler_8;
    }
    tmp_source_name_19 = par_self;

    tmp_compare_right_23 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain__FinnishStemmer__vowels );
    if ( tmp_compare_right_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_23 );

        exception_lineno = 842;
        goto try_except_handler_8;
    }
    tmp_cmp_In_12 = PySequence_Contains( tmp_compare_right_23, tmp_compare_left_23 );
    assert( !(tmp_cmp_In_12 == -1) );
    Py_DECREF( tmp_compare_left_23 );
    Py_DECREF( tmp_compare_right_23 );
    if ( tmp_cmp_In_12 == 1 )
    {
        goto branch_yes_43;
    }
    else
    {
        goto branch_no_43;
    }
    branch_yes_43:;
    goto loop_start_5;
    goto branch_end_43;
    branch_no_43:;
    tmp_compare_left_24 = var_i;

    tmp_compare_right_24 = const_int_pos_1;
    tmp_cmp_Eq_10 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_24, tmp_compare_right_24 );
    if ( tmp_cmp_Eq_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 845;
        goto try_except_handler_8;
    }
    if ( tmp_cmp_Eq_10 == 1 )
    {
        goto branch_yes_44;
    }
    else
    {
        goto branch_no_44;
    }
    branch_yes_44:;
    tmp_slice_source_86 = par_word;

    if ( tmp_slice_source_86 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 846;
        goto try_except_handler_8;
    }

    tmp_operand_name_18 = var_i;

    tmp_left_name_4 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_18 );
    if ( tmp_left_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 846;
        goto try_except_handler_8;
    }
    tmp_right_name_4 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_SUB( tmp_left_name_4, tmp_right_name_4 );
    Py_DECREF( tmp_left_name_4 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 846;
        goto try_except_handler_8;
    }
    tmp_compare_left_25 = LOOKUP_SLICE( tmp_slice_source_86, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_lower_1 );
    if ( tmp_compare_left_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 846;
        goto try_except_handler_8;
    }
    tmp_source_name_20 = par_self;

    tmp_compare_right_25 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain__FinnishStemmer__double_consonants );
    if ( tmp_compare_right_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_25 );

        exception_lineno = 846;
        goto try_except_handler_8;
    }
    tmp_cmp_In_13 = PySequence_Contains( tmp_compare_right_25, tmp_compare_left_25 );
    assert( !(tmp_cmp_In_13 == -1) );
    Py_DECREF( tmp_compare_left_25 );
    Py_DECREF( tmp_compare_right_25 );
    if ( tmp_cmp_In_13 == 1 )
    {
        goto branch_yes_45;
    }
    else
    {
        goto branch_no_45;
    }
    branch_yes_45:;
    tmp_sliceslicedel_index_lower_74 = 0;
    tmp_slice_index_upper_74 = -1;
    tmp_slice_source_87 = par_word;

    if ( tmp_slice_source_87 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 847;
        goto try_except_handler_8;
    }

    tmp_assign_source_104 = LOOKUP_INDEX_SLICE( tmp_slice_source_87, tmp_sliceslicedel_index_lower_74, tmp_slice_index_upper_74 );
    if ( tmp_assign_source_104 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 847;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_104;
        Py_XDECREF( old );
    }

    branch_no_45:;
    goto branch_end_44;
    branch_no_44:;
    tmp_slice_source_88 = par_word;

    if ( tmp_slice_source_88 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 849;
        goto try_except_handler_8;
    }

    tmp_operand_name_19 = var_i;

    tmp_left_name_5 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_19 );
    if ( tmp_left_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 849;
        goto try_except_handler_8;
    }
    tmp_right_name_5 = const_int_pos_1;
    tmp_slice_lower_2 = BINARY_OPERATION_SUB( tmp_left_name_5, tmp_right_name_5 );
    Py_DECREF( tmp_left_name_5 );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 849;
        goto try_except_handler_8;
    }
    tmp_operand_name_20 = var_i;

    tmp_left_name_6 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_20 );
    if ( tmp_left_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_2 );

        exception_lineno = 849;
        goto try_except_handler_8;
    }
    tmp_right_name_6 = const_int_pos_1;
    tmp_slice_upper_13 = BINARY_OPERATION_ADD( tmp_left_name_6, tmp_right_name_6 );
    Py_DECREF( tmp_left_name_6 );
    if ( tmp_slice_upper_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_2 );

        exception_lineno = 849;
        goto try_except_handler_8;
    }
    tmp_compare_left_26 = LOOKUP_SLICE( tmp_slice_source_88, tmp_slice_lower_2, tmp_slice_upper_13 );
    Py_DECREF( tmp_slice_lower_2 );
    Py_DECREF( tmp_slice_upper_13 );
    if ( tmp_compare_left_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 849;
        goto try_except_handler_8;
    }
    tmp_source_name_21 = par_self;

    tmp_compare_right_26 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain__FinnishStemmer__double_consonants );
    if ( tmp_compare_right_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_26 );

        exception_lineno = 849;
        goto try_except_handler_8;
    }
    tmp_cmp_In_14 = PySequence_Contains( tmp_compare_right_26, tmp_compare_left_26 );
    assert( !(tmp_cmp_In_14 == -1) );
    Py_DECREF( tmp_compare_left_26 );
    Py_DECREF( tmp_compare_right_26 );
    if ( tmp_cmp_In_14 == 1 )
    {
        goto branch_yes_46;
    }
    else
    {
        goto branch_no_46;
    }
    branch_yes_46:;
    tmp_source_name_22 = const_unicode_empty;
    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_join );
    assert( tmp_called_name_5 != NULL );
    tmp_args_element_name_10 = PyTuple_New( 2 );
    tmp_slice_source_89 = par_word;

    if ( tmp_slice_source_89 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_10 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 850;
        goto try_except_handler_8;
    }

    tmp_operand_name_21 = var_i;

    tmp_slice_upper_14 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_21 );
    if ( tmp_slice_upper_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 850;
        goto try_except_handler_8;
    }
    tmp_tuple_element_4 = LOOKUP_SLICE( tmp_slice_source_89, Py_None, tmp_slice_upper_14 );
    Py_DECREF( tmp_slice_upper_14 );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 850;
        goto try_except_handler_8;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_10, 0, tmp_tuple_element_4 );
    tmp_slice_source_90 = par_word;

    if ( tmp_slice_source_90 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_10 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 850;
        goto try_except_handler_8;
    }

    tmp_operand_name_22 = var_i;

    tmp_left_name_7 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_22 );
    if ( tmp_left_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 850;
        goto try_except_handler_8;
    }
    tmp_right_name_7 = const_int_pos_1;
    tmp_slice_lower_3 = BINARY_OPERATION_ADD( tmp_left_name_7, tmp_right_name_7 );
    Py_DECREF( tmp_left_name_7 );
    if ( tmp_slice_lower_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 850;
        goto try_except_handler_8;
    }
    tmp_tuple_element_4 = LOOKUP_SLICE( tmp_slice_source_90, tmp_slice_lower_3, Py_None );
    Py_DECREF( tmp_slice_lower_3 );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 850;
        goto try_except_handler_8;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_10, 1, tmp_tuple_element_4 );
    frame_function->f_lineno = 850;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_assign_source_105 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_assign_source_105 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 850;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_105;
        Py_XDECREF( old );
    }

    branch_no_46:;
    branch_end_44:;
    goto loop_end_5;
    branch_end_43:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;
        goto try_except_handler_8;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    tmp_return_value = par_word;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 854;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_step3_success )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_step3_success,
                    var_step3_success
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_r2 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r2,
                    var_r2
                );

                assert( res == 0 );
            }

            if ( var_suffix )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_suffix,
                    var_suffix
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_6_FinnishStemmer$$$function_1_stem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step3_success );
    var_step3_success = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step3_success );
    var_step3_success = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_6_FinnishStemmer$$$function_1_stem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_7_FrenchStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__FrenchStemmer__vowels = NULL;
    PyObject *var__FrenchStemmer__step1_suffixes = NULL;
    PyObject *var__FrenchStemmer__step2a_suffixes = NULL;
    PyObject *var__FrenchStemmer__step2b_suffixes = NULL;
    PyObject *var__FrenchStemmer__step4_suffixes = NULL;
    PyObject *var_stem = NULL;
    PyObject *var__FrenchStemmer__rv_french = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_b6e83643cb2de0d95c9b2dcd46f00cfa;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_unicode_digest_471cac2009577067bf65eeecd4cd9ef0;
    assert( var__FrenchStemmer__vowels == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var__FrenchStemmer__vowels = tmp_assign_source_3;

    tmp_assign_source_4 = const_tuple_227a81f8638c04593034a84935ffc4b7_tuple;
    assert( var__FrenchStemmer__step1_suffixes == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var__FrenchStemmer__step1_suffixes = tmp_assign_source_4;

    tmp_assign_source_5 = const_tuple_02aa7bc7ed6ea108d2d884af1ee56087_tuple;
    assert( var__FrenchStemmer__step2a_suffixes == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__FrenchStemmer__step2a_suffixes = tmp_assign_source_5;

    tmp_assign_source_6 = const_tuple_faa4eb74f3b25ad8912ba0836572323b_tuple;
    assert( var__FrenchStemmer__step2b_suffixes == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var__FrenchStemmer__step2b_suffixes = tmp_assign_source_6;

    tmp_assign_source_7 = const_tuple_95895417777ef4f35411bbf2690771a5_tuple;
    assert( var__FrenchStemmer__step4_suffixes == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var__FrenchStemmer__step4_suffixes = tmp_assign_source_7;

    tmp_assign_source_8 = MAKE_FUNCTION_nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_1_stem(  );
    assert( var_stem == NULL );
    var_stem = tmp_assign_source_8;

    tmp_assign_source_9 = MAKE_FUNCTION_nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_2___rv_french(  );
    assert( var__FrenchStemmer__rv_french == NULL );
    var__FrenchStemmer__rv_french = tmp_assign_source_9;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__FrenchStemmer__vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FrenchStemmer__vowels,
            var__FrenchStemmer__vowels
        );

        assert( res == 0 );
    }

    if ( var__FrenchStemmer__step1_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FrenchStemmer__step1_suffixes,
            var__FrenchStemmer__step1_suffixes
        );

        assert( res == 0 );
    }

    if ( var__FrenchStemmer__step2a_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FrenchStemmer__step2a_suffixes,
            var__FrenchStemmer__step2a_suffixes
        );

        assert( res == 0 );
    }

    if ( var__FrenchStemmer__step2b_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FrenchStemmer__step2b_suffixes,
            var__FrenchStemmer__step2b_suffixes
        );

        assert( res == 0 );
    }

    if ( var__FrenchStemmer__step4_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FrenchStemmer__step4_suffixes,
            var__FrenchStemmer__step4_suffixes
        );

        assert( res == 0 );
    }

    if ( var_stem )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_stem,
            var_stem
        );

        assert( res == 0 );
    }

    if ( var__FrenchStemmer__rv_french )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__FrenchStemmer__rv_french,
            var__FrenchStemmer__rv_french
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_7_FrenchStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__FrenchStemmer__vowels );
    Py_DECREF( var__FrenchStemmer__vowels );
    var__FrenchStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__FrenchStemmer__step1_suffixes );
    Py_DECREF( var__FrenchStemmer__step1_suffixes );
    var__FrenchStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__FrenchStemmer__step2a_suffixes );
    Py_DECREF( var__FrenchStemmer__step2a_suffixes );
    var__FrenchStemmer__step2a_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__FrenchStemmer__step2b_suffixes );
    Py_DECREF( var__FrenchStemmer__step2b_suffixes );
    var__FrenchStemmer__step2b_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__FrenchStemmer__step4_suffixes );
    Py_DECREF( var__FrenchStemmer__step4_suffixes );
    var__FrenchStemmer__step4_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    CHECK_OBJECT( (PyObject *)var__FrenchStemmer__rv_french );
    Py_DECREF( var__FrenchStemmer__rv_french );
    var__FrenchStemmer__rv_french = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__FrenchStemmer__vowels );
    Py_DECREF( var__FrenchStemmer__vowels );
    var__FrenchStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__FrenchStemmer__step1_suffixes );
    Py_DECREF( var__FrenchStemmer__step1_suffixes );
    var__FrenchStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__FrenchStemmer__step2a_suffixes );
    Py_DECREF( var__FrenchStemmer__step2a_suffixes );
    var__FrenchStemmer__step2a_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__FrenchStemmer__step2b_suffixes );
    Py_DECREF( var__FrenchStemmer__step2b_suffixes );
    var__FrenchStemmer__step2b_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__FrenchStemmer__step4_suffixes );
    Py_DECREF( var__FrenchStemmer__step4_suffixes );
    var__FrenchStemmer__step4_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    CHECK_OBJECT( (PyObject *)var__FrenchStemmer__rv_french );
    Py_DECREF( var__FrenchStemmer__rv_french );
    var__FrenchStemmer__rv_french = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_7_FrenchStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_1_stem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_step1_success = NULL;
    PyObject *var_rv_ending_found = NULL;
    PyObject *var_step2a_success = NULL;
    PyObject *var_step2b_success = NULL;
    PyObject *var_i = NULL;
    PyObject *var_r1 = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_rv = NULL;
    PyObject *var_suffix = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *tmp_for_loop_6__for_iterator = NULL;
    PyObject *tmp_for_loop_6__iter_value = NULL;
    PyObject *tmp_for_loop_7__for_iterator = NULL;
    PyObject *tmp_for_loop_7__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    int tmp_and_left_truth_3;
    int tmp_and_left_truth_4;
    int tmp_and_left_truth_5;
    int tmp_and_left_truth_6;
    int tmp_and_left_truth_7;
    int tmp_and_left_truth_8;
    int tmp_and_left_truth_9;
    int tmp_and_left_truth_10;
    int tmp_and_left_truth_11;
    int tmp_and_left_truth_12;
    int tmp_and_left_truth_13;
    int tmp_and_left_truth_14;
    int tmp_and_left_truth_15;
    int tmp_and_left_truth_16;
    int tmp_and_left_truth_17;
    int tmp_and_left_truth_18;
    int tmp_and_left_truth_19;
    int tmp_and_left_truth_20;
    int tmp_and_left_truth_21;
    int tmp_and_left_truth_22;
    int tmp_and_left_truth_23;
    int tmp_and_left_truth_24;
    int tmp_and_left_truth_25;
    int tmp_and_left_truth_26;
    int tmp_and_left_truth_27;
    int tmp_and_left_truth_28;
    int tmp_and_left_truth_29;
    int tmp_and_left_truth_30;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_left_value_3;
    PyObject *tmp_and_left_value_4;
    PyObject *tmp_and_left_value_5;
    PyObject *tmp_and_left_value_6;
    PyObject *tmp_and_left_value_7;
    PyObject *tmp_and_left_value_8;
    PyObject *tmp_and_left_value_9;
    PyObject *tmp_and_left_value_10;
    PyObject *tmp_and_left_value_11;
    PyObject *tmp_and_left_value_12;
    PyObject *tmp_and_left_value_13;
    PyObject *tmp_and_left_value_14;
    PyObject *tmp_and_left_value_15;
    PyObject *tmp_and_left_value_16;
    PyObject *tmp_and_left_value_17;
    PyObject *tmp_and_left_value_18;
    PyObject *tmp_and_left_value_19;
    PyObject *tmp_and_left_value_20;
    PyObject *tmp_and_left_value_21;
    PyObject *tmp_and_left_value_22;
    PyObject *tmp_and_left_value_23;
    PyObject *tmp_and_left_value_24;
    PyObject *tmp_and_left_value_25;
    PyObject *tmp_and_left_value_26;
    PyObject *tmp_and_left_value_27;
    PyObject *tmp_and_left_value_28;
    PyObject *tmp_and_left_value_29;
    PyObject *tmp_and_left_value_30;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_and_right_value_3;
    PyObject *tmp_and_right_value_4;
    PyObject *tmp_and_right_value_5;
    PyObject *tmp_and_right_value_6;
    PyObject *tmp_and_right_value_7;
    PyObject *tmp_and_right_value_8;
    PyObject *tmp_and_right_value_9;
    PyObject *tmp_and_right_value_10;
    PyObject *tmp_and_right_value_11;
    PyObject *tmp_and_right_value_12;
    PyObject *tmp_and_right_value_13;
    PyObject *tmp_and_right_value_14;
    PyObject *tmp_and_right_value_15;
    PyObject *tmp_and_right_value_16;
    PyObject *tmp_and_right_value_17;
    PyObject *tmp_and_right_value_18;
    PyObject *tmp_and_right_value_19;
    PyObject *tmp_and_right_value_20;
    PyObject *tmp_and_right_value_21;
    PyObject *tmp_and_right_value_22;
    PyObject *tmp_and_right_value_23;
    PyObject *tmp_and_right_value_24;
    PyObject *tmp_and_right_value_25;
    PyObject *tmp_and_right_value_26;
    PyObject *tmp_and_right_value_27;
    PyObject *tmp_and_right_value_28;
    PyObject *tmp_and_right_value_29;
    PyObject *tmp_and_right_value_30;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_assign_source_106;
    PyObject *tmp_assign_source_107;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_instance_12;
    PyObject *tmp_called_instance_13;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_Eq_4;
    int tmp_cmp_Eq_5;
    int tmp_cmp_Eq_6;
    int tmp_cmp_Eq_7;
    int tmp_cmp_Eq_8;
    int tmp_cmp_Eq_9;
    int tmp_cmp_Eq_10;
    int tmp_cmp_Eq_11;
    int tmp_cmp_Eq_12;
    int tmp_cmp_Eq_13;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    int tmp_cmp_In_10;
    int tmp_cmp_In_11;
    int tmp_cmp_In_12;
    int tmp_cmp_In_13;
    int tmp_cmp_In_14;
    int tmp_cmp_In_15;
    int tmp_cmp_In_16;
    int tmp_cmp_In_17;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_left_17;
    PyObject *tmp_compare_left_18;
    PyObject *tmp_compare_left_19;
    PyObject *tmp_compare_left_20;
    PyObject *tmp_compare_left_21;
    PyObject *tmp_compare_left_22;
    PyObject *tmp_compare_left_23;
    PyObject *tmp_compare_left_24;
    PyObject *tmp_compare_left_25;
    PyObject *tmp_compare_left_26;
    PyObject *tmp_compare_left_27;
    PyObject *tmp_compare_left_28;
    PyObject *tmp_compare_left_29;
    PyObject *tmp_compare_left_30;
    PyObject *tmp_compare_left_31;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_compare_right_17;
    PyObject *tmp_compare_right_18;
    PyObject *tmp_compare_right_19;
    PyObject *tmp_compare_right_20;
    PyObject *tmp_compare_right_21;
    PyObject *tmp_compare_right_22;
    PyObject *tmp_compare_right_23;
    PyObject *tmp_compare_right_24;
    PyObject *tmp_compare_right_25;
    PyObject *tmp_compare_right_26;
    PyObject *tmp_compare_right_27;
    PyObject *tmp_compare_right_28;
    PyObject *tmp_compare_right_29;
    PyObject *tmp_compare_right_30;
    PyObject *tmp_compare_right_31;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_left_7;
    PyObject *tmp_compexpr_left_8;
    PyObject *tmp_compexpr_left_9;
    PyObject *tmp_compexpr_left_10;
    PyObject *tmp_compexpr_left_11;
    PyObject *tmp_compexpr_left_12;
    PyObject *tmp_compexpr_left_13;
    PyObject *tmp_compexpr_left_14;
    PyObject *tmp_compexpr_left_15;
    PyObject *tmp_compexpr_left_16;
    PyObject *tmp_compexpr_left_17;
    PyObject *tmp_compexpr_left_18;
    PyObject *tmp_compexpr_left_19;
    PyObject *tmp_compexpr_left_20;
    PyObject *tmp_compexpr_left_21;
    PyObject *tmp_compexpr_left_22;
    PyObject *tmp_compexpr_left_23;
    PyObject *tmp_compexpr_left_24;
    PyObject *tmp_compexpr_left_25;
    PyObject *tmp_compexpr_left_26;
    PyObject *tmp_compexpr_left_27;
    PyObject *tmp_compexpr_left_28;
    PyObject *tmp_compexpr_left_29;
    PyObject *tmp_compexpr_left_30;
    PyObject *tmp_compexpr_left_31;
    PyObject *tmp_compexpr_left_32;
    PyObject *tmp_compexpr_left_33;
    PyObject *tmp_compexpr_left_34;
    PyObject *tmp_compexpr_left_35;
    PyObject *tmp_compexpr_left_36;
    PyObject *tmp_compexpr_left_37;
    PyObject *tmp_compexpr_left_38;
    PyObject *tmp_compexpr_left_39;
    PyObject *tmp_compexpr_left_40;
    PyObject *tmp_compexpr_left_41;
    PyObject *tmp_compexpr_left_42;
    PyObject *tmp_compexpr_left_43;
    PyObject *tmp_compexpr_left_44;
    PyObject *tmp_compexpr_left_45;
    PyObject *tmp_compexpr_left_46;
    PyObject *tmp_compexpr_left_47;
    PyObject *tmp_compexpr_left_48;
    PyObject *tmp_compexpr_left_49;
    PyObject *tmp_compexpr_left_50;
    PyObject *tmp_compexpr_left_51;
    PyObject *tmp_compexpr_left_52;
    PyObject *tmp_compexpr_left_53;
    PyObject *tmp_compexpr_left_54;
    PyObject *tmp_compexpr_left_55;
    PyObject *tmp_compexpr_left_56;
    PyObject *tmp_compexpr_left_57;
    PyObject *tmp_compexpr_left_58;
    PyObject *tmp_compexpr_left_59;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    PyObject *tmp_compexpr_right_7;
    PyObject *tmp_compexpr_right_8;
    PyObject *tmp_compexpr_right_9;
    PyObject *tmp_compexpr_right_10;
    PyObject *tmp_compexpr_right_11;
    PyObject *tmp_compexpr_right_12;
    PyObject *tmp_compexpr_right_13;
    PyObject *tmp_compexpr_right_14;
    PyObject *tmp_compexpr_right_15;
    PyObject *tmp_compexpr_right_16;
    PyObject *tmp_compexpr_right_17;
    PyObject *tmp_compexpr_right_18;
    PyObject *tmp_compexpr_right_19;
    PyObject *tmp_compexpr_right_20;
    PyObject *tmp_compexpr_right_21;
    PyObject *tmp_compexpr_right_22;
    PyObject *tmp_compexpr_right_23;
    PyObject *tmp_compexpr_right_24;
    PyObject *tmp_compexpr_right_25;
    PyObject *tmp_compexpr_right_26;
    PyObject *tmp_compexpr_right_27;
    PyObject *tmp_compexpr_right_28;
    PyObject *tmp_compexpr_right_29;
    PyObject *tmp_compexpr_right_30;
    PyObject *tmp_compexpr_right_31;
    PyObject *tmp_compexpr_right_32;
    PyObject *tmp_compexpr_right_33;
    PyObject *tmp_compexpr_right_34;
    PyObject *tmp_compexpr_right_35;
    PyObject *tmp_compexpr_right_36;
    PyObject *tmp_compexpr_right_37;
    PyObject *tmp_compexpr_right_38;
    PyObject *tmp_compexpr_right_39;
    PyObject *tmp_compexpr_right_40;
    PyObject *tmp_compexpr_right_41;
    PyObject *tmp_compexpr_right_42;
    PyObject *tmp_compexpr_right_43;
    PyObject *tmp_compexpr_right_44;
    PyObject *tmp_compexpr_right_45;
    PyObject *tmp_compexpr_right_46;
    PyObject *tmp_compexpr_right_47;
    PyObject *tmp_compexpr_right_48;
    PyObject *tmp_compexpr_right_49;
    PyObject *tmp_compexpr_right_50;
    PyObject *tmp_compexpr_right_51;
    PyObject *tmp_compexpr_right_52;
    PyObject *tmp_compexpr_right_53;
    PyObject *tmp_compexpr_right_54;
    PyObject *tmp_compexpr_right_55;
    PyObject *tmp_compexpr_right_56;
    PyObject *tmp_compexpr_right_57;
    PyObject *tmp_compexpr_right_58;
    PyObject *tmp_compexpr_right_59;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    int tmp_cond_truth_17;
    int tmp_cond_truth_18;
    int tmp_cond_truth_19;
    int tmp_cond_truth_20;
    int tmp_cond_truth_21;
    int tmp_cond_truth_22;
    int tmp_cond_truth_23;
    int tmp_cond_truth_24;
    int tmp_cond_truth_25;
    int tmp_cond_truth_26;
    int tmp_cond_truth_27;
    int tmp_cond_truth_28;
    int tmp_cond_truth_29;
    int tmp_cond_truth_30;
    int tmp_cond_truth_31;
    int tmp_cond_truth_32;
    int tmp_cond_truth_33;
    int tmp_cond_truth_34;
    int tmp_cond_truth_35;
    int tmp_cond_truth_36;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_cond_value_17;
    PyObject *tmp_cond_value_18;
    PyObject *tmp_cond_value_19;
    PyObject *tmp_cond_value_20;
    PyObject *tmp_cond_value_21;
    PyObject *tmp_cond_value_22;
    PyObject *tmp_cond_value_23;
    PyObject *tmp_cond_value_24;
    PyObject *tmp_cond_value_25;
    PyObject *tmp_cond_value_26;
    PyObject *tmp_cond_value_27;
    PyObject *tmp_cond_value_28;
    PyObject *tmp_cond_value_29;
    PyObject *tmp_cond_value_30;
    PyObject *tmp_cond_value_31;
    PyObject *tmp_cond_value_32;
    PyObject *tmp_cond_value_33;
    PyObject *tmp_cond_value_34;
    PyObject *tmp_cond_value_35;
    PyObject *tmp_cond_value_36;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iter_arg_8;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_left_name_6;
    PyObject *tmp_left_name_7;
    PyObject *tmp_left_name_8;
    PyObject *tmp_left_name_9;
    PyObject *tmp_left_name_10;
    PyObject *tmp_left_name_11;
    PyObject *tmp_left_name_12;
    PyObject *tmp_left_name_13;
    PyObject *tmp_left_name_14;
    PyObject *tmp_left_name_15;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_len_arg_6;
    PyObject *tmp_len_arg_7;
    PyObject *tmp_len_arg_8;
    PyObject *tmp_len_arg_9;
    PyObject *tmp_len_arg_10;
    PyObject *tmp_len_arg_11;
    PyObject *tmp_len_arg_12;
    PyObject *tmp_len_arg_13;
    PyObject *tmp_len_arg_14;
    PyObject *tmp_len_arg_15;
    PyObject *tmp_len_arg_16;
    PyObject *tmp_len_arg_17;
    PyObject *tmp_len_arg_18;
    PyObject *tmp_len_arg_19;
    PyObject *tmp_len_arg_20;
    PyObject *tmp_len_arg_21;
    PyObject *tmp_len_arg_22;
    PyObject *tmp_len_arg_23;
    PyObject *tmp_len_arg_24;
    PyObject *tmp_len_arg_25;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_next_source_7;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    PyObject *tmp_operand_name_4;
    PyObject *tmp_operand_name_5;
    PyObject *tmp_operand_name_6;
    PyObject *tmp_operand_name_7;
    PyObject *tmp_operand_name_8;
    PyObject *tmp_operand_name_9;
    PyObject *tmp_operand_name_10;
    PyObject *tmp_operand_name_11;
    PyObject *tmp_operand_name_12;
    PyObject *tmp_operand_name_13;
    PyObject *tmp_operand_name_14;
    PyObject *tmp_operand_name_15;
    PyObject *tmp_operand_name_16;
    PyObject *tmp_operand_name_17;
    PyObject *tmp_operand_name_18;
    PyObject *tmp_operand_name_19;
    PyObject *tmp_operand_name_20;
    PyObject *tmp_operand_name_21;
    PyObject *tmp_operand_name_22;
    PyObject *tmp_operand_name_23;
    PyObject *tmp_operand_name_24;
    PyObject *tmp_operand_name_25;
    int tmp_or_left_truth_1;
    int tmp_or_left_truth_2;
    int tmp_or_left_truth_3;
    int tmp_or_left_truth_4;
    int tmp_or_left_truth_5;
    int tmp_or_left_truth_6;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_left_value_2;
    PyObject *tmp_or_left_value_3;
    PyObject *tmp_or_left_value_4;
    PyObject *tmp_or_left_value_5;
    PyObject *tmp_or_left_value_6;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_or_right_value_2;
    PyObject *tmp_or_right_value_3;
    PyObject *tmp_or_right_value_4;
    PyObject *tmp_or_right_value_5;
    PyObject *tmp_or_right_value_6;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    PyObject *tmp_right_name_6;
    PyObject *tmp_right_name_7;
    PyObject *tmp_right_name_8;
    PyObject *tmp_right_name_9;
    PyObject *tmp_right_name_10;
    PyObject *tmp_right_name_11;
    PyObject *tmp_right_name_12;
    PyObject *tmp_right_name_13;
    PyObject *tmp_right_name_14;
    PyObject *tmp_right_name_15;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    Py_ssize_t tmp_slice_index_upper_6;
    Py_ssize_t tmp_slice_index_upper_7;
    Py_ssize_t tmp_slice_index_upper_8;
    Py_ssize_t tmp_slice_index_upper_9;
    Py_ssize_t tmp_slice_index_upper_10;
    Py_ssize_t tmp_slice_index_upper_11;
    Py_ssize_t tmp_slice_index_upper_12;
    Py_ssize_t tmp_slice_index_upper_13;
    Py_ssize_t tmp_slice_index_upper_14;
    Py_ssize_t tmp_slice_index_upper_15;
    Py_ssize_t tmp_slice_index_upper_16;
    Py_ssize_t tmp_slice_index_upper_17;
    Py_ssize_t tmp_slice_index_upper_18;
    Py_ssize_t tmp_slice_index_upper_19;
    Py_ssize_t tmp_slice_index_upper_20;
    Py_ssize_t tmp_slice_index_upper_21;
    Py_ssize_t tmp_slice_index_upper_22;
    Py_ssize_t tmp_slice_index_upper_23;
    Py_ssize_t tmp_slice_index_upper_24;
    Py_ssize_t tmp_slice_index_upper_25;
    Py_ssize_t tmp_slice_index_upper_26;
    Py_ssize_t tmp_slice_index_upper_27;
    Py_ssize_t tmp_slice_index_upper_28;
    Py_ssize_t tmp_slice_index_upper_29;
    Py_ssize_t tmp_slice_index_upper_30;
    Py_ssize_t tmp_slice_index_upper_31;
    Py_ssize_t tmp_slice_index_upper_32;
    Py_ssize_t tmp_slice_index_upper_33;
    Py_ssize_t tmp_slice_index_upper_34;
    Py_ssize_t tmp_slice_index_upper_35;
    Py_ssize_t tmp_slice_index_upper_36;
    Py_ssize_t tmp_slice_index_upper_37;
    Py_ssize_t tmp_slice_index_upper_38;
    Py_ssize_t tmp_slice_index_upper_39;
    Py_ssize_t tmp_slice_index_upper_40;
    Py_ssize_t tmp_slice_index_upper_41;
    Py_ssize_t tmp_slice_index_upper_42;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_lower_3;
    PyObject *tmp_slice_lower_4;
    PyObject *tmp_slice_lower_5;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_source_10;
    PyObject *tmp_slice_source_11;
    PyObject *tmp_slice_source_12;
    PyObject *tmp_slice_source_13;
    PyObject *tmp_slice_source_14;
    PyObject *tmp_slice_source_15;
    PyObject *tmp_slice_source_16;
    PyObject *tmp_slice_source_17;
    PyObject *tmp_slice_source_18;
    PyObject *tmp_slice_source_19;
    PyObject *tmp_slice_source_20;
    PyObject *tmp_slice_source_21;
    PyObject *tmp_slice_source_22;
    PyObject *tmp_slice_source_23;
    PyObject *tmp_slice_source_24;
    PyObject *tmp_slice_source_25;
    PyObject *tmp_slice_source_26;
    PyObject *tmp_slice_source_27;
    PyObject *tmp_slice_source_28;
    PyObject *tmp_slice_source_29;
    PyObject *tmp_slice_source_30;
    PyObject *tmp_slice_source_31;
    PyObject *tmp_slice_source_32;
    PyObject *tmp_slice_source_33;
    PyObject *tmp_slice_source_34;
    PyObject *tmp_slice_source_35;
    PyObject *tmp_slice_source_36;
    PyObject *tmp_slice_source_37;
    PyObject *tmp_slice_source_38;
    PyObject *tmp_slice_source_39;
    PyObject *tmp_slice_source_40;
    PyObject *tmp_slice_source_41;
    PyObject *tmp_slice_source_42;
    PyObject *tmp_slice_source_43;
    PyObject *tmp_slice_source_44;
    PyObject *tmp_slice_source_45;
    PyObject *tmp_slice_source_46;
    PyObject *tmp_slice_source_47;
    PyObject *tmp_slice_source_48;
    PyObject *tmp_slice_source_49;
    PyObject *tmp_slice_source_50;
    PyObject *tmp_slice_source_51;
    PyObject *tmp_slice_source_52;
    PyObject *tmp_slice_source_53;
    PyObject *tmp_slice_source_54;
    PyObject *tmp_slice_source_55;
    PyObject *tmp_slice_source_56;
    PyObject *tmp_slice_source_57;
    PyObject *tmp_slice_source_58;
    PyObject *tmp_slice_source_59;
    PyObject *tmp_slice_source_60;
    PyObject *tmp_slice_source_61;
    PyObject *tmp_slice_source_62;
    PyObject *tmp_slice_source_63;
    PyObject *tmp_slice_source_64;
    PyObject *tmp_slice_source_65;
    PyObject *tmp_slice_source_66;
    PyObject *tmp_slice_source_67;
    PyObject *tmp_slice_source_68;
    PyObject *tmp_slice_source_69;
    PyObject *tmp_slice_source_70;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    PyObject *tmp_slice_upper_4;
    PyObject *tmp_slice_upper_5;
    PyObject *tmp_slice_upper_6;
    PyObject *tmp_slice_upper_7;
    PyObject *tmp_slice_upper_8;
    PyObject *tmp_slice_upper_9;
    PyObject *tmp_slice_upper_10;
    PyObject *tmp_slice_upper_11;
    PyObject *tmp_slice_upper_12;
    PyObject *tmp_slice_upper_13;
    PyObject *tmp_slice_upper_14;
    PyObject *tmp_slice_upper_15;
    PyObject *tmp_slice_upper_16;
    PyObject *tmp_slice_upper_17;
    PyObject *tmp_slice_upper_18;
    PyObject *tmp_slice_upper_19;
    PyObject *tmp_slice_upper_20;
    PyObject *tmp_slice_upper_21;
    PyObject *tmp_slice_upper_22;
    PyObject *tmp_slice_upper_23;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_6;
    Py_ssize_t tmp_sliceslicedel_index_lower_7;
    Py_ssize_t tmp_sliceslicedel_index_lower_8;
    Py_ssize_t tmp_sliceslicedel_index_lower_9;
    Py_ssize_t tmp_sliceslicedel_index_lower_10;
    Py_ssize_t tmp_sliceslicedel_index_lower_11;
    Py_ssize_t tmp_sliceslicedel_index_lower_12;
    Py_ssize_t tmp_sliceslicedel_index_lower_13;
    Py_ssize_t tmp_sliceslicedel_index_lower_14;
    Py_ssize_t tmp_sliceslicedel_index_lower_15;
    Py_ssize_t tmp_sliceslicedel_index_lower_16;
    Py_ssize_t tmp_sliceslicedel_index_lower_17;
    Py_ssize_t tmp_sliceslicedel_index_lower_18;
    Py_ssize_t tmp_sliceslicedel_index_lower_19;
    Py_ssize_t tmp_sliceslicedel_index_lower_20;
    Py_ssize_t tmp_sliceslicedel_index_lower_21;
    Py_ssize_t tmp_sliceslicedel_index_lower_22;
    Py_ssize_t tmp_sliceslicedel_index_lower_23;
    Py_ssize_t tmp_sliceslicedel_index_lower_24;
    Py_ssize_t tmp_sliceslicedel_index_lower_25;
    Py_ssize_t tmp_sliceslicedel_index_lower_26;
    Py_ssize_t tmp_sliceslicedel_index_lower_27;
    Py_ssize_t tmp_sliceslicedel_index_lower_28;
    Py_ssize_t tmp_sliceslicedel_index_lower_29;
    Py_ssize_t tmp_sliceslicedel_index_lower_30;
    Py_ssize_t tmp_sliceslicedel_index_lower_31;
    Py_ssize_t tmp_sliceslicedel_index_lower_32;
    Py_ssize_t tmp_sliceslicedel_index_lower_33;
    Py_ssize_t tmp_sliceslicedel_index_lower_34;
    Py_ssize_t tmp_sliceslicedel_index_lower_35;
    Py_ssize_t tmp_sliceslicedel_index_lower_36;
    Py_ssize_t tmp_sliceslicedel_index_lower_37;
    Py_ssize_t tmp_sliceslicedel_index_lower_38;
    Py_ssize_t tmp_sliceslicedel_index_lower_39;
    Py_ssize_t tmp_sliceslicedel_index_lower_40;
    Py_ssize_t tmp_sliceslicedel_index_lower_41;
    Py_ssize_t tmp_sliceslicedel_index_lower_42;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscribed_name_6;
    PyObject *tmp_subscribed_name_7;
    PyObject *tmp_subscribed_name_8;
    PyObject *tmp_subscribed_name_9;
    PyObject *tmp_subscribed_name_10;
    PyObject *tmp_subscribed_name_11;
    PyObject *tmp_subscribed_name_12;
    PyObject *tmp_subscribed_name_13;
    PyObject *tmp_subscribed_name_14;
    PyObject *tmp_subscribed_name_15;
    PyObject *tmp_subscribed_name_16;
    PyObject *tmp_subscribed_name_17;
    PyObject *tmp_subscribed_name_18;
    PyObject *tmp_subscribed_name_19;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_subscript_name_6;
    PyObject *tmp_subscript_name_7;
    PyObject *tmp_subscript_name_8;
    PyObject *tmp_subscript_name_9;
    PyObject *tmp_subscript_name_10;
    PyObject *tmp_subscript_name_11;
    PyObject *tmp_subscript_name_12;
    PyObject *tmp_subscript_name_13;
    PyObject *tmp_subscript_name_14;
    PyObject *tmp_subscript_name_15;
    PyObject *tmp_subscript_name_16;
    PyObject *tmp_subscript_name_17;
    PyObject *tmp_subscript_name_18;
    PyObject *tmp_subscript_name_19;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_tuple_element_13;
    PyObject *tmp_tuple_element_14;
    PyObject *tmp_tuple_element_15;
    PyObject *tmp_tuple_element_16;
    PyObject *tmp_tuple_element_17;
    PyObject *tmp_tuple_element_18;
    PyObject *tmp_tuple_element_19;
    PyObject *tmp_tuple_element_20;
    PyObject *tmp_tuple_element_21;
    PyObject *tmp_tuple_element_22;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_xrange_high_1;
    PyObject *tmp_xrange_high_2;
    PyObject *tmp_xrange_high_3;
    PyObject *tmp_xrange_low_1;
    PyObject *tmp_xrange_low_2;
    PyObject *tmp_xrange_low_3;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_036c5898c5d68d401edf79ea0b1c72fd, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_word;

    tmp_source_name_1 = par_self;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stopwords );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 919;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_assign_source_1 = Py_False;
    assert( var_step1_success == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_step1_success = tmp_assign_source_1;

    tmp_assign_source_2 = Py_False;
    assert( var_rv_ending_found == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var_rv_ending_found = tmp_assign_source_2;

    tmp_assign_source_3 = Py_False;
    assert( var_step2a_success == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var_step2a_success = tmp_assign_source_3;

    tmp_assign_source_4 = Py_False;
    assert( var_step2b_success == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var_step2b_success = tmp_assign_source_4;

    tmp_called_instance_1 = par_word;

    frame_function->f_lineno = 927;
    tmp_assign_source_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_lower );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 927;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_5;
        Py_DECREF( old );
    }

    tmp_xrange_low_1 = const_int_pos_1;
    tmp_len_arg_1 = par_word;

    tmp_xrange_high_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_xrange_high_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 930;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = BUILTIN_XRANGE2( tmp_xrange_low_1, tmp_xrange_high_1 );
    Py_DECREF( tmp_xrange_high_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 930;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 930;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_6;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_7 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 930;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_7;
        Py_XDECREF( old );
    }

    tmp_assign_source_8 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_8;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_1 = par_word;

    if ( tmp_subscribed_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 931;
        goto try_except_handler_2;
    }

    tmp_left_name_1 = var_i;

    tmp_right_name_1 = const_int_pos_1;
    tmp_subscript_name_1 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_subscript_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 931;
        goto try_except_handler_2;
    }
    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 931;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_1 = const_unicode_plain_q;
    tmp_and_left_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 931;
        goto try_except_handler_2;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 931;
        goto try_except_handler_2;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_subscribed_name_2 = par_word;

    if ( tmp_subscribed_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 931;
        goto try_except_handler_2;
    }

    tmp_subscript_name_2 = var_i;

    tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 931;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_2 = const_unicode_plain_u;
    tmp_and_right_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 931;
        goto try_except_handler_2;
    }
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 931;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_2 = const_unicode_empty;
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_join );
    assert( tmp_called_name_1 != NULL );
    tmp_args_element_name_1 = PyTuple_New( 3 );
    tmp_slice_source_1 = par_word;

    if ( tmp_slice_source_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 932;
        goto try_except_handler_2;
    }

    tmp_slice_upper_1 = var_i;

    tmp_tuple_element_1 = LOOKUP_SLICE( tmp_slice_source_1, Py_None, tmp_slice_upper_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 932;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_unicode_plain_U;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_1, 1, tmp_tuple_element_1 );
    tmp_slice_source_2 = par_word;

    if ( tmp_slice_source_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 932;
        goto try_except_handler_2;
    }

    tmp_left_name_2 = var_i;

    tmp_right_name_2 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 932;
        goto try_except_handler_2;
    }
    tmp_tuple_element_1 = LOOKUP_SLICE( tmp_slice_source_2, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_lower_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 932;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_1, 2, tmp_tuple_element_1 );
    frame_function->f_lineno = 932;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 932;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 930;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_xrange_low_2 = const_int_pos_1;
    tmp_len_arg_2 = par_word;

    if ( tmp_len_arg_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 938;
        goto frame_exception_exit_1;
    }

    tmp_left_name_3 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_left_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 938;
        goto frame_exception_exit_1;
    }
    tmp_right_name_3 = const_int_pos_1;
    tmp_xrange_high_2 = BINARY_OPERATION_SUB( tmp_left_name_3, tmp_right_name_3 );
    Py_DECREF( tmp_left_name_3 );
    if ( tmp_xrange_high_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 938;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_2 = BUILTIN_XRANGE2( tmp_xrange_low_2, tmp_xrange_high_2 );
    Py_DECREF( tmp_xrange_high_2 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 938;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 938;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_10;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_11 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_11 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 938;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    tmp_assign_source_12 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_12;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_3 = par_word;

    if ( tmp_subscribed_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 939;
        goto try_except_handler_3;
    }

    tmp_left_name_4 = var_i;

    tmp_right_name_4 = const_int_pos_1;
    tmp_subscript_name_3 = BINARY_OPERATION_SUB( tmp_left_name_4, tmp_right_name_4 );
    if ( tmp_subscript_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 939;
        goto try_except_handler_3;
    }
    tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    Py_DECREF( tmp_subscript_name_3 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 939;
        goto try_except_handler_3;
    }
    tmp_source_name_3 = par_self;

    tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__FrenchStemmer__vowels );
    if ( tmp_compexpr_right_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_3 );

        exception_lineno = 939;
        goto try_except_handler_3;
    }
    tmp_and_left_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    Py_DECREF( tmp_compexpr_right_3 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 939;
        goto try_except_handler_3;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    assert( !(tmp_and_left_truth_2 == -1) );
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_subscribed_name_4 = par_word;

    if ( tmp_subscribed_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 939;
        goto try_except_handler_3;
    }

    tmp_left_name_5 = var_i;

    tmp_right_name_5 = const_int_pos_1;
    tmp_subscript_name_4 = BINARY_OPERATION_ADD( tmp_left_name_5, tmp_right_name_5 );
    if ( tmp_subscript_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 939;
        goto try_except_handler_3;
    }
    tmp_compexpr_left_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    Py_DECREF( tmp_subscript_name_4 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 939;
        goto try_except_handler_3;
    }
    tmp_source_name_4 = par_self;

    tmp_compexpr_right_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__FrenchStemmer__vowels );
    if ( tmp_compexpr_right_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_4 );

        exception_lineno = 939;
        goto try_except_handler_3;
    }
    tmp_and_right_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    Py_DECREF( tmp_compexpr_right_4 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 939;
        goto try_except_handler_3;
    }
    tmp_cond_value_2 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_cond_value_2 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    assert( !(tmp_cond_truth_2 == -1) );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_subscribed_name_5 = par_word;

    if ( tmp_subscribed_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 940;
        goto try_except_handler_3;
    }

    tmp_subscript_name_5 = var_i;

    tmp_compare_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 940;
        goto try_except_handler_3;
    }
    tmp_compare_right_2 = const_unicode_plain_u;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        exception_lineno = 940;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_5 = const_unicode_empty;
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_join );
    assert( tmp_called_name_2 != NULL );
    tmp_args_element_name_2 = PyTuple_New( 3 );
    tmp_slice_source_3 = par_word;

    if ( tmp_slice_source_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 941;
        goto try_except_handler_3;
    }

    tmp_slice_upper_2 = var_i;

    tmp_tuple_element_2 = LOOKUP_SLICE( tmp_slice_source_3, Py_None, tmp_slice_upper_2 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 941;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_2, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = const_unicode_plain_U;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_2, 1, tmp_tuple_element_2 );
    tmp_slice_source_4 = par_word;

    if ( tmp_slice_source_4 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 941;
        goto try_except_handler_3;
    }

    tmp_left_name_6 = var_i;

    tmp_right_name_6 = const_int_pos_1;
    tmp_slice_lower_2 = BINARY_OPERATION_ADD( tmp_left_name_6, tmp_right_name_6 );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 941;
        goto try_except_handler_3;
    }
    tmp_tuple_element_2 = LOOKUP_SLICE( tmp_slice_source_4, tmp_slice_lower_2, Py_None );
    Py_DECREF( tmp_slice_lower_2 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 941;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_2, 2, tmp_tuple_element_2 );
    frame_function->f_lineno = 941;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_13 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 941;
        goto try_except_handler_3;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_13;
        Py_XDECREF( old );
    }

    goto branch_end_4;
    branch_no_4:;
    tmp_subscribed_name_6 = par_word;

    if ( tmp_subscribed_name_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 943;
        goto try_except_handler_3;
    }

    tmp_subscript_name_6 = var_i;

    tmp_compare_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 943;
        goto try_except_handler_3;
    }
    tmp_compare_right_3 = const_unicode_plain_i;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_3 );

        exception_lineno = 943;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_compare_left_3 );
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_source_name_6 = const_unicode_empty;
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_join );
    assert( tmp_called_name_3 != NULL );
    tmp_args_element_name_3 = PyTuple_New( 3 );
    tmp_slice_source_5 = par_word;

    if ( tmp_slice_source_5 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 944;
        goto try_except_handler_3;
    }

    tmp_slice_upper_3 = var_i;

    tmp_tuple_element_3 = LOOKUP_SLICE( tmp_slice_source_5, Py_None, tmp_slice_upper_3 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 944;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_3, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = const_unicode_plain_I;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_element_name_3, 1, tmp_tuple_element_3 );
    tmp_slice_source_6 = par_word;

    if ( tmp_slice_source_6 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 944;
        goto try_except_handler_3;
    }

    tmp_left_name_7 = var_i;

    tmp_right_name_7 = const_int_pos_1;
    tmp_slice_lower_3 = BINARY_OPERATION_ADD( tmp_left_name_7, tmp_right_name_7 );
    if ( tmp_slice_lower_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 944;
        goto try_except_handler_3;
    }
    tmp_tuple_element_3 = LOOKUP_SLICE( tmp_slice_source_6, tmp_slice_lower_3, Py_None );
    Py_DECREF( tmp_slice_lower_3 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 944;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_3, 2, tmp_tuple_element_3 );
    frame_function->f_lineno = 944;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_14 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 944;
        goto try_except_handler_3;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_14;
        Py_XDECREF( old );
    }

    branch_no_5:;
    branch_end_4:;
    branch_no_3:;
    tmp_subscribed_name_7 = par_word;

    if ( tmp_subscribed_name_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 946;
        goto try_except_handler_3;
    }

    tmp_left_name_8 = var_i;

    tmp_right_name_8 = const_int_pos_1;
    tmp_subscript_name_7 = BINARY_OPERATION_SUB( tmp_left_name_8, tmp_right_name_8 );
    if ( tmp_subscript_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 946;
        goto try_except_handler_3;
    }
    tmp_compexpr_left_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_7 );
    Py_DECREF( tmp_subscript_name_7 );
    if ( tmp_compexpr_left_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 946;
        goto try_except_handler_3;
    }
    tmp_source_name_7 = par_self;

    tmp_compexpr_right_5 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__FrenchStemmer__vowels );
    if ( tmp_compexpr_right_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_5 );

        exception_lineno = 946;
        goto try_except_handler_3;
    }
    tmp_or_left_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    Py_DECREF( tmp_compexpr_left_5 );
    Py_DECREF( tmp_compexpr_right_5 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 946;
        goto try_except_handler_3;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    assert( !(tmp_or_left_truth_1 == -1) );
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_subscribed_name_8 = par_word;

    if ( tmp_subscribed_name_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 946;
        goto try_except_handler_3;
    }

    tmp_left_name_9 = var_i;

    tmp_right_name_9 = const_int_pos_1;
    tmp_subscript_name_8 = BINARY_OPERATION_ADD( tmp_left_name_9, tmp_right_name_9 );
    if ( tmp_subscript_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 946;
        goto try_except_handler_3;
    }
    tmp_compexpr_left_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
    Py_DECREF( tmp_subscript_name_8 );
    if ( tmp_compexpr_left_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 946;
        goto try_except_handler_3;
    }
    tmp_source_name_8 = par_self;

    tmp_compexpr_right_6 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__FrenchStemmer__vowels );
    if ( tmp_compexpr_right_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_6 );

        exception_lineno = 946;
        goto try_except_handler_3;
    }
    tmp_or_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_6, tmp_compexpr_right_6 );
    Py_DECREF( tmp_compexpr_left_6 );
    Py_DECREF( tmp_compexpr_right_6 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 946;
        goto try_except_handler_3;
    }
    tmp_cond_value_3 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_3 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    assert( !(tmp_cond_truth_3 == -1) );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_subscribed_name_9 = par_word;

    if ( tmp_subscribed_name_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 947;
        goto try_except_handler_3;
    }

    tmp_subscript_name_9 = var_i;

    tmp_compare_left_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_9, tmp_subscript_name_9 );
    if ( tmp_compare_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 947;
        goto try_except_handler_3;
    }
    tmp_compare_right_4 = const_unicode_plain_y;
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_4 );

        exception_lineno = 947;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_compare_left_4 );
    if ( tmp_cmp_Eq_3 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_source_name_9 = const_unicode_empty;
    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_join );
    assert( tmp_called_name_4 != NULL );
    tmp_args_element_name_4 = PyTuple_New( 3 );
    tmp_slice_source_7 = par_word;

    if ( tmp_slice_source_7 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 948;
        goto try_except_handler_3;
    }

    tmp_slice_upper_4 = var_i;

    tmp_tuple_element_4 = LOOKUP_SLICE( tmp_slice_source_7, Py_None, tmp_slice_upper_4 );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 948;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_4, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_unicode_plain_Y;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_element_name_4, 1, tmp_tuple_element_4 );
    tmp_slice_source_8 = par_word;

    if ( tmp_slice_source_8 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 948;
        goto try_except_handler_3;
    }

    tmp_left_name_10 = var_i;

    tmp_right_name_10 = const_int_pos_1;
    tmp_slice_lower_4 = BINARY_OPERATION_ADD( tmp_left_name_10, tmp_right_name_10 );
    if ( tmp_slice_lower_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 948;
        goto try_except_handler_3;
    }
    tmp_tuple_element_4 = LOOKUP_SLICE( tmp_slice_source_8, tmp_slice_lower_4, Py_None );
    Py_DECREF( tmp_slice_lower_4 );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 948;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_4, 2, tmp_tuple_element_4 );
    frame_function->f_lineno = 948;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_assign_source_15 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;
        goto try_except_handler_3;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_15;
        Py_XDECREF( old );
    }

    branch_no_7:;
    branch_no_6:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 938;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Tried code:
    tmp_source_name_10 = par_self;

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__r1r2_standard );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 950;
        goto try_except_handler_4;
    }
    tmp_args_element_name_5 = par_word;

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 950;
        goto try_except_handler_4;
    }

    tmp_source_name_11 = par_self;

    tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__FrenchStemmer__vowels );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 950;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 950;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_iter_arg_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 950;
        goto try_except_handler_4;
    }
    tmp_assign_source_16 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 950;
        goto try_except_handler_4;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_16;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_17 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_17 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 950;
        goto try_except_handler_5;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_17;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_18 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_18 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 950;
        goto try_except_handler_5;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_18;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_5;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_5;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_4;
    // End of try:
    try_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_19 = tmp_tuple_unpack_1__element_1;

    assert( var_r1 == NULL );
    Py_INCREF( tmp_assign_source_19 );
    var_r1 = tmp_assign_source_19;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_20 = tmp_tuple_unpack_1__element_2;

    assert( var_r2 == NULL );
    Py_INCREF( tmp_assign_source_20 );
    var_r2 = tmp_assign_source_20;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_12 = par_self;

    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain__FrenchStemmer__rv_french );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 951;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_7 = par_word;

    if ( tmp_args_element_name_7 == NULL )
    {
        Py_DECREF( tmp_called_name_6 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 951;
        goto frame_exception_exit_1;
    }

    tmp_source_name_13 = par_self;

    tmp_args_element_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain__FrenchStemmer__vowels );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );

        exception_lineno = 951;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 951;
    {
        PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8 };
        tmp_assign_source_21 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_8 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 951;
        goto frame_exception_exit_1;
    }
    assert( var_rv == NULL );
    var_rv = tmp_assign_source_21;

    tmp_source_name_14 = par_self;

    tmp_iter_arg_4 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain__FrenchStemmer__step1_suffixes );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 954;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_22 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 954;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_22;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_23 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_23 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 954;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_23;
        Py_XDECREF( old );
    }

    tmp_assign_source_24 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_24;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_2 = par_word;

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 955;
        goto try_except_handler_6;
    }

    tmp_args_element_name_9 = var_suffix;

    frame_function->f_lineno = 955;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_cond_value_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 955;
        goto try_except_handler_6;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        exception_lineno = 955;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_compare_left_5 = var_suffix;

    tmp_compare_right_5 = const_unicode_plain_eaux;
    tmp_cmp_Eq_4 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_Eq_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;
        goto try_except_handler_6;
    }
    if ( tmp_cmp_Eq_4 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = -1;
    tmp_slice_source_9 = par_word;

    if ( tmp_slice_source_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 957;
        goto try_except_handler_6;
    }

    tmp_assign_source_25 = LOOKUP_INDEX_SLICE( tmp_slice_source_9, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 957;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_25;
        Py_XDECREF( old );
    }

    tmp_assign_source_26 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_26;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    goto branch_end_9;
    branch_no_9:;
    tmp_compare_left_6 = var_suffix;

    tmp_compare_right_6 = const_tuple_unicode_plain_euse_unicode_plain_euses_tuple;
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_compare_left_7 = var_suffix;

    tmp_compare_right_7 = var_r2;

    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_slice_source_10 = par_word;

    if ( tmp_slice_source_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 962;
        goto try_except_handler_6;
    }

    tmp_len_arg_3 = var_suffix;

    tmp_operand_name_1 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 962;
        goto try_except_handler_6;
    }
    tmp_slice_upper_5 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_slice_upper_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 962;
        goto try_except_handler_6;
    }
    tmp_assign_source_27 = LOOKUP_SLICE( tmp_slice_source_10, Py_None, tmp_slice_upper_5 );
    Py_DECREF( tmp_slice_upper_5 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 962;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_27;
        Py_XDECREF( old );
    }

    tmp_assign_source_28 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_28;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    goto branch_end_11;
    branch_no_11:;
    tmp_compare_left_8 = var_suffix;

    tmp_compare_right_8 = var_r1;

    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_source_name_15 = const_unicode_empty;
    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_join );
    assert( tmp_called_name_7 != NULL );
    tmp_args_element_name_10 = PyTuple_New( 2 );
    tmp_slice_source_11 = par_word;

    if ( tmp_slice_source_11 == NULL )
    {
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 966;
        goto try_except_handler_6;
    }

    tmp_len_arg_4 = var_suffix;

    tmp_operand_name_2 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 966;
        goto try_except_handler_6;
    }
    tmp_slice_upper_6 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_slice_upper_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 966;
        goto try_except_handler_6;
    }
    tmp_tuple_element_5 = LOOKUP_SLICE( tmp_slice_source_11, Py_None, tmp_slice_upper_6 );
    Py_DECREF( tmp_slice_upper_6 );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 966;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_10, 0, tmp_tuple_element_5 );
    tmp_tuple_element_5 = const_unicode_plain_eux;
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_args_element_name_10, 1, tmp_tuple_element_5 );
    frame_function->f_lineno = 966;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_assign_source_29 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 966;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_29;
        Py_XDECREF( old );
    }

    tmp_assign_source_30 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_30;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    branch_no_12:;
    branch_end_11:;
    goto branch_end_10;
    branch_no_10:;
    tmp_compexpr_left_7 = var_suffix;

    tmp_compexpr_right_7 = const_tuple_unicode_plain_ement_unicode_plain_ements_tuple;
    tmp_and_left_value_3 = SEQUENCE_CONTAINS( tmp_compexpr_left_7, tmp_compexpr_right_7 );
    if ( tmp_and_left_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 969;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_3 = CHECK_IF_TRUE( tmp_and_left_value_3 );
    assert( !(tmp_and_left_truth_3 == -1) );
    if ( tmp_and_left_truth_3 == 1 )
    {
        goto and_right_3;
    }
    else
    {
        goto and_left_3;
    }
    and_right_3:;
    tmp_compexpr_left_8 = var_suffix;

    tmp_compexpr_right_8 = var_rv;

    tmp_and_right_value_3 = SEQUENCE_CONTAINS( tmp_compexpr_left_8, tmp_compexpr_right_8 );
    if ( tmp_and_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 969;
        goto try_except_handler_6;
    }
    tmp_cond_value_5 = tmp_and_right_value_3;
    goto and_end_3;
    and_left_3:;
    tmp_cond_value_5 = tmp_and_left_value_3;
    and_end_3:;
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    assert( !(tmp_cond_truth_5 == -1) );
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_slice_source_12 = par_word;

    if ( tmp_slice_source_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 970;
        goto try_except_handler_6;
    }

    tmp_len_arg_5 = var_suffix;

    tmp_operand_name_3 = BUILTIN_LEN( tmp_len_arg_5 );
    if ( tmp_operand_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 970;
        goto try_except_handler_6;
    }
    tmp_slice_upper_7 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_slice_upper_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 970;
        goto try_except_handler_6;
    }
    tmp_assign_source_31 = LOOKUP_SLICE( tmp_slice_source_12, Py_None, tmp_slice_upper_7 );
    Py_DECREF( tmp_slice_upper_7 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 970;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_31;
        Py_XDECREF( old );
    }

    tmp_assign_source_32 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_32;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_2 = -2;
    tmp_slice_index_upper_2 = PY_SSIZE_T_MAX;
    tmp_slice_source_13 = par_word;

    tmp_compexpr_left_9 = LOOKUP_INDEX_SLICE( tmp_slice_source_13, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_compexpr_left_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 973;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_9 = const_unicode_plain_iv;
    tmp_and_left_value_4 = RICH_COMPARE_EQ( tmp_compexpr_left_9, tmp_compexpr_right_9 );
    Py_DECREF( tmp_compexpr_left_9 );
    if ( tmp_and_left_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 973;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_4 = CHECK_IF_TRUE( tmp_and_left_value_4 );
    if ( tmp_and_left_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_4 );

        exception_lineno = 973;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_4 == 1 )
    {
        goto and_right_4;
    }
    else
    {
        goto and_left_4;
    }
    and_right_4:;
    Py_DECREF( tmp_and_left_value_4 );
    tmp_compexpr_left_10 = const_unicode_plain_iv;
    tmp_compexpr_right_10 = var_r2;

    tmp_and_right_value_4 = SEQUENCE_CONTAINS( tmp_compexpr_left_10, tmp_compexpr_right_10 );
    if ( tmp_and_right_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 973;
        goto try_except_handler_6;
    }
    Py_INCREF( tmp_and_right_value_4 );
    tmp_cond_value_6 = tmp_and_right_value_4;
    goto and_end_4;
    and_left_4:;
    tmp_cond_value_6 = tmp_and_left_value_4;
    and_end_4:;
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        exception_lineno = 973;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -2;
    tmp_slice_source_14 = par_word;

    tmp_assign_source_33 = LOOKUP_INDEX_SLICE( tmp_slice_source_14, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 974;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_33;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_4 = -2;
    tmp_slice_index_upper_4 = PY_SSIZE_T_MAX;
    tmp_slice_source_15 = par_word;

    tmp_compexpr_left_11 = LOOKUP_INDEX_SLICE( tmp_slice_source_15, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_compexpr_left_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 976;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_11 = const_unicode_plain_at;
    tmp_and_left_value_5 = RICH_COMPARE_EQ( tmp_compexpr_left_11, tmp_compexpr_right_11 );
    Py_DECREF( tmp_compexpr_left_11 );
    if ( tmp_and_left_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 976;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_5 = CHECK_IF_TRUE( tmp_and_left_value_5 );
    if ( tmp_and_left_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_5 );

        exception_lineno = 976;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_5 == 1 )
    {
        goto and_right_5;
    }
    else
    {
        goto and_left_5;
    }
    and_right_5:;
    Py_DECREF( tmp_and_left_value_5 );
    tmp_compexpr_left_12 = const_unicode_plain_at;
    tmp_compexpr_right_12 = var_r2;

    tmp_and_right_value_5 = SEQUENCE_CONTAINS( tmp_compexpr_left_12, tmp_compexpr_right_12 );
    if ( tmp_and_right_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 976;
        goto try_except_handler_6;
    }
    Py_INCREF( tmp_and_right_value_5 );
    tmp_cond_value_7 = tmp_and_right_value_5;
    goto and_end_5;
    and_left_5:;
    tmp_cond_value_7 = tmp_and_left_value_5;
    and_end_5:;
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        exception_lineno = 976;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = -2;
    tmp_slice_source_16 = par_word;

    tmp_assign_source_34 = LOOKUP_INDEX_SLICE( tmp_slice_source_16, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 977;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_34;
        Py_DECREF( old );
    }

    branch_no_15:;
    goto branch_end_14;
    branch_no_14:;
    tmp_sliceslicedel_index_lower_6 = -3;
    tmp_slice_index_upper_6 = PY_SSIZE_T_MAX;
    tmp_slice_source_17 = par_word;

    tmp_compare_left_9 = LOOKUP_INDEX_SLICE( tmp_slice_source_17, tmp_sliceslicedel_index_lower_6, tmp_slice_index_upper_6 );
    if ( tmp_compare_left_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 979;
        goto try_except_handler_6;
    }
    tmp_compare_right_9 = const_unicode_plain_eus;
    tmp_cmp_Eq_5 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_9, tmp_compare_right_9 );
    if ( tmp_cmp_Eq_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_9 );

        exception_lineno = 979;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_compare_left_9 );
    if ( tmp_cmp_Eq_5 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_compare_left_10 = const_unicode_plain_eus;
    tmp_compare_right_10 = var_r2;

    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    assert( !(tmp_cmp_In_5 == -1) );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_sliceslicedel_index_lower_7 = 0;
    tmp_slice_index_upper_7 = -3;
    tmp_slice_source_18 = par_word;

    tmp_assign_source_35 = LOOKUP_INDEX_SLICE( tmp_slice_source_18, tmp_sliceslicedel_index_lower_7, tmp_slice_index_upper_7 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 981;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_35;
        Py_DECREF( old );
    }

    goto branch_end_17;
    branch_no_17:;
    tmp_compare_left_11 = const_unicode_plain_eus;
    tmp_compare_right_11 = var_r1;

    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    assert( !(tmp_cmp_In_6 == -1) );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_source_name_16 = const_unicode_empty;
    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_join );
    assert( tmp_called_name_8 != NULL );
    tmp_args_element_name_11 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_8 = 0;
    tmp_slice_index_upper_8 = -1;
    tmp_slice_source_19 = par_word;

    tmp_tuple_element_6 = LOOKUP_INDEX_SLICE( tmp_slice_source_19, tmp_sliceslicedel_index_lower_8, tmp_slice_index_upper_8 );
    if ( tmp_tuple_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 983;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_11, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = const_unicode_plain_x;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_args_element_name_11, 1, tmp_tuple_element_6 );
    frame_function->f_lineno = 983;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_assign_source_36 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 983;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_36;
        Py_DECREF( old );
    }

    branch_no_18:;
    branch_end_17:;
    goto branch_end_16;
    branch_no_16:;
    tmp_sliceslicedel_index_lower_9 = -3;
    tmp_slice_index_upper_9 = PY_SSIZE_T_MAX;
    tmp_slice_source_20 = par_word;

    tmp_compare_left_12 = LOOKUP_INDEX_SLICE( tmp_slice_source_20, tmp_sliceslicedel_index_lower_9, tmp_slice_index_upper_9 );
    if ( tmp_compare_left_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 985;
        goto try_except_handler_6;
    }
    tmp_compare_right_12 = const_tuple_unicode_plain_abl_unicode_plain_iqU_tuple;
    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    assert( !(tmp_cmp_In_7 == -1) );
    Py_DECREF( tmp_compare_left_12 );
    if ( tmp_cmp_In_7 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_compexpr_left_13 = const_unicode_plain_abl;
    tmp_compexpr_right_13 = var_r2;

    tmp_or_left_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_13, tmp_compexpr_right_13 );
    if ( tmp_or_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 986;
        goto try_except_handler_6;
    }
    tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
    assert( !(tmp_or_left_truth_2 == -1) );
    if ( tmp_or_left_truth_2 == 1 )
    {
        goto or_left_2;
    }
    else
    {
        goto or_right_2;
    }
    or_right_2:;
    tmp_compexpr_left_14 = const_unicode_plain_iqU;
    tmp_compexpr_right_14 = var_r2;

    tmp_or_right_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_14, tmp_compexpr_right_14 );
    if ( tmp_or_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 986;
        goto try_except_handler_6;
    }
    tmp_cond_value_8 = tmp_or_right_value_2;
    goto or_end_2;
    or_left_2:;
    tmp_cond_value_8 = tmp_or_left_value_2;
    or_end_2:;
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    assert( !(tmp_cond_truth_8 == -1) );
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_sliceslicedel_index_lower_10 = 0;
    tmp_slice_index_upper_10 = -3;
    tmp_slice_source_21 = par_word;

    tmp_assign_source_37 = LOOKUP_INDEX_SLICE( tmp_slice_source_21, tmp_sliceslicedel_index_lower_10, tmp_slice_index_upper_10 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 987;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_37;
        Py_DECREF( old );
    }

    branch_no_20:;
    goto branch_end_19;
    branch_no_19:;
    tmp_sliceslicedel_index_lower_11 = -3;
    tmp_slice_index_upper_11 = PY_SSIZE_T_MAX;
    tmp_slice_source_22 = par_word;

    tmp_compare_left_13 = LOOKUP_INDEX_SLICE( tmp_slice_source_22, tmp_sliceslicedel_index_lower_11, tmp_slice_index_upper_11 );
    if ( tmp_compare_left_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 989;
        goto try_except_handler_6;
    }
    tmp_compare_right_13 = const_tuple_bf4ccbfb8a2dc1c39eb1b1f656b81de0_tuple;
    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_13, tmp_compare_left_13 );
    assert( !(tmp_cmp_In_8 == -1) );
    Py_DECREF( tmp_compare_left_13 );
    if ( tmp_cmp_In_8 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_compexpr_left_15 = const_unicode_digest_473fbf2ba6b0605956238cf78704a297;
    tmp_compexpr_right_15 = var_rv;

    tmp_or_left_value_3 = SEQUENCE_CONTAINS( tmp_compexpr_left_15, tmp_compexpr_right_15 );
    if ( tmp_or_left_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 990;
        goto try_except_handler_6;
    }
    tmp_or_left_truth_3 = CHECK_IF_TRUE( tmp_or_left_value_3 );
    assert( !(tmp_or_left_truth_3 == -1) );
    if ( tmp_or_left_truth_3 == 1 )
    {
        goto or_left_3;
    }
    else
    {
        goto or_right_3;
    }
    or_right_3:;
    tmp_compexpr_left_16 = const_unicode_digest_29adf0a82a22b3ff610a27a3c5520f02;
    tmp_compexpr_right_16 = var_rv;

    tmp_or_right_value_3 = SEQUENCE_CONTAINS( tmp_compexpr_left_16, tmp_compexpr_right_16 );
    if ( tmp_or_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 990;
        goto try_except_handler_6;
    }
    tmp_cond_value_9 = tmp_or_right_value_3;
    goto or_end_3;
    or_left_3:;
    tmp_cond_value_9 = tmp_or_left_value_3;
    or_end_3:;
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    assert( !(tmp_cond_truth_9 == -1) );
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_source_name_17 = const_unicode_empty;
    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_join );
    assert( tmp_called_name_9 != NULL );
    tmp_args_element_name_12 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_12 = 0;
    tmp_slice_index_upper_12 = -3;
    tmp_slice_source_23 = par_word;

    tmp_tuple_element_7 = LOOKUP_INDEX_SLICE( tmp_slice_source_23, tmp_sliceslicedel_index_lower_12, tmp_slice_index_upper_12 );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_12 );

        exception_lineno = 991;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_12, 0, tmp_tuple_element_7 );
    tmp_tuple_element_7 = const_unicode_plain_i;
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_args_element_name_12, 1, tmp_tuple_element_7 );
    frame_function->f_lineno = 991;
    {
        PyObject *call_args[] = { tmp_args_element_name_12 };
        tmp_assign_source_38 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
    }

    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_12 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 991;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_38;
        Py_DECREF( old );
    }

    branch_no_22:;
    branch_no_21:;
    branch_end_19:;
    branch_end_16:;
    branch_end_14:;
    goto branch_end_13;
    branch_no_13:;
    tmp_compexpr_left_17 = var_suffix;

    tmp_compexpr_right_17 = const_unicode_plain_amment;
    tmp_and_left_value_6 = RICH_COMPARE_EQ( tmp_compexpr_left_17, tmp_compexpr_right_17 );
    if ( tmp_and_left_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 993;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_6 = CHECK_IF_TRUE( tmp_and_left_value_6 );
    if ( tmp_and_left_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_6 );

        exception_lineno = 993;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_6 == 1 )
    {
        goto and_right_6;
    }
    else
    {
        goto and_left_6;
    }
    and_right_6:;
    Py_DECREF( tmp_and_left_value_6 );
    tmp_compexpr_left_18 = var_suffix;

    tmp_compexpr_right_18 = var_rv;

    tmp_and_right_value_6 = SEQUENCE_CONTAINS( tmp_compexpr_left_18, tmp_compexpr_right_18 );
    if ( tmp_and_right_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 993;
        goto try_except_handler_6;
    }
    Py_INCREF( tmp_and_right_value_6 );
    tmp_cond_value_10 = tmp_and_right_value_6;
    goto and_end_6;
    and_left_6:;
    tmp_cond_value_10 = tmp_and_left_value_6;
    and_end_6:;
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        exception_lineno = 993;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_source_name_18 = const_unicode_empty;
    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_join );
    assert( tmp_called_name_10 != NULL );
    tmp_args_element_name_13 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_13 = 0;
    tmp_slice_index_upper_13 = -6;
    tmp_slice_source_24 = par_word;

    if ( tmp_slice_source_24 == NULL )
    {
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_args_element_name_13 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 994;
        goto try_except_handler_6;
    }

    tmp_tuple_element_8 = LOOKUP_INDEX_SLICE( tmp_slice_source_24, tmp_sliceslicedel_index_lower_13, tmp_slice_index_upper_13 );
    if ( tmp_tuple_element_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 994;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_13, 0, tmp_tuple_element_8 );
    tmp_tuple_element_8 = const_unicode_plain_ant;
    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_args_element_name_13, 1, tmp_tuple_element_8 );
    frame_function->f_lineno = 994;
    {
        PyObject *call_args[] = { tmp_args_element_name_13 };
        tmp_assign_source_39 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
    }

    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 994;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_39;
        Py_XDECREF( old );
    }

    tmp_source_name_19 = const_unicode_empty;
    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_join );
    assert( tmp_called_name_11 != NULL );
    tmp_args_element_name_14 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_14 = 0;
    tmp_slice_index_upper_14 = -6;
    tmp_slice_source_25 = var_rv;

    tmp_tuple_element_9 = LOOKUP_INDEX_SLICE( tmp_slice_source_25, tmp_sliceslicedel_index_lower_14, tmp_slice_index_upper_14 );
    if ( tmp_tuple_element_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 995;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_14, 0, tmp_tuple_element_9 );
    tmp_tuple_element_9 = const_unicode_plain_ant;
    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_args_element_name_14, 1, tmp_tuple_element_9 );
    frame_function->f_lineno = 995;
    {
        PyObject *call_args[] = { tmp_args_element_name_14 };
        tmp_assign_source_40 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
    }

    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_14 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 995;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_40;
        Py_DECREF( old );
    }

    tmp_assign_source_41 = Py_True;
    {
        PyObject *old = var_rv_ending_found;
        assert( old != NULL );
        var_rv_ending_found = tmp_assign_source_41;
        Py_INCREF( var_rv_ending_found );
        Py_DECREF( old );
    }

    goto branch_end_23;
    branch_no_23:;
    tmp_compexpr_left_19 = var_suffix;

    tmp_compexpr_right_19 = const_unicode_plain_emment;
    tmp_and_left_value_7 = RICH_COMPARE_EQ( tmp_compexpr_left_19, tmp_compexpr_right_19 );
    if ( tmp_and_left_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 998;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_7 = CHECK_IF_TRUE( tmp_and_left_value_7 );
    if ( tmp_and_left_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_7 );

        exception_lineno = 998;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_7 == 1 )
    {
        goto and_right_7;
    }
    else
    {
        goto and_left_7;
    }
    and_right_7:;
    Py_DECREF( tmp_and_left_value_7 );
    tmp_compexpr_left_20 = var_suffix;

    tmp_compexpr_right_20 = var_rv;

    tmp_and_right_value_7 = SEQUENCE_CONTAINS( tmp_compexpr_left_20, tmp_compexpr_right_20 );
    if ( tmp_and_right_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 998;
        goto try_except_handler_6;
    }
    Py_INCREF( tmp_and_right_value_7 );
    tmp_cond_value_11 = tmp_and_right_value_7;
    goto and_end_7;
    and_left_7:;
    tmp_cond_value_11 = tmp_and_left_value_7;
    and_end_7:;
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_11 );

        exception_lineno = 998;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == 1 )
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_source_name_20 = const_unicode_empty;
    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_join );
    assert( tmp_called_name_12 != NULL );
    tmp_args_element_name_15 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_15 = 0;
    tmp_slice_index_upper_15 = -6;
    tmp_slice_source_26 = par_word;

    if ( tmp_slice_source_26 == NULL )
    {
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_args_element_name_15 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 999;
        goto try_except_handler_6;
    }

    tmp_tuple_element_10 = LOOKUP_INDEX_SLICE( tmp_slice_source_26, tmp_sliceslicedel_index_lower_15, tmp_slice_index_upper_15 );
    if ( tmp_tuple_element_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_args_element_name_15 );

        exception_lineno = 999;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_15, 0, tmp_tuple_element_10 );
    tmp_tuple_element_10 = const_unicode_plain_ent;
    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_args_element_name_15, 1, tmp_tuple_element_10 );
    frame_function->f_lineno = 999;
    {
        PyObject *call_args[] = { tmp_args_element_name_15 };
        tmp_assign_source_42 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
    }

    Py_DECREF( tmp_called_name_12 );
    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 999;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_42;
        Py_XDECREF( old );
    }

    tmp_assign_source_43 = Py_True;
    {
        PyObject *old = var_rv_ending_found;
        assert( old != NULL );
        var_rv_ending_found = tmp_assign_source_43;
        Py_INCREF( var_rv_ending_found );
        Py_DECREF( old );
    }

    goto branch_end_24;
    branch_no_24:;
    tmp_compexpr_left_21 = var_suffix;

    tmp_compexpr_right_21 = const_tuple_unicode_plain_ment_unicode_plain_ments_tuple;
    tmp_and_left_value_8 = SEQUENCE_CONTAINS( tmp_compexpr_left_21, tmp_compexpr_right_21 );
    if ( tmp_and_left_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1002;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_8 = CHECK_IF_TRUE( tmp_and_left_value_8 );
    assert( !(tmp_and_left_truth_8 == -1) );
    if ( tmp_and_left_truth_8 == 1 )
    {
        goto and_right_8;
    }
    else
    {
        goto and_left_8;
    }
    and_right_8:;
    tmp_compexpr_left_22 = var_suffix;

    tmp_compexpr_right_22 = var_rv;

    tmp_and_left_value_9 = SEQUENCE_CONTAINS( tmp_compexpr_left_22, tmp_compexpr_right_22 );
    if ( tmp_and_left_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1002;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_9 = CHECK_IF_TRUE( tmp_and_left_value_9 );
    assert( !(tmp_and_left_truth_9 == -1) );
    if ( tmp_and_left_truth_9 == 1 )
    {
        goto and_right_9;
    }
    else
    {
        goto and_left_9;
    }
    and_right_9:;
    tmp_called_instance_3 = var_rv;

    tmp_args_element_name_16 = var_suffix;

    frame_function->f_lineno = 1003;
    {
        PyObject *call_args[] = { tmp_args_element_name_16 };
        tmp_operand_name_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_startswith, call_args );
    }

    if ( tmp_operand_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1003;
        goto try_except_handler_6;
    }
    tmp_and_left_value_10 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_4 );
    Py_DECREF( tmp_operand_name_4 );
    if ( tmp_and_left_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1003;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_10 = CHECK_IF_TRUE( tmp_and_left_value_10 );
    if ( tmp_and_left_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1004;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_10 == 1 )
    {
        goto and_right_10;
    }
    else
    {
        goto and_left_10;
    }
    and_right_10:;
    tmp_subscribed_name_10 = var_rv;

    tmp_called_instance_4 = var_rv;

    tmp_args_element_name_17 = var_suffix;

    frame_function->f_lineno = 1004;
    {
        PyObject *call_args[] = { tmp_args_element_name_17 };
        tmp_left_name_11 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_rindex, call_args );
    }

    if ( tmp_left_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1004;
        goto try_except_handler_6;
    }
    tmp_right_name_11 = const_int_pos_1;
    tmp_subscript_name_10 = BINARY_OPERATION_SUB( tmp_left_name_11, tmp_right_name_11 );
    Py_DECREF( tmp_left_name_11 );
    if ( tmp_subscript_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1004;
        goto try_except_handler_6;
    }
    tmp_compexpr_left_23 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_10, tmp_subscript_name_10 );
    Py_DECREF( tmp_subscript_name_10 );
    if ( tmp_compexpr_left_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1004;
        goto try_except_handler_6;
    }
    tmp_source_name_21 = par_self;

    tmp_compexpr_right_23 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain__FrenchStemmer__vowels );
    if ( tmp_compexpr_right_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_23 );

        exception_lineno = 1004;
        goto try_except_handler_6;
    }
    tmp_and_right_value_10 = SEQUENCE_CONTAINS( tmp_compexpr_left_23, tmp_compexpr_right_23 );
    Py_DECREF( tmp_compexpr_left_23 );
    Py_DECREF( tmp_compexpr_right_23 );
    if ( tmp_and_right_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1004;
        goto try_except_handler_6;
    }
    tmp_and_right_value_9 = tmp_and_right_value_10;
    goto and_end_10;
    and_left_10:;
    tmp_and_right_value_9 = tmp_and_left_value_10;
    and_end_10:;
    tmp_and_right_value_8 = tmp_and_right_value_9;
    goto and_end_9;
    and_left_9:;
    tmp_and_right_value_8 = tmp_and_left_value_9;
    and_end_9:;
    tmp_cond_value_12 = tmp_and_right_value_8;
    goto and_end_8;
    and_left_8:;
    tmp_cond_value_12 = tmp_and_left_value_8;
    and_end_8:;
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1004;
        goto try_except_handler_6;
    }
    if ( tmp_cond_truth_12 == 1 )
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    tmp_slice_source_27 = par_word;

    if ( tmp_slice_source_27 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1005;
        goto try_except_handler_6;
    }

    tmp_len_arg_6 = var_suffix;

    tmp_operand_name_5 = BUILTIN_LEN( tmp_len_arg_6 );
    if ( tmp_operand_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1005;
        goto try_except_handler_6;
    }
    tmp_slice_upper_8 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_5 );
    Py_DECREF( tmp_operand_name_5 );
    if ( tmp_slice_upper_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1005;
        goto try_except_handler_6;
    }
    tmp_assign_source_44 = LOOKUP_SLICE( tmp_slice_source_27, Py_None, tmp_slice_upper_8 );
    Py_DECREF( tmp_slice_upper_8 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1005;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_44;
        Py_XDECREF( old );
    }

    tmp_slice_source_28 = var_rv;

    tmp_len_arg_7 = var_suffix;

    tmp_operand_name_6 = BUILTIN_LEN( tmp_len_arg_7 );
    if ( tmp_operand_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1006;
        goto try_except_handler_6;
    }
    tmp_slice_upper_9 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_6 );
    Py_DECREF( tmp_operand_name_6 );
    if ( tmp_slice_upper_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1006;
        goto try_except_handler_6;
    }
    tmp_assign_source_45 = LOOKUP_SLICE( tmp_slice_source_28, Py_None, tmp_slice_upper_9 );
    Py_DECREF( tmp_slice_upper_9 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1006;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_45;
        Py_DECREF( old );
    }

    tmp_assign_source_46 = Py_True;
    {
        PyObject *old = var_rv_ending_found;
        assert( old != NULL );
        var_rv_ending_found = tmp_assign_source_46;
        Py_INCREF( var_rv_ending_found );
        Py_DECREF( old );
    }

    goto branch_end_25;
    branch_no_25:;
    tmp_compexpr_left_24 = var_suffix;

    tmp_compexpr_right_24 = const_unicode_plain_aux;
    tmp_and_left_value_11 = RICH_COMPARE_EQ( tmp_compexpr_left_24, tmp_compexpr_right_24 );
    if ( tmp_and_left_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1009;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_11 = CHECK_IF_TRUE( tmp_and_left_value_11 );
    if ( tmp_and_left_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_11 );

        exception_lineno = 1009;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_11 == 1 )
    {
        goto and_right_11;
    }
    else
    {
        goto and_left_11;
    }
    and_right_11:;
    Py_DECREF( tmp_and_left_value_11 );
    tmp_compexpr_left_25 = var_suffix;

    tmp_compexpr_right_25 = var_r1;

    tmp_and_right_value_11 = SEQUENCE_CONTAINS( tmp_compexpr_left_25, tmp_compexpr_right_25 );
    if ( tmp_and_right_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1009;
        goto try_except_handler_6;
    }
    Py_INCREF( tmp_and_right_value_11 );
    tmp_cond_value_13 = tmp_and_right_value_11;
    goto and_end_11;
    and_left_11:;
    tmp_cond_value_13 = tmp_and_left_value_11;
    and_end_11:;
    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_13 );

        exception_lineno = 1009;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == 1 )
    {
        goto branch_yes_26;
    }
    else
    {
        goto branch_no_26;
    }
    branch_yes_26:;
    tmp_source_name_22 = const_unicode_empty;
    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_join );
    assert( tmp_called_name_13 != NULL );
    tmp_args_element_name_18 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_16 = 0;
    tmp_slice_index_upper_16 = -2;
    tmp_slice_source_29 = par_word;

    if ( tmp_slice_source_29 == NULL )
    {
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_18 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1010;
        goto try_except_handler_6;
    }

    tmp_tuple_element_11 = LOOKUP_INDEX_SLICE( tmp_slice_source_29, tmp_sliceslicedel_index_lower_16, tmp_slice_index_upper_16 );
    if ( tmp_tuple_element_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_18 );

        exception_lineno = 1010;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_18, 0, tmp_tuple_element_11 );
    tmp_tuple_element_11 = const_unicode_plain_l;
    Py_INCREF( tmp_tuple_element_11 );
    PyTuple_SET_ITEM( tmp_args_element_name_18, 1, tmp_tuple_element_11 );
    frame_function->f_lineno = 1010;
    {
        PyObject *call_args[] = { tmp_args_element_name_18 };
        tmp_assign_source_47 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, call_args );
    }

    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_args_element_name_18 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1010;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_47;
        Py_XDECREF( old );
    }

    tmp_assign_source_48 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_48;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    goto branch_end_26;
    branch_no_26:;
    tmp_compexpr_left_26 = var_suffix;

    tmp_compexpr_right_26 = const_tuple_unicode_plain_issement_unicode_plain_issements_tuple;
    tmp_and_left_value_12 = SEQUENCE_CONTAINS( tmp_compexpr_left_26, tmp_compexpr_right_26 );
    if ( tmp_and_left_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1013;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_12 = CHECK_IF_TRUE( tmp_and_left_value_12 );
    assert( !(tmp_and_left_truth_12 == -1) );
    if ( tmp_and_left_truth_12 == 1 )
    {
        goto and_right_12;
    }
    else
    {
        goto and_left_12;
    }
    and_right_12:;
    tmp_compexpr_left_27 = var_suffix;

    tmp_compexpr_right_27 = var_r1;

    tmp_and_left_value_13 = SEQUENCE_CONTAINS( tmp_compexpr_left_27, tmp_compexpr_right_27 );
    if ( tmp_and_left_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1013;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_13 = CHECK_IF_TRUE( tmp_and_left_value_13 );
    assert( !(tmp_and_left_truth_13 == -1) );
    if ( tmp_and_left_truth_13 == 1 )
    {
        goto and_right_13;
    }
    else
    {
        goto and_left_13;
    }
    and_right_13:;
    tmp_subscribed_name_11 = par_word;

    if ( tmp_subscribed_name_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1014;
        goto try_except_handler_6;
    }

    tmp_len_arg_8 = var_suffix;

    tmp_operand_name_7 = BUILTIN_LEN( tmp_len_arg_8 );
    if ( tmp_operand_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1014;
        goto try_except_handler_6;
    }
    tmp_left_name_12 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_7 );
    Py_DECREF( tmp_operand_name_7 );
    if ( tmp_left_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1014;
        goto try_except_handler_6;
    }
    tmp_right_name_12 = const_int_pos_1;
    tmp_subscript_name_11 = BINARY_OPERATION_SUB( tmp_left_name_12, tmp_right_name_12 );
    Py_DECREF( tmp_left_name_12 );
    if ( tmp_subscript_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1014;
        goto try_except_handler_6;
    }
    tmp_compexpr_left_28 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_11, tmp_subscript_name_11 );
    Py_DECREF( tmp_subscript_name_11 );
    if ( tmp_compexpr_left_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1014;
        goto try_except_handler_6;
    }
    tmp_source_name_23 = par_self;

    tmp_compexpr_right_28 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain__FrenchStemmer__vowels );
    if ( tmp_compexpr_right_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_28 );

        exception_lineno = 1014;
        goto try_except_handler_6;
    }
    tmp_and_right_value_13 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_28, tmp_compexpr_right_28 );
    Py_DECREF( tmp_compexpr_left_28 );
    Py_DECREF( tmp_compexpr_right_28 );
    if ( tmp_and_right_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1014;
        goto try_except_handler_6;
    }
    tmp_and_right_value_12 = tmp_and_right_value_13;
    goto and_end_13;
    and_left_13:;
    tmp_and_right_value_12 = tmp_and_left_value_13;
    and_end_13:;
    tmp_cond_value_14 = tmp_and_right_value_12;
    goto and_end_12;
    and_left_12:;
    tmp_cond_value_14 = tmp_and_left_value_12;
    and_end_12:;
    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    assert( !(tmp_cond_truth_14 == -1) );
    if ( tmp_cond_truth_14 == 1 )
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_slice_source_30 = par_word;

    if ( tmp_slice_source_30 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1015;
        goto try_except_handler_6;
    }

    tmp_len_arg_9 = var_suffix;

    tmp_operand_name_8 = BUILTIN_LEN( tmp_len_arg_9 );
    if ( tmp_operand_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1015;
        goto try_except_handler_6;
    }
    tmp_slice_upper_10 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_8 );
    Py_DECREF( tmp_operand_name_8 );
    if ( tmp_slice_upper_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1015;
        goto try_except_handler_6;
    }
    tmp_assign_source_49 = LOOKUP_SLICE( tmp_slice_source_30, Py_None, tmp_slice_upper_10 );
    Py_DECREF( tmp_slice_upper_10 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1015;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_49;
        Py_XDECREF( old );
    }

    tmp_assign_source_50 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_50;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    goto branch_end_27;
    branch_no_27:;
    tmp_compexpr_left_29 = var_suffix;

    tmp_compexpr_right_29 = const_tuple_683a003f7bbf7d1afff32c6d345cde62_tuple;
    tmp_and_left_value_14 = SEQUENCE_CONTAINS( tmp_compexpr_left_29, tmp_compexpr_right_29 );
    if ( tmp_and_left_value_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1018;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_14 = CHECK_IF_TRUE( tmp_and_left_value_14 );
    assert( !(tmp_and_left_truth_14 == -1) );
    if ( tmp_and_left_truth_14 == 1 )
    {
        goto and_right_14;
    }
    else
    {
        goto and_left_14;
    }
    and_right_14:;
    tmp_compexpr_left_30 = var_suffix;

    tmp_compexpr_right_30 = var_r2;

    tmp_and_right_value_14 = SEQUENCE_CONTAINS( tmp_compexpr_left_30, tmp_compexpr_right_30 );
    if ( tmp_and_right_value_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1020;
        goto try_except_handler_6;
    }
    tmp_cond_value_15 = tmp_and_right_value_14;
    goto and_end_14;
    and_left_14:;
    tmp_cond_value_15 = tmp_and_left_value_14;
    and_end_14:;
    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    assert( !(tmp_cond_truth_15 == -1) );
    if ( tmp_cond_truth_15 == 1 )
    {
        goto branch_yes_28;
    }
    else
    {
        goto branch_no_28;
    }
    branch_yes_28:;
    tmp_slice_source_31 = par_word;

    if ( tmp_slice_source_31 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1021;
        goto try_except_handler_6;
    }

    tmp_len_arg_10 = var_suffix;

    tmp_operand_name_9 = BUILTIN_LEN( tmp_len_arg_10 );
    if ( tmp_operand_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1021;
        goto try_except_handler_6;
    }
    tmp_slice_upper_11 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_9 );
    Py_DECREF( tmp_operand_name_9 );
    if ( tmp_slice_upper_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1021;
        goto try_except_handler_6;
    }
    tmp_assign_source_51 = LOOKUP_SLICE( tmp_slice_source_31, Py_None, tmp_slice_upper_11 );
    Py_DECREF( tmp_slice_upper_11 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1021;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_51;
        Py_XDECREF( old );
    }

    tmp_assign_source_52 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_52;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    goto branch_end_28;
    branch_no_28:;
    tmp_compexpr_left_31 = var_suffix;

    tmp_compexpr_right_31 = const_tuple_4ff17472e9edf8f0913f0db95c096470_tuple;
    tmp_and_left_value_15 = SEQUENCE_CONTAINS( tmp_compexpr_left_31, tmp_compexpr_right_31 );
    if ( tmp_and_left_value_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1024;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_15 = CHECK_IF_TRUE( tmp_and_left_value_15 );
    assert( !(tmp_and_left_truth_15 == -1) );
    if ( tmp_and_left_truth_15 == 1 )
    {
        goto and_right_15;
    }
    else
    {
        goto and_left_15;
    }
    and_right_15:;
    tmp_compexpr_left_32 = var_suffix;

    tmp_compexpr_right_32 = var_r2;

    tmp_and_right_value_15 = SEQUENCE_CONTAINS( tmp_compexpr_left_32, tmp_compexpr_right_32 );
    if ( tmp_and_right_value_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1025;
        goto try_except_handler_6;
    }
    tmp_cond_value_16 = tmp_and_right_value_15;
    goto and_end_15;
    and_left_15:;
    tmp_cond_value_16 = tmp_and_left_value_15;
    and_end_15:;
    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    assert( !(tmp_cond_truth_16 == -1) );
    if ( tmp_cond_truth_16 == 1 )
    {
        goto branch_yes_29;
    }
    else
    {
        goto branch_no_29;
    }
    branch_yes_29:;
    tmp_slice_source_32 = par_word;

    if ( tmp_slice_source_32 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1026;
        goto try_except_handler_6;
    }

    tmp_len_arg_11 = var_suffix;

    tmp_operand_name_10 = BUILTIN_LEN( tmp_len_arg_11 );
    if ( tmp_operand_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1026;
        goto try_except_handler_6;
    }
    tmp_slice_upper_12 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_10 );
    Py_DECREF( tmp_operand_name_10 );
    if ( tmp_slice_upper_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1026;
        goto try_except_handler_6;
    }
    tmp_assign_source_53 = LOOKUP_SLICE( tmp_slice_source_32, Py_None, tmp_slice_upper_12 );
    Py_DECREF( tmp_slice_upper_12 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1026;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_53;
        Py_XDECREF( old );
    }

    tmp_assign_source_54 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_54;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_17 = -2;
    tmp_slice_index_upper_17 = PY_SSIZE_T_MAX;
    tmp_slice_source_33 = par_word;

    tmp_compare_left_14 = LOOKUP_INDEX_SLICE( tmp_slice_source_33, tmp_sliceslicedel_index_lower_17, tmp_slice_index_upper_17 );
    if ( tmp_compare_left_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1029;
        goto try_except_handler_6;
    }
    tmp_compare_right_14 = const_unicode_plain_ic;
    tmp_cmp_Eq_6 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_14, tmp_compare_right_14 );
    if ( tmp_cmp_Eq_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_14 );

        exception_lineno = 1029;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_compare_left_14 );
    if ( tmp_cmp_Eq_6 == 1 )
    {
        goto branch_yes_30;
    }
    else
    {
        goto branch_no_30;
    }
    branch_yes_30:;
    tmp_compare_left_15 = const_unicode_plain_ic;
    tmp_compare_right_15 = var_r2;

    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_15, tmp_compare_left_15 );
    assert( !(tmp_cmp_In_9 == -1) );
    if ( tmp_cmp_In_9 == 1 )
    {
        goto branch_yes_31;
    }
    else
    {
        goto branch_no_31;
    }
    branch_yes_31:;
    tmp_sliceslicedel_index_lower_18 = 0;
    tmp_slice_index_upper_18 = -2;
    tmp_slice_source_34 = par_word;

    tmp_assign_source_55 = LOOKUP_INDEX_SLICE( tmp_slice_source_34, tmp_sliceslicedel_index_lower_18, tmp_slice_index_upper_18 );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1031;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_55;
        Py_DECREF( old );
    }

    goto branch_end_31;
    branch_no_31:;
    tmp_source_name_24 = const_unicode_empty;
    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_join );
    assert( tmp_called_name_14 != NULL );
    tmp_args_element_name_19 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_19 = 0;
    tmp_slice_index_upper_19 = -2;
    tmp_slice_source_35 = par_word;

    tmp_tuple_element_12 = LOOKUP_INDEX_SLICE( tmp_slice_source_35, tmp_sliceslicedel_index_lower_19, tmp_slice_index_upper_19 );
    if ( tmp_tuple_element_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 1033;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_19, 0, tmp_tuple_element_12 );
    tmp_tuple_element_12 = const_unicode_plain_iqU;
    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_args_element_name_19, 1, tmp_tuple_element_12 );
    frame_function->f_lineno = 1033;
    {
        PyObject *call_args[] = { tmp_args_element_name_19 };
        tmp_assign_source_56 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, call_args );
    }

    Py_DECREF( tmp_called_name_14 );
    Py_DECREF( tmp_args_element_name_19 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1033;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_56;
        Py_DECREF( old );
    }

    branch_end_31:;
    branch_no_30:;
    goto branch_end_29;
    branch_no_29:;
    tmp_compexpr_left_33 = var_suffix;

    tmp_compexpr_right_33 = const_tuple_unicode_plain_logie_unicode_plain_logies_tuple;
    tmp_and_left_value_16 = SEQUENCE_CONTAINS( tmp_compexpr_left_33, tmp_compexpr_right_33 );
    if ( tmp_and_left_value_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1035;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_16 = CHECK_IF_TRUE( tmp_and_left_value_16 );
    assert( !(tmp_and_left_truth_16 == -1) );
    if ( tmp_and_left_truth_16 == 1 )
    {
        goto and_right_16;
    }
    else
    {
        goto and_left_16;
    }
    and_right_16:;
    tmp_compexpr_left_34 = var_suffix;

    tmp_compexpr_right_34 = var_r2;

    tmp_and_right_value_16 = SEQUENCE_CONTAINS( tmp_compexpr_left_34, tmp_compexpr_right_34 );
    if ( tmp_and_right_value_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1035;
        goto try_except_handler_6;
    }
    tmp_cond_value_17 = tmp_and_right_value_16;
    goto and_end_16;
    and_left_16:;
    tmp_cond_value_17 = tmp_and_left_value_16;
    and_end_16:;
    tmp_cond_truth_17 = CHECK_IF_TRUE( tmp_cond_value_17 );
    assert( !(tmp_cond_truth_17 == -1) );
    if ( tmp_cond_truth_17 == 1 )
    {
        goto branch_yes_32;
    }
    else
    {
        goto branch_no_32;
    }
    branch_yes_32:;
    tmp_source_name_25 = const_unicode_empty;
    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_join );
    assert( tmp_called_name_15 != NULL );
    tmp_args_element_name_20 = PyTuple_New( 2 );
    tmp_slice_source_36 = par_word;

    if ( tmp_slice_source_36 == NULL )
    {
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_20 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1036;
        goto try_except_handler_6;
    }

    tmp_len_arg_12 = var_suffix;

    tmp_operand_name_11 = BUILTIN_LEN( tmp_len_arg_12 );
    if ( tmp_operand_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_20 );

        exception_lineno = 1036;
        goto try_except_handler_6;
    }
    tmp_slice_upper_13 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_11 );
    Py_DECREF( tmp_operand_name_11 );
    if ( tmp_slice_upper_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_20 );

        exception_lineno = 1036;
        goto try_except_handler_6;
    }
    tmp_tuple_element_13 = LOOKUP_SLICE( tmp_slice_source_36, Py_None, tmp_slice_upper_13 );
    Py_DECREF( tmp_slice_upper_13 );
    if ( tmp_tuple_element_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_20 );

        exception_lineno = 1036;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_20, 0, tmp_tuple_element_13 );
    tmp_tuple_element_13 = const_unicode_plain_log;
    Py_INCREF( tmp_tuple_element_13 );
    PyTuple_SET_ITEM( tmp_args_element_name_20, 1, tmp_tuple_element_13 );
    frame_function->f_lineno = 1036;
    {
        PyObject *call_args[] = { tmp_args_element_name_20 };
        tmp_assign_source_57 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
    }

    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_args_element_name_20 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1036;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_57;
        Py_XDECREF( old );
    }

    tmp_assign_source_58 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_58;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    goto branch_end_32;
    branch_no_32:;
    tmp_compexpr_left_35 = var_suffix;

    tmp_compexpr_right_35 = const_tuple_73d19a82d956714a1c25b481a0adc418_tuple;
    tmp_and_left_value_17 = SEQUENCE_CONTAINS( tmp_compexpr_left_35, tmp_compexpr_right_35 );
    if ( tmp_and_left_value_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1039;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_17 = CHECK_IF_TRUE( tmp_and_left_value_17 );
    assert( !(tmp_and_left_truth_17 == -1) );
    if ( tmp_and_left_truth_17 == 1 )
    {
        goto and_right_17;
    }
    else
    {
        goto and_left_17;
    }
    and_right_17:;
    tmp_compexpr_left_36 = var_suffix;

    tmp_compexpr_right_36 = var_r2;

    tmp_and_right_value_17 = SEQUENCE_CONTAINS( tmp_compexpr_left_36, tmp_compexpr_right_36 );
    if ( tmp_and_right_value_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1040;
        goto try_except_handler_6;
    }
    tmp_cond_value_18 = tmp_and_right_value_17;
    goto and_end_17;
    and_left_17:;
    tmp_cond_value_18 = tmp_and_left_value_17;
    and_end_17:;
    tmp_cond_truth_18 = CHECK_IF_TRUE( tmp_cond_value_18 );
    assert( !(tmp_cond_truth_18 == -1) );
    if ( tmp_cond_truth_18 == 1 )
    {
        goto branch_yes_33;
    }
    else
    {
        goto branch_no_33;
    }
    branch_yes_33:;
    tmp_source_name_26 = const_unicode_empty;
    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_join );
    assert( tmp_called_name_16 != NULL );
    tmp_args_element_name_21 = PyTuple_New( 2 );
    tmp_slice_source_37 = par_word;

    if ( tmp_slice_source_37 == NULL )
    {
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_args_element_name_21 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1041;
        goto try_except_handler_6;
    }

    tmp_len_arg_13 = var_suffix;

    tmp_operand_name_12 = BUILTIN_LEN( tmp_len_arg_13 );
    if ( tmp_operand_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_args_element_name_21 );

        exception_lineno = 1041;
        goto try_except_handler_6;
    }
    tmp_slice_upper_14 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_12 );
    Py_DECREF( tmp_operand_name_12 );
    if ( tmp_slice_upper_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_args_element_name_21 );

        exception_lineno = 1041;
        goto try_except_handler_6;
    }
    tmp_tuple_element_14 = LOOKUP_SLICE( tmp_slice_source_37, Py_None, tmp_slice_upper_14 );
    Py_DECREF( tmp_slice_upper_14 );
    if ( tmp_tuple_element_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_args_element_name_21 );

        exception_lineno = 1041;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_21, 0, tmp_tuple_element_14 );
    tmp_tuple_element_14 = const_unicode_plain_u;
    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_args_element_name_21, 1, tmp_tuple_element_14 );
    frame_function->f_lineno = 1041;
    {
        PyObject *call_args[] = { tmp_args_element_name_21 };
        tmp_assign_source_59 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, call_args );
    }

    Py_DECREF( tmp_called_name_16 );
    Py_DECREF( tmp_args_element_name_21 );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1041;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_59;
        Py_XDECREF( old );
    }

    tmp_assign_source_60 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_60;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    goto branch_end_33;
    branch_no_33:;
    tmp_compexpr_left_37 = var_suffix;

    tmp_compexpr_right_37 = const_tuple_unicode_plain_ence_unicode_plain_ences_tuple;
    tmp_and_left_value_18 = SEQUENCE_CONTAINS( tmp_compexpr_left_37, tmp_compexpr_right_37 );
    if ( tmp_and_left_value_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1044;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_18 = CHECK_IF_TRUE( tmp_and_left_value_18 );
    assert( !(tmp_and_left_truth_18 == -1) );
    if ( tmp_and_left_truth_18 == 1 )
    {
        goto and_right_18;
    }
    else
    {
        goto and_left_18;
    }
    and_right_18:;
    tmp_compexpr_left_38 = var_suffix;

    tmp_compexpr_right_38 = var_r2;

    tmp_and_right_value_18 = SEQUENCE_CONTAINS( tmp_compexpr_left_38, tmp_compexpr_right_38 );
    if ( tmp_and_right_value_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1044;
        goto try_except_handler_6;
    }
    tmp_cond_value_19 = tmp_and_right_value_18;
    goto and_end_18;
    and_left_18:;
    tmp_cond_value_19 = tmp_and_left_value_18;
    and_end_18:;
    tmp_cond_truth_19 = CHECK_IF_TRUE( tmp_cond_value_19 );
    assert( !(tmp_cond_truth_19 == -1) );
    if ( tmp_cond_truth_19 == 1 )
    {
        goto branch_yes_34;
    }
    else
    {
        goto branch_no_34;
    }
    branch_yes_34:;
    tmp_source_name_27 = const_unicode_empty;
    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_join );
    assert( tmp_called_name_17 != NULL );
    tmp_args_element_name_22 = PyTuple_New( 2 );
    tmp_slice_source_38 = par_word;

    if ( tmp_slice_source_38 == NULL )
    {
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_22 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1045;
        goto try_except_handler_6;
    }

    tmp_len_arg_14 = var_suffix;

    tmp_operand_name_13 = BUILTIN_LEN( tmp_len_arg_14 );
    if ( tmp_operand_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 1045;
        goto try_except_handler_6;
    }
    tmp_slice_upper_15 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_13 );
    Py_DECREF( tmp_operand_name_13 );
    if ( tmp_slice_upper_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 1045;
        goto try_except_handler_6;
    }
    tmp_tuple_element_15 = LOOKUP_SLICE( tmp_slice_source_38, Py_None, tmp_slice_upper_15 );
    Py_DECREF( tmp_slice_upper_15 );
    if ( tmp_tuple_element_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 1045;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_22, 0, tmp_tuple_element_15 );
    tmp_tuple_element_15 = const_unicode_plain_ent;
    Py_INCREF( tmp_tuple_element_15 );
    PyTuple_SET_ITEM( tmp_args_element_name_22, 1, tmp_tuple_element_15 );
    frame_function->f_lineno = 1045;
    {
        PyObject *call_args[] = { tmp_args_element_name_22 };
        tmp_assign_source_61 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_17, call_args );
    }

    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_args_element_name_22 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1045;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_61;
        Py_XDECREF( old );
    }

    tmp_assign_source_62 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_62;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    goto branch_end_34;
    branch_no_34:;
    tmp_compexpr_left_39 = var_suffix;

    tmp_compexpr_right_39 = const_tuple_a83d0aad9a8e67c97642281034ba06d4_tuple;
    tmp_and_left_value_19 = SEQUENCE_CONTAINS( tmp_compexpr_left_39, tmp_compexpr_right_39 );
    if ( tmp_and_left_value_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1048;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_19 = CHECK_IF_TRUE( tmp_and_left_value_19 );
    assert( !(tmp_and_left_truth_19 == -1) );
    if ( tmp_and_left_truth_19 == 1 )
    {
        goto and_right_19;
    }
    else
    {
        goto and_left_19;
    }
    and_right_19:;
    tmp_compexpr_left_40 = var_suffix;

    tmp_compexpr_right_40 = var_r2;

    tmp_and_right_value_19 = SEQUENCE_CONTAINS( tmp_compexpr_left_40, tmp_compexpr_right_40 );
    if ( tmp_and_right_value_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1048;
        goto try_except_handler_6;
    }
    tmp_cond_value_20 = tmp_and_right_value_19;
    goto and_end_19;
    and_left_19:;
    tmp_cond_value_20 = tmp_and_left_value_19;
    and_end_19:;
    tmp_cond_truth_20 = CHECK_IF_TRUE( tmp_cond_value_20 );
    assert( !(tmp_cond_truth_20 == -1) );
    if ( tmp_cond_truth_20 == 1 )
    {
        goto branch_yes_35;
    }
    else
    {
        goto branch_no_35;
    }
    branch_yes_35:;
    tmp_slice_source_39 = par_word;

    if ( tmp_slice_source_39 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1049;
        goto try_except_handler_6;
    }

    tmp_len_arg_15 = var_suffix;

    tmp_operand_name_14 = BUILTIN_LEN( tmp_len_arg_15 );
    if ( tmp_operand_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1049;
        goto try_except_handler_6;
    }
    tmp_slice_upper_16 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_14 );
    Py_DECREF( tmp_operand_name_14 );
    if ( tmp_slice_upper_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1049;
        goto try_except_handler_6;
    }
    tmp_assign_source_63 = LOOKUP_SLICE( tmp_slice_source_39, Py_None, tmp_slice_upper_16 );
    Py_DECREF( tmp_slice_upper_16 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1049;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_63;
        Py_XDECREF( old );
    }

    tmp_assign_source_64 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_64;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_20 = -4;
    tmp_slice_index_upper_20 = PY_SSIZE_T_MAX;
    tmp_slice_source_40 = par_word;

    tmp_compare_left_16 = LOOKUP_INDEX_SLICE( tmp_slice_source_40, tmp_sliceslicedel_index_lower_20, tmp_slice_index_upper_20 );
    if ( tmp_compare_left_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1052;
        goto try_except_handler_6;
    }
    tmp_compare_right_16 = const_unicode_plain_abil;
    tmp_cmp_Eq_7 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_16, tmp_compare_right_16 );
    if ( tmp_cmp_Eq_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_16 );

        exception_lineno = 1052;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_compare_left_16 );
    if ( tmp_cmp_Eq_7 == 1 )
    {
        goto branch_yes_36;
    }
    else
    {
        goto branch_no_36;
    }
    branch_yes_36:;
    tmp_compare_left_17 = const_unicode_plain_abil;
    tmp_compare_right_17 = var_r2;

    tmp_cmp_In_10 = PySequence_Contains( tmp_compare_right_17, tmp_compare_left_17 );
    assert( !(tmp_cmp_In_10 == -1) );
    if ( tmp_cmp_In_10 == 1 )
    {
        goto branch_yes_37;
    }
    else
    {
        goto branch_no_37;
    }
    branch_yes_37:;
    tmp_sliceslicedel_index_lower_21 = 0;
    tmp_slice_index_upper_21 = -4;
    tmp_slice_source_41 = par_word;

    tmp_assign_source_65 = LOOKUP_INDEX_SLICE( tmp_slice_source_41, tmp_sliceslicedel_index_lower_21, tmp_slice_index_upper_21 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1054;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_65;
        Py_DECREF( old );
    }

    goto branch_end_37;
    branch_no_37:;
    tmp_source_name_28 = const_unicode_empty;
    tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_join );
    assert( tmp_called_name_18 != NULL );
    tmp_args_element_name_23 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_22 = 0;
    tmp_slice_index_upper_22 = -2;
    tmp_slice_source_42 = par_word;

    tmp_tuple_element_16 = LOOKUP_INDEX_SLICE( tmp_slice_source_42, tmp_sliceslicedel_index_lower_22, tmp_slice_index_upper_22 );
    if ( tmp_tuple_element_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_18 );
        Py_DECREF( tmp_args_element_name_23 );

        exception_lineno = 1056;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_23, 0, tmp_tuple_element_16 );
    tmp_tuple_element_16 = const_unicode_plain_l;
    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_args_element_name_23, 1, tmp_tuple_element_16 );
    frame_function->f_lineno = 1056;
    {
        PyObject *call_args[] = { tmp_args_element_name_23 };
        tmp_assign_source_66 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_18, call_args );
    }

    Py_DECREF( tmp_called_name_18 );
    Py_DECREF( tmp_args_element_name_23 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1056;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_66;
        Py_DECREF( old );
    }

    branch_end_37:;
    goto branch_end_36;
    branch_no_36:;
    tmp_sliceslicedel_index_lower_23 = -2;
    tmp_slice_index_upper_23 = PY_SSIZE_T_MAX;
    tmp_slice_source_43 = par_word;

    tmp_compare_left_18 = LOOKUP_INDEX_SLICE( tmp_slice_source_43, tmp_sliceslicedel_index_lower_23, tmp_slice_index_upper_23 );
    if ( tmp_compare_left_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1058;
        goto try_except_handler_6;
    }
    tmp_compare_right_18 = const_unicode_plain_ic;
    tmp_cmp_Eq_8 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_18, tmp_compare_right_18 );
    if ( tmp_cmp_Eq_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_18 );

        exception_lineno = 1058;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_compare_left_18 );
    if ( tmp_cmp_Eq_8 == 1 )
    {
        goto branch_yes_38;
    }
    else
    {
        goto branch_no_38;
    }
    branch_yes_38:;
    tmp_compare_left_19 = const_unicode_plain_ic;
    tmp_compare_right_19 = var_r2;

    tmp_cmp_In_11 = PySequence_Contains( tmp_compare_right_19, tmp_compare_left_19 );
    assert( !(tmp_cmp_In_11 == -1) );
    if ( tmp_cmp_In_11 == 1 )
    {
        goto branch_yes_39;
    }
    else
    {
        goto branch_no_39;
    }
    branch_yes_39:;
    tmp_sliceslicedel_index_lower_24 = 0;
    tmp_slice_index_upper_24 = -2;
    tmp_slice_source_44 = par_word;

    tmp_assign_source_67 = LOOKUP_INDEX_SLICE( tmp_slice_source_44, tmp_sliceslicedel_index_lower_24, tmp_slice_index_upper_24 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1060;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_67;
        Py_DECREF( old );
    }

    goto branch_end_39;
    branch_no_39:;
    tmp_source_name_29 = const_unicode_empty;
    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_join );
    assert( tmp_called_name_19 != NULL );
    tmp_args_element_name_24 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_25 = 0;
    tmp_slice_index_upper_25 = -2;
    tmp_slice_source_45 = par_word;

    tmp_tuple_element_17 = LOOKUP_INDEX_SLICE( tmp_slice_source_45, tmp_sliceslicedel_index_lower_25, tmp_slice_index_upper_25 );
    if ( tmp_tuple_element_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_args_element_name_24 );

        exception_lineno = 1062;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_24, 0, tmp_tuple_element_17 );
    tmp_tuple_element_17 = const_unicode_plain_iqU;
    Py_INCREF( tmp_tuple_element_17 );
    PyTuple_SET_ITEM( tmp_args_element_name_24, 1, tmp_tuple_element_17 );
    frame_function->f_lineno = 1062;
    {
        PyObject *call_args[] = { tmp_args_element_name_24 };
        tmp_assign_source_68 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_19, call_args );
    }

    Py_DECREF( tmp_called_name_19 );
    Py_DECREF( tmp_args_element_name_24 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1062;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_68;
        Py_DECREF( old );
    }

    branch_end_39:;
    goto branch_end_38;
    branch_no_38:;
    tmp_sliceslicedel_index_lower_26 = -2;
    tmp_slice_index_upper_26 = PY_SSIZE_T_MAX;
    tmp_slice_source_46 = par_word;

    tmp_compare_left_20 = LOOKUP_INDEX_SLICE( tmp_slice_source_46, tmp_sliceslicedel_index_lower_26, tmp_slice_index_upper_26 );
    if ( tmp_compare_left_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1064;
        goto try_except_handler_6;
    }
    tmp_compare_right_20 = const_unicode_plain_iv;
    tmp_cmp_Eq_9 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_20, tmp_compare_right_20 );
    if ( tmp_cmp_Eq_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_20 );

        exception_lineno = 1064;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_compare_left_20 );
    if ( tmp_cmp_Eq_9 == 1 )
    {
        goto branch_yes_40;
    }
    else
    {
        goto branch_no_40;
    }
    branch_yes_40:;
    tmp_compare_left_21 = const_unicode_plain_iv;
    tmp_compare_right_21 = var_r2;

    tmp_cmp_In_12 = PySequence_Contains( tmp_compare_right_21, tmp_compare_left_21 );
    assert( !(tmp_cmp_In_12 == -1) );
    if ( tmp_cmp_In_12 == 1 )
    {
        goto branch_yes_41;
    }
    else
    {
        goto branch_no_41;
    }
    branch_yes_41:;
    tmp_sliceslicedel_index_lower_27 = 0;
    tmp_slice_index_upper_27 = -2;
    tmp_slice_source_47 = par_word;

    tmp_assign_source_69 = LOOKUP_INDEX_SLICE( tmp_slice_source_47, tmp_sliceslicedel_index_lower_27, tmp_slice_index_upper_27 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1066;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_69;
        Py_DECREF( old );
    }

    branch_no_41:;
    branch_no_40:;
    branch_end_38:;
    branch_end_36:;
    goto branch_end_35;
    branch_no_35:;
    tmp_compexpr_left_41 = var_suffix;

    tmp_compexpr_right_41 = const_tuple_92caa36be441ec854f2de0e294aaa9d7_tuple;
    tmp_and_left_value_20 = SEQUENCE_CONTAINS( tmp_compexpr_left_41, tmp_compexpr_right_41 );
    if ( tmp_and_left_value_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1068;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_20 = CHECK_IF_TRUE( tmp_and_left_value_20 );
    assert( !(tmp_and_left_truth_20 == -1) );
    if ( tmp_and_left_truth_20 == 1 )
    {
        goto and_right_20;
    }
    else
    {
        goto and_left_20;
    }
    and_right_20:;
    tmp_compexpr_left_42 = var_suffix;

    tmp_compexpr_right_42 = var_r2;

    tmp_and_right_value_20 = SEQUENCE_CONTAINS( tmp_compexpr_left_42, tmp_compexpr_right_42 );
    if ( tmp_and_right_value_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1069;
        goto try_except_handler_6;
    }
    tmp_cond_value_21 = tmp_and_right_value_20;
    goto and_end_20;
    and_left_20:;
    tmp_cond_value_21 = tmp_and_left_value_20;
    and_end_20:;
    tmp_cond_truth_21 = CHECK_IF_TRUE( tmp_cond_value_21 );
    assert( !(tmp_cond_truth_21 == -1) );
    if ( tmp_cond_truth_21 == 1 )
    {
        goto branch_yes_42;
    }
    else
    {
        goto branch_no_42;
    }
    branch_yes_42:;
    tmp_slice_source_48 = par_word;

    if ( tmp_slice_source_48 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1070;
        goto try_except_handler_6;
    }

    tmp_len_arg_16 = var_suffix;

    tmp_operand_name_15 = BUILTIN_LEN( tmp_len_arg_16 );
    if ( tmp_operand_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1070;
        goto try_except_handler_6;
    }
    tmp_slice_upper_17 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_15 );
    Py_DECREF( tmp_operand_name_15 );
    if ( tmp_slice_upper_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1070;
        goto try_except_handler_6;
    }
    tmp_assign_source_70 = LOOKUP_SLICE( tmp_slice_source_48, Py_None, tmp_slice_upper_17 );
    Py_DECREF( tmp_slice_upper_17 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1070;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_70;
        Py_XDECREF( old );
    }

    tmp_assign_source_71 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_71;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_28 = -2;
    tmp_slice_index_upper_28 = PY_SSIZE_T_MAX;
    tmp_slice_source_49 = par_word;

    tmp_compexpr_left_43 = LOOKUP_INDEX_SLICE( tmp_slice_source_49, tmp_sliceslicedel_index_lower_28, tmp_slice_index_upper_28 );
    if ( tmp_compexpr_left_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1073;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_43 = const_unicode_plain_at;
    tmp_and_left_value_21 = RICH_COMPARE_EQ( tmp_compexpr_left_43, tmp_compexpr_right_43 );
    Py_DECREF( tmp_compexpr_left_43 );
    if ( tmp_and_left_value_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1073;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_21 = CHECK_IF_TRUE( tmp_and_left_value_21 );
    if ( tmp_and_left_truth_21 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_21 );

        exception_lineno = 1073;
        goto try_except_handler_6;
    }
    if ( tmp_and_left_truth_21 == 1 )
    {
        goto and_right_21;
    }
    else
    {
        goto and_left_21;
    }
    and_right_21:;
    Py_DECREF( tmp_and_left_value_21 );
    tmp_compexpr_left_44 = const_unicode_plain_at;
    tmp_compexpr_right_44 = var_r2;

    tmp_and_right_value_21 = SEQUENCE_CONTAINS( tmp_compexpr_left_44, tmp_compexpr_right_44 );
    if ( tmp_and_right_value_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1073;
        goto try_except_handler_6;
    }
    Py_INCREF( tmp_and_right_value_21 );
    tmp_cond_value_22 = tmp_and_right_value_21;
    goto and_end_21;
    and_left_21:;
    tmp_cond_value_22 = tmp_and_left_value_21;
    and_end_21:;
    tmp_cond_truth_22 = CHECK_IF_TRUE( tmp_cond_value_22 );
    if ( tmp_cond_truth_22 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_22 );

        exception_lineno = 1073;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_22 );
    if ( tmp_cond_truth_22 == 1 )
    {
        goto branch_yes_43;
    }
    else
    {
        goto branch_no_43;
    }
    branch_yes_43:;
    tmp_sliceslicedel_index_lower_29 = 0;
    tmp_slice_index_upper_29 = -2;
    tmp_slice_source_50 = par_word;

    tmp_assign_source_72 = LOOKUP_INDEX_SLICE( tmp_slice_source_50, tmp_sliceslicedel_index_lower_29, tmp_slice_index_upper_29 );
    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1074;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_72;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_30 = -2;
    tmp_slice_index_upper_30 = PY_SSIZE_T_MAX;
    tmp_slice_source_51 = par_word;

    tmp_compare_left_22 = LOOKUP_INDEX_SLICE( tmp_slice_source_51, tmp_sliceslicedel_index_lower_30, tmp_slice_index_upper_30 );
    if ( tmp_compare_left_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1076;
        goto try_except_handler_6;
    }
    tmp_compare_right_22 = const_unicode_plain_ic;
    tmp_cmp_Eq_10 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_22, tmp_compare_right_22 );
    if ( tmp_cmp_Eq_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_22 );

        exception_lineno = 1076;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_compare_left_22 );
    if ( tmp_cmp_Eq_10 == 1 )
    {
        goto branch_yes_44;
    }
    else
    {
        goto branch_no_44;
    }
    branch_yes_44:;
    tmp_compare_left_23 = const_unicode_plain_ic;
    tmp_compare_right_23 = var_r2;

    tmp_cmp_In_13 = PySequence_Contains( tmp_compare_right_23, tmp_compare_left_23 );
    assert( !(tmp_cmp_In_13 == -1) );
    if ( tmp_cmp_In_13 == 1 )
    {
        goto branch_yes_45;
    }
    else
    {
        goto branch_no_45;
    }
    branch_yes_45:;
    tmp_sliceslicedel_index_lower_31 = 0;
    tmp_slice_index_upper_31 = -2;
    tmp_slice_source_52 = par_word;

    tmp_assign_source_73 = LOOKUP_INDEX_SLICE( tmp_slice_source_52, tmp_sliceslicedel_index_lower_31, tmp_slice_index_upper_31 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1078;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_73;
        Py_DECREF( old );
    }

    goto branch_end_45;
    branch_no_45:;
    tmp_source_name_30 = const_unicode_empty;
    tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_join );
    assert( tmp_called_name_20 != NULL );
    tmp_args_element_name_25 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_32 = 0;
    tmp_slice_index_upper_32 = -2;
    tmp_slice_source_53 = par_word;

    tmp_tuple_element_18 = LOOKUP_INDEX_SLICE( tmp_slice_source_53, tmp_sliceslicedel_index_lower_32, tmp_slice_index_upper_32 );
    if ( tmp_tuple_element_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_args_element_name_25 );

        exception_lineno = 1080;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_25, 0, tmp_tuple_element_18 );
    tmp_tuple_element_18 = const_unicode_plain_iqU;
    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_args_element_name_25, 1, tmp_tuple_element_18 );
    frame_function->f_lineno = 1080;
    {
        PyObject *call_args[] = { tmp_args_element_name_25 };
        tmp_assign_source_74 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_20, call_args );
    }

    Py_DECREF( tmp_called_name_20 );
    Py_DECREF( tmp_args_element_name_25 );
    if ( tmp_assign_source_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1080;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_74;
        Py_DECREF( old );
    }

    branch_end_45:;
    branch_no_44:;
    branch_no_43:;
    branch_no_42:;
    branch_end_35:;
    branch_end_34:;
    branch_end_33:;
    branch_end_32:;
    branch_end_29:;
    branch_end_28:;
    branch_end_27:;
    branch_end_26:;
    branch_end_25:;
    branch_end_24:;
    branch_end_23:;
    branch_end_13:;
    branch_end_10:;
    branch_end_9:;
    goto loop_end_3;
    branch_no_8:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 954;
        goto try_except_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_operand_name_16 = var_step1_success;

    if ( tmp_operand_name_16 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step1_success" );
        exception_tb = NULL;

        exception_lineno = 1084;
        goto frame_exception_exit_1;
    }

    tmp_or_left_value_4 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_16 );
    if ( tmp_or_left_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1084;
        goto frame_exception_exit_1;
    }
    tmp_or_left_truth_4 = CHECK_IF_TRUE( tmp_or_left_value_4 );
    if ( tmp_or_left_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1084;
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_4 == 1 )
    {
        goto or_left_4;
    }
    else
    {
        goto or_right_4;
    }
    or_right_4:;
    tmp_or_right_value_4 = var_rv_ending_found;

    if ( tmp_or_right_value_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv_ending_found" );
        exception_tb = NULL;

        exception_lineno = 1084;
        goto frame_exception_exit_1;
    }

    tmp_cond_value_23 = tmp_or_right_value_4;
    goto or_end_4;
    or_left_4:;
    tmp_cond_value_23 = tmp_or_left_value_4;
    or_end_4:;
    tmp_cond_truth_23 = CHECK_IF_TRUE( tmp_cond_value_23 );
    if ( tmp_cond_truth_23 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1084;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_23 == 1 )
    {
        goto branch_yes_46;
    }
    else
    {
        goto branch_no_46;
    }
    branch_yes_46:;
    tmp_source_name_31 = par_self;

    tmp_iter_arg_5 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain__FrenchStemmer__step2a_suffixes );
    if ( tmp_iter_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1085;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_75 = MAKE_ITERATOR( tmp_iter_arg_5 );
    Py_DECREF( tmp_iter_arg_5 );
    if ( tmp_assign_source_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1085;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator == NULL );
    tmp_for_loop_4__for_iterator = tmp_assign_source_75;

    // Tried code:
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    tmp_assign_source_76 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_76 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1085;
            goto try_except_handler_7;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_76;
        Py_XDECREF( old );
    }

    tmp_assign_source_77 = tmp_for_loop_4__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_77;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_5 = par_word;

    if ( tmp_called_instance_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1086;
        goto try_except_handler_7;
    }

    tmp_args_element_name_26 = var_suffix;

    frame_function->f_lineno = 1086;
    {
        PyObject *call_args[] = { tmp_args_element_name_26 };
        tmp_cond_value_24 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1086;
        goto try_except_handler_7;
    }
    tmp_cond_truth_24 = CHECK_IF_TRUE( tmp_cond_value_24 );
    if ( tmp_cond_truth_24 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_24 );

        exception_lineno = 1086;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_24 );
    if ( tmp_cond_truth_24 == 1 )
    {
        goto branch_yes_47;
    }
    else
    {
        goto branch_no_47;
    }
    branch_yes_47:;
    tmp_compexpr_left_45 = var_suffix;

    tmp_compexpr_right_45 = var_rv;

    if ( tmp_compexpr_right_45 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1087;
        goto try_except_handler_7;
    }

    tmp_and_left_value_22 = SEQUENCE_CONTAINS( tmp_compexpr_left_45, tmp_compexpr_right_45 );
    if ( tmp_and_left_value_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1087;
        goto try_except_handler_7;
    }
    tmp_and_left_truth_22 = CHECK_IF_TRUE( tmp_and_left_value_22 );
    assert( !(tmp_and_left_truth_22 == -1) );
    if ( tmp_and_left_truth_22 == 1 )
    {
        goto and_right_22;
    }
    else
    {
        goto and_left_22;
    }
    and_right_22:;
    tmp_len_arg_17 = var_rv;

    if ( tmp_len_arg_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1087;
        goto try_except_handler_7;
    }

    tmp_compexpr_left_46 = BUILTIN_LEN( tmp_len_arg_17 );
    if ( tmp_compexpr_left_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1087;
        goto try_except_handler_7;
    }
    tmp_len_arg_18 = var_suffix;

    tmp_compexpr_right_46 = BUILTIN_LEN( tmp_len_arg_18 );
    if ( tmp_compexpr_right_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_46 );

        exception_lineno = 1087;
        goto try_except_handler_7;
    }
    tmp_and_left_value_23 = RICH_COMPARE_GT( tmp_compexpr_left_46, tmp_compexpr_right_46 );
    Py_DECREF( tmp_compexpr_left_46 );
    Py_DECREF( tmp_compexpr_right_46 );
    if ( tmp_and_left_value_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1087;
        goto try_except_handler_7;
    }
    tmp_and_left_truth_23 = CHECK_IF_TRUE( tmp_and_left_value_23 );
    if ( tmp_and_left_truth_23 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_23 );

        exception_lineno = 1088;
        goto try_except_handler_7;
    }
    if ( tmp_and_left_truth_23 == 1 )
    {
        goto and_right_23;
    }
    else
    {
        goto and_left_23;
    }
    and_right_23:;
    Py_DECREF( tmp_and_left_value_23 );
    tmp_subscribed_name_12 = var_rv;

    if ( tmp_subscribed_name_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1088;
        goto try_except_handler_7;
    }

    tmp_called_instance_6 = var_rv;

    if ( tmp_called_instance_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1088;
        goto try_except_handler_7;
    }

    tmp_args_element_name_27 = var_suffix;

    frame_function->f_lineno = 1088;
    {
        PyObject *call_args[] = { tmp_args_element_name_27 };
        tmp_left_name_13 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_rindex, call_args );
    }

    if ( tmp_left_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1088;
        goto try_except_handler_7;
    }
    tmp_right_name_13 = const_int_pos_1;
    tmp_subscript_name_12 = BINARY_OPERATION_SUB( tmp_left_name_13, tmp_right_name_13 );
    Py_DECREF( tmp_left_name_13 );
    if ( tmp_subscript_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1088;
        goto try_except_handler_7;
    }
    tmp_compexpr_left_47 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_12, tmp_subscript_name_12 );
    Py_DECREF( tmp_subscript_name_12 );
    if ( tmp_compexpr_left_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1088;
        goto try_except_handler_7;
    }
    tmp_source_name_32 = par_self;

    tmp_compexpr_right_47 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain__FrenchStemmer__vowels );
    if ( tmp_compexpr_right_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_47 );

        exception_lineno = 1088;
        goto try_except_handler_7;
    }
    tmp_and_right_value_23 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_47, tmp_compexpr_right_47 );
    Py_DECREF( tmp_compexpr_left_47 );
    Py_DECREF( tmp_compexpr_right_47 );
    if ( tmp_and_right_value_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1088;
        goto try_except_handler_7;
    }
    Py_INCREF( tmp_and_right_value_23 );
    tmp_and_right_value_22 = tmp_and_right_value_23;
    goto and_end_23;
    and_left_23:;
    tmp_and_right_value_22 = tmp_and_left_value_23;
    and_end_23:;
    tmp_cond_value_25 = tmp_and_right_value_22;
    goto and_end_22;
    and_left_22:;
    Py_INCREF( tmp_and_left_value_22 );
    tmp_cond_value_25 = tmp_and_left_value_22;
    and_end_22:;
    tmp_cond_truth_25 = CHECK_IF_TRUE( tmp_cond_value_25 );
    if ( tmp_cond_truth_25 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_25 );

        exception_lineno = 1088;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_25 );
    if ( tmp_cond_truth_25 == 1 )
    {
        goto branch_yes_48;
    }
    else
    {
        goto branch_no_48;
    }
    branch_yes_48:;
    tmp_slice_source_54 = par_word;

    if ( tmp_slice_source_54 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1089;
        goto try_except_handler_7;
    }

    tmp_len_arg_19 = var_suffix;

    tmp_operand_name_17 = BUILTIN_LEN( tmp_len_arg_19 );
    if ( tmp_operand_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1089;
        goto try_except_handler_7;
    }
    tmp_slice_upper_18 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_17 );
    Py_DECREF( tmp_operand_name_17 );
    if ( tmp_slice_upper_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1089;
        goto try_except_handler_7;
    }
    tmp_assign_source_78 = LOOKUP_SLICE( tmp_slice_source_54, Py_None, tmp_slice_upper_18 );
    Py_DECREF( tmp_slice_upper_18 );
    if ( tmp_assign_source_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1089;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_78;
        Py_XDECREF( old );
    }

    tmp_assign_source_79 = Py_True;
    {
        PyObject *old = var_step2a_success;
        assert( old != NULL );
        var_step2a_success = tmp_assign_source_79;
        Py_INCREF( var_step2a_success );
        Py_DECREF( old );
    }

    branch_no_48:;
    goto loop_end_4;
    branch_no_47:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1085;
        goto try_except_handler_7;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    tmp_cond_value_26 = var_step2a_success;

    if ( tmp_cond_value_26 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step2a_success" );
        exception_tb = NULL;

        exception_lineno = 1094;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_26 = CHECK_IF_TRUE( tmp_cond_value_26 );
    if ( tmp_cond_truth_26 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1094;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_26 == 1 )
    {
        goto branch_no_49;
    }
    else
    {
        goto branch_yes_49;
    }
    branch_yes_49:;
    tmp_source_name_33 = par_self;

    tmp_iter_arg_6 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain__FrenchStemmer__step2b_suffixes );
    if ( tmp_iter_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1095;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_80 = MAKE_ITERATOR( tmp_iter_arg_6 );
    Py_DECREF( tmp_iter_arg_6 );
    if ( tmp_assign_source_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1095;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_5__for_iterator == NULL );
    tmp_for_loop_5__for_iterator = tmp_assign_source_80;

    // Tried code:
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator;

    tmp_assign_source_81 = ITERATOR_NEXT( tmp_next_source_5 );
    if ( tmp_assign_source_81 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_5;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1095;
            goto try_except_handler_8;
        }
    }

    {
        PyObject *old = tmp_for_loop_5__iter_value;
        tmp_for_loop_5__iter_value = tmp_assign_source_81;
        Py_XDECREF( old );
    }

    tmp_assign_source_82 = tmp_for_loop_5__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_82;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_7 = var_rv;

    if ( tmp_called_instance_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1096;
        goto try_except_handler_8;
    }

    tmp_args_element_name_28 = var_suffix;

    frame_function->f_lineno = 1096;
    {
        PyObject *call_args[] = { tmp_args_element_name_28 };
        tmp_cond_value_27 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1096;
        goto try_except_handler_8;
    }
    tmp_cond_truth_27 = CHECK_IF_TRUE( tmp_cond_value_27 );
    if ( tmp_cond_truth_27 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_27 );

        exception_lineno = 1096;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_27 );
    if ( tmp_cond_truth_27 == 1 )
    {
        goto branch_yes_50;
    }
    else
    {
        goto branch_no_50;
    }
    branch_yes_50:;
    tmp_compexpr_left_48 = var_suffix;

    tmp_compexpr_right_48 = const_unicode_plain_ions;
    tmp_and_left_value_24 = RICH_COMPARE_EQ( tmp_compexpr_left_48, tmp_compexpr_right_48 );
    if ( tmp_and_left_value_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1097;
        goto try_except_handler_8;
    }
    tmp_and_left_truth_24 = CHECK_IF_TRUE( tmp_and_left_value_24 );
    if ( tmp_and_left_truth_24 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_24 );

        exception_lineno = 1097;
        goto try_except_handler_8;
    }
    if ( tmp_and_left_truth_24 == 1 )
    {
        goto and_right_24;
    }
    else
    {
        goto and_left_24;
    }
    and_right_24:;
    Py_DECREF( tmp_and_left_value_24 );
    tmp_compexpr_left_49 = const_unicode_plain_ions;
    tmp_compexpr_right_49 = var_r2;

    tmp_and_right_value_24 = SEQUENCE_CONTAINS( tmp_compexpr_left_49, tmp_compexpr_right_49 );
    if ( tmp_and_right_value_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1097;
        goto try_except_handler_8;
    }
    Py_INCREF( tmp_and_right_value_24 );
    tmp_cond_value_28 = tmp_and_right_value_24;
    goto and_end_24;
    and_left_24:;
    tmp_cond_value_28 = tmp_and_left_value_24;
    and_end_24:;
    tmp_cond_truth_28 = CHECK_IF_TRUE( tmp_cond_value_28 );
    if ( tmp_cond_truth_28 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_28 );

        exception_lineno = 1097;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_28 );
    if ( tmp_cond_truth_28 == 1 )
    {
        goto branch_yes_51;
    }
    else
    {
        goto branch_no_51;
    }
    branch_yes_51:;
    tmp_sliceslicedel_index_lower_33 = 0;
    tmp_slice_index_upper_33 = -4;
    tmp_slice_source_55 = par_word;

    if ( tmp_slice_source_55 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1098;
        goto try_except_handler_8;
    }

    tmp_assign_source_83 = LOOKUP_INDEX_SLICE( tmp_slice_source_55, tmp_sliceslicedel_index_lower_33, tmp_slice_index_upper_33 );
    if ( tmp_assign_source_83 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1098;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_83;
        Py_XDECREF( old );
    }

    tmp_assign_source_84 = Py_True;
    {
        PyObject *old = var_step2b_success;
        assert( old != NULL );
        var_step2b_success = tmp_assign_source_84;
        Py_INCREF( var_step2b_success );
        Py_DECREF( old );
    }

    goto branch_end_51;
    branch_no_51:;
    tmp_compare_left_24 = var_suffix;

    tmp_compare_right_24 = const_tuple_69edef68b2c6eca22debb83964de78ac_tuple;
    tmp_cmp_In_14 = PySequence_Contains( tmp_compare_right_24, tmp_compare_left_24 );
    assert( !(tmp_cmp_In_14 == -1) );
    if ( tmp_cmp_In_14 == 1 )
    {
        goto branch_yes_52;
    }
    else
    {
        goto branch_no_52;
    }
    branch_yes_52:;
    tmp_slice_source_56 = par_word;

    if ( tmp_slice_source_56 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1107;
        goto try_except_handler_8;
    }

    tmp_len_arg_20 = var_suffix;

    tmp_operand_name_18 = BUILTIN_LEN( tmp_len_arg_20 );
    if ( tmp_operand_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1107;
        goto try_except_handler_8;
    }
    tmp_slice_upper_19 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_18 );
    Py_DECREF( tmp_operand_name_18 );
    if ( tmp_slice_upper_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1107;
        goto try_except_handler_8;
    }
    tmp_assign_source_85 = LOOKUP_SLICE( tmp_slice_source_56, Py_None, tmp_slice_upper_19 );
    Py_DECREF( tmp_slice_upper_19 );
    if ( tmp_assign_source_85 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1107;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_85;
        Py_XDECREF( old );
    }

    tmp_assign_source_86 = Py_True;
    {
        PyObject *old = var_step2b_success;
        assert( old != NULL );
        var_step2b_success = tmp_assign_source_86;
        Py_INCREF( var_step2b_success );
        Py_DECREF( old );
    }

    goto branch_end_52;
    branch_no_52:;
    tmp_compare_left_25 = var_suffix;

    tmp_compare_right_25 = const_tuple_24449a48f5acd393d523907a440b8902_tuple;
    tmp_cmp_In_15 = PySequence_Contains( tmp_compare_right_25, tmp_compare_left_25 );
    assert( !(tmp_cmp_In_15 == -1) );
    if ( tmp_cmp_In_15 == 1 )
    {
        goto branch_yes_53;
    }
    else
    {
        goto branch_no_53;
    }
    branch_yes_53:;
    tmp_slice_source_57 = par_word;

    if ( tmp_slice_source_57 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1116;
        goto try_except_handler_8;
    }

    tmp_len_arg_21 = var_suffix;

    tmp_operand_name_19 = BUILTIN_LEN( tmp_len_arg_21 );
    if ( tmp_operand_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1116;
        goto try_except_handler_8;
    }
    tmp_slice_upper_20 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_19 );
    Py_DECREF( tmp_operand_name_19 );
    if ( tmp_slice_upper_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1116;
        goto try_except_handler_8;
    }
    tmp_assign_source_87 = LOOKUP_SLICE( tmp_slice_source_57, Py_None, tmp_slice_upper_20 );
    Py_DECREF( tmp_slice_upper_20 );
    if ( tmp_assign_source_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1116;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_87;
        Py_XDECREF( old );
    }

    tmp_slice_source_58 = var_rv;

    if ( tmp_slice_source_58 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1117;
        goto try_except_handler_8;
    }

    tmp_len_arg_22 = var_suffix;

    tmp_operand_name_20 = BUILTIN_LEN( tmp_len_arg_22 );
    if ( tmp_operand_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1117;
        goto try_except_handler_8;
    }
    tmp_slice_upper_21 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_20 );
    Py_DECREF( tmp_operand_name_20 );
    if ( tmp_slice_upper_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1117;
        goto try_except_handler_8;
    }
    tmp_assign_source_88 = LOOKUP_SLICE( tmp_slice_source_58, Py_None, tmp_slice_upper_21 );
    Py_DECREF( tmp_slice_upper_21 );
    if ( tmp_assign_source_88 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1117;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_88;
        Py_XDECREF( old );
    }

    tmp_assign_source_89 = Py_True;
    {
        PyObject *old = var_step2b_success;
        assert( old != NULL );
        var_step2b_success = tmp_assign_source_89;
        Py_INCREF( var_step2b_success );
        Py_DECREF( old );
    }

    tmp_called_instance_8 = var_rv;

    frame_function->f_lineno = 1119;
    tmp_cond_value_29 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_e_tuple, 0 ) );

    if ( tmp_cond_value_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1119;
        goto try_except_handler_8;
    }
    tmp_cond_truth_29 = CHECK_IF_TRUE( tmp_cond_value_29 );
    if ( tmp_cond_truth_29 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_29 );

        exception_lineno = 1119;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_29 );
    if ( tmp_cond_truth_29 == 1 )
    {
        goto branch_yes_54;
    }
    else
    {
        goto branch_no_54;
    }
    branch_yes_54:;
    tmp_sliceslicedel_index_lower_34 = 0;
    tmp_slice_index_upper_34 = -1;
    tmp_slice_source_59 = par_word;

    tmp_assign_source_90 = LOOKUP_INDEX_SLICE( tmp_slice_source_59, tmp_sliceslicedel_index_lower_34, tmp_slice_index_upper_34 );
    if ( tmp_assign_source_90 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1120;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_90;
        Py_DECREF( old );
    }

    branch_no_54:;
    branch_no_53:;
    branch_end_52:;
    branch_end_51:;
    goto loop_end_5;
    branch_no_50:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1095;
        goto try_except_handler_8;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    branch_no_49:;
    branch_no_46:;
    tmp_or_left_value_5 = var_step1_success;

    if ( tmp_or_left_value_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step1_success" );
        exception_tb = NULL;

        exception_lineno = 1124;
        goto frame_exception_exit_1;
    }

    tmp_or_left_truth_5 = CHECK_IF_TRUE( tmp_or_left_value_5 );
    if ( tmp_or_left_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1124;
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_5 == 1 )
    {
        goto or_left_5;
    }
    else
    {
        goto or_right_5;
    }
    or_right_5:;
    tmp_or_left_value_6 = var_step2a_success;

    if ( tmp_or_left_value_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step2a_success" );
        exception_tb = NULL;

        exception_lineno = 1124;
        goto frame_exception_exit_1;
    }

    tmp_or_left_truth_6 = CHECK_IF_TRUE( tmp_or_left_value_6 );
    if ( tmp_or_left_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1124;
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_6 == 1 )
    {
        goto or_left_6;
    }
    else
    {
        goto or_right_6;
    }
    or_right_6:;
    tmp_or_right_value_6 = var_step2b_success;

    if ( tmp_or_right_value_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step2b_success" );
        exception_tb = NULL;

        exception_lineno = 1124;
        goto frame_exception_exit_1;
    }

    tmp_or_right_value_5 = tmp_or_right_value_6;
    goto or_end_6;
    or_left_6:;
    tmp_or_right_value_5 = tmp_or_left_value_6;
    or_end_6:;
    tmp_cond_value_30 = tmp_or_right_value_5;
    goto or_end_5;
    or_left_5:;
    tmp_cond_value_30 = tmp_or_left_value_5;
    or_end_5:;
    tmp_cond_truth_30 = CHECK_IF_TRUE( tmp_cond_value_30 );
    if ( tmp_cond_truth_30 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1124;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_30 == 1 )
    {
        goto branch_yes_55;
    }
    else
    {
        goto branch_no_55;
    }
    branch_yes_55:;
    tmp_subscribed_name_13 = par_word;

    if ( tmp_subscribed_name_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1125;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_13 = const_int_neg_1;
    tmp_compare_left_26 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_13, tmp_subscript_name_13 );
    if ( tmp_compare_left_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1125;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_26 = const_unicode_plain_Y;
    tmp_cmp_Eq_11 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_26, tmp_compare_right_26 );
    if ( tmp_cmp_Eq_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_26 );

        exception_lineno = 1125;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_26 );
    if ( tmp_cmp_Eq_11 == 1 )
    {
        goto branch_yes_56;
    }
    else
    {
        goto branch_no_56;
    }
    branch_yes_56:;
    tmp_source_name_34 = const_unicode_empty;
    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_join );
    assert( tmp_called_name_21 != NULL );
    tmp_args_element_name_29 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_35 = 0;
    tmp_slice_index_upper_35 = -1;
    tmp_slice_source_60 = par_word;

    if ( tmp_slice_source_60 == NULL )
    {
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_args_element_name_29 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1126;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_19 = LOOKUP_INDEX_SLICE( tmp_slice_source_60, tmp_sliceslicedel_index_lower_35, tmp_slice_index_upper_35 );
    if ( tmp_tuple_element_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_args_element_name_29 );

        exception_lineno = 1126;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_29, 0, tmp_tuple_element_19 );
    tmp_tuple_element_19 = const_unicode_plain_i;
    Py_INCREF( tmp_tuple_element_19 );
    PyTuple_SET_ITEM( tmp_args_element_name_29, 1, tmp_tuple_element_19 );
    frame_function->f_lineno = 1126;
    {
        PyObject *call_args[] = { tmp_args_element_name_29 };
        tmp_assign_source_91 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_21, call_args );
    }

    Py_DECREF( tmp_called_name_21 );
    Py_DECREF( tmp_args_element_name_29 );
    if ( tmp_assign_source_91 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1126;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_91;
        Py_XDECREF( old );
    }

    goto branch_end_56;
    branch_no_56:;
    tmp_subscribed_name_14 = par_word;

    if ( tmp_subscribed_name_14 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1127;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_14 = const_int_neg_1;
    tmp_compare_left_27 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_14, tmp_subscript_name_14 );
    if ( tmp_compare_left_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1127;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_27 = const_unicode_digest_71e905b11a810a0c249b8d42f53379d6;
    tmp_cmp_Eq_12 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_27, tmp_compare_right_27 );
    if ( tmp_cmp_Eq_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_27 );

        exception_lineno = 1127;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_27 );
    if ( tmp_cmp_Eq_12 == 1 )
    {
        goto branch_yes_57;
    }
    else
    {
        goto branch_no_57;
    }
    branch_yes_57:;
    tmp_source_name_35 = const_unicode_empty;
    tmp_called_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_join );
    assert( tmp_called_name_22 != NULL );
    tmp_args_element_name_30 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_36 = 0;
    tmp_slice_index_upper_36 = -1;
    tmp_slice_source_61 = par_word;

    if ( tmp_slice_source_61 == NULL )
    {
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_args_element_name_30 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1128;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_20 = LOOKUP_INDEX_SLICE( tmp_slice_source_61, tmp_sliceslicedel_index_lower_36, tmp_slice_index_upper_36 );
    if ( tmp_tuple_element_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_args_element_name_30 );

        exception_lineno = 1128;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_30, 0, tmp_tuple_element_20 );
    tmp_tuple_element_20 = const_unicode_plain_c;
    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_args_element_name_30, 1, tmp_tuple_element_20 );
    frame_function->f_lineno = 1128;
    {
        PyObject *call_args[] = { tmp_args_element_name_30 };
        tmp_assign_source_92 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_22, call_args );
    }

    Py_DECREF( tmp_called_name_22 );
    Py_DECREF( tmp_args_element_name_30 );
    if ( tmp_assign_source_92 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1128;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_92;
        Py_XDECREF( old );
    }

    branch_no_57:;
    branch_end_56:;
    goto branch_end_55;
    branch_no_55:;
    tmp_len_arg_23 = par_word;

    if ( tmp_len_arg_23 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1132;
        goto frame_exception_exit_1;
    }

    tmp_compexpr_left_50 = BUILTIN_LEN( tmp_len_arg_23 );
    if ( tmp_compexpr_left_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1132;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_50 = const_int_pos_2;
    tmp_and_left_value_25 = RICH_COMPARE_GE( tmp_compexpr_left_50, tmp_compexpr_right_50 );
    Py_DECREF( tmp_compexpr_left_50 );
    if ( tmp_and_left_value_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1132;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_25 = CHECK_IF_TRUE( tmp_and_left_value_25 );
    if ( tmp_and_left_truth_25 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_25 );

        exception_lineno = 1133;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_25 == 1 )
    {
        goto and_right_25;
    }
    else
    {
        goto and_left_25;
    }
    and_right_25:;
    Py_DECREF( tmp_and_left_value_25 );
    tmp_subscribed_name_15 = par_word;

    if ( tmp_subscribed_name_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1132;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_15 = const_int_neg_1;
    tmp_compexpr_left_51 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_15, tmp_subscript_name_15 );
    if ( tmp_compexpr_left_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1132;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_51 = const_unicode_plain_s;
    tmp_and_left_value_26 = RICH_COMPARE_EQ( tmp_compexpr_left_51, tmp_compexpr_right_51 );
    Py_DECREF( tmp_compexpr_left_51 );
    if ( tmp_and_left_value_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1132;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_26 = CHECK_IF_TRUE( tmp_and_left_value_26 );
    if ( tmp_and_left_truth_26 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_26 );

        exception_lineno = 1133;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_26 == 1 )
    {
        goto and_right_26;
    }
    else
    {
        goto and_left_26;
    }
    and_right_26:;
    Py_DECREF( tmp_and_left_value_26 );
    tmp_subscribed_name_16 = par_word;

    if ( tmp_subscribed_name_16 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1133;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_16 = const_int_neg_2;
    tmp_compexpr_left_52 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_16, tmp_subscript_name_16 );
    if ( tmp_compexpr_left_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1133;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_52 = const_unicode_digest_22aff32e302512c1e61183bad14841a6;
    tmp_and_right_value_26 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_52, tmp_compexpr_right_52 );
    Py_DECREF( tmp_compexpr_left_52 );
    if ( tmp_and_right_value_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1133;
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_and_right_value_26 );
    tmp_and_right_value_25 = tmp_and_right_value_26;
    goto and_end_26;
    and_left_26:;
    tmp_and_right_value_25 = tmp_and_left_value_26;
    and_end_26:;
    tmp_cond_value_31 = tmp_and_right_value_25;
    goto and_end_25;
    and_left_25:;
    tmp_cond_value_31 = tmp_and_left_value_25;
    and_end_25:;
    tmp_cond_truth_31 = CHECK_IF_TRUE( tmp_cond_value_31 );
    if ( tmp_cond_truth_31 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_31 );

        exception_lineno = 1133;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_31 );
    if ( tmp_cond_truth_31 == 1 )
    {
        goto branch_yes_58;
    }
    else
    {
        goto branch_no_58;
    }
    branch_yes_58:;
    tmp_sliceslicedel_index_lower_37 = 0;
    tmp_slice_index_upper_37 = -1;
    tmp_slice_source_62 = par_word;

    if ( tmp_slice_source_62 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1134;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_93 = LOOKUP_INDEX_SLICE( tmp_slice_source_62, tmp_sliceslicedel_index_lower_37, tmp_slice_index_upper_37 );
    if ( tmp_assign_source_93 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1134;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_93;
        Py_XDECREF( old );
    }

    branch_no_58:;
    tmp_source_name_36 = par_self;

    tmp_iter_arg_7 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain__FrenchStemmer__step4_suffixes );
    if ( tmp_iter_arg_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1136;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_94 = MAKE_ITERATOR( tmp_iter_arg_7 );
    Py_DECREF( tmp_iter_arg_7 );
    if ( tmp_assign_source_94 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1136;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_6__for_iterator == NULL );
    tmp_for_loop_6__for_iterator = tmp_assign_source_94;

    // Tried code:
    loop_start_6:;
    tmp_next_source_6 = tmp_for_loop_6__for_iterator;

    tmp_assign_source_95 = ITERATOR_NEXT( tmp_next_source_6 );
    if ( tmp_assign_source_95 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_6;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1136;
            goto try_except_handler_9;
        }
    }

    {
        PyObject *old = tmp_for_loop_6__iter_value;
        tmp_for_loop_6__iter_value = tmp_assign_source_95;
        Py_XDECREF( old );
    }

    tmp_assign_source_96 = tmp_for_loop_6__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_96;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_9 = par_word;

    if ( tmp_called_instance_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1137;
        goto try_except_handler_9;
    }

    tmp_args_element_name_31 = var_suffix;

    frame_function->f_lineno = 1137;
    {
        PyObject *call_args[] = { tmp_args_element_name_31 };
        tmp_cond_value_32 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1137;
        goto try_except_handler_9;
    }
    tmp_cond_truth_32 = CHECK_IF_TRUE( tmp_cond_value_32 );
    if ( tmp_cond_truth_32 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_32 );

        exception_lineno = 1137;
        goto try_except_handler_9;
    }
    Py_DECREF( tmp_cond_value_32 );
    if ( tmp_cond_truth_32 == 1 )
    {
        goto branch_yes_59;
    }
    else
    {
        goto branch_no_59;
    }
    branch_yes_59:;
    tmp_compare_left_28 = var_suffix;

    tmp_compare_right_28 = var_rv;

    if ( tmp_compare_right_28 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1138;
        goto try_except_handler_9;
    }

    tmp_cmp_In_16 = PySequence_Contains( tmp_compare_right_28, tmp_compare_left_28 );
    assert( !(tmp_cmp_In_16 == -1) );
    if ( tmp_cmp_In_16 == 1 )
    {
        goto branch_yes_60;
    }
    else
    {
        goto branch_no_60;
    }
    branch_yes_60:;
    tmp_compexpr_left_53 = var_suffix;

    tmp_compexpr_right_53 = const_unicode_plain_ion;
    tmp_and_left_value_27 = RICH_COMPARE_EQ( tmp_compexpr_left_53, tmp_compexpr_right_53 );
    if ( tmp_and_left_value_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1139;
        goto try_except_handler_9;
    }
    tmp_and_left_truth_27 = CHECK_IF_TRUE( tmp_and_left_value_27 );
    if ( tmp_and_left_truth_27 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_27 );

        exception_lineno = 1140;
        goto try_except_handler_9;
    }
    if ( tmp_and_left_truth_27 == 1 )
    {
        goto and_right_27;
    }
    else
    {
        goto and_left_27;
    }
    and_right_27:;
    Py_DECREF( tmp_and_left_value_27 );
    tmp_compexpr_left_54 = var_suffix;

    tmp_compexpr_right_54 = var_r2;

    tmp_and_left_value_28 = SEQUENCE_CONTAINS( tmp_compexpr_left_54, tmp_compexpr_right_54 );
    if ( tmp_and_left_value_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1139;
        goto try_except_handler_9;
    }
    tmp_and_left_truth_28 = CHECK_IF_TRUE( tmp_and_left_value_28 );
    assert( !(tmp_and_left_truth_28 == -1) );
    if ( tmp_and_left_truth_28 == 1 )
    {
        goto and_right_28;
    }
    else
    {
        goto and_left_28;
    }
    and_right_28:;
    tmp_subscribed_name_17 = var_rv;

    if ( tmp_subscribed_name_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1140;
        goto try_except_handler_9;
    }

    tmp_subscript_name_17 = const_int_neg_4;
    tmp_compexpr_left_55 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_17, tmp_subscript_name_17 );
    if ( tmp_compexpr_left_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1140;
        goto try_except_handler_9;
    }
    tmp_compexpr_right_55 = const_unicode_plain_st;
    tmp_and_right_value_28 = SEQUENCE_CONTAINS( tmp_compexpr_left_55, tmp_compexpr_right_55 );
    Py_DECREF( tmp_compexpr_left_55 );
    if ( tmp_and_right_value_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1140;
        goto try_except_handler_9;
    }
    tmp_and_right_value_27 = tmp_and_right_value_28;
    goto and_end_28;
    and_left_28:;
    tmp_and_right_value_27 = tmp_and_left_value_28;
    and_end_28:;
    Py_INCREF( tmp_and_right_value_27 );
    tmp_cond_value_33 = tmp_and_right_value_27;
    goto and_end_27;
    and_left_27:;
    tmp_cond_value_33 = tmp_and_left_value_27;
    and_end_27:;
    tmp_cond_truth_33 = CHECK_IF_TRUE( tmp_cond_value_33 );
    if ( tmp_cond_truth_33 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_33 );

        exception_lineno = 1140;
        goto try_except_handler_9;
    }
    Py_DECREF( tmp_cond_value_33 );
    if ( tmp_cond_truth_33 == 1 )
    {
        goto branch_yes_61;
    }
    else
    {
        goto branch_no_61;
    }
    branch_yes_61:;
    tmp_sliceslicedel_index_lower_38 = 0;
    tmp_slice_index_upper_38 = -3;
    tmp_slice_source_63 = par_word;

    if ( tmp_slice_source_63 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1141;
        goto try_except_handler_9;
    }

    tmp_assign_source_97 = LOOKUP_INDEX_SLICE( tmp_slice_source_63, tmp_sliceslicedel_index_lower_38, tmp_slice_index_upper_38 );
    if ( tmp_assign_source_97 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1141;
        goto try_except_handler_9;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_97;
        Py_XDECREF( old );
    }

    goto branch_end_61;
    branch_no_61:;
    tmp_compare_left_29 = var_suffix;

    tmp_compare_right_29 = const_tuple_3cde4017af6f16526fb10beed8499c5f_tuple;
    tmp_cmp_In_17 = PySequence_Contains( tmp_compare_right_29, tmp_compare_left_29 );
    assert( !(tmp_cmp_In_17 == -1) );
    if ( tmp_cmp_In_17 == 1 )
    {
        goto branch_yes_62;
    }
    else
    {
        goto branch_no_62;
    }
    branch_yes_62:;
    tmp_source_name_37 = const_unicode_empty;
    tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_join );
    assert( tmp_called_name_23 != NULL );
    tmp_args_element_name_32 = PyTuple_New( 2 );
    tmp_slice_source_64 = par_word;

    if ( tmp_slice_source_64 == NULL )
    {
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_args_element_name_32 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1145;
        goto try_except_handler_9;
    }

    tmp_len_arg_24 = var_suffix;

    tmp_operand_name_21 = BUILTIN_LEN( tmp_len_arg_24 );
    if ( tmp_operand_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_args_element_name_32 );

        exception_lineno = 1145;
        goto try_except_handler_9;
    }
    tmp_slice_upper_22 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_21 );
    Py_DECREF( tmp_operand_name_21 );
    if ( tmp_slice_upper_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_args_element_name_32 );

        exception_lineno = 1145;
        goto try_except_handler_9;
    }
    tmp_tuple_element_21 = LOOKUP_SLICE( tmp_slice_source_64, Py_None, tmp_slice_upper_22 );
    Py_DECREF( tmp_slice_upper_22 );
    if ( tmp_tuple_element_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_args_element_name_32 );

        exception_lineno = 1145;
        goto try_except_handler_9;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_32, 0, tmp_tuple_element_21 );
    tmp_tuple_element_21 = const_unicode_plain_i;
    Py_INCREF( tmp_tuple_element_21 );
    PyTuple_SET_ITEM( tmp_args_element_name_32, 1, tmp_tuple_element_21 );
    frame_function->f_lineno = 1145;
    {
        PyObject *call_args[] = { tmp_args_element_name_32 };
        tmp_assign_source_98 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_23, call_args );
    }

    Py_DECREF( tmp_called_name_23 );
    Py_DECREF( tmp_args_element_name_32 );
    if ( tmp_assign_source_98 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1145;
        goto try_except_handler_9;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_98;
        Py_XDECREF( old );
    }

    goto branch_end_62;
    branch_no_62:;
    tmp_compare_left_30 = var_suffix;

    tmp_compare_right_30 = const_unicode_plain_e;
    tmp_cmp_Eq_13 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_30, tmp_compare_right_30 );
    if ( tmp_cmp_Eq_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1147;
        goto try_except_handler_9;
    }
    if ( tmp_cmp_Eq_13 == 1 )
    {
        goto branch_yes_63;
    }
    else
    {
        goto branch_no_63;
    }
    branch_yes_63:;
    tmp_sliceslicedel_index_lower_39 = 0;
    tmp_slice_index_upper_39 = -1;
    tmp_slice_source_65 = par_word;

    if ( tmp_slice_source_65 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1148;
        goto try_except_handler_9;
    }

    tmp_assign_source_99 = LOOKUP_INDEX_SLICE( tmp_slice_source_65, tmp_sliceslicedel_index_lower_39, tmp_slice_index_upper_39 );
    if ( tmp_assign_source_99 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1148;
        goto try_except_handler_9;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_99;
        Py_XDECREF( old );
    }

    goto branch_end_63;
    branch_no_63:;
    tmp_compexpr_left_56 = var_suffix;

    tmp_compexpr_right_56 = const_unicode_digest_e64aef8bc630796f1c20d05047369731;
    tmp_and_left_value_29 = RICH_COMPARE_EQ( tmp_compexpr_left_56, tmp_compexpr_right_56 );
    if ( tmp_and_left_value_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1150;
        goto try_except_handler_9;
    }
    tmp_and_left_truth_29 = CHECK_IF_TRUE( tmp_and_left_value_29 );
    if ( tmp_and_left_truth_29 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_29 );

        exception_lineno = 1150;
        goto try_except_handler_9;
    }
    if ( tmp_and_left_truth_29 == 1 )
    {
        goto and_right_29;
    }
    else
    {
        goto and_left_29;
    }
    and_right_29:;
    Py_DECREF( tmp_and_left_value_29 );
    tmp_sliceslicedel_index_lower_40 = -3;
    tmp_slice_index_upper_40 = -1;
    tmp_slice_source_66 = par_word;

    if ( tmp_slice_source_66 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1150;
        goto try_except_handler_9;
    }

    tmp_compexpr_left_57 = LOOKUP_INDEX_SLICE( tmp_slice_source_66, tmp_sliceslicedel_index_lower_40, tmp_slice_index_upper_40 );
    if ( tmp_compexpr_left_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1150;
        goto try_except_handler_9;
    }
    tmp_compexpr_right_57 = const_unicode_plain_gu;
    tmp_and_right_value_29 = RICH_COMPARE_EQ( tmp_compexpr_left_57, tmp_compexpr_right_57 );
    Py_DECREF( tmp_compexpr_left_57 );
    if ( tmp_and_right_value_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1150;
        goto try_except_handler_9;
    }
    tmp_cond_value_34 = tmp_and_right_value_29;
    goto and_end_29;
    and_left_29:;
    tmp_cond_value_34 = tmp_and_left_value_29;
    and_end_29:;
    tmp_cond_truth_34 = CHECK_IF_TRUE( tmp_cond_value_34 );
    if ( tmp_cond_truth_34 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_34 );

        exception_lineno = 1150;
        goto try_except_handler_9;
    }
    Py_DECREF( tmp_cond_value_34 );
    if ( tmp_cond_truth_34 == 1 )
    {
        goto branch_yes_64;
    }
    else
    {
        goto branch_no_64;
    }
    branch_yes_64:;
    tmp_sliceslicedel_index_lower_41 = 0;
    tmp_slice_index_upper_41 = -1;
    tmp_slice_source_67 = par_word;

    if ( tmp_slice_source_67 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1151;
        goto try_except_handler_9;
    }

    tmp_assign_source_100 = LOOKUP_INDEX_SLICE( tmp_slice_source_67, tmp_sliceslicedel_index_lower_41, tmp_slice_index_upper_41 );
    if ( tmp_assign_source_100 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1151;
        goto try_except_handler_9;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_100;
        Py_XDECREF( old );
    }

    branch_no_64:;
    branch_end_63:;
    branch_end_62:;
    branch_end_61:;
    goto loop_end_6;
    branch_no_60:;
    branch_no_59:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1136;
        goto try_except_handler_9;
    }
    goto loop_start_6;
    loop_end_6:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    branch_end_55:;
    tmp_called_instance_10 = par_word;

    if ( tmp_called_instance_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1155;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1155;
    tmp_cond_value_35 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_tuple_b52820215875207b84eb2621e3500b61_tuple_tuple, 0 ) );

    if ( tmp_cond_value_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1155;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_35 = CHECK_IF_TRUE( tmp_cond_value_35 );
    if ( tmp_cond_truth_35 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_35 );

        exception_lineno = 1155;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_35 );
    if ( tmp_cond_truth_35 == 1 )
    {
        goto branch_yes_65;
    }
    else
    {
        goto branch_no_65;
    }
    branch_yes_65:;
    tmp_sliceslicedel_index_lower_42 = 0;
    tmp_slice_index_upper_42 = -1;
    tmp_slice_source_68 = par_word;

    if ( tmp_slice_source_68 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1156;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_101 = LOOKUP_INDEX_SLICE( tmp_slice_source_68, tmp_sliceslicedel_index_lower_42, tmp_slice_index_upper_42 );
    if ( tmp_assign_source_101 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1156;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_101;
        Py_XDECREF( old );
    }

    branch_no_65:;
    tmp_xrange_low_3 = const_int_pos_1;
    tmp_len_arg_25 = par_word;

    if ( tmp_len_arg_25 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1159;
        goto frame_exception_exit_1;
    }

    tmp_xrange_high_3 = BUILTIN_LEN( tmp_len_arg_25 );
    if ( tmp_xrange_high_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1159;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_8 = BUILTIN_XRANGE2( tmp_xrange_low_3, tmp_xrange_high_3 );
    Py_DECREF( tmp_xrange_high_3 );
    if ( tmp_iter_arg_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1159;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_102 = MAKE_ITERATOR( tmp_iter_arg_8 );
    Py_DECREF( tmp_iter_arg_8 );
    if ( tmp_assign_source_102 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1159;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_7__for_iterator == NULL );
    tmp_for_loop_7__for_iterator = tmp_assign_source_102;

    // Tried code:
    loop_start_7:;
    tmp_next_source_7 = tmp_for_loop_7__for_iterator;

    tmp_assign_source_103 = ITERATOR_NEXT( tmp_next_source_7 );
    if ( tmp_assign_source_103 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_7;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1159;
            goto try_except_handler_10;
        }
    }

    {
        PyObject *old = tmp_for_loop_7__iter_value;
        tmp_for_loop_7__iter_value = tmp_assign_source_103;
        Py_XDECREF( old );
    }

    tmp_assign_source_104 = tmp_for_loop_7__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_104;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_18 = par_word;

    if ( tmp_subscribed_name_18 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1160;
        goto try_except_handler_10;
    }

    tmp_operand_name_22 = var_i;

    tmp_subscript_name_18 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_22 );
    if ( tmp_subscript_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1160;
        goto try_except_handler_10;
    }
    tmp_compare_left_31 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_18, tmp_subscript_name_18 );
    Py_DECREF( tmp_subscript_name_18 );
    if ( tmp_compare_left_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1160;
        goto try_except_handler_10;
    }
    tmp_source_name_38 = par_self;

    tmp_compare_right_31 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain__FrenchStemmer__vowels );
    if ( tmp_compare_right_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_31 );

        exception_lineno = 1160;
        goto try_except_handler_10;
    }
    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_31, tmp_compare_left_31 );
    assert( !(tmp_cmp_NotIn_1 == -1) );
    Py_DECREF( tmp_compare_left_31 );
    Py_DECREF( tmp_compare_right_31 );
    if ( tmp_cmp_NotIn_1 == 0 )
    {
        goto branch_yes_66;
    }
    else
    {
        goto branch_no_66;
    }
    branch_yes_66:;
    tmp_left_name_14 = var_i;

    tmp_right_name_14 = const_int_pos_1;
    tmp_result = BINARY_OPERATION_ADD_INPLACE( &tmp_left_name_14, tmp_right_name_14 );
    tmp_assign_source_105 = tmp_left_name_14;
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1161;
        goto try_except_handler_10;
    }
    var_i = tmp_assign_source_105;

    goto branch_end_66;
    branch_no_66:;
    tmp_compexpr_left_58 = var_i;

    tmp_compexpr_right_58 = const_int_pos_1;
    tmp_and_left_value_30 = RICH_COMPARE_NE( tmp_compexpr_left_58, tmp_compexpr_right_58 );
    if ( tmp_and_left_value_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1163;
        goto try_except_handler_10;
    }
    tmp_and_left_truth_30 = CHECK_IF_TRUE( tmp_and_left_value_30 );
    if ( tmp_and_left_truth_30 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_30 );

        exception_lineno = 1163;
        goto try_except_handler_10;
    }
    if ( tmp_and_left_truth_30 == 1 )
    {
        goto and_right_30;
    }
    else
    {
        goto and_left_30;
    }
    and_right_30:;
    Py_DECREF( tmp_and_left_value_30 );
    tmp_subscribed_name_19 = par_word;

    if ( tmp_subscribed_name_19 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1163;
        goto try_except_handler_10;
    }

    tmp_operand_name_23 = var_i;

    tmp_subscript_name_19 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_23 );
    if ( tmp_subscript_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1163;
        goto try_except_handler_10;
    }
    tmp_compexpr_left_59 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_19, tmp_subscript_name_19 );
    Py_DECREF( tmp_subscript_name_19 );
    if ( tmp_compexpr_left_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1163;
        goto try_except_handler_10;
    }
    tmp_compexpr_right_59 = const_tuple_e49dd29108b08f32825ced55c26fcdf3_tuple;
    tmp_and_right_value_30 = SEQUENCE_CONTAINS( tmp_compexpr_left_59, tmp_compexpr_right_59 );
    Py_DECREF( tmp_compexpr_left_59 );
    if ( tmp_and_right_value_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1163;
        goto try_except_handler_10;
    }
    Py_INCREF( tmp_and_right_value_30 );
    tmp_cond_value_36 = tmp_and_right_value_30;
    goto and_end_30;
    and_left_30:;
    tmp_cond_value_36 = tmp_and_left_value_30;
    and_end_30:;
    tmp_cond_truth_36 = CHECK_IF_TRUE( tmp_cond_value_36 );
    if ( tmp_cond_truth_36 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_36 );

        exception_lineno = 1163;
        goto try_except_handler_10;
    }
    Py_DECREF( tmp_cond_value_36 );
    if ( tmp_cond_truth_36 == 1 )
    {
        goto branch_yes_67;
    }
    else
    {
        goto branch_no_67;
    }
    branch_yes_67:;
    tmp_source_name_39 = const_unicode_empty;
    tmp_called_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_join );
    assert( tmp_called_name_24 != NULL );
    tmp_args_element_name_33 = PyTuple_New( 3 );
    tmp_slice_source_69 = par_word;

    if ( tmp_slice_source_69 == NULL )
    {
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_args_element_name_33 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1164;
        goto try_except_handler_10;
    }

    tmp_operand_name_24 = var_i;

    tmp_slice_upper_23 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_24 );
    if ( tmp_slice_upper_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_args_element_name_33 );

        exception_lineno = 1164;
        goto try_except_handler_10;
    }
    tmp_tuple_element_22 = LOOKUP_SLICE( tmp_slice_source_69, Py_None, tmp_slice_upper_23 );
    Py_DECREF( tmp_slice_upper_23 );
    if ( tmp_tuple_element_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_args_element_name_33 );

        exception_lineno = 1164;
        goto try_except_handler_10;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_33, 0, tmp_tuple_element_22 );
    tmp_tuple_element_22 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_args_element_name_33, 1, tmp_tuple_element_22 );
    tmp_slice_source_70 = par_word;

    if ( tmp_slice_source_70 == NULL )
    {
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_args_element_name_33 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1164;
        goto try_except_handler_10;
    }

    tmp_operand_name_25 = var_i;

    tmp_left_name_15 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_25 );
    if ( tmp_left_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_args_element_name_33 );

        exception_lineno = 1164;
        goto try_except_handler_10;
    }
    tmp_right_name_15 = const_int_pos_1;
    tmp_slice_lower_5 = BINARY_OPERATION_ADD( tmp_left_name_15, tmp_right_name_15 );
    Py_DECREF( tmp_left_name_15 );
    if ( tmp_slice_lower_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_args_element_name_33 );

        exception_lineno = 1164;
        goto try_except_handler_10;
    }
    tmp_tuple_element_22 = LOOKUP_SLICE( tmp_slice_source_70, tmp_slice_lower_5, Py_None );
    Py_DECREF( tmp_slice_lower_5 );
    if ( tmp_tuple_element_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_args_element_name_33 );

        exception_lineno = 1164;
        goto try_except_handler_10;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_33, 2, tmp_tuple_element_22 );
    frame_function->f_lineno = 1164;
    {
        PyObject *call_args[] = { tmp_args_element_name_33 };
        tmp_assign_source_106 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_24, call_args );
    }

    Py_DECREF( tmp_called_name_24 );
    Py_DECREF( tmp_args_element_name_33 );
    if ( tmp_assign_source_106 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1164;
        goto try_except_handler_10;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_106;
        Py_XDECREF( old );
    }

    branch_no_67:;
    goto loop_end_7;
    branch_end_66:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1159;
        goto try_except_handler_10;
    }
    goto loop_start_7;
    loop_end_7:;
    goto try_end_9;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    tmp_called_instance_13 = par_word;

    if ( tmp_called_instance_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1167;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1167;
    tmp_called_instance_12 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_13, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_unicode_plain_I_unicode_plain_i_tuple, 0 ) );

    if ( tmp_called_instance_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1167;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1167;
    tmp_called_instance_11 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_12, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_unicode_plain_U_unicode_plain_u_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_12 );
    if ( tmp_called_instance_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1167;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1167;
    tmp_assign_source_107 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_11, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_unicode_plain_Y_unicode_plain_y_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_11 );
    if ( tmp_assign_source_107 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1167;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_107;
        Py_XDECREF( old );
    }


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_step1_success )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_step1_success,
                    var_step1_success
                );

                assert( res == 0 );
            }

            if ( var_rv_ending_found )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_rv_ending_found,
                    var_rv_ending_found
                );

                assert( res == 0 );
            }

            if ( var_step2a_success )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_step2a_success,
                    var_step2a_success
                );

                assert( res == 0 );
            }

            if ( var_step2b_success )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_step2b_success,
                    var_step2b_success
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_r2 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r2,
                    var_r2
                );

                assert( res == 0 );
            }

            if ( var_rv )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_rv,
                    var_rv
                );

                assert( res == 0 );
            }

            if ( var_suffix )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_suffix,
                    var_suffix
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_1_stem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step1_success );
    var_step1_success = NULL;

    Py_XDECREF( var_rv_ending_found );
    var_rv_ending_found = NULL;

    Py_XDECREF( var_step2a_success );
    var_step2a_success = NULL;

    Py_XDECREF( var_step2b_success );
    var_step2b_success = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step1_success );
    var_step1_success = NULL;

    Py_XDECREF( var_rv_ending_found );
    var_rv_ending_found = NULL;

    Py_XDECREF( var_step2a_success );
    var_step2a_success = NULL;

    Py_XDECREF( var_step2b_success );
    var_step2b_success = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_1_stem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_2___rv_french( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *par_vowels = python_pars[ 2 ];
    PyObject *var_rv = NULL;
    PyObject *var_i = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_instance_1;
    int tmp_cmp_GtE_1;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_next_source_1;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    Py_ssize_t tmp_slice_index_upper_1;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_xrange_high_1;
    PyObject *tmp_xrange_low_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_unicode_empty;
    assert( var_rv == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_rv = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_3fed6816e3a20e546c6c4bc55e0c98aa, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_len_arg_1 = par_word;

    tmp_compare_left_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1199;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = const_int_pos_2;
    tmp_cmp_GtE_1 = RICH_COMPARE_BOOL_GE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_GtE_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 1199;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_GtE_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_instance_1 = par_word;

    frame_function->f_lineno = 1200;
    tmp_or_left_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_startswith, &PyTuple_GET_ITEM( const_tuple_cea637d267ce9a15425f626e76e7c2b7_tuple, 0 ) );

    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1200;
        goto frame_exception_exit_1;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_1 );

        exception_lineno = 1201;
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    Py_DECREF( tmp_or_left_value_1 );
    tmp_subscribed_name_1 = par_word;

    tmp_subscript_name_1 = const_int_0;
    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1201;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = par_vowels;

    tmp_and_left_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1201;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    assert( !(tmp_and_left_truth_1 == -1) );
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_subscribed_name_2 = par_word;

    tmp_subscript_name_2 = const_int_pos_1;
    tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1201;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_2 = par_vowels;

    tmp_and_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1201;
        goto frame_exception_exit_1;
    }
    tmp_or_right_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_or_right_value_1 = tmp_and_left_value_1;
    and_end_1:;
    Py_INCREF( tmp_or_right_value_1 );
    tmp_cond_value_1 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_1 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 1201;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_sliceslicedel_index_lower_1 = 3;
    tmp_slice_index_upper_1 = PY_SSIZE_T_MAX;
    tmp_slice_source_1 = par_word;

    tmp_assign_source_2 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1202;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_2;
        Py_DECREF( old );
    }

    goto branch_end_2;
    branch_no_2:;
    tmp_xrange_low_1 = const_int_pos_1;
    tmp_len_arg_2 = par_word;

    tmp_xrange_high_1 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_xrange_high_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1204;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = BUILTIN_XRANGE2( tmp_xrange_low_1, tmp_xrange_high_1 );
    Py_DECREF( tmp_xrange_high_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1204;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1204;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_3;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1204;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_assign_source_5 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_5;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_3 = par_word;

    tmp_subscript_name_3 = var_i;

    tmp_compare_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1205;
        goto try_except_handler_2;
    }
    tmp_compare_right_2 = par_vowels;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_slice_source_2 = par_word;

    tmp_left_name_1 = var_i;

    tmp_right_name_1 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1206;
        goto try_except_handler_2;
    }
    tmp_assign_source_6 = LOOKUP_SLICE( tmp_slice_source_2, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_lower_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1206;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_6;
        Py_DECREF( old );
    }

    goto loop_end_1;
    branch_no_3:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1204;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    branch_end_2:;
    branch_no_1:;
    tmp_return_value = var_rv;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1209;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( par_vowels )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_vowels,
                    par_vowels
                );

                assert( res == 0 );
            }

            if ( var_rv )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_rv,
                    var_rv
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_2___rv_french );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    CHECK_OBJECT( (PyObject *)par_vowels );
    Py_DECREF( par_vowels );
    par_vowels = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    CHECK_OBJECT( (PyObject *)par_vowels );
    Py_DECREF( par_vowels );
    par_vowels = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_2___rv_french );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_8_GermanStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__GermanStemmer__vowels = NULL;
    PyObject *var__GermanStemmer__s_ending = NULL;
    PyObject *var__GermanStemmer__st_ending = NULL;
    PyObject *var__GermanStemmer__step1_suffixes = NULL;
    PyObject *var__GermanStemmer__step2_suffixes = NULL;
    PyObject *var__GermanStemmer__step3_suffixes = NULL;
    PyObject *var_stem = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_023601b36901462335c12f4c2f34eab0;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_unicode_digest_dbf093dd6d9684d7a5038ba9b028700b;
    assert( var__GermanStemmer__vowels == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var__GermanStemmer__vowels = tmp_assign_source_3;

    tmp_assign_source_4 = const_unicode_plain_bdfghklmnrt;
    assert( var__GermanStemmer__s_ending == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var__GermanStemmer__s_ending = tmp_assign_source_4;

    tmp_assign_source_5 = const_unicode_plain_bdfghklmnt;
    assert( var__GermanStemmer__st_ending == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__GermanStemmer__st_ending = tmp_assign_source_5;

    tmp_assign_source_6 = const_tuple_3299f567526f0559f6efbe4d0e04ff65_tuple;
    assert( var__GermanStemmer__step1_suffixes == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var__GermanStemmer__step1_suffixes = tmp_assign_source_6;

    tmp_assign_source_7 = const_tuple_7e256659a928b52bd1eff09b62fb1207_tuple;
    assert( var__GermanStemmer__step2_suffixes == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var__GermanStemmer__step2_suffixes = tmp_assign_source_7;

    tmp_assign_source_8 = const_tuple_56d4780e0b984dc4318c8a0bd10cd4b2_tuple;
    assert( var__GermanStemmer__step3_suffixes == NULL );
    Py_INCREF( tmp_assign_source_8 );
    var__GermanStemmer__step3_suffixes = tmp_assign_source_8;

    tmp_assign_source_9 = MAKE_FUNCTION_nltk$stem$snowball$$$class_8_GermanStemmer$$$function_1_stem(  );
    assert( var_stem == NULL );
    var_stem = tmp_assign_source_9;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__GermanStemmer__vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__GermanStemmer__vowels,
            var__GermanStemmer__vowels
        );

        assert( res == 0 );
    }

    if ( var__GermanStemmer__s_ending )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__GermanStemmer__s_ending,
            var__GermanStemmer__s_ending
        );

        assert( res == 0 );
    }

    if ( var__GermanStemmer__st_ending )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__GermanStemmer__st_ending,
            var__GermanStemmer__st_ending
        );

        assert( res == 0 );
    }

    if ( var__GermanStemmer__step1_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__GermanStemmer__step1_suffixes,
            var__GermanStemmer__step1_suffixes
        );

        assert( res == 0 );
    }

    if ( var__GermanStemmer__step2_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__GermanStemmer__step2_suffixes,
            var__GermanStemmer__step2_suffixes
        );

        assert( res == 0 );
    }

    if ( var__GermanStemmer__step3_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__GermanStemmer__step3_suffixes,
            var__GermanStemmer__step3_suffixes
        );

        assert( res == 0 );
    }

    if ( var_stem )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_stem,
            var_stem
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_8_GermanStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__GermanStemmer__vowels );
    Py_DECREF( var__GermanStemmer__vowels );
    var__GermanStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__GermanStemmer__s_ending );
    Py_DECREF( var__GermanStemmer__s_ending );
    var__GermanStemmer__s_ending = NULL;

    CHECK_OBJECT( (PyObject *)var__GermanStemmer__st_ending );
    Py_DECREF( var__GermanStemmer__st_ending );
    var__GermanStemmer__st_ending = NULL;

    CHECK_OBJECT( (PyObject *)var__GermanStemmer__step1_suffixes );
    Py_DECREF( var__GermanStemmer__step1_suffixes );
    var__GermanStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__GermanStemmer__step2_suffixes );
    Py_DECREF( var__GermanStemmer__step2_suffixes );
    var__GermanStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__GermanStemmer__step3_suffixes );
    Py_DECREF( var__GermanStemmer__step3_suffixes );
    var__GermanStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__GermanStemmer__vowels );
    Py_DECREF( var__GermanStemmer__vowels );
    var__GermanStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__GermanStemmer__s_ending );
    Py_DECREF( var__GermanStemmer__s_ending );
    var__GermanStemmer__s_ending = NULL;

    CHECK_OBJECT( (PyObject *)var__GermanStemmer__st_ending );
    Py_DECREF( var__GermanStemmer__st_ending );
    var__GermanStemmer__st_ending = NULL;

    CHECK_OBJECT( (PyObject *)var__GermanStemmer__step1_suffixes );
    Py_DECREF( var__GermanStemmer__step1_suffixes );
    var__GermanStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__GermanStemmer__step2_suffixes );
    Py_DECREF( var__GermanStemmer__step2_suffixes );
    var__GermanStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__GermanStemmer__step3_suffixes );
    Py_DECREF( var__GermanStemmer__step3_suffixes );
    var__GermanStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_8_GermanStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_8_GermanStemmer$$$function_1_stem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_i = NULL;
    PyObject *var_r1 = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_suffix = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    int tmp_and_left_truth_3;
    int tmp_and_left_truth_4;
    int tmp_and_left_truth_5;
    int tmp_and_left_truth_6;
    int tmp_and_left_truth_7;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_left_value_3;
    PyObject *tmp_and_left_value_4;
    PyObject *tmp_and_left_value_5;
    PyObject *tmp_and_left_value_6;
    PyObject *tmp_and_left_value_7;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_and_right_value_3;
    PyObject *tmp_and_right_value_4;
    PyObject *tmp_and_right_value_5;
    PyObject *tmp_and_right_value_6;
    PyObject *tmp_and_right_value_7;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_Eq_4;
    int tmp_cmp_Eq_5;
    int tmp_cmp_Eq_6;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_left_7;
    PyObject *tmp_compexpr_left_8;
    PyObject *tmp_compexpr_left_9;
    PyObject *tmp_compexpr_left_10;
    PyObject *tmp_compexpr_left_11;
    PyObject *tmp_compexpr_left_12;
    PyObject *tmp_compexpr_left_13;
    PyObject *tmp_compexpr_left_14;
    PyObject *tmp_compexpr_left_15;
    PyObject *tmp_compexpr_left_16;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    PyObject *tmp_compexpr_right_7;
    PyObject *tmp_compexpr_right_8;
    PyObject *tmp_compexpr_right_9;
    PyObject *tmp_compexpr_right_10;
    PyObject *tmp_compexpr_right_11;
    PyObject *tmp_compexpr_right_12;
    PyObject *tmp_compexpr_right_13;
    PyObject *tmp_compexpr_right_14;
    PyObject *tmp_compexpr_right_15;
    PyObject *tmp_compexpr_right_16;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_left_name_6;
    PyObject *tmp_left_name_7;
    PyObject *tmp_left_name_8;
    PyObject *tmp_left_name_9;
    PyObject *tmp_left_name_10;
    PyObject *tmp_left_name_11;
    PyObject *tmp_left_name_12;
    PyObject *tmp_left_name_13;
    PyObject *tmp_left_name_14;
    PyObject *tmp_left_name_15;
    PyObject *tmp_left_name_16;
    PyObject *tmp_left_name_17;
    PyObject *tmp_left_name_18;
    PyObject *tmp_left_name_19;
    PyObject *tmp_left_name_20;
    PyObject *tmp_left_name_21;
    PyObject *tmp_left_name_22;
    PyObject *tmp_left_name_23;
    PyObject *tmp_left_name_24;
    PyObject *tmp_left_name_25;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_len_arg_6;
    PyObject *tmp_len_arg_7;
    PyObject *tmp_len_arg_8;
    PyObject *tmp_len_arg_9;
    PyObject *tmp_len_arg_10;
    PyObject *tmp_len_arg_11;
    PyObject *tmp_len_arg_12;
    PyObject *tmp_len_arg_13;
    PyObject *tmp_len_arg_14;
    PyObject *tmp_len_arg_15;
    PyObject *tmp_len_arg_16;
    PyObject *tmp_len_arg_17;
    PyObject *tmp_len_arg_18;
    PyObject *tmp_len_arg_19;
    PyObject *tmp_len_arg_20;
    PyObject *tmp_len_arg_21;
    PyObject *tmp_len_arg_22;
    PyObject *tmp_len_arg_23;
    PyObject *tmp_len_arg_24;
    PyObject *tmp_len_arg_25;
    PyObject *tmp_len_arg_26;
    PyObject *tmp_len_arg_27;
    PyObject *tmp_len_arg_28;
    PyObject *tmp_len_arg_29;
    PyObject *tmp_len_arg_30;
    PyObject *tmp_len_arg_31;
    PyObject *tmp_len_arg_32;
    PyObject *tmp_len_arg_33;
    PyObject *tmp_len_arg_34;
    PyObject *tmp_len_arg_35;
    PyObject *tmp_len_arg_36;
    PyObject *tmp_len_arg_37;
    PyObject *tmp_len_arg_38;
    PyObject *tmp_len_arg_39;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    PyObject *tmp_operand_name_4;
    PyObject *tmp_operand_name_5;
    PyObject *tmp_operand_name_6;
    PyObject *tmp_operand_name_7;
    PyObject *tmp_operand_name_8;
    PyObject *tmp_operand_name_9;
    PyObject *tmp_operand_name_10;
    PyObject *tmp_operand_name_11;
    PyObject *tmp_operand_name_12;
    PyObject *tmp_operand_name_13;
    PyObject *tmp_operand_name_14;
    PyObject *tmp_operand_name_15;
    PyObject *tmp_operand_name_16;
    PyObject *tmp_operand_name_17;
    PyObject *tmp_operand_name_18;
    PyObject *tmp_operand_name_19;
    PyObject *tmp_operand_name_20;
    PyObject *tmp_operand_name_21;
    PyObject *tmp_operand_name_22;
    PyObject *tmp_operand_name_23;
    PyObject *tmp_operand_name_24;
    PyObject *tmp_operand_name_25;
    PyObject *tmp_operand_name_26;
    PyObject *tmp_operand_name_27;
    PyObject *tmp_operand_name_28;
    PyObject *tmp_operand_name_29;
    PyObject *tmp_operand_name_30;
    PyObject *tmp_operand_name_31;
    PyObject *tmp_operand_name_32;
    PyObject *tmp_operand_name_33;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    PyObject *tmp_right_name_6;
    PyObject *tmp_right_name_7;
    PyObject *tmp_right_name_8;
    PyObject *tmp_right_name_9;
    PyObject *tmp_right_name_10;
    PyObject *tmp_right_name_11;
    PyObject *tmp_right_name_12;
    PyObject *tmp_right_name_13;
    PyObject *tmp_right_name_14;
    PyObject *tmp_right_name_15;
    PyObject *tmp_right_name_16;
    PyObject *tmp_right_name_17;
    PyObject *tmp_right_name_18;
    PyObject *tmp_right_name_19;
    PyObject *tmp_right_name_20;
    PyObject *tmp_right_name_21;
    PyObject *tmp_right_name_22;
    PyObject *tmp_right_name_23;
    PyObject *tmp_right_name_24;
    PyObject *tmp_right_name_25;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    Py_ssize_t tmp_slice_index_upper_6;
    Py_ssize_t tmp_slice_index_upper_7;
    Py_ssize_t tmp_slice_index_upper_8;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_lower_3;
    PyObject *tmp_slice_lower_4;
    PyObject *tmp_slice_lower_5;
    PyObject *tmp_slice_lower_6;
    PyObject *tmp_slice_lower_7;
    PyObject *tmp_slice_lower_8;
    PyObject *tmp_slice_lower_9;
    PyObject *tmp_slice_lower_10;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_source_10;
    PyObject *tmp_slice_source_11;
    PyObject *tmp_slice_source_12;
    PyObject *tmp_slice_source_13;
    PyObject *tmp_slice_source_14;
    PyObject *tmp_slice_source_15;
    PyObject *tmp_slice_source_16;
    PyObject *tmp_slice_source_17;
    PyObject *tmp_slice_source_18;
    PyObject *tmp_slice_source_19;
    PyObject *tmp_slice_source_20;
    PyObject *tmp_slice_source_21;
    PyObject *tmp_slice_source_22;
    PyObject *tmp_slice_source_23;
    PyObject *tmp_slice_source_24;
    PyObject *tmp_slice_source_25;
    PyObject *tmp_slice_source_26;
    PyObject *tmp_slice_source_27;
    PyObject *tmp_slice_source_28;
    PyObject *tmp_slice_source_29;
    PyObject *tmp_slice_source_30;
    PyObject *tmp_slice_source_31;
    PyObject *tmp_slice_source_32;
    PyObject *tmp_slice_source_33;
    PyObject *tmp_slice_source_34;
    PyObject *tmp_slice_source_35;
    PyObject *tmp_slice_source_36;
    PyObject *tmp_slice_source_37;
    PyObject *tmp_slice_source_38;
    PyObject *tmp_slice_source_39;
    PyObject *tmp_slice_source_40;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    PyObject *tmp_slice_upper_4;
    PyObject *tmp_slice_upper_5;
    PyObject *tmp_slice_upper_6;
    PyObject *tmp_slice_upper_7;
    PyObject *tmp_slice_upper_8;
    PyObject *tmp_slice_upper_9;
    PyObject *tmp_slice_upper_10;
    PyObject *tmp_slice_upper_11;
    PyObject *tmp_slice_upper_12;
    PyObject *tmp_slice_upper_13;
    PyObject *tmp_slice_upper_14;
    PyObject *tmp_slice_upper_15;
    PyObject *tmp_slice_upper_16;
    PyObject *tmp_slice_upper_17;
    PyObject *tmp_slice_upper_18;
    PyObject *tmp_slice_upper_19;
    PyObject *tmp_slice_upper_20;
    PyObject *tmp_slice_upper_21;
    PyObject *tmp_slice_upper_22;
    PyObject *tmp_slice_upper_23;
    PyObject *tmp_slice_upper_24;
    PyObject *tmp_slice_upper_25;
    PyObject *tmp_slice_upper_26;
    PyObject *tmp_slice_upper_27;
    PyObject *tmp_slice_upper_28;
    PyObject *tmp_slice_upper_29;
    PyObject *tmp_slice_upper_30;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_6;
    Py_ssize_t tmp_sliceslicedel_index_lower_7;
    Py_ssize_t tmp_sliceslicedel_index_lower_8;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscribed_name_6;
    PyObject *tmp_subscribed_name_7;
    PyObject *tmp_subscribed_name_8;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_subscript_name_6;
    PyObject *tmp_subscript_name_7;
    PyObject *tmp_subscript_name_8;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_xrange_high_1;
    PyObject *tmp_xrange_high_2;
    PyObject *tmp_xrange_low_1;
    PyObject *tmp_xrange_low_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_1c71aba6b7d55771191b8babc12b24ba, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_word;

    tmp_source_name_1 = par_self;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stopwords );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1256;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_called_instance_2 = par_word;

    frame_function->f_lineno = 1259;
    tmp_called_instance_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_lower );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1259;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1259;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_31b084df71fd094038cab979e415b11e_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1259;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_1;
        Py_DECREF( old );
    }

    tmp_xrange_low_1 = const_int_pos_1;
    tmp_len_arg_1 = par_word;

    tmp_left_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1263;
        goto frame_exception_exit_1;
    }
    tmp_right_name_1 = const_int_pos_1;
    tmp_xrange_high_1 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_xrange_high_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1263;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = BUILTIN_XRANGE2( tmp_xrange_low_1, tmp_xrange_high_1 );
    Py_DECREF( tmp_xrange_high_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1263;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1263;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_2;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1263;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    tmp_assign_source_4 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_4;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_1 = par_word;

    if ( tmp_subscribed_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1264;
        goto try_except_handler_2;
    }

    tmp_left_name_2 = var_i;

    tmp_right_name_2 = const_int_pos_1;
    tmp_subscript_name_1 = BINARY_OPERATION_SUB( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_subscript_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1264;
        goto try_except_handler_2;
    }
    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1264;
        goto try_except_handler_2;
    }
    tmp_source_name_2 = par_self;

    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__GermanStemmer__vowels );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_1 );

        exception_lineno = 1264;
        goto try_except_handler_2;
    }
    tmp_and_left_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1264;
        goto try_except_handler_2;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    assert( !(tmp_and_left_truth_1 == -1) );
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_subscribed_name_2 = par_word;

    if ( tmp_subscribed_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1264;
        goto try_except_handler_2;
    }

    tmp_left_name_3 = var_i;

    tmp_right_name_3 = const_int_pos_1;
    tmp_subscript_name_2 = BINARY_OPERATION_ADD( tmp_left_name_3, tmp_right_name_3 );
    if ( tmp_subscript_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1264;
        goto try_except_handler_2;
    }
    tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    Py_DECREF( tmp_subscript_name_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1264;
        goto try_except_handler_2;
    }
    tmp_source_name_3 = par_self;

    tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__GermanStemmer__vowels );
    if ( tmp_compexpr_right_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_2 );

        exception_lineno = 1264;
        goto try_except_handler_2;
    }
    tmp_and_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    Py_DECREF( tmp_compexpr_right_2 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1264;
        goto try_except_handler_2;
    }
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    assert( !(tmp_cond_truth_1 == -1) );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_subscribed_name_3 = par_word;

    if ( tmp_subscribed_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1265;
        goto try_except_handler_2;
    }

    tmp_subscript_name_3 = var_i;

    tmp_compare_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1265;
        goto try_except_handler_2;
    }
    tmp_compare_right_2 = const_unicode_plain_u;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        exception_lineno = 1265;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_4 = const_unicode_empty;
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_join );
    assert( tmp_called_name_1 != NULL );
    tmp_args_element_name_1 = PyTuple_New( 3 );
    tmp_slice_source_1 = par_word;

    if ( tmp_slice_source_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1266;
        goto try_except_handler_2;
    }

    tmp_slice_upper_1 = var_i;

    tmp_tuple_element_1 = LOOKUP_SLICE( tmp_slice_source_1, Py_None, tmp_slice_upper_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1266;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_unicode_plain_U;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_1, 1, tmp_tuple_element_1 );
    tmp_slice_source_2 = par_word;

    if ( tmp_slice_source_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1266;
        goto try_except_handler_2;
    }

    tmp_left_name_4 = var_i;

    tmp_right_name_4 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_ADD( tmp_left_name_4, tmp_right_name_4 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1266;
        goto try_except_handler_2;
    }
    tmp_tuple_element_1 = LOOKUP_SLICE( tmp_slice_source_2, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_lower_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1266;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_1, 2, tmp_tuple_element_1 );
    frame_function->f_lineno = 1266;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1266;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    goto branch_end_3;
    branch_no_3:;
    tmp_subscribed_name_4 = par_word;

    if ( tmp_subscribed_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1268;
        goto try_except_handler_2;
    }

    tmp_subscript_name_4 = var_i;

    tmp_compare_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1268;
        goto try_except_handler_2;
    }
    tmp_compare_right_3 = const_unicode_plain_y;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_3 );

        exception_lineno = 1268;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_left_3 );
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_5 = const_unicode_empty;
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_join );
    assert( tmp_called_name_2 != NULL );
    tmp_args_element_name_2 = PyTuple_New( 3 );
    tmp_slice_source_3 = par_word;

    if ( tmp_slice_source_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1269;
        goto try_except_handler_2;
    }

    tmp_slice_upper_2 = var_i;

    tmp_tuple_element_2 = LOOKUP_SLICE( tmp_slice_source_3, Py_None, tmp_slice_upper_2 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 1269;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_2, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = const_unicode_plain_Y;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_2, 1, tmp_tuple_element_2 );
    tmp_slice_source_4 = par_word;

    if ( tmp_slice_source_4 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1269;
        goto try_except_handler_2;
    }

    tmp_left_name_5 = var_i;

    tmp_right_name_5 = const_int_pos_1;
    tmp_slice_lower_2 = BINARY_OPERATION_ADD( tmp_left_name_5, tmp_right_name_5 );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 1269;
        goto try_except_handler_2;
    }
    tmp_tuple_element_2 = LOOKUP_SLICE( tmp_slice_source_4, tmp_slice_lower_2, Py_None );
    Py_DECREF( tmp_slice_lower_2 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 1269;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_2, 2, tmp_tuple_element_2 );
    frame_function->f_lineno = 1269;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1269;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    branch_no_4:;
    branch_end_3:;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1263;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Tried code:
    tmp_source_name_6 = par_self;

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__r1r2_standard );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1271;
        goto try_except_handler_3;
    }
    tmp_args_element_name_3 = par_word;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1271;
        goto try_except_handler_3;
    }

    tmp_source_name_7 = par_self;

    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__GermanStemmer__vowels );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 1271;
        goto try_except_handler_3;
    }
    frame_function->f_lineno = 1271;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1271;
        goto try_except_handler_3;
    }
    tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1271;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_7;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_8 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1271;
        goto try_except_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_8;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_9 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1271;
        goto try_except_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_9;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_4;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_3;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_10 = tmp_tuple_unpack_1__element_1;

    assert( var_r1 == NULL );
    Py_INCREF( tmp_assign_source_10 );
    var_r1 = tmp_assign_source_10;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_11 = tmp_tuple_unpack_1__element_2;

    assert( var_r2 == NULL );
    Py_INCREF( tmp_assign_source_11 );
    var_r2 = tmp_assign_source_11;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_xrange_low_2 = const_int_pos_1;
    tmp_len_arg_2 = par_word;

    if ( tmp_len_arg_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1275;
        goto frame_exception_exit_1;
    }

    tmp_xrange_high_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_xrange_high_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1275;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_3 = BUILTIN_XRANGE2( tmp_xrange_low_2, tmp_xrange_high_2 );
    Py_DECREF( tmp_xrange_high_2 );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1275;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_12 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1275;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_12;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_13 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_13 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1275;
            goto try_except_handler_5;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_13;
        Py_XDECREF( old );
    }

    tmp_assign_source_14 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_14;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_5 = par_word;

    if ( tmp_subscribed_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1276;
        goto try_except_handler_5;
    }

    tmp_subscript_name_5 = var_i;

    tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1276;
        goto try_except_handler_5;
    }
    tmp_source_name_8 = par_self;

    tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__GermanStemmer__vowels );
    if ( tmp_compexpr_right_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_3 );

        exception_lineno = 1276;
        goto try_except_handler_5;
    }
    tmp_and_left_value_2 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    Py_DECREF( tmp_compexpr_right_3 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1276;
        goto try_except_handler_5;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    assert( !(tmp_and_left_truth_2 == -1) );
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_subscribed_name_6 = par_word;

    if ( tmp_subscribed_name_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1276;
        goto try_except_handler_5;
    }

    tmp_left_name_6 = var_i;

    tmp_right_name_6 = const_int_pos_1;
    tmp_subscript_name_6 = BINARY_OPERATION_SUB( tmp_left_name_6, tmp_right_name_6 );
    if ( tmp_subscript_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1276;
        goto try_except_handler_5;
    }
    tmp_compexpr_left_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
    Py_DECREF( tmp_subscript_name_6 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1276;
        goto try_except_handler_5;
    }
    tmp_source_name_9 = par_self;

    tmp_compexpr_right_4 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__GermanStemmer__vowels );
    if ( tmp_compexpr_right_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_4 );

        exception_lineno = 1276;
        goto try_except_handler_5;
    }
    tmp_and_right_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    Py_DECREF( tmp_compexpr_right_4 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1276;
        goto try_except_handler_5;
    }
    tmp_cond_value_2 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_cond_value_2 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    assert( !(tmp_cond_truth_2 == -1) );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_slice_source_5 = par_word;

    if ( tmp_slice_source_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1277;
        goto try_except_handler_5;
    }

    tmp_left_name_7 = var_i;

    tmp_right_name_7 = const_int_pos_1;
    tmp_slice_upper_3 = BINARY_OPERATION_ADD( tmp_left_name_7, tmp_right_name_7 );
    if ( tmp_slice_upper_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1277;
        goto try_except_handler_5;
    }
    tmp_len_arg_3 = LOOKUP_SLICE( tmp_slice_source_5, Py_None, tmp_slice_upper_3 );
    Py_DECREF( tmp_slice_upper_3 );
    if ( tmp_len_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1277;
        goto try_except_handler_5;
    }
    tmp_compexpr_left_5 = BUILTIN_LEN( tmp_len_arg_3 );
    Py_DECREF( tmp_len_arg_3 );
    if ( tmp_compexpr_left_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1277;
        goto try_except_handler_5;
    }
    tmp_compexpr_right_5 = const_int_pos_3;
    tmp_and_left_value_3 = RICH_COMPARE_LT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    Py_DECREF( tmp_compexpr_left_5 );
    if ( tmp_and_left_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1277;
        goto try_except_handler_5;
    }
    tmp_and_left_truth_3 = CHECK_IF_TRUE( tmp_and_left_value_3 );
    if ( tmp_and_left_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_3 );

        exception_lineno = 1277;
        goto try_except_handler_5;
    }
    if ( tmp_and_left_truth_3 == 1 )
    {
        goto and_right_3;
    }
    else
    {
        goto and_left_3;
    }
    and_right_3:;
    Py_DECREF( tmp_and_left_value_3 );
    tmp_slice_source_6 = par_word;

    if ( tmp_slice_source_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1277;
        goto try_except_handler_5;
    }

    tmp_left_name_8 = var_i;

    tmp_right_name_8 = const_int_pos_1;
    tmp_slice_upper_4 = BINARY_OPERATION_ADD( tmp_left_name_8, tmp_right_name_8 );
    if ( tmp_slice_upper_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1277;
        goto try_except_handler_5;
    }
    tmp_len_arg_4 = LOOKUP_SLICE( tmp_slice_source_6, Py_None, tmp_slice_upper_4 );
    Py_DECREF( tmp_slice_upper_4 );
    if ( tmp_len_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1277;
        goto try_except_handler_5;
    }
    tmp_compexpr_left_6 = BUILTIN_LEN( tmp_len_arg_4 );
    Py_DECREF( tmp_len_arg_4 );
    if ( tmp_compexpr_left_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1277;
        goto try_except_handler_5;
    }
    tmp_compexpr_right_6 = const_int_0;
    tmp_and_right_value_3 = RICH_COMPARE_GT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
    Py_DECREF( tmp_compexpr_left_6 );
    if ( tmp_and_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1277;
        goto try_except_handler_5;
    }
    tmp_cond_value_3 = tmp_and_right_value_3;
    goto and_end_3;
    and_left_3:;
    tmp_cond_value_3 = tmp_and_left_value_3;
    and_end_3:;
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 1277;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_sliceslicedel_index_lower_1 = 3;
    tmp_slice_index_upper_1 = PY_SSIZE_T_MAX;
    tmp_slice_source_7 = par_word;

    if ( tmp_slice_source_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1278;
        goto try_except_handler_5;
    }

    tmp_assign_source_15 = LOOKUP_INDEX_SLICE( tmp_slice_source_7, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1278;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_15;
        Py_DECREF( old );
    }

    goto branch_end_6;
    branch_no_6:;
    tmp_slice_source_8 = par_word;

    if ( tmp_slice_source_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1279;
        goto try_except_handler_5;
    }

    tmp_left_name_9 = var_i;

    tmp_right_name_9 = const_int_pos_1;
    tmp_slice_upper_5 = BINARY_OPERATION_ADD( tmp_left_name_9, tmp_right_name_9 );
    if ( tmp_slice_upper_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1279;
        goto try_except_handler_5;
    }
    tmp_len_arg_5 = LOOKUP_SLICE( tmp_slice_source_8, Py_None, tmp_slice_upper_5 );
    Py_DECREF( tmp_slice_upper_5 );
    if ( tmp_len_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1279;
        goto try_except_handler_5;
    }
    tmp_compare_left_4 = BUILTIN_LEN( tmp_len_arg_5 );
    Py_DECREF( tmp_len_arg_5 );
    if ( tmp_compare_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1279;
        goto try_except_handler_5;
    }
    tmp_compare_right_4 = const_int_0;
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_4 );

        exception_lineno = 1279;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_compare_left_4 );
    if ( tmp_cmp_Eq_3 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_return_value = par_word;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1280;
        goto try_except_handler_5;
    }

    Py_INCREF( tmp_return_value );
    goto try_return_handler_5;
    branch_no_7:;
    branch_end_6:;
    goto loop_end_2;
    branch_no_5:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1275;
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_4;
    // Return handler code:
    try_return_handler_5:;
    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__iter_value );
    Py_DECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_source_name_10 = par_self;

    tmp_iter_arg_4 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__GermanStemmer__step1_suffixes );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1284;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_16 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1284;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_16;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_17 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_17 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1284;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_17;
        Py_XDECREF( old );
    }

    tmp_assign_source_18 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_18;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_3 = var_r1;

    if ( tmp_called_instance_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1285;
        goto try_except_handler_6;
    }

    tmp_args_element_name_5 = var_suffix;

    frame_function->f_lineno = 1285;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_cond_value_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1285;
        goto try_except_handler_6;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        exception_lineno = 1285;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_compexpr_left_7 = var_suffix;

    tmp_compexpr_right_7 = const_tuple_unicode_plain_en_unicode_plain_es_unicode_plain_e_tuple;
    tmp_and_left_value_4 = SEQUENCE_CONTAINS( tmp_compexpr_left_7, tmp_compexpr_right_7 );
    if ( tmp_and_left_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1286;
        goto try_except_handler_6;
    }
    tmp_and_left_truth_4 = CHECK_IF_TRUE( tmp_and_left_value_4 );
    assert( !(tmp_and_left_truth_4 == -1) );
    if ( tmp_and_left_truth_4 == 1 )
    {
        goto and_right_4;
    }
    else
    {
        goto and_left_4;
    }
    and_right_4:;
    tmp_slice_source_9 = par_word;

    if ( tmp_slice_source_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1287;
        goto try_except_handler_6;
    }

    tmp_len_arg_6 = var_suffix;

    tmp_operand_name_1 = BUILTIN_LEN( tmp_len_arg_6 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1287;
        goto try_except_handler_6;
    }
    tmp_left_name_10 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_left_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1287;
        goto try_except_handler_6;
    }
    tmp_right_name_10 = const_int_pos_4;
    tmp_slice_lower_3 = BINARY_OPERATION_SUB( tmp_left_name_10, tmp_right_name_10 );
    Py_DECREF( tmp_left_name_10 );
    if ( tmp_slice_lower_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1287;
        goto try_except_handler_6;
    }
    tmp_len_arg_7 = var_suffix;

    tmp_operand_name_2 = BUILTIN_LEN( tmp_len_arg_7 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_3 );

        exception_lineno = 1287;
        goto try_except_handler_6;
    }
    tmp_slice_upper_6 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_slice_upper_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_3 );

        exception_lineno = 1287;
        goto try_except_handler_6;
    }
    tmp_compexpr_left_8 = LOOKUP_SLICE( tmp_slice_source_9, tmp_slice_lower_3, tmp_slice_upper_6 );
    Py_DECREF( tmp_slice_lower_3 );
    Py_DECREF( tmp_slice_upper_6 );
    if ( tmp_compexpr_left_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1287;
        goto try_except_handler_6;
    }
    tmp_compexpr_right_8 = const_unicode_plain_niss;
    tmp_and_right_value_4 = RICH_COMPARE_EQ( tmp_compexpr_left_8, tmp_compexpr_right_8 );
    Py_DECREF( tmp_compexpr_left_8 );
    if ( tmp_and_right_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1287;
        goto try_except_handler_6;
    }
    tmp_cond_value_5 = tmp_and_right_value_4;
    goto and_end_4;
    and_left_4:;
    Py_INCREF( tmp_and_left_value_4 );
    tmp_cond_value_5 = tmp_and_left_value_4;
    and_end_4:;
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        exception_lineno = 1287;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_slice_source_10 = par_word;

    if ( tmp_slice_source_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1288;
        goto try_except_handler_6;
    }

    tmp_len_arg_8 = var_suffix;

    tmp_operand_name_3 = BUILTIN_LEN( tmp_len_arg_8 );
    if ( tmp_operand_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1288;
        goto try_except_handler_6;
    }
    tmp_left_name_11 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_left_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1288;
        goto try_except_handler_6;
    }
    tmp_right_name_11 = const_int_pos_1;
    tmp_slice_upper_7 = BINARY_OPERATION_SUB( tmp_left_name_11, tmp_right_name_11 );
    Py_DECREF( tmp_left_name_11 );
    if ( tmp_slice_upper_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1288;
        goto try_except_handler_6;
    }
    tmp_assign_source_19 = LOOKUP_SLICE( tmp_slice_source_10, Py_None, tmp_slice_upper_7 );
    Py_DECREF( tmp_slice_upper_7 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1288;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_19;
        Py_XDECREF( old );
    }

    tmp_slice_source_11 = var_r1;

    if ( tmp_slice_source_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1289;
        goto try_except_handler_6;
    }

    tmp_len_arg_9 = var_suffix;

    tmp_operand_name_4 = BUILTIN_LEN( tmp_len_arg_9 );
    if ( tmp_operand_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1289;
        goto try_except_handler_6;
    }
    tmp_left_name_12 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_4 );
    Py_DECREF( tmp_operand_name_4 );
    if ( tmp_left_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1289;
        goto try_except_handler_6;
    }
    tmp_right_name_12 = const_int_pos_1;
    tmp_slice_upper_8 = BINARY_OPERATION_SUB( tmp_left_name_12, tmp_right_name_12 );
    Py_DECREF( tmp_left_name_12 );
    if ( tmp_slice_upper_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1289;
        goto try_except_handler_6;
    }
    tmp_assign_source_20 = LOOKUP_SLICE( tmp_slice_source_11, Py_None, tmp_slice_upper_8 );
    Py_DECREF( tmp_slice_upper_8 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1289;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_20;
        Py_XDECREF( old );
    }

    tmp_slice_source_12 = var_r2;

    tmp_len_arg_10 = var_suffix;

    tmp_operand_name_5 = BUILTIN_LEN( tmp_len_arg_10 );
    if ( tmp_operand_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1290;
        goto try_except_handler_6;
    }
    tmp_left_name_13 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_5 );
    Py_DECREF( tmp_operand_name_5 );
    if ( tmp_left_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1290;
        goto try_except_handler_6;
    }
    tmp_right_name_13 = const_int_pos_1;
    tmp_slice_upper_9 = BINARY_OPERATION_SUB( tmp_left_name_13, tmp_right_name_13 );
    Py_DECREF( tmp_left_name_13 );
    if ( tmp_slice_upper_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1290;
        goto try_except_handler_6;
    }
    tmp_assign_source_21 = LOOKUP_SLICE( tmp_slice_source_12, Py_None, tmp_slice_upper_9 );
    Py_DECREF( tmp_slice_upper_9 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1290;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_21;
        Py_DECREF( old );
    }

    goto branch_end_9;
    branch_no_9:;
    tmp_compare_left_5 = var_suffix;

    tmp_compare_right_5 = const_unicode_plain_s;
    tmp_cmp_Eq_4 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_Eq_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1292;
        goto try_except_handler_6;
    }
    if ( tmp_cmp_Eq_4 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_subscribed_name_7 = par_word;

    if ( tmp_subscribed_name_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1293;
        goto try_except_handler_6;
    }

    tmp_subscript_name_7 = const_int_neg_2;
    tmp_compare_left_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_7 );
    if ( tmp_compare_left_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1293;
        goto try_except_handler_6;
    }
    tmp_source_name_11 = par_self;

    tmp_compare_right_6 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__GermanStemmer__s_ending );
    if ( tmp_compare_right_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_6 );

        exception_lineno = 1293;
        goto try_except_handler_6;
    }
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    assert( !(tmp_cmp_In_2 == -1) );
    Py_DECREF( tmp_compare_left_6 );
    Py_DECREF( tmp_compare_right_6 );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = -1;
    tmp_slice_source_13 = par_word;

    if ( tmp_slice_source_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1294;
        goto try_except_handler_6;
    }

    tmp_assign_source_22 = LOOKUP_INDEX_SLICE( tmp_slice_source_13, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1294;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_22;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -1;
    tmp_slice_source_14 = var_r1;

    if ( tmp_slice_source_14 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1295;
        goto try_except_handler_6;
    }

    tmp_assign_source_23 = LOOKUP_INDEX_SLICE( tmp_slice_source_14, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1295;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_23;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = -1;
    tmp_slice_source_15 = var_r2;

    tmp_assign_source_24 = LOOKUP_INDEX_SLICE( tmp_slice_source_15, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1296;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_24;
        Py_DECREF( old );
    }

    branch_no_11:;
    goto branch_end_10;
    branch_no_10:;
    tmp_slice_source_16 = par_word;

    if ( tmp_slice_source_16 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1298;
        goto try_except_handler_6;
    }

    tmp_len_arg_11 = var_suffix;

    tmp_operand_name_6 = BUILTIN_LEN( tmp_len_arg_11 );
    if ( tmp_operand_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1298;
        goto try_except_handler_6;
    }
    tmp_slice_upper_10 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_6 );
    Py_DECREF( tmp_operand_name_6 );
    if ( tmp_slice_upper_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1298;
        goto try_except_handler_6;
    }
    tmp_assign_source_25 = LOOKUP_SLICE( tmp_slice_source_16, Py_None, tmp_slice_upper_10 );
    Py_DECREF( tmp_slice_upper_10 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1298;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_25;
        Py_XDECREF( old );
    }

    tmp_slice_source_17 = var_r1;

    if ( tmp_slice_source_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1299;
        goto try_except_handler_6;
    }

    tmp_len_arg_12 = var_suffix;

    tmp_operand_name_7 = BUILTIN_LEN( tmp_len_arg_12 );
    if ( tmp_operand_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1299;
        goto try_except_handler_6;
    }
    tmp_slice_upper_11 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_7 );
    Py_DECREF( tmp_operand_name_7 );
    if ( tmp_slice_upper_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1299;
        goto try_except_handler_6;
    }
    tmp_assign_source_26 = LOOKUP_SLICE( tmp_slice_source_17, Py_None, tmp_slice_upper_11 );
    Py_DECREF( tmp_slice_upper_11 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1299;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_26;
        Py_XDECREF( old );
    }

    tmp_slice_source_18 = var_r2;

    tmp_len_arg_13 = var_suffix;

    tmp_operand_name_8 = BUILTIN_LEN( tmp_len_arg_13 );
    if ( tmp_operand_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1300;
        goto try_except_handler_6;
    }
    tmp_slice_upper_12 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_8 );
    Py_DECREF( tmp_operand_name_8 );
    if ( tmp_slice_upper_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1300;
        goto try_except_handler_6;
    }
    tmp_assign_source_27 = LOOKUP_SLICE( tmp_slice_source_18, Py_None, tmp_slice_upper_12 );
    Py_DECREF( tmp_slice_upper_12 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1300;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_27;
        Py_DECREF( old );
    }

    branch_end_10:;
    branch_end_9:;
    goto loop_end_3;
    branch_no_8:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1284;
        goto try_except_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_source_name_12 = par_self;

    tmp_iter_arg_5 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain__GermanStemmer__step2_suffixes );
    if ( tmp_iter_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1304;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_28 = MAKE_ITERATOR( tmp_iter_arg_5 );
    Py_DECREF( tmp_iter_arg_5 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1304;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator == NULL );
    tmp_for_loop_4__for_iterator = tmp_assign_source_28;

    // Tried code:
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    tmp_assign_source_29 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_29 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1304;
            goto try_except_handler_7;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_29;
        Py_XDECREF( old );
    }

    tmp_assign_source_30 = tmp_for_loop_4__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_30;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_4 = var_r1;

    if ( tmp_called_instance_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1305;
        goto try_except_handler_7;
    }

    tmp_args_element_name_6 = var_suffix;

    frame_function->f_lineno = 1305;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_cond_value_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1305;
        goto try_except_handler_7;
    }
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        exception_lineno = 1305;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_compare_left_7 = var_suffix;

    tmp_compare_right_7 = const_unicode_plain_st;
    tmp_cmp_Eq_5 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_cmp_Eq_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1306;
        goto try_except_handler_7;
    }
    if ( tmp_cmp_Eq_5 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_subscribed_name_8 = par_word;

    if ( tmp_subscribed_name_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1307;
        goto try_except_handler_7;
    }

    tmp_subscript_name_8 = const_int_neg_3;
    tmp_compexpr_left_9 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
    if ( tmp_compexpr_left_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1307;
        goto try_except_handler_7;
    }
    tmp_source_name_13 = par_self;

    tmp_compexpr_right_9 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain__GermanStemmer__st_ending );
    if ( tmp_compexpr_right_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_9 );

        exception_lineno = 1307;
        goto try_except_handler_7;
    }
    tmp_and_left_value_5 = SEQUENCE_CONTAINS( tmp_compexpr_left_9, tmp_compexpr_right_9 );
    Py_DECREF( tmp_compexpr_left_9 );
    Py_DECREF( tmp_compexpr_right_9 );
    if ( tmp_and_left_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1307;
        goto try_except_handler_7;
    }
    tmp_and_left_truth_5 = CHECK_IF_TRUE( tmp_and_left_value_5 );
    assert( !(tmp_and_left_truth_5 == -1) );
    if ( tmp_and_left_truth_5 == 1 )
    {
        goto and_right_5;
    }
    else
    {
        goto and_left_5;
    }
    and_right_5:;
    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = -3;
    tmp_slice_source_19 = par_word;

    if ( tmp_slice_source_19 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1307;
        goto try_except_handler_7;
    }

    tmp_len_arg_14 = LOOKUP_INDEX_SLICE( tmp_slice_source_19, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_len_arg_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1307;
        goto try_except_handler_7;
    }
    tmp_compexpr_left_10 = BUILTIN_LEN( tmp_len_arg_14 );
    Py_DECREF( tmp_len_arg_14 );
    if ( tmp_compexpr_left_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1307;
        goto try_except_handler_7;
    }
    tmp_compexpr_right_10 = const_int_pos_3;
    tmp_and_right_value_5 = RICH_COMPARE_GE( tmp_compexpr_left_10, tmp_compexpr_right_10 );
    Py_DECREF( tmp_compexpr_left_10 );
    if ( tmp_and_right_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1307;
        goto try_except_handler_7;
    }
    tmp_cond_value_7 = tmp_and_right_value_5;
    goto and_end_5;
    and_left_5:;
    Py_INCREF( tmp_and_left_value_5 );
    tmp_cond_value_7 = tmp_and_left_value_5;
    and_end_5:;
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        exception_lineno = 1307;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_sliceslicedel_index_lower_6 = 0;
    tmp_slice_index_upper_6 = -2;
    tmp_slice_source_20 = par_word;

    if ( tmp_slice_source_20 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1308;
        goto try_except_handler_7;
    }

    tmp_assign_source_31 = LOOKUP_INDEX_SLICE( tmp_slice_source_20, tmp_sliceslicedel_index_lower_6, tmp_slice_index_upper_6 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1308;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_31;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_7 = 0;
    tmp_slice_index_upper_7 = -2;
    tmp_slice_source_21 = var_r1;

    if ( tmp_slice_source_21 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1309;
        goto try_except_handler_7;
    }

    tmp_assign_source_32 = LOOKUP_INDEX_SLICE( tmp_slice_source_21, tmp_sliceslicedel_index_lower_7, tmp_slice_index_upper_7 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1309;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_32;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_8 = 0;
    tmp_slice_index_upper_8 = -2;
    tmp_slice_source_22 = var_r2;

    if ( tmp_slice_source_22 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 1310;
        goto try_except_handler_7;
    }

    tmp_assign_source_33 = LOOKUP_INDEX_SLICE( tmp_slice_source_22, tmp_sliceslicedel_index_lower_8, tmp_slice_index_upper_8 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1310;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_33;
        Py_XDECREF( old );
    }

    branch_no_14:;
    goto branch_end_13;
    branch_no_13:;
    tmp_slice_source_23 = par_word;

    if ( tmp_slice_source_23 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1312;
        goto try_except_handler_7;
    }

    tmp_len_arg_15 = var_suffix;

    tmp_operand_name_9 = BUILTIN_LEN( tmp_len_arg_15 );
    if ( tmp_operand_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1312;
        goto try_except_handler_7;
    }
    tmp_slice_upper_13 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_9 );
    Py_DECREF( tmp_operand_name_9 );
    if ( tmp_slice_upper_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1312;
        goto try_except_handler_7;
    }
    tmp_assign_source_34 = LOOKUP_SLICE( tmp_slice_source_23, Py_None, tmp_slice_upper_13 );
    Py_DECREF( tmp_slice_upper_13 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1312;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_34;
        Py_XDECREF( old );
    }

    tmp_slice_source_24 = var_r1;

    if ( tmp_slice_source_24 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1313;
        goto try_except_handler_7;
    }

    tmp_len_arg_16 = var_suffix;

    tmp_operand_name_10 = BUILTIN_LEN( tmp_len_arg_16 );
    if ( tmp_operand_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1313;
        goto try_except_handler_7;
    }
    tmp_slice_upper_14 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_10 );
    Py_DECREF( tmp_operand_name_10 );
    if ( tmp_slice_upper_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1313;
        goto try_except_handler_7;
    }
    tmp_assign_source_35 = LOOKUP_SLICE( tmp_slice_source_24, Py_None, tmp_slice_upper_14 );
    Py_DECREF( tmp_slice_upper_14 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1313;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_35;
        Py_XDECREF( old );
    }

    tmp_slice_source_25 = var_r2;

    if ( tmp_slice_source_25 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 1314;
        goto try_except_handler_7;
    }

    tmp_len_arg_17 = var_suffix;

    tmp_operand_name_11 = BUILTIN_LEN( tmp_len_arg_17 );
    if ( tmp_operand_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1314;
        goto try_except_handler_7;
    }
    tmp_slice_upper_15 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_11 );
    Py_DECREF( tmp_operand_name_11 );
    if ( tmp_slice_upper_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1314;
        goto try_except_handler_7;
    }
    tmp_assign_source_36 = LOOKUP_SLICE( tmp_slice_source_25, Py_None, tmp_slice_upper_15 );
    Py_DECREF( tmp_slice_upper_15 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1314;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_36;
        Py_XDECREF( old );
    }

    branch_end_13:;
    goto loop_end_4;
    branch_no_12:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1304;
        goto try_except_handler_7;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    tmp_source_name_14 = par_self;

    tmp_iter_arg_6 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain__GermanStemmer__step3_suffixes );
    if ( tmp_iter_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1318;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_37 = MAKE_ITERATOR( tmp_iter_arg_6 );
    Py_DECREF( tmp_iter_arg_6 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1318;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_5__for_iterator == NULL );
    tmp_for_loop_5__for_iterator = tmp_assign_source_37;

    // Tried code:
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator;

    tmp_assign_source_38 = ITERATOR_NEXT( tmp_next_source_5 );
    if ( tmp_assign_source_38 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_5;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1318;
            goto try_except_handler_8;
        }
    }

    {
        PyObject *old = tmp_for_loop_5__iter_value;
        tmp_for_loop_5__iter_value = tmp_assign_source_38;
        Py_XDECREF( old );
    }

    tmp_assign_source_39 = tmp_for_loop_5__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_39;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_5 = var_r2;

    if ( tmp_called_instance_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 1319;
        goto try_except_handler_8;
    }

    tmp_args_element_name_7 = var_suffix;

    frame_function->f_lineno = 1319;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_cond_value_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1319;
        goto try_except_handler_8;
    }
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        exception_lineno = 1319;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_compare_left_8 = var_suffix;

    tmp_compare_right_8 = const_tuple_unicode_plain_end_unicode_plain_ung_tuple;
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_compexpr_left_11 = const_unicode_plain_ig;
    tmp_slice_source_26 = var_r2;

    if ( tmp_slice_source_26 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 1321;
        goto try_except_handler_8;
    }

    tmp_len_arg_18 = var_suffix;

    tmp_operand_name_12 = BUILTIN_LEN( tmp_len_arg_18 );
    if ( tmp_operand_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1321;
        goto try_except_handler_8;
    }
    tmp_left_name_14 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_12 );
    Py_DECREF( tmp_operand_name_12 );
    if ( tmp_left_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1321;
        goto try_except_handler_8;
    }
    tmp_right_name_14 = const_int_pos_2;
    tmp_slice_lower_4 = BINARY_OPERATION_SUB( tmp_left_name_14, tmp_right_name_14 );
    Py_DECREF( tmp_left_name_14 );
    if ( tmp_slice_lower_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1321;
        goto try_except_handler_8;
    }
    tmp_len_arg_19 = var_suffix;

    tmp_operand_name_13 = BUILTIN_LEN( tmp_len_arg_19 );
    if ( tmp_operand_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_4 );

        exception_lineno = 1321;
        goto try_except_handler_8;
    }
    tmp_slice_upper_16 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_13 );
    Py_DECREF( tmp_operand_name_13 );
    if ( tmp_slice_upper_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_4 );

        exception_lineno = 1321;
        goto try_except_handler_8;
    }
    tmp_compexpr_right_11 = LOOKUP_SLICE( tmp_slice_source_26, tmp_slice_lower_4, tmp_slice_upper_16 );
    Py_DECREF( tmp_slice_lower_4 );
    Py_DECREF( tmp_slice_upper_16 );
    if ( tmp_compexpr_right_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1321;
        goto try_except_handler_8;
    }
    tmp_and_left_value_6 = SEQUENCE_CONTAINS( tmp_compexpr_left_11, tmp_compexpr_right_11 );
    Py_DECREF( tmp_compexpr_right_11 );
    if ( tmp_and_left_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1321;
        goto try_except_handler_8;
    }
    tmp_and_left_truth_6 = CHECK_IF_TRUE( tmp_and_left_value_6 );
    assert( !(tmp_and_left_truth_6 == -1) );
    if ( tmp_and_left_truth_6 == 1 )
    {
        goto and_right_6;
    }
    else
    {
        goto and_left_6;
    }
    and_right_6:;
    tmp_compexpr_left_12 = const_unicode_plain_e;
    tmp_slice_source_27 = var_r2;

    if ( tmp_slice_source_27 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 1322;
        goto try_except_handler_8;
    }

    tmp_len_arg_20 = var_suffix;

    tmp_operand_name_14 = BUILTIN_LEN( tmp_len_arg_20 );
    if ( tmp_operand_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1322;
        goto try_except_handler_8;
    }
    tmp_left_name_15 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_14 );
    Py_DECREF( tmp_operand_name_14 );
    if ( tmp_left_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1322;
        goto try_except_handler_8;
    }
    tmp_right_name_15 = const_int_pos_3;
    tmp_slice_lower_5 = BINARY_OPERATION_SUB( tmp_left_name_15, tmp_right_name_15 );
    Py_DECREF( tmp_left_name_15 );
    if ( tmp_slice_lower_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1322;
        goto try_except_handler_8;
    }
    tmp_len_arg_21 = var_suffix;

    tmp_operand_name_15 = BUILTIN_LEN( tmp_len_arg_21 );
    if ( tmp_operand_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_5 );

        exception_lineno = 1322;
        goto try_except_handler_8;
    }
    tmp_left_name_16 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_15 );
    Py_DECREF( tmp_operand_name_15 );
    if ( tmp_left_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_5 );

        exception_lineno = 1322;
        goto try_except_handler_8;
    }
    tmp_right_name_16 = const_int_pos_2;
    tmp_slice_upper_17 = BINARY_OPERATION_SUB( tmp_left_name_16, tmp_right_name_16 );
    Py_DECREF( tmp_left_name_16 );
    if ( tmp_slice_upper_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_5 );

        exception_lineno = 1322;
        goto try_except_handler_8;
    }
    tmp_compexpr_right_12 = LOOKUP_SLICE( tmp_slice_source_27, tmp_slice_lower_5, tmp_slice_upper_17 );
    Py_DECREF( tmp_slice_lower_5 );
    Py_DECREF( tmp_slice_upper_17 );
    if ( tmp_compexpr_right_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1322;
        goto try_except_handler_8;
    }
    tmp_and_right_value_6 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_12, tmp_compexpr_right_12 );
    Py_DECREF( tmp_compexpr_right_12 );
    if ( tmp_and_right_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1322;
        goto try_except_handler_8;
    }
    tmp_cond_value_9 = tmp_and_right_value_6;
    goto and_end_6;
    and_left_6:;
    tmp_cond_value_9 = tmp_and_left_value_6;
    and_end_6:;
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    assert( !(tmp_cond_truth_9 == -1) );
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_slice_source_28 = par_word;

    if ( tmp_slice_source_28 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1323;
        goto try_except_handler_8;
    }

    tmp_len_arg_22 = var_suffix;

    tmp_operand_name_16 = BUILTIN_LEN( tmp_len_arg_22 );
    if ( tmp_operand_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1323;
        goto try_except_handler_8;
    }
    tmp_left_name_17 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_16 );
    Py_DECREF( tmp_operand_name_16 );
    if ( tmp_left_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1323;
        goto try_except_handler_8;
    }
    tmp_right_name_17 = const_int_pos_2;
    tmp_slice_upper_18 = BINARY_OPERATION_SUB( tmp_left_name_17, tmp_right_name_17 );
    Py_DECREF( tmp_left_name_17 );
    if ( tmp_slice_upper_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1323;
        goto try_except_handler_8;
    }
    tmp_assign_source_40 = LOOKUP_SLICE( tmp_slice_source_28, Py_None, tmp_slice_upper_18 );
    Py_DECREF( tmp_slice_upper_18 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1323;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_40;
        Py_XDECREF( old );
    }

    goto branch_end_17;
    branch_no_17:;
    tmp_slice_source_29 = par_word;

    if ( tmp_slice_source_29 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1325;
        goto try_except_handler_8;
    }

    tmp_len_arg_23 = var_suffix;

    tmp_operand_name_17 = BUILTIN_LEN( tmp_len_arg_23 );
    if ( tmp_operand_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1325;
        goto try_except_handler_8;
    }
    tmp_slice_upper_19 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_17 );
    Py_DECREF( tmp_operand_name_17 );
    if ( tmp_slice_upper_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1325;
        goto try_except_handler_8;
    }
    tmp_assign_source_41 = LOOKUP_SLICE( tmp_slice_source_29, Py_None, tmp_slice_upper_19 );
    Py_DECREF( tmp_slice_upper_19 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1325;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_41;
        Py_XDECREF( old );
    }

    branch_end_17:;
    goto branch_end_16;
    branch_no_16:;
    tmp_compexpr_left_13 = var_suffix;

    tmp_compexpr_right_13 = const_tuple_unicode_plain_ig_unicode_plain_ik_unicode_plain_isch_tuple;
    tmp_and_left_value_7 = SEQUENCE_CONTAINS( tmp_compexpr_left_13, tmp_compexpr_right_13 );
    if ( tmp_and_left_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1327;
        goto try_except_handler_8;
    }
    tmp_and_left_truth_7 = CHECK_IF_TRUE( tmp_and_left_value_7 );
    assert( !(tmp_and_left_truth_7 == -1) );
    if ( tmp_and_left_truth_7 == 1 )
    {
        goto and_right_7;
    }
    else
    {
        goto and_left_7;
    }
    and_right_7:;
    tmp_compexpr_left_14 = const_unicode_plain_e;
    tmp_slice_source_30 = var_r2;

    if ( tmp_slice_source_30 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 1328;
        goto try_except_handler_8;
    }

    tmp_len_arg_24 = var_suffix;

    tmp_operand_name_18 = BUILTIN_LEN( tmp_len_arg_24 );
    if ( tmp_operand_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1328;
        goto try_except_handler_8;
    }
    tmp_left_name_18 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_18 );
    Py_DECREF( tmp_operand_name_18 );
    if ( tmp_left_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1328;
        goto try_except_handler_8;
    }
    tmp_right_name_18 = const_int_pos_1;
    tmp_slice_lower_6 = BINARY_OPERATION_SUB( tmp_left_name_18, tmp_right_name_18 );
    Py_DECREF( tmp_left_name_18 );
    if ( tmp_slice_lower_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1328;
        goto try_except_handler_8;
    }
    tmp_len_arg_25 = var_suffix;

    tmp_operand_name_19 = BUILTIN_LEN( tmp_len_arg_25 );
    if ( tmp_operand_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_6 );

        exception_lineno = 1328;
        goto try_except_handler_8;
    }
    tmp_slice_upper_20 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_19 );
    Py_DECREF( tmp_operand_name_19 );
    if ( tmp_slice_upper_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_6 );

        exception_lineno = 1328;
        goto try_except_handler_8;
    }
    tmp_compexpr_right_14 = LOOKUP_SLICE( tmp_slice_source_30, tmp_slice_lower_6, tmp_slice_upper_20 );
    Py_DECREF( tmp_slice_lower_6 );
    Py_DECREF( tmp_slice_upper_20 );
    if ( tmp_compexpr_right_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1328;
        goto try_except_handler_8;
    }
    tmp_and_right_value_7 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_14, tmp_compexpr_right_14 );
    Py_DECREF( tmp_compexpr_right_14 );
    if ( tmp_and_right_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1328;
        goto try_except_handler_8;
    }
    tmp_cond_value_10 = tmp_and_right_value_7;
    goto and_end_7;
    and_left_7:;
    tmp_cond_value_10 = tmp_and_left_value_7;
    and_end_7:;
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    assert( !(tmp_cond_truth_10 == -1) );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_slice_source_31 = par_word;

    if ( tmp_slice_source_31 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1329;
        goto try_except_handler_8;
    }

    tmp_len_arg_26 = var_suffix;

    tmp_operand_name_20 = BUILTIN_LEN( tmp_len_arg_26 );
    if ( tmp_operand_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1329;
        goto try_except_handler_8;
    }
    tmp_slice_upper_21 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_20 );
    Py_DECREF( tmp_operand_name_20 );
    if ( tmp_slice_upper_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1329;
        goto try_except_handler_8;
    }
    tmp_assign_source_42 = LOOKUP_SLICE( tmp_slice_source_31, Py_None, tmp_slice_upper_21 );
    Py_DECREF( tmp_slice_upper_21 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1329;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_42;
        Py_XDECREF( old );
    }

    goto branch_end_18;
    branch_no_18:;
    tmp_compare_left_9 = var_suffix;

    tmp_compare_right_9 = const_tuple_unicode_plain_lich_unicode_plain_heit_tuple;
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_compexpr_left_15 = const_unicode_plain_er;
    tmp_slice_source_32 = var_r1;

    if ( tmp_slice_source_32 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1332;
        goto try_except_handler_8;
    }

    tmp_len_arg_27 = var_suffix;

    tmp_operand_name_21 = BUILTIN_LEN( tmp_len_arg_27 );
    if ( tmp_operand_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1332;
        goto try_except_handler_8;
    }
    tmp_left_name_19 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_21 );
    Py_DECREF( tmp_operand_name_21 );
    if ( tmp_left_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1332;
        goto try_except_handler_8;
    }
    tmp_right_name_19 = const_int_pos_2;
    tmp_slice_lower_7 = BINARY_OPERATION_SUB( tmp_left_name_19, tmp_right_name_19 );
    Py_DECREF( tmp_left_name_19 );
    if ( tmp_slice_lower_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1332;
        goto try_except_handler_8;
    }
    tmp_len_arg_28 = var_suffix;

    tmp_operand_name_22 = BUILTIN_LEN( tmp_len_arg_28 );
    if ( tmp_operand_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_7 );

        exception_lineno = 1332;
        goto try_except_handler_8;
    }
    tmp_slice_upper_22 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_22 );
    Py_DECREF( tmp_operand_name_22 );
    if ( tmp_slice_upper_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_7 );

        exception_lineno = 1332;
        goto try_except_handler_8;
    }
    tmp_compexpr_right_15 = LOOKUP_SLICE( tmp_slice_source_32, tmp_slice_lower_7, tmp_slice_upper_22 );
    Py_DECREF( tmp_slice_lower_7 );
    Py_DECREF( tmp_slice_upper_22 );
    if ( tmp_compexpr_right_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1332;
        goto try_except_handler_8;
    }
    tmp_or_left_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_15, tmp_compexpr_right_15 );
    Py_DECREF( tmp_compexpr_right_15 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1332;
        goto try_except_handler_8;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    assert( !(tmp_or_left_truth_1 == -1) );
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_compexpr_left_16 = const_unicode_plain_en;
    tmp_slice_source_33 = var_r1;

    if ( tmp_slice_source_33 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1333;
        goto try_except_handler_8;
    }

    tmp_len_arg_29 = var_suffix;

    tmp_operand_name_23 = BUILTIN_LEN( tmp_len_arg_29 );
    if ( tmp_operand_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1333;
        goto try_except_handler_8;
    }
    tmp_left_name_20 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_23 );
    Py_DECREF( tmp_operand_name_23 );
    if ( tmp_left_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1333;
        goto try_except_handler_8;
    }
    tmp_right_name_20 = const_int_pos_2;
    tmp_slice_lower_8 = BINARY_OPERATION_SUB( tmp_left_name_20, tmp_right_name_20 );
    Py_DECREF( tmp_left_name_20 );
    if ( tmp_slice_lower_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1333;
        goto try_except_handler_8;
    }
    tmp_len_arg_30 = var_suffix;

    tmp_operand_name_24 = BUILTIN_LEN( tmp_len_arg_30 );
    if ( tmp_operand_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_8 );

        exception_lineno = 1333;
        goto try_except_handler_8;
    }
    tmp_slice_upper_23 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_24 );
    Py_DECREF( tmp_operand_name_24 );
    if ( tmp_slice_upper_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_8 );

        exception_lineno = 1333;
        goto try_except_handler_8;
    }
    tmp_compexpr_right_16 = LOOKUP_SLICE( tmp_slice_source_33, tmp_slice_lower_8, tmp_slice_upper_23 );
    Py_DECREF( tmp_slice_lower_8 );
    Py_DECREF( tmp_slice_upper_23 );
    if ( tmp_compexpr_right_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1333;
        goto try_except_handler_8;
    }
    tmp_or_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_16, tmp_compexpr_right_16 );
    Py_DECREF( tmp_compexpr_right_16 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1333;
        goto try_except_handler_8;
    }
    tmp_cond_value_11 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_11 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    assert( !(tmp_cond_truth_11 == -1) );
    if ( tmp_cond_truth_11 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_slice_source_34 = par_word;

    if ( tmp_slice_source_34 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1334;
        goto try_except_handler_8;
    }

    tmp_len_arg_31 = var_suffix;

    tmp_operand_name_25 = BUILTIN_LEN( tmp_len_arg_31 );
    if ( tmp_operand_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1334;
        goto try_except_handler_8;
    }
    tmp_left_name_21 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_25 );
    Py_DECREF( tmp_operand_name_25 );
    if ( tmp_left_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1334;
        goto try_except_handler_8;
    }
    tmp_right_name_21 = const_int_pos_2;
    tmp_slice_upper_24 = BINARY_OPERATION_SUB( tmp_left_name_21, tmp_right_name_21 );
    Py_DECREF( tmp_left_name_21 );
    if ( tmp_slice_upper_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1334;
        goto try_except_handler_8;
    }
    tmp_assign_source_43 = LOOKUP_SLICE( tmp_slice_source_34, Py_None, tmp_slice_upper_24 );
    Py_DECREF( tmp_slice_upper_24 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1334;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_43;
        Py_XDECREF( old );
    }

    goto branch_end_20;
    branch_no_20:;
    tmp_slice_source_35 = par_word;

    if ( tmp_slice_source_35 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1336;
        goto try_except_handler_8;
    }

    tmp_len_arg_32 = var_suffix;

    tmp_operand_name_26 = BUILTIN_LEN( tmp_len_arg_32 );
    if ( tmp_operand_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1336;
        goto try_except_handler_8;
    }
    tmp_slice_upper_25 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_26 );
    Py_DECREF( tmp_operand_name_26 );
    if ( tmp_slice_upper_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1336;
        goto try_except_handler_8;
    }
    tmp_assign_source_44 = LOOKUP_SLICE( tmp_slice_source_35, Py_None, tmp_slice_upper_25 );
    Py_DECREF( tmp_slice_upper_25 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1336;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_44;
        Py_XDECREF( old );
    }

    branch_end_20:;
    goto branch_end_19;
    branch_no_19:;
    tmp_compare_left_10 = var_suffix;

    tmp_compare_right_10 = const_unicode_plain_keit;
    tmp_cmp_Eq_6 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_10, tmp_compare_right_10 );
    if ( tmp_cmp_Eq_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1338;
        goto try_except_handler_8;
    }
    if ( tmp_cmp_Eq_6 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_compare_left_11 = const_unicode_plain_lich;
    tmp_slice_source_36 = var_r2;

    if ( tmp_slice_source_36 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 1339;
        goto try_except_handler_8;
    }

    tmp_len_arg_33 = var_suffix;

    tmp_operand_name_27 = BUILTIN_LEN( tmp_len_arg_33 );
    if ( tmp_operand_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1339;
        goto try_except_handler_8;
    }
    tmp_left_name_22 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_27 );
    Py_DECREF( tmp_operand_name_27 );
    if ( tmp_left_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1339;
        goto try_except_handler_8;
    }
    tmp_right_name_22 = const_int_pos_4;
    tmp_slice_lower_9 = BINARY_OPERATION_SUB( tmp_left_name_22, tmp_right_name_22 );
    Py_DECREF( tmp_left_name_22 );
    if ( tmp_slice_lower_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1339;
        goto try_except_handler_8;
    }
    tmp_len_arg_34 = var_suffix;

    tmp_operand_name_28 = BUILTIN_LEN( tmp_len_arg_34 );
    if ( tmp_operand_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_9 );

        exception_lineno = 1339;
        goto try_except_handler_8;
    }
    tmp_slice_upper_26 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_28 );
    Py_DECREF( tmp_operand_name_28 );
    if ( tmp_slice_upper_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_9 );

        exception_lineno = 1339;
        goto try_except_handler_8;
    }
    tmp_compare_right_11 = LOOKUP_SLICE( tmp_slice_source_36, tmp_slice_lower_9, tmp_slice_upper_26 );
    Py_DECREF( tmp_slice_lower_9 );
    Py_DECREF( tmp_slice_upper_26 );
    if ( tmp_compare_right_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1339;
        goto try_except_handler_8;
    }
    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    assert( !(tmp_cmp_In_5 == -1) );
    Py_DECREF( tmp_compare_right_11 );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_slice_source_37 = par_word;

    if ( tmp_slice_source_37 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1340;
        goto try_except_handler_8;
    }

    tmp_len_arg_35 = var_suffix;

    tmp_operand_name_29 = BUILTIN_LEN( tmp_len_arg_35 );
    if ( tmp_operand_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1340;
        goto try_except_handler_8;
    }
    tmp_left_name_23 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_29 );
    Py_DECREF( tmp_operand_name_29 );
    if ( tmp_left_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1340;
        goto try_except_handler_8;
    }
    tmp_right_name_23 = const_int_pos_4;
    tmp_slice_upper_27 = BINARY_OPERATION_SUB( tmp_left_name_23, tmp_right_name_23 );
    Py_DECREF( tmp_left_name_23 );
    if ( tmp_slice_upper_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1340;
        goto try_except_handler_8;
    }
    tmp_assign_source_45 = LOOKUP_SLICE( tmp_slice_source_37, Py_None, tmp_slice_upper_27 );
    Py_DECREF( tmp_slice_upper_27 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1340;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_45;
        Py_XDECREF( old );
    }

    goto branch_end_22;
    branch_no_22:;
    tmp_compare_left_12 = const_unicode_plain_ig;
    tmp_slice_source_38 = var_r2;

    if ( tmp_slice_source_38 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 1342;
        goto try_except_handler_8;
    }

    tmp_len_arg_36 = var_suffix;

    tmp_operand_name_30 = BUILTIN_LEN( tmp_len_arg_36 );
    if ( tmp_operand_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1342;
        goto try_except_handler_8;
    }
    tmp_left_name_24 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_30 );
    Py_DECREF( tmp_operand_name_30 );
    if ( tmp_left_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1342;
        goto try_except_handler_8;
    }
    tmp_right_name_24 = const_int_pos_2;
    tmp_slice_lower_10 = BINARY_OPERATION_SUB( tmp_left_name_24, tmp_right_name_24 );
    Py_DECREF( tmp_left_name_24 );
    if ( tmp_slice_lower_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1342;
        goto try_except_handler_8;
    }
    tmp_len_arg_37 = var_suffix;

    tmp_operand_name_31 = BUILTIN_LEN( tmp_len_arg_37 );
    if ( tmp_operand_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_10 );

        exception_lineno = 1342;
        goto try_except_handler_8;
    }
    tmp_slice_upper_28 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_31 );
    Py_DECREF( tmp_operand_name_31 );
    if ( tmp_slice_upper_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_10 );

        exception_lineno = 1342;
        goto try_except_handler_8;
    }
    tmp_compare_right_12 = LOOKUP_SLICE( tmp_slice_source_38, tmp_slice_lower_10, tmp_slice_upper_28 );
    Py_DECREF( tmp_slice_lower_10 );
    Py_DECREF( tmp_slice_upper_28 );
    if ( tmp_compare_right_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1342;
        goto try_except_handler_8;
    }
    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    assert( !(tmp_cmp_In_6 == -1) );
    Py_DECREF( tmp_compare_right_12 );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_slice_source_39 = par_word;

    if ( tmp_slice_source_39 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1343;
        goto try_except_handler_8;
    }

    tmp_len_arg_38 = var_suffix;

    tmp_operand_name_32 = BUILTIN_LEN( tmp_len_arg_38 );
    if ( tmp_operand_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1343;
        goto try_except_handler_8;
    }
    tmp_left_name_25 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_32 );
    Py_DECREF( tmp_operand_name_32 );
    if ( tmp_left_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1343;
        goto try_except_handler_8;
    }
    tmp_right_name_25 = const_int_pos_2;
    tmp_slice_upper_29 = BINARY_OPERATION_SUB( tmp_left_name_25, tmp_right_name_25 );
    Py_DECREF( tmp_left_name_25 );
    if ( tmp_slice_upper_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1343;
        goto try_except_handler_8;
    }
    tmp_assign_source_46 = LOOKUP_SLICE( tmp_slice_source_39, Py_None, tmp_slice_upper_29 );
    Py_DECREF( tmp_slice_upper_29 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1343;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_46;
        Py_XDECREF( old );
    }

    goto branch_end_23;
    branch_no_23:;
    tmp_slice_source_40 = par_word;

    if ( tmp_slice_source_40 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1345;
        goto try_except_handler_8;
    }

    tmp_len_arg_39 = var_suffix;

    tmp_operand_name_33 = BUILTIN_LEN( tmp_len_arg_39 );
    if ( tmp_operand_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1345;
        goto try_except_handler_8;
    }
    tmp_slice_upper_30 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_33 );
    Py_DECREF( tmp_operand_name_33 );
    if ( tmp_slice_upper_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1345;
        goto try_except_handler_8;
    }
    tmp_assign_source_47 = LOOKUP_SLICE( tmp_slice_source_40, Py_None, tmp_slice_upper_30 );
    Py_DECREF( tmp_slice_upper_30 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1345;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_47;
        Py_XDECREF( old );
    }

    branch_end_23:;
    branch_end_22:;
    branch_no_21:;
    branch_end_19:;
    branch_end_18:;
    branch_end_16:;
    goto loop_end_5;
    branch_no_15:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1318;
        goto try_except_handler_8;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    tmp_called_instance_10 = par_word;

    if ( tmp_called_instance_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1350;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1350;
    tmp_called_instance_9 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_10, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_f44649f09d155153fdd0c05ccaa583de_tuple, 0 ) );

    if ( tmp_called_instance_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1350;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1350;
    tmp_called_instance_8 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_9, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_f50d420abe67f802b4d39b10e9741aa9_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_9 );
    if ( tmp_called_instance_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1350;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1350;
    tmp_called_instance_7 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_8, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_4bebaa77fa75c2380a82e9edda1cfbe5_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_8 );
    if ( tmp_called_instance_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1350;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1350;
    tmp_called_instance_6 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_7, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_unicode_plain_U_unicode_plain_u_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_7 );
    if ( tmp_called_instance_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1350;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1350;
    tmp_assign_source_48 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_6, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_unicode_plain_Y_unicode_plain_y_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_6 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1350;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_48;
        Py_XDECREF( old );
    }


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_r2 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r2,
                    var_r2
                );

                assert( res == 0 );
            }

            if ( var_suffix )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_suffix,
                    var_suffix
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_8_GermanStemmer$$$function_1_stem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_8_GermanStemmer$$$function_1_stem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_9_HungarianStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__HungarianStemmer__vowels = NULL;
    PyObject *var__HungarianStemmer__digraphs = NULL;
    PyObject *var__HungarianStemmer__double_consonants = NULL;
    PyObject *var__HungarianStemmer__step1_suffixes = NULL;
    PyObject *var__HungarianStemmer__step2_suffixes = NULL;
    PyObject *var__HungarianStemmer__step3_suffixes = NULL;
    PyObject *var__HungarianStemmer__step4_suffixes = NULL;
    PyObject *var__HungarianStemmer__step5_suffixes = NULL;
    PyObject *var__HungarianStemmer__step6_suffixes = NULL;
    PyObject *var__HungarianStemmer__step7_suffixes = NULL;
    PyObject *var__HungarianStemmer__step8_suffixes = NULL;
    PyObject *var__HungarianStemmer__step9_suffixes = NULL;
    PyObject *var_stem = NULL;
    PyObject *var__HungarianStemmer__r1_hungarian = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_397ca2ce6700b267d84446991b8ffe27;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_unicode_digest_67458d2c3b56421f177cb72aaebf67fc;
    assert( var__HungarianStemmer__vowels == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var__HungarianStemmer__vowels = tmp_assign_source_3;

    tmp_assign_source_4 = const_tuple_c973d7a857e7686ae8beb9545955cfb1_tuple;
    assert( var__HungarianStemmer__digraphs == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var__HungarianStemmer__digraphs = tmp_assign_source_4;

    tmp_assign_source_5 = const_tuple_faf94a6e5c14f1747f509207339df22d_tuple;
    assert( var__HungarianStemmer__double_consonants == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__HungarianStemmer__double_consonants = tmp_assign_source_5;

    tmp_assign_source_6 = const_tuple_unicode_plain_al_unicode_plain_el_tuple;
    assert( var__HungarianStemmer__step1_suffixes == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var__HungarianStemmer__step1_suffixes = tmp_assign_source_6;

    tmp_assign_source_7 = const_tuple_7279dacd5606b71771fe601dd34c7cfb_tuple;
    assert( var__HungarianStemmer__step2_suffixes == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var__HungarianStemmer__step2_suffixes = tmp_assign_source_7;

    tmp_assign_source_8 = const_tuple_23041e2226cfd5f631f03497d2af7ada_tuple;
    assert( var__HungarianStemmer__step3_suffixes == NULL );
    Py_INCREF( tmp_assign_source_8 );
    var__HungarianStemmer__step3_suffixes = tmp_assign_source_8;

    tmp_assign_source_9 = const_tuple_93e1c64ccad8d75f6fa5b237ce6ca192_tuple;
    assert( var__HungarianStemmer__step4_suffixes == NULL );
    Py_INCREF( tmp_assign_source_9 );
    var__HungarianStemmer__step4_suffixes = tmp_assign_source_9;

    tmp_assign_source_10 = const_tuple_eb52ccf5e8b342c09833c45ec7463ec0_tuple;
    assert( var__HungarianStemmer__step5_suffixes == NULL );
    Py_INCREF( tmp_assign_source_10 );
    var__HungarianStemmer__step5_suffixes = tmp_assign_source_10;

    tmp_assign_source_11 = const_tuple_33d3ec9ac3328b8f954c1f5f3ab80da0_tuple;
    assert( var__HungarianStemmer__step6_suffixes == NULL );
    Py_INCREF( tmp_assign_source_11 );
    var__HungarianStemmer__step6_suffixes = tmp_assign_source_11;

    tmp_assign_source_12 = const_tuple_c56562ec649ffe624ba416666af1ee3f_tuple;
    assert( var__HungarianStemmer__step7_suffixes == NULL );
    Py_INCREF( tmp_assign_source_12 );
    var__HungarianStemmer__step7_suffixes = tmp_assign_source_12;

    tmp_assign_source_13 = const_tuple_9d9f88c0da17928013fbc5e2ed0ab940_tuple;
    assert( var__HungarianStemmer__step8_suffixes == NULL );
    Py_INCREF( tmp_assign_source_13 );
    var__HungarianStemmer__step8_suffixes = tmp_assign_source_13;

    tmp_assign_source_14 = const_tuple_cc2e4d3fd1a1cd22940575f16ccfe749_tuple;
    assert( var__HungarianStemmer__step9_suffixes == NULL );
    Py_INCREF( tmp_assign_source_14 );
    var__HungarianStemmer__step9_suffixes = tmp_assign_source_14;

    tmp_assign_source_15 = MAKE_FUNCTION_nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_1_stem(  );
    assert( var_stem == NULL );
    var_stem = tmp_assign_source_15;

    tmp_assign_source_16 = MAKE_FUNCTION_nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_2___r1_hungarian(  );
    assert( var__HungarianStemmer__r1_hungarian == NULL );
    var__HungarianStemmer__r1_hungarian = tmp_assign_source_16;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__HungarianStemmer__vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__HungarianStemmer__vowels,
            var__HungarianStemmer__vowels
        );

        assert( res == 0 );
    }

    if ( var__HungarianStemmer__digraphs )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__HungarianStemmer__digraphs,
            var__HungarianStemmer__digraphs
        );

        assert( res == 0 );
    }

    if ( var__HungarianStemmer__double_consonants )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__HungarianStemmer__double_consonants,
            var__HungarianStemmer__double_consonants
        );

        assert( res == 0 );
    }

    if ( var__HungarianStemmer__step1_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__HungarianStemmer__step1_suffixes,
            var__HungarianStemmer__step1_suffixes
        );

        assert( res == 0 );
    }

    if ( var__HungarianStemmer__step2_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__HungarianStemmer__step2_suffixes,
            var__HungarianStemmer__step2_suffixes
        );

        assert( res == 0 );
    }

    if ( var__HungarianStemmer__step3_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__HungarianStemmer__step3_suffixes,
            var__HungarianStemmer__step3_suffixes
        );

        assert( res == 0 );
    }

    if ( var__HungarianStemmer__step4_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__HungarianStemmer__step4_suffixes,
            var__HungarianStemmer__step4_suffixes
        );

        assert( res == 0 );
    }

    if ( var__HungarianStemmer__step5_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__HungarianStemmer__step5_suffixes,
            var__HungarianStemmer__step5_suffixes
        );

        assert( res == 0 );
    }

    if ( var__HungarianStemmer__step6_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__HungarianStemmer__step6_suffixes,
            var__HungarianStemmer__step6_suffixes
        );

        assert( res == 0 );
    }

    if ( var__HungarianStemmer__step7_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__HungarianStemmer__step7_suffixes,
            var__HungarianStemmer__step7_suffixes
        );

        assert( res == 0 );
    }

    if ( var__HungarianStemmer__step8_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__HungarianStemmer__step8_suffixes,
            var__HungarianStemmer__step8_suffixes
        );

        assert( res == 0 );
    }

    if ( var__HungarianStemmer__step9_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__HungarianStemmer__step9_suffixes,
            var__HungarianStemmer__step9_suffixes
        );

        assert( res == 0 );
    }

    if ( var_stem )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_stem,
            var_stem
        );

        assert( res == 0 );
    }

    if ( var__HungarianStemmer__r1_hungarian )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__HungarianStemmer__r1_hungarian,
            var__HungarianStemmer__r1_hungarian
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_9_HungarianStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__vowels );
    Py_DECREF( var__HungarianStemmer__vowels );
    var__HungarianStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__digraphs );
    Py_DECREF( var__HungarianStemmer__digraphs );
    var__HungarianStemmer__digraphs = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__double_consonants );
    Py_DECREF( var__HungarianStemmer__double_consonants );
    var__HungarianStemmer__double_consonants = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step1_suffixes );
    Py_DECREF( var__HungarianStemmer__step1_suffixes );
    var__HungarianStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step2_suffixes );
    Py_DECREF( var__HungarianStemmer__step2_suffixes );
    var__HungarianStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step3_suffixes );
    Py_DECREF( var__HungarianStemmer__step3_suffixes );
    var__HungarianStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step4_suffixes );
    Py_DECREF( var__HungarianStemmer__step4_suffixes );
    var__HungarianStemmer__step4_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step5_suffixes );
    Py_DECREF( var__HungarianStemmer__step5_suffixes );
    var__HungarianStemmer__step5_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step6_suffixes );
    Py_DECREF( var__HungarianStemmer__step6_suffixes );
    var__HungarianStemmer__step6_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step7_suffixes );
    Py_DECREF( var__HungarianStemmer__step7_suffixes );
    var__HungarianStemmer__step7_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step8_suffixes );
    Py_DECREF( var__HungarianStemmer__step8_suffixes );
    var__HungarianStemmer__step8_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step9_suffixes );
    Py_DECREF( var__HungarianStemmer__step9_suffixes );
    var__HungarianStemmer__step9_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__r1_hungarian );
    Py_DECREF( var__HungarianStemmer__r1_hungarian );
    var__HungarianStemmer__r1_hungarian = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__vowels );
    Py_DECREF( var__HungarianStemmer__vowels );
    var__HungarianStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__digraphs );
    Py_DECREF( var__HungarianStemmer__digraphs );
    var__HungarianStemmer__digraphs = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__double_consonants );
    Py_DECREF( var__HungarianStemmer__double_consonants );
    var__HungarianStemmer__double_consonants = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step1_suffixes );
    Py_DECREF( var__HungarianStemmer__step1_suffixes );
    var__HungarianStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step2_suffixes );
    Py_DECREF( var__HungarianStemmer__step2_suffixes );
    var__HungarianStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step3_suffixes );
    Py_DECREF( var__HungarianStemmer__step3_suffixes );
    var__HungarianStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step4_suffixes );
    Py_DECREF( var__HungarianStemmer__step4_suffixes );
    var__HungarianStemmer__step4_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step5_suffixes );
    Py_DECREF( var__HungarianStemmer__step5_suffixes );
    var__HungarianStemmer__step5_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step6_suffixes );
    Py_DECREF( var__HungarianStemmer__step6_suffixes );
    var__HungarianStemmer__step6_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step7_suffixes );
    Py_DECREF( var__HungarianStemmer__step7_suffixes );
    var__HungarianStemmer__step7_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step8_suffixes );
    Py_DECREF( var__HungarianStemmer__step8_suffixes );
    var__HungarianStemmer__step8_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__step9_suffixes );
    Py_DECREF( var__HungarianStemmer__step9_suffixes );
    var__HungarianStemmer__step9_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    CHECK_OBJECT( (PyObject *)var__HungarianStemmer__r1_hungarian );
    Py_DECREF( var__HungarianStemmer__r1_hungarian );
    var__HungarianStemmer__r1_hungarian = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_9_HungarianStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_1_stem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_r1 = NULL;
    PyObject *var_double_cons = NULL;
    PyObject *var_suffix = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *tmp_for_loop_6__for_iterator = NULL;
    PyObject *tmp_for_loop_6__iter_value = NULL;
    PyObject *tmp_for_loop_7__for_iterator = NULL;
    PyObject *tmp_for_loop_7__iter_value = NULL;
    PyObject *tmp_for_loop_8__for_iterator = NULL;
    PyObject *tmp_for_loop_8__iter_value = NULL;
    PyObject *tmp_for_loop_9__for_iterator = NULL;
    PyObject *tmp_for_loop_9__iter_value = NULL;
    PyObject *tmp_for_loop_10__for_iterator = NULL;
    PyObject *tmp_for_loop_10__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_element_name_43;
    PyObject *tmp_args_element_name_44;
    PyObject *tmp_args_element_name_45;
    PyObject *tmp_args_element_name_46;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_instance_12;
    PyObject *tmp_called_instance_13;
    PyObject *tmp_called_instance_14;
    PyObject *tmp_called_instance_15;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_Eq_4;
    int tmp_cmp_Eq_5;
    int tmp_cmp_Eq_6;
    int tmp_cmp_Eq_7;
    int tmp_cmp_Eq_8;
    int tmp_cmp_Eq_9;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iter_arg_8;
    PyObject *tmp_iter_arg_9;
    PyObject *tmp_iter_arg_10;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_len_arg_6;
    PyObject *tmp_len_arg_7;
    PyObject *tmp_len_arg_8;
    PyObject *tmp_len_arg_9;
    PyObject *tmp_len_arg_10;
    PyObject *tmp_len_arg_11;
    PyObject *tmp_len_arg_12;
    PyObject *tmp_len_arg_13;
    PyObject *tmp_len_arg_14;
    PyObject *tmp_len_arg_15;
    PyObject *tmp_len_arg_16;
    PyObject *tmp_len_arg_17;
    PyObject *tmp_len_arg_18;
    PyObject *tmp_len_arg_19;
    PyObject *tmp_len_arg_20;
    PyObject *tmp_len_arg_21;
    PyObject *tmp_len_arg_22;
    PyObject *tmp_len_arg_23;
    PyObject *tmp_len_arg_24;
    PyObject *tmp_len_arg_25;
    PyObject *tmp_len_arg_26;
    PyObject *tmp_len_arg_27;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_next_source_7;
    PyObject *tmp_next_source_8;
    PyObject *tmp_next_source_9;
    PyObject *tmp_next_source_10;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    PyObject *tmp_operand_name_4;
    PyObject *tmp_operand_name_5;
    PyObject *tmp_operand_name_6;
    PyObject *tmp_operand_name_7;
    PyObject *tmp_operand_name_8;
    PyObject *tmp_operand_name_9;
    PyObject *tmp_operand_name_10;
    PyObject *tmp_operand_name_11;
    PyObject *tmp_operand_name_12;
    PyObject *tmp_operand_name_13;
    PyObject *tmp_operand_name_14;
    PyObject *tmp_operand_name_15;
    PyObject *tmp_operand_name_16;
    PyObject *tmp_operand_name_17;
    PyObject *tmp_operand_name_18;
    PyObject *tmp_operand_name_19;
    PyObject *tmp_operand_name_20;
    PyObject *tmp_operand_name_21;
    PyObject *tmp_operand_name_22;
    PyObject *tmp_operand_name_23;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    Py_ssize_t tmp_slice_index_upper_6;
    Py_ssize_t tmp_slice_index_upper_7;
    Py_ssize_t tmp_slice_index_upper_8;
    Py_ssize_t tmp_slice_index_upper_9;
    Py_ssize_t tmp_slice_index_upper_10;
    Py_ssize_t tmp_slice_index_upper_11;
    Py_ssize_t tmp_slice_index_upper_12;
    Py_ssize_t tmp_slice_index_upper_13;
    Py_ssize_t tmp_slice_index_upper_14;
    Py_ssize_t tmp_slice_index_upper_15;
    Py_ssize_t tmp_slice_index_upper_16;
    Py_ssize_t tmp_slice_index_upper_17;
    Py_ssize_t tmp_slice_index_upper_18;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_lower_3;
    PyObject *tmp_slice_lower_4;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_source_10;
    PyObject *tmp_slice_source_11;
    PyObject *tmp_slice_source_12;
    PyObject *tmp_slice_source_13;
    PyObject *tmp_slice_source_14;
    PyObject *tmp_slice_source_15;
    PyObject *tmp_slice_source_16;
    PyObject *tmp_slice_source_17;
    PyObject *tmp_slice_source_18;
    PyObject *tmp_slice_source_19;
    PyObject *tmp_slice_source_20;
    PyObject *tmp_slice_source_21;
    PyObject *tmp_slice_source_22;
    PyObject *tmp_slice_source_23;
    PyObject *tmp_slice_source_24;
    PyObject *tmp_slice_source_25;
    PyObject *tmp_slice_source_26;
    PyObject *tmp_slice_source_27;
    PyObject *tmp_slice_source_28;
    PyObject *tmp_slice_source_29;
    PyObject *tmp_slice_source_30;
    PyObject *tmp_slice_source_31;
    PyObject *tmp_slice_source_32;
    PyObject *tmp_slice_source_33;
    PyObject *tmp_slice_source_34;
    PyObject *tmp_slice_source_35;
    PyObject *tmp_slice_source_36;
    PyObject *tmp_slice_source_37;
    PyObject *tmp_slice_source_38;
    PyObject *tmp_slice_source_39;
    PyObject *tmp_slice_source_40;
    PyObject *tmp_slice_source_41;
    PyObject *tmp_slice_source_42;
    PyObject *tmp_slice_source_43;
    PyObject *tmp_slice_source_44;
    PyObject *tmp_slice_source_45;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    PyObject *tmp_slice_upper_4;
    PyObject *tmp_slice_upper_5;
    PyObject *tmp_slice_upper_6;
    PyObject *tmp_slice_upper_7;
    PyObject *tmp_slice_upper_8;
    PyObject *tmp_slice_upper_9;
    PyObject *tmp_slice_upper_10;
    PyObject *tmp_slice_upper_11;
    PyObject *tmp_slice_upper_12;
    PyObject *tmp_slice_upper_13;
    PyObject *tmp_slice_upper_14;
    PyObject *tmp_slice_upper_15;
    PyObject *tmp_slice_upper_16;
    PyObject *tmp_slice_upper_17;
    PyObject *tmp_slice_upper_18;
    PyObject *tmp_slice_upper_19;
    PyObject *tmp_slice_upper_20;
    PyObject *tmp_slice_upper_21;
    PyObject *tmp_slice_upper_22;
    PyObject *tmp_slice_upper_23;
    PyObject *tmp_slice_upper_24;
    PyObject *tmp_slice_upper_25;
    PyObject *tmp_slice_upper_26;
    PyObject *tmp_slice_upper_27;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_6;
    Py_ssize_t tmp_sliceslicedel_index_lower_7;
    Py_ssize_t tmp_sliceslicedel_index_lower_8;
    Py_ssize_t tmp_sliceslicedel_index_lower_9;
    Py_ssize_t tmp_sliceslicedel_index_lower_10;
    Py_ssize_t tmp_sliceslicedel_index_lower_11;
    Py_ssize_t tmp_sliceslicedel_index_lower_12;
    Py_ssize_t tmp_sliceslicedel_index_lower_13;
    Py_ssize_t tmp_sliceslicedel_index_lower_14;
    Py_ssize_t tmp_sliceslicedel_index_lower_15;
    Py_ssize_t tmp_sliceslicedel_index_lower_16;
    Py_ssize_t tmp_sliceslicedel_index_lower_17;
    Py_ssize_t tmp_sliceslicedel_index_lower_18;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_source_name_40;
    PyObject *tmp_source_name_41;
    PyObject *tmp_source_name_42;
    PyObject *tmp_source_name_43;
    PyObject *tmp_source_name_44;
    PyObject *tmp_source_name_45;
    PyObject *tmp_source_name_46;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_tuple_element_13;
    PyObject *tmp_tuple_element_14;
    PyObject *tmp_tuple_element_15;
    PyObject *tmp_tuple_element_16;
    PyObject *tmp_tuple_element_17;
    PyObject *tmp_tuple_element_18;
    PyObject *tmp_tuple_element_19;
    PyObject *tmp_tuple_element_20;
    PyObject *tmp_tuple_element_21;
    PyObject *tmp_tuple_element_22;
    PyObject *tmp_tuple_element_23;
    PyObject *tmp_tuple_element_24;
    PyObject *tmp_tuple_element_25;
    PyObject *tmp_tuple_element_26;
    PyObject *tmp_tuple_element_27;
    PyObject *tmp_tuple_element_28;
    PyObject *tmp_tuple_element_29;
    PyObject *tmp_tuple_element_30;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_dd2928d8e8c41c79730127e0ebcb14f3, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_word;

    tmp_source_name_1 = par_self;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stopwords );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1450;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_called_instance_1 = par_word;

    frame_function->f_lineno = 1453;
    tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_lower );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1453;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_1;
        Py_DECREF( old );
    }

    tmp_source_name_2 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__HungarianStemmer__r1_hungarian );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1455;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_word;

    tmp_source_name_3 = par_self;

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__HungarianStemmer__vowels );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 1455;
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = par_self;

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__HungarianStemmer__digraphs );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 1455;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1455;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1455;
        goto frame_exception_exit_1;
    }
    assert( var_r1 == NULL );
    var_r1 = tmp_assign_source_2;

    tmp_source_name_5 = var_r1;

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_endswith );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1458;
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = par_self;

    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__HungarianStemmer__step1_suffixes );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 1458;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1458;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1458;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 1458;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_7 = par_self;

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__HungarianStemmer__double_consonants );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1459;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1459;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_3;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1459;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_assign_source_5 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_double_cons;
        var_double_cons = tmp_assign_source_5;
        Py_INCREF( var_double_cons );
        Py_XDECREF( old );
    }

    tmp_slice_source_1 = par_word;

    tmp_left_name_1 = const_int_neg_2;
    tmp_len_arg_1 = var_double_cons;

    tmp_right_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1460;
        goto try_except_handler_2;
    }
    tmp_slice_lower_1 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1460;
        goto try_except_handler_2;
    }
    tmp_slice_upper_1 = const_int_neg_2;
    tmp_compare_left_2 = LOOKUP_SLICE( tmp_slice_source_1, tmp_slice_lower_1, tmp_slice_upper_1 );
    Py_DECREF( tmp_slice_lower_1 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1460;
        goto try_except_handler_2;
    }
    tmp_compare_right_2 = var_double_cons;

    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        exception_lineno = 1460;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_8 = const_unicode_empty;
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_join );
    assert( tmp_called_name_3 != NULL );
    tmp_args_element_name_5 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = -4;
    tmp_slice_source_2 = par_word;

    tmp_tuple_element_1 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 1461;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_5, 0, tmp_tuple_element_1 );
    tmp_subscribed_name_1 = par_word;

    tmp_subscript_name_1 = const_int_neg_3;
    tmp_tuple_element_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 1461;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_5, 1, tmp_tuple_element_1 );
    frame_function->f_lineno = 1461;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1461;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_6;
        Py_DECREF( old );
    }

    tmp_slice_source_3 = var_r1;

    tmp_left_name_2 = const_int_neg_2;
    tmp_len_arg_2 = var_double_cons;

    tmp_right_name_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_right_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1463;
        goto try_except_handler_2;
    }
    tmp_slice_lower_2 = BINARY_OPERATION_SUB( tmp_left_name_2, tmp_right_name_2 );
    Py_DECREF( tmp_right_name_2 );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1463;
        goto try_except_handler_2;
    }
    tmp_slice_upper_2 = const_int_neg_2;
    tmp_compare_left_3 = LOOKUP_SLICE( tmp_slice_source_3, tmp_slice_lower_2, tmp_slice_upper_2 );
    Py_DECREF( tmp_slice_lower_2 );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1463;
        goto try_except_handler_2;
    }
    tmp_compare_right_3 = var_double_cons;

    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_3 );

        exception_lineno = 1463;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_left_3 );
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_9 = const_unicode_empty;
    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_join );
    assert( tmp_called_name_4 != NULL );
    tmp_args_element_name_6 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = -4;
    tmp_slice_source_4 = var_r1;

    tmp_tuple_element_2 = LOOKUP_INDEX_SLICE( tmp_slice_source_4, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_6 );

        exception_lineno = 1464;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_6, 0, tmp_tuple_element_2 );
    tmp_subscribed_name_2 = var_r1;

    tmp_subscript_name_2 = const_int_neg_3;
    tmp_tuple_element_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_6 );

        exception_lineno = 1464;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_6, 1, tmp_tuple_element_2 );
    frame_function->f_lineno = 1464;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1464;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_7;
        Py_DECREF( old );
    }

    branch_no_4:;
    goto loop_end_1;
    branch_no_3:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1459;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    branch_no_2:;
    tmp_source_name_10 = par_self;

    tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__HungarianStemmer__step2_suffixes );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1468;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1468;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_8;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1468;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    tmp_assign_source_10 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_10;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_2 = par_word;

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1469;
        goto try_except_handler_3;
    }

    tmp_args_element_name_7 = var_suffix;

    frame_function->f_lineno = 1469;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_cond_value_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1469;
        goto try_except_handler_3;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 1469;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_called_instance_3 = var_r1;

    if ( tmp_called_instance_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1470;
        goto try_except_handler_3;
    }

    tmp_args_element_name_8 = var_suffix;

    frame_function->f_lineno = 1470;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_cond_value_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1470;
        goto try_except_handler_3;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 1470;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_slice_source_5 = par_word;

    if ( tmp_slice_source_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1471;
        goto try_except_handler_3;
    }

    tmp_len_arg_3 = var_suffix;

    tmp_operand_name_1 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1471;
        goto try_except_handler_3;
    }
    tmp_slice_upper_3 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_slice_upper_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1471;
        goto try_except_handler_3;
    }
    tmp_assign_source_11 = LOOKUP_SLICE( tmp_slice_source_5, Py_None, tmp_slice_upper_3 );
    Py_DECREF( tmp_slice_upper_3 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1471;
        goto try_except_handler_3;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    tmp_slice_source_6 = var_r1;

    if ( tmp_slice_source_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1472;
        goto try_except_handler_3;
    }

    tmp_len_arg_4 = var_suffix;

    tmp_operand_name_2 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1472;
        goto try_except_handler_3;
    }
    tmp_slice_upper_4 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_slice_upper_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1472;
        goto try_except_handler_3;
    }
    tmp_assign_source_12 = LOOKUP_SLICE( tmp_slice_source_6, Py_None, tmp_slice_upper_4 );
    Py_DECREF( tmp_slice_upper_4 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1472;
        goto try_except_handler_3;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_12;
        Py_XDECREF( old );
    }

    tmp_called_instance_4 = var_r1;

    frame_function->f_lineno = 1474;
    tmp_cond_value_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_digest_00029bab94d4fae3bad9b98113cef03c_tuple, 0 ) );

    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1474;
        goto try_except_handler_3;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        exception_lineno = 1474;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_source_name_11 = const_unicode_empty;
    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_join );
    assert( tmp_called_name_5 != NULL );
    tmp_args_element_name_9 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -1;
    tmp_slice_source_7 = par_word;

    tmp_tuple_element_3 = LOOKUP_INDEX_SLICE( tmp_slice_source_7, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 1475;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_9, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = const_unicode_plain_a;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_element_name_9, 1, tmp_tuple_element_3 );
    frame_function->f_lineno = 1475;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_assign_source_13 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1475;
        goto try_except_handler_3;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_13;
        Py_DECREF( old );
    }

    tmp_source_name_12 = const_unicode_empty;
    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_join );
    assert( tmp_called_name_6 != NULL );
    tmp_args_element_name_10 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = -1;
    tmp_slice_source_8 = var_r1;

    tmp_tuple_element_4 = LOOKUP_INDEX_SLICE( tmp_slice_source_8, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 1476;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_10, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_unicode_plain_a;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_element_name_10, 1, tmp_tuple_element_4 );
    frame_function->f_lineno = 1476;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_assign_source_14 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1476;
        goto try_except_handler_3;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_14;
        Py_DECREF( old );
    }

    goto branch_end_7;
    branch_no_7:;
    tmp_called_instance_5 = var_r1;

    frame_function->f_lineno = 1478;
    tmp_cond_value_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_digest_bacc7c1e69811c177681ce974f1a7873_tuple, 0 ) );

    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1478;
        goto try_except_handler_3;
    }
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        exception_lineno = 1478;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_source_name_13 = const_unicode_empty;
    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_join );
    assert( tmp_called_name_7 != NULL );
    tmp_args_element_name_11 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = -1;
    tmp_slice_source_9 = par_word;

    tmp_tuple_element_5 = LOOKUP_INDEX_SLICE( tmp_slice_source_9, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 1479;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_11, 0, tmp_tuple_element_5 );
    tmp_tuple_element_5 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_args_element_name_11, 1, tmp_tuple_element_5 );
    frame_function->f_lineno = 1479;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_assign_source_15 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1479;
        goto try_except_handler_3;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_15;
        Py_DECREF( old );
    }

    tmp_source_name_14 = const_unicode_empty;
    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_join );
    assert( tmp_called_name_8 != NULL );
    tmp_args_element_name_12 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_6 = 0;
    tmp_slice_index_upper_6 = -1;
    tmp_slice_source_10 = var_r1;

    tmp_tuple_element_6 = LOOKUP_INDEX_SLICE( tmp_slice_source_10, tmp_sliceslicedel_index_lower_6, tmp_slice_index_upper_6 );
    if ( tmp_tuple_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_12 );

        exception_lineno = 1480;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_12, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_args_element_name_12, 1, tmp_tuple_element_6 );
    frame_function->f_lineno = 1480;
    {
        PyObject *call_args[] = { tmp_args_element_name_12 };
        tmp_assign_source_16 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_element_name_12 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1480;
        goto try_except_handler_3;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_16;
        Py_DECREF( old );
    }

    branch_no_8:;
    branch_end_7:;
    branch_no_6:;
    goto loop_end_2;
    branch_no_5:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1468;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_source_name_15 = par_self;

    tmp_iter_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain__HungarianStemmer__step3_suffixes );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1484;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_17 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1484;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_17;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_18 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_18 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1484;
            goto try_except_handler_4;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_18;
        Py_XDECREF( old );
    }

    tmp_assign_source_19 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_19;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_6 = var_r1;

    if ( tmp_called_instance_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1485;
        goto try_except_handler_4;
    }

    tmp_args_element_name_13 = var_suffix;

    frame_function->f_lineno = 1485;
    {
        PyObject *call_args[] = { tmp_args_element_name_13 };
        tmp_cond_value_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1485;
        goto try_except_handler_4;
    }
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        exception_lineno = 1485;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_compare_left_4 = var_suffix;

    tmp_compare_right_4 = const_unicode_digest_953d89042a50992a94a2c67896f83479;
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1486;
        goto try_except_handler_4;
    }
    if ( tmp_cmp_Eq_3 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_source_name_16 = const_unicode_empty;
    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_join );
    assert( tmp_called_name_9 != NULL );
    tmp_args_element_name_14 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_7 = 0;
    tmp_slice_index_upper_7 = -2;
    tmp_slice_source_11 = par_word;

    if ( tmp_slice_source_11 == NULL )
    {
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_14 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1487;
        goto try_except_handler_4;
    }

    tmp_tuple_element_7 = LOOKUP_INDEX_SLICE( tmp_slice_source_11, tmp_sliceslicedel_index_lower_7, tmp_slice_index_upper_7 );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 1487;
        goto try_except_handler_4;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_14, 0, tmp_tuple_element_7 );
    tmp_tuple_element_7 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_args_element_name_14, 1, tmp_tuple_element_7 );
    frame_function->f_lineno = 1487;
    {
        PyObject *call_args[] = { tmp_args_element_name_14 };
        tmp_assign_source_20 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
    }

    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_14 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1487;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_20;
        Py_XDECREF( old );
    }

    tmp_source_name_17 = const_unicode_empty;
    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_join );
    assert( tmp_called_name_10 != NULL );
    tmp_args_element_name_15 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_8 = 0;
    tmp_slice_index_upper_8 = -2;
    tmp_slice_source_12 = var_r1;

    if ( tmp_slice_source_12 == NULL )
    {
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_args_element_name_15 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1488;
        goto try_except_handler_4;
    }

    tmp_tuple_element_8 = LOOKUP_INDEX_SLICE( tmp_slice_source_12, tmp_sliceslicedel_index_lower_8, tmp_slice_index_upper_8 );
    if ( tmp_tuple_element_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_args_element_name_15 );

        exception_lineno = 1488;
        goto try_except_handler_4;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_15, 0, tmp_tuple_element_8 );
    tmp_tuple_element_8 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_args_element_name_15, 1, tmp_tuple_element_8 );
    frame_function->f_lineno = 1488;
    {
        PyObject *call_args[] = { tmp_args_element_name_15 };
        tmp_assign_source_21 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
    }

    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1488;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_21;
        Py_XDECREF( old );
    }

    goto branch_end_10;
    branch_no_10:;
    tmp_source_name_18 = const_unicode_empty;
    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_join );
    assert( tmp_called_name_11 != NULL );
    tmp_args_element_name_16 = PyTuple_New( 2 );
    tmp_slice_source_13 = par_word;

    if ( tmp_slice_source_13 == NULL )
    {
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_16 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1490;
        goto try_except_handler_4;
    }

    tmp_len_arg_5 = var_suffix;

    tmp_operand_name_3 = BUILTIN_LEN( tmp_len_arg_5 );
    if ( tmp_operand_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 1490;
        goto try_except_handler_4;
    }
    tmp_slice_upper_5 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_slice_upper_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 1490;
        goto try_except_handler_4;
    }
    tmp_tuple_element_9 = LOOKUP_SLICE( tmp_slice_source_13, Py_None, tmp_slice_upper_5 );
    Py_DECREF( tmp_slice_upper_5 );
    if ( tmp_tuple_element_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 1490;
        goto try_except_handler_4;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_16, 0, tmp_tuple_element_9 );
    tmp_tuple_element_9 = const_unicode_plain_a;
    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_args_element_name_16, 1, tmp_tuple_element_9 );
    frame_function->f_lineno = 1490;
    {
        PyObject *call_args[] = { tmp_args_element_name_16 };
        tmp_assign_source_22 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
    }

    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_16 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1490;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_22;
        Py_XDECREF( old );
    }

    tmp_source_name_19 = const_unicode_empty;
    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_join );
    assert( tmp_called_name_12 != NULL );
    tmp_args_element_name_17 = PyTuple_New( 2 );
    tmp_slice_source_14 = var_r1;

    if ( tmp_slice_source_14 == NULL )
    {
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_args_element_name_17 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1491;
        goto try_except_handler_4;
    }

    tmp_len_arg_6 = var_suffix;

    tmp_operand_name_4 = BUILTIN_LEN( tmp_len_arg_6 );
    if ( tmp_operand_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_args_element_name_17 );

        exception_lineno = 1491;
        goto try_except_handler_4;
    }
    tmp_slice_upper_6 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_4 );
    Py_DECREF( tmp_operand_name_4 );
    if ( tmp_slice_upper_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_args_element_name_17 );

        exception_lineno = 1491;
        goto try_except_handler_4;
    }
    tmp_tuple_element_10 = LOOKUP_SLICE( tmp_slice_source_14, Py_None, tmp_slice_upper_6 );
    Py_DECREF( tmp_slice_upper_6 );
    if ( tmp_tuple_element_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_args_element_name_17 );

        exception_lineno = 1491;
        goto try_except_handler_4;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_17, 0, tmp_tuple_element_10 );
    tmp_tuple_element_10 = const_unicode_plain_a;
    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_args_element_name_17, 1, tmp_tuple_element_10 );
    frame_function->f_lineno = 1491;
    {
        PyObject *call_args[] = { tmp_args_element_name_17 };
        tmp_assign_source_23 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
    }

    Py_DECREF( tmp_called_name_12 );
    Py_DECREF( tmp_args_element_name_17 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1491;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_23;
        Py_XDECREF( old );
    }

    branch_end_10:;
    goto loop_end_3;
    branch_no_9:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1484;
        goto try_except_handler_4;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_source_name_20 = par_self;

    tmp_iter_arg_4 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain__HungarianStemmer__step4_suffixes );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1495;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_24 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1495;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator == NULL );
    tmp_for_loop_4__for_iterator = tmp_assign_source_24;

    // Tried code:
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    tmp_assign_source_25 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_25 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1495;
            goto try_except_handler_5;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_25;
        Py_XDECREF( old );
    }

    tmp_assign_source_26 = tmp_for_loop_4__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_26;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_7 = var_r1;

    if ( tmp_called_instance_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1496;
        goto try_except_handler_5;
    }

    tmp_args_element_name_18 = var_suffix;

    frame_function->f_lineno = 1496;
    {
        PyObject *call_args[] = { tmp_args_element_name_18 };
        tmp_cond_value_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1496;
        goto try_except_handler_5;
    }
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        exception_lineno = 1496;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_compare_left_5 = var_suffix;

    tmp_compare_right_5 = const_unicode_digest_bfb47e73b9df75847d1d3fa376c4e532;
    tmp_cmp_Eq_4 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_Eq_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1497;
        goto try_except_handler_5;
    }
    if ( tmp_cmp_Eq_4 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_source_name_21 = const_unicode_empty;
    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_join );
    assert( tmp_called_name_13 != NULL );
    tmp_args_element_name_19 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_9 = 0;
    tmp_slice_index_upper_9 = -5;
    tmp_slice_source_15 = par_word;

    if ( tmp_slice_source_15 == NULL )
    {
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_19 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1498;
        goto try_except_handler_5;
    }

    tmp_tuple_element_11 = LOOKUP_INDEX_SLICE( tmp_slice_source_15, tmp_sliceslicedel_index_lower_9, tmp_slice_index_upper_9 );
    if ( tmp_tuple_element_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 1498;
        goto try_except_handler_5;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_19, 0, tmp_tuple_element_11 );
    tmp_tuple_element_11 = const_unicode_plain_a;
    Py_INCREF( tmp_tuple_element_11 );
    PyTuple_SET_ITEM( tmp_args_element_name_19, 1, tmp_tuple_element_11 );
    frame_function->f_lineno = 1498;
    {
        PyObject *call_args[] = { tmp_args_element_name_19 };
        tmp_assign_source_27 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, call_args );
    }

    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_args_element_name_19 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1498;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_27;
        Py_XDECREF( old );
    }

    tmp_source_name_22 = const_unicode_empty;
    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_join );
    assert( tmp_called_name_14 != NULL );
    tmp_args_element_name_20 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_10 = 0;
    tmp_slice_index_upper_10 = -5;
    tmp_slice_source_16 = var_r1;

    if ( tmp_slice_source_16 == NULL )
    {
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_args_element_name_20 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1499;
        goto try_except_handler_5;
    }

    tmp_tuple_element_12 = LOOKUP_INDEX_SLICE( tmp_slice_source_16, tmp_sliceslicedel_index_lower_10, tmp_slice_index_upper_10 );
    if ( tmp_tuple_element_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_args_element_name_20 );

        exception_lineno = 1499;
        goto try_except_handler_5;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_20, 0, tmp_tuple_element_12 );
    tmp_tuple_element_12 = const_unicode_plain_a;
    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_args_element_name_20, 1, tmp_tuple_element_12 );
    frame_function->f_lineno = 1499;
    {
        PyObject *call_args[] = { tmp_args_element_name_20 };
        tmp_assign_source_28 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, call_args );
    }

    Py_DECREF( tmp_called_name_14 );
    Py_DECREF( tmp_args_element_name_20 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1499;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_28;
        Py_XDECREF( old );
    }

    goto branch_end_12;
    branch_no_12:;
    tmp_compare_left_6 = var_suffix;

    tmp_compare_right_6 = const_unicode_digest_7dc95b8a3411ea2e94cce2c3fb544c6b;
    tmp_cmp_Eq_5 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_cmp_Eq_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1501;
        goto try_except_handler_5;
    }
    if ( tmp_cmp_Eq_5 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_source_name_23 = const_unicode_empty;
    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_join );
    assert( tmp_called_name_15 != NULL );
    tmp_args_element_name_21 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_11 = 0;
    tmp_slice_index_upper_11 = -5;
    tmp_slice_source_17 = par_word;

    if ( tmp_slice_source_17 == NULL )
    {
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_21 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1502;
        goto try_except_handler_5;
    }

    tmp_tuple_element_13 = LOOKUP_INDEX_SLICE( tmp_slice_source_17, tmp_sliceslicedel_index_lower_11, tmp_slice_index_upper_11 );
    if ( tmp_tuple_element_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_21 );

        exception_lineno = 1502;
        goto try_except_handler_5;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_21, 0, tmp_tuple_element_13 );
    tmp_tuple_element_13 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_13 );
    PyTuple_SET_ITEM( tmp_args_element_name_21, 1, tmp_tuple_element_13 );
    frame_function->f_lineno = 1502;
    {
        PyObject *call_args[] = { tmp_args_element_name_21 };
        tmp_assign_source_29 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
    }

    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_args_element_name_21 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1502;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_29;
        Py_XDECREF( old );
    }

    tmp_source_name_24 = const_unicode_empty;
    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_join );
    assert( tmp_called_name_16 != NULL );
    tmp_args_element_name_22 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_12 = 0;
    tmp_slice_index_upper_12 = -5;
    tmp_slice_source_18 = var_r1;

    if ( tmp_slice_source_18 == NULL )
    {
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_args_element_name_22 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1503;
        goto try_except_handler_5;
    }

    tmp_tuple_element_14 = LOOKUP_INDEX_SLICE( tmp_slice_source_18, tmp_sliceslicedel_index_lower_12, tmp_slice_index_upper_12 );
    if ( tmp_tuple_element_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 1503;
        goto try_except_handler_5;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_22, 0, tmp_tuple_element_14 );
    tmp_tuple_element_14 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_args_element_name_22, 1, tmp_tuple_element_14 );
    frame_function->f_lineno = 1503;
    {
        PyObject *call_args[] = { tmp_args_element_name_22 };
        tmp_assign_source_30 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, call_args );
    }

    Py_DECREF( tmp_called_name_16 );
    Py_DECREF( tmp_args_element_name_22 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1503;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_30;
        Py_XDECREF( old );
    }

    goto branch_end_13;
    branch_no_13:;
    tmp_slice_source_19 = par_word;

    if ( tmp_slice_source_19 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1505;
        goto try_except_handler_5;
    }

    tmp_len_arg_7 = var_suffix;

    tmp_operand_name_5 = BUILTIN_LEN( tmp_len_arg_7 );
    if ( tmp_operand_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1505;
        goto try_except_handler_5;
    }
    tmp_slice_upper_7 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_5 );
    Py_DECREF( tmp_operand_name_5 );
    if ( tmp_slice_upper_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1505;
        goto try_except_handler_5;
    }
    tmp_assign_source_31 = LOOKUP_SLICE( tmp_slice_source_19, Py_None, tmp_slice_upper_7 );
    Py_DECREF( tmp_slice_upper_7 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1505;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_31;
        Py_XDECREF( old );
    }

    tmp_slice_source_20 = var_r1;

    if ( tmp_slice_source_20 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1506;
        goto try_except_handler_5;
    }

    tmp_len_arg_8 = var_suffix;

    tmp_operand_name_6 = BUILTIN_LEN( tmp_len_arg_8 );
    if ( tmp_operand_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1506;
        goto try_except_handler_5;
    }
    tmp_slice_upper_8 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_6 );
    Py_DECREF( tmp_operand_name_6 );
    if ( tmp_slice_upper_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1506;
        goto try_except_handler_5;
    }
    tmp_assign_source_32 = LOOKUP_SLICE( tmp_slice_source_20, Py_None, tmp_slice_upper_8 );
    Py_DECREF( tmp_slice_upper_8 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1506;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_32;
        Py_XDECREF( old );
    }

    branch_end_13:;
    branch_end_12:;
    goto loop_end_4;
    branch_no_11:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1495;
        goto try_except_handler_5;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    tmp_source_name_25 = par_self;

    tmp_iter_arg_5 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain__HungarianStemmer__step5_suffixes );
    if ( tmp_iter_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1510;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_33 = MAKE_ITERATOR( tmp_iter_arg_5 );
    Py_DECREF( tmp_iter_arg_5 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1510;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_5__for_iterator == NULL );
    tmp_for_loop_5__for_iterator = tmp_assign_source_33;

    // Tried code:
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator;

    tmp_assign_source_34 = ITERATOR_NEXT( tmp_next_source_5 );
    if ( tmp_assign_source_34 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_5;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1510;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_for_loop_5__iter_value;
        tmp_for_loop_5__iter_value = tmp_assign_source_34;
        Py_XDECREF( old );
    }

    tmp_assign_source_35 = tmp_for_loop_5__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_35;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_8 = var_r1;

    if ( tmp_called_instance_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1511;
        goto try_except_handler_6;
    }

    tmp_args_element_name_23 = var_suffix;

    frame_function->f_lineno = 1511;
    {
        PyObject *call_args[] = { tmp_args_element_name_23 };
        tmp_cond_value_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1511;
        goto try_except_handler_6;
    }
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        exception_lineno = 1511;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_source_name_26 = par_self;

    tmp_iter_arg_6 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain__HungarianStemmer__double_consonants );
    if ( tmp_iter_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1512;
        goto try_except_handler_6;
    }
    tmp_assign_source_36 = MAKE_ITERATOR( tmp_iter_arg_6 );
    Py_DECREF( tmp_iter_arg_6 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1512;
        goto try_except_handler_6;
    }
    {
        PyObject *old = tmp_for_loop_6__for_iterator;
        tmp_for_loop_6__for_iterator = tmp_assign_source_36;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_6:;
    tmp_next_source_6 = tmp_for_loop_6__for_iterator;

    tmp_assign_source_37 = ITERATOR_NEXT( tmp_next_source_6 );
    if ( tmp_assign_source_37 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_6;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1512;
            goto try_except_handler_7;
        }
    }

    {
        PyObject *old = tmp_for_loop_6__iter_value;
        tmp_for_loop_6__iter_value = tmp_assign_source_37;
        Py_XDECREF( old );
    }

    tmp_assign_source_38 = tmp_for_loop_6__iter_value;

    {
        PyObject *old = var_double_cons;
        var_double_cons = tmp_assign_source_38;
        Py_INCREF( var_double_cons );
        Py_XDECREF( old );
    }

    tmp_slice_source_21 = par_word;

    if ( tmp_slice_source_21 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1513;
        goto try_except_handler_7;
    }

    tmp_left_name_3 = const_int_neg_1;
    tmp_len_arg_9 = var_double_cons;

    tmp_right_name_3 = BUILTIN_LEN( tmp_len_arg_9 );
    if ( tmp_right_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1513;
        goto try_except_handler_7;
    }
    tmp_slice_lower_3 = BINARY_OPERATION_SUB( tmp_left_name_3, tmp_right_name_3 );
    Py_DECREF( tmp_right_name_3 );
    if ( tmp_slice_lower_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1513;
        goto try_except_handler_7;
    }
    tmp_slice_upper_9 = const_int_neg_1;
    tmp_compare_left_7 = LOOKUP_SLICE( tmp_slice_source_21, tmp_slice_lower_3, tmp_slice_upper_9 );
    Py_DECREF( tmp_slice_lower_3 );
    if ( tmp_compare_left_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1513;
        goto try_except_handler_7;
    }
    tmp_compare_right_7 = var_double_cons;

    tmp_cmp_Eq_6 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_cmp_Eq_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_7 );

        exception_lineno = 1513;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_compare_left_7 );
    if ( tmp_cmp_Eq_6 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_source_name_27 = const_unicode_empty;
    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_join );
    assert( tmp_called_name_17 != NULL );
    tmp_args_element_name_24 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_13 = 0;
    tmp_slice_index_upper_13 = -3;
    tmp_slice_source_22 = par_word;

    if ( tmp_slice_source_22 == NULL )
    {
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_24 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1514;
        goto try_except_handler_7;
    }

    tmp_tuple_element_15 = LOOKUP_INDEX_SLICE( tmp_slice_source_22, tmp_sliceslicedel_index_lower_13, tmp_slice_index_upper_13 );
    if ( tmp_tuple_element_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_24 );

        exception_lineno = 1514;
        goto try_except_handler_7;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_24, 0, tmp_tuple_element_15 );
    tmp_subscribed_name_3 = par_word;

    if ( tmp_subscribed_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_24 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1514;
        goto try_except_handler_7;
    }

    tmp_subscript_name_3 = const_int_neg_2;
    tmp_tuple_element_15 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_tuple_element_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_24 );

        exception_lineno = 1514;
        goto try_except_handler_7;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_24, 1, tmp_tuple_element_15 );
    frame_function->f_lineno = 1514;
    {
        PyObject *call_args[] = { tmp_args_element_name_24 };
        tmp_assign_source_39 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_17, call_args );
    }

    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_args_element_name_24 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1514;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_39;
        Py_XDECREF( old );
    }

    tmp_slice_source_23 = var_r1;

    if ( tmp_slice_source_23 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1516;
        goto try_except_handler_7;
    }

    tmp_left_name_4 = const_int_neg_1;
    tmp_len_arg_10 = var_double_cons;

    tmp_right_name_4 = BUILTIN_LEN( tmp_len_arg_10 );
    if ( tmp_right_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1516;
        goto try_except_handler_7;
    }
    tmp_slice_lower_4 = BINARY_OPERATION_SUB( tmp_left_name_4, tmp_right_name_4 );
    Py_DECREF( tmp_right_name_4 );
    if ( tmp_slice_lower_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1516;
        goto try_except_handler_7;
    }
    tmp_slice_upper_10 = const_int_neg_1;
    tmp_compare_left_8 = LOOKUP_SLICE( tmp_slice_source_23, tmp_slice_lower_4, tmp_slice_upper_10 );
    Py_DECREF( tmp_slice_lower_4 );
    if ( tmp_compare_left_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1516;
        goto try_except_handler_7;
    }
    tmp_compare_right_8 = var_double_cons;

    tmp_cmp_Eq_7 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_8, tmp_compare_right_8 );
    if ( tmp_cmp_Eq_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_8 );

        exception_lineno = 1516;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_compare_left_8 );
    if ( tmp_cmp_Eq_7 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_source_name_28 = const_unicode_empty;
    tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_join );
    assert( tmp_called_name_18 != NULL );
    tmp_args_element_name_25 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_14 = 0;
    tmp_slice_index_upper_14 = -3;
    tmp_slice_source_24 = var_r1;

    if ( tmp_slice_source_24 == NULL )
    {
        Py_DECREF( tmp_called_name_18 );
        Py_DECREF( tmp_args_element_name_25 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1517;
        goto try_except_handler_7;
    }

    tmp_tuple_element_16 = LOOKUP_INDEX_SLICE( tmp_slice_source_24, tmp_sliceslicedel_index_lower_14, tmp_slice_index_upper_14 );
    if ( tmp_tuple_element_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_18 );
        Py_DECREF( tmp_args_element_name_25 );

        exception_lineno = 1517;
        goto try_except_handler_7;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_25, 0, tmp_tuple_element_16 );
    tmp_subscribed_name_4 = var_r1;

    if ( tmp_subscribed_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_18 );
        Py_DECREF( tmp_args_element_name_25 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1517;
        goto try_except_handler_7;
    }

    tmp_subscript_name_4 = const_int_neg_2;
    tmp_tuple_element_16 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_tuple_element_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_18 );
        Py_DECREF( tmp_args_element_name_25 );

        exception_lineno = 1517;
        goto try_except_handler_7;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_25, 1, tmp_tuple_element_16 );
    frame_function->f_lineno = 1517;
    {
        PyObject *call_args[] = { tmp_args_element_name_25 };
        tmp_assign_source_40 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_18, call_args );
    }

    Py_DECREF( tmp_called_name_18 );
    Py_DECREF( tmp_args_element_name_25 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1517;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_40;
        Py_XDECREF( old );
    }

    branch_no_16:;
    goto loop_end_6;
    branch_no_15:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1512;
        goto try_except_handler_7;
    }
    goto loop_start_6;
    loop_end_6:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_6;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    branch_no_14:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1510;
        goto try_except_handler_6;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    tmp_source_name_29 = par_self;

    tmp_iter_arg_7 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain__HungarianStemmer__step6_suffixes );
    if ( tmp_iter_arg_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1521;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_41 = MAKE_ITERATOR( tmp_iter_arg_7 );
    Py_DECREF( tmp_iter_arg_7 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1521;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_7__for_iterator == NULL );
    tmp_for_loop_7__for_iterator = tmp_assign_source_41;

    // Tried code:
    loop_start_7:;
    tmp_next_source_7 = tmp_for_loop_7__for_iterator;

    tmp_assign_source_42 = ITERATOR_NEXT( tmp_next_source_7 );
    if ( tmp_assign_source_42 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_7;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1521;
            goto try_except_handler_8;
        }
    }

    {
        PyObject *old = tmp_for_loop_7__iter_value;
        tmp_for_loop_7__iter_value = tmp_assign_source_42;
        Py_XDECREF( old );
    }

    tmp_assign_source_43 = tmp_for_loop_7__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_43;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_9 = var_r1;

    if ( tmp_called_instance_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1522;
        goto try_except_handler_8;
    }

    tmp_args_element_name_26 = var_suffix;

    frame_function->f_lineno = 1522;
    {
        PyObject *call_args[] = { tmp_args_element_name_26 };
        tmp_cond_value_9 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1522;
        goto try_except_handler_8;
    }
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        exception_lineno = 1522;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_compare_left_9 = var_suffix;

    tmp_compare_right_9 = const_tuple_b75e62f9a467b516f0b37cf30193397d_tuple;
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_source_name_30 = const_unicode_empty;
    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_join );
    assert( tmp_called_name_19 != NULL );
    tmp_args_element_name_27 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_15 = 0;
    tmp_slice_index_upper_15 = -3;
    tmp_slice_source_25 = par_word;

    if ( tmp_slice_source_25 == NULL )
    {
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_args_element_name_27 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1524;
        goto try_except_handler_8;
    }

    tmp_tuple_element_17 = LOOKUP_INDEX_SLICE( tmp_slice_source_25, tmp_sliceslicedel_index_lower_15, tmp_slice_index_upper_15 );
    if ( tmp_tuple_element_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_args_element_name_27 );

        exception_lineno = 1524;
        goto try_except_handler_8;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_27, 0, tmp_tuple_element_17 );
    tmp_tuple_element_17 = const_unicode_plain_a;
    Py_INCREF( tmp_tuple_element_17 );
    PyTuple_SET_ITEM( tmp_args_element_name_27, 1, tmp_tuple_element_17 );
    frame_function->f_lineno = 1524;
    {
        PyObject *call_args[] = { tmp_args_element_name_27 };
        tmp_assign_source_44 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_19, call_args );
    }

    Py_DECREF( tmp_called_name_19 );
    Py_DECREF( tmp_args_element_name_27 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1524;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_44;
        Py_XDECREF( old );
    }

    tmp_source_name_31 = const_unicode_empty;
    tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_join );
    assert( tmp_called_name_20 != NULL );
    tmp_args_element_name_28 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_16 = 0;
    tmp_slice_index_upper_16 = -3;
    tmp_slice_source_26 = var_r1;

    if ( tmp_slice_source_26 == NULL )
    {
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_args_element_name_28 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1525;
        goto try_except_handler_8;
    }

    tmp_tuple_element_18 = LOOKUP_INDEX_SLICE( tmp_slice_source_26, tmp_sliceslicedel_index_lower_16, tmp_slice_index_upper_16 );
    if ( tmp_tuple_element_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_args_element_name_28 );

        exception_lineno = 1525;
        goto try_except_handler_8;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_28, 0, tmp_tuple_element_18 );
    tmp_tuple_element_18 = const_unicode_plain_a;
    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_args_element_name_28, 1, tmp_tuple_element_18 );
    frame_function->f_lineno = 1525;
    {
        PyObject *call_args[] = { tmp_args_element_name_28 };
        tmp_assign_source_45 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_20, call_args );
    }

    Py_DECREF( tmp_called_name_20 );
    Py_DECREF( tmp_args_element_name_28 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1525;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_45;
        Py_XDECREF( old );
    }

    goto branch_end_18;
    branch_no_18:;
    tmp_compare_left_10 = var_suffix;

    tmp_compare_right_10 = const_tuple_266f845d872b4f41fb35a7b88deb91d1_tuple;
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_source_name_32 = const_unicode_empty;
    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_join );
    assert( tmp_called_name_21 != NULL );
    tmp_args_element_name_29 = PyTuple_New( 2 );
    tmp_slice_source_27 = par_word;

    if ( tmp_slice_source_27 == NULL )
    {
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_args_element_name_29 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1529;
        goto try_except_handler_8;
    }

    tmp_len_arg_11 = var_suffix;

    tmp_operand_name_7 = BUILTIN_LEN( tmp_len_arg_11 );
    if ( tmp_operand_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_args_element_name_29 );

        exception_lineno = 1529;
        goto try_except_handler_8;
    }
    tmp_slice_upper_11 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_7 );
    Py_DECREF( tmp_operand_name_7 );
    if ( tmp_slice_upper_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_args_element_name_29 );

        exception_lineno = 1529;
        goto try_except_handler_8;
    }
    tmp_tuple_element_19 = LOOKUP_SLICE( tmp_slice_source_27, Py_None, tmp_slice_upper_11 );
    Py_DECREF( tmp_slice_upper_11 );
    if ( tmp_tuple_element_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_args_element_name_29 );

        exception_lineno = 1529;
        goto try_except_handler_8;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_29, 0, tmp_tuple_element_19 );
    tmp_tuple_element_19 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_19 );
    PyTuple_SET_ITEM( tmp_args_element_name_29, 1, tmp_tuple_element_19 );
    frame_function->f_lineno = 1529;
    {
        PyObject *call_args[] = { tmp_args_element_name_29 };
        tmp_assign_source_46 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_21, call_args );
    }

    Py_DECREF( tmp_called_name_21 );
    Py_DECREF( tmp_args_element_name_29 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1529;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_46;
        Py_XDECREF( old );
    }

    tmp_source_name_33 = const_unicode_empty;
    tmp_called_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_join );
    assert( tmp_called_name_22 != NULL );
    tmp_args_element_name_30 = PyTuple_New( 2 );
    tmp_slice_source_28 = var_r1;

    if ( tmp_slice_source_28 == NULL )
    {
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_args_element_name_30 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1530;
        goto try_except_handler_8;
    }

    tmp_len_arg_12 = var_suffix;

    tmp_operand_name_8 = BUILTIN_LEN( tmp_len_arg_12 );
    if ( tmp_operand_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_args_element_name_30 );

        exception_lineno = 1530;
        goto try_except_handler_8;
    }
    tmp_slice_upper_12 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_8 );
    Py_DECREF( tmp_operand_name_8 );
    if ( tmp_slice_upper_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_args_element_name_30 );

        exception_lineno = 1530;
        goto try_except_handler_8;
    }
    tmp_tuple_element_20 = LOOKUP_SLICE( tmp_slice_source_28, Py_None, tmp_slice_upper_12 );
    Py_DECREF( tmp_slice_upper_12 );
    if ( tmp_tuple_element_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_args_element_name_30 );

        exception_lineno = 1530;
        goto try_except_handler_8;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_30, 0, tmp_tuple_element_20 );
    tmp_tuple_element_20 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_args_element_name_30, 1, tmp_tuple_element_20 );
    frame_function->f_lineno = 1530;
    {
        PyObject *call_args[] = { tmp_args_element_name_30 };
        tmp_assign_source_47 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_22, call_args );
    }

    Py_DECREF( tmp_called_name_22 );
    Py_DECREF( tmp_args_element_name_30 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1530;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_47;
        Py_XDECREF( old );
    }

    goto branch_end_19;
    branch_no_19:;
    tmp_slice_source_29 = par_word;

    if ( tmp_slice_source_29 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1532;
        goto try_except_handler_8;
    }

    tmp_len_arg_13 = var_suffix;

    tmp_operand_name_9 = BUILTIN_LEN( tmp_len_arg_13 );
    if ( tmp_operand_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1532;
        goto try_except_handler_8;
    }
    tmp_slice_upper_13 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_9 );
    Py_DECREF( tmp_operand_name_9 );
    if ( tmp_slice_upper_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1532;
        goto try_except_handler_8;
    }
    tmp_assign_source_48 = LOOKUP_SLICE( tmp_slice_source_29, Py_None, tmp_slice_upper_13 );
    Py_DECREF( tmp_slice_upper_13 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1532;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_48;
        Py_XDECREF( old );
    }

    tmp_slice_source_30 = var_r1;

    if ( tmp_slice_source_30 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1533;
        goto try_except_handler_8;
    }

    tmp_len_arg_14 = var_suffix;

    tmp_operand_name_10 = BUILTIN_LEN( tmp_len_arg_14 );
    if ( tmp_operand_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1533;
        goto try_except_handler_8;
    }
    tmp_slice_upper_14 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_10 );
    Py_DECREF( tmp_operand_name_10 );
    if ( tmp_slice_upper_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1533;
        goto try_except_handler_8;
    }
    tmp_assign_source_49 = LOOKUP_SLICE( tmp_slice_source_30, Py_None, tmp_slice_upper_14 );
    Py_DECREF( tmp_slice_upper_14 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1533;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_49;
        Py_XDECREF( old );
    }

    branch_end_19:;
    branch_end_18:;
    goto loop_end_7;
    branch_no_17:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1521;
        goto try_except_handler_8;
    }
    goto loop_start_7;
    loop_end_7:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    tmp_source_name_34 = par_self;

    tmp_iter_arg_8 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain__HungarianStemmer__step7_suffixes );
    if ( tmp_iter_arg_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1537;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_50 = MAKE_ITERATOR( tmp_iter_arg_8 );
    Py_DECREF( tmp_iter_arg_8 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1537;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_8__for_iterator == NULL );
    tmp_for_loop_8__for_iterator = tmp_assign_source_50;

    // Tried code:
    loop_start_8:;
    tmp_next_source_8 = tmp_for_loop_8__for_iterator;

    tmp_assign_source_51 = ITERATOR_NEXT( tmp_next_source_8 );
    if ( tmp_assign_source_51 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_8;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1537;
            goto try_except_handler_9;
        }
    }

    {
        PyObject *old = tmp_for_loop_8__iter_value;
        tmp_for_loop_8__iter_value = tmp_assign_source_51;
        Py_XDECREF( old );
    }

    tmp_assign_source_52 = tmp_for_loop_8__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_52;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_10 = par_word;

    if ( tmp_called_instance_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1538;
        goto try_except_handler_9;
    }

    tmp_args_element_name_31 = var_suffix;

    frame_function->f_lineno = 1538;
    {
        PyObject *call_args[] = { tmp_args_element_name_31 };
        tmp_cond_value_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1538;
        goto try_except_handler_9;
    }
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        exception_lineno = 1538;
        goto try_except_handler_9;
    }
    Py_DECREF( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_called_instance_11 = var_r1;

    if ( tmp_called_instance_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1539;
        goto try_except_handler_9;
    }

    tmp_args_element_name_32 = var_suffix;

    frame_function->f_lineno = 1539;
    {
        PyObject *call_args[] = { tmp_args_element_name_32 };
        tmp_cond_value_11 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1539;
        goto try_except_handler_9;
    }
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_11 );

        exception_lineno = 1539;
        goto try_except_handler_9;
    }
    Py_DECREF( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_compare_left_11 = var_suffix;

    tmp_compare_right_11 = const_tuple_0483851c91d6f903d5f51b576c4e1458_tuple;
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_source_name_35 = const_unicode_empty;
    tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_join );
    assert( tmp_called_name_23 != NULL );
    tmp_args_element_name_33 = PyTuple_New( 2 );
    tmp_slice_source_31 = par_word;

    if ( tmp_slice_source_31 == NULL )
    {
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_args_element_name_33 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1542;
        goto try_except_handler_9;
    }

    tmp_len_arg_15 = var_suffix;

    tmp_operand_name_11 = BUILTIN_LEN( tmp_len_arg_15 );
    if ( tmp_operand_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_args_element_name_33 );

        exception_lineno = 1542;
        goto try_except_handler_9;
    }
    tmp_slice_upper_15 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_11 );
    Py_DECREF( tmp_operand_name_11 );
    if ( tmp_slice_upper_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_args_element_name_33 );

        exception_lineno = 1542;
        goto try_except_handler_9;
    }
    tmp_tuple_element_21 = LOOKUP_SLICE( tmp_slice_source_31, Py_None, tmp_slice_upper_15 );
    Py_DECREF( tmp_slice_upper_15 );
    if ( tmp_tuple_element_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_args_element_name_33 );

        exception_lineno = 1542;
        goto try_except_handler_9;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_33, 0, tmp_tuple_element_21 );
    tmp_tuple_element_21 = const_unicode_plain_a;
    Py_INCREF( tmp_tuple_element_21 );
    PyTuple_SET_ITEM( tmp_args_element_name_33, 1, tmp_tuple_element_21 );
    frame_function->f_lineno = 1542;
    {
        PyObject *call_args[] = { tmp_args_element_name_33 };
        tmp_assign_source_53 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_23, call_args );
    }

    Py_DECREF( tmp_called_name_23 );
    Py_DECREF( tmp_args_element_name_33 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1542;
        goto try_except_handler_9;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_53;
        Py_XDECREF( old );
    }

    tmp_source_name_36 = const_unicode_empty;
    tmp_called_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_join );
    assert( tmp_called_name_24 != NULL );
    tmp_args_element_name_34 = PyTuple_New( 2 );
    tmp_slice_source_32 = var_r1;

    if ( tmp_slice_source_32 == NULL )
    {
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_args_element_name_34 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1543;
        goto try_except_handler_9;
    }

    tmp_len_arg_16 = var_suffix;

    tmp_operand_name_12 = BUILTIN_LEN( tmp_len_arg_16 );
    if ( tmp_operand_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_args_element_name_34 );

        exception_lineno = 1543;
        goto try_except_handler_9;
    }
    tmp_slice_upper_16 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_12 );
    Py_DECREF( tmp_operand_name_12 );
    if ( tmp_slice_upper_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_args_element_name_34 );

        exception_lineno = 1543;
        goto try_except_handler_9;
    }
    tmp_tuple_element_22 = LOOKUP_SLICE( tmp_slice_source_32, Py_None, tmp_slice_upper_16 );
    Py_DECREF( tmp_slice_upper_16 );
    if ( tmp_tuple_element_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_args_element_name_34 );

        exception_lineno = 1543;
        goto try_except_handler_9;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_34, 0, tmp_tuple_element_22 );
    tmp_tuple_element_22 = const_unicode_plain_a;
    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_args_element_name_34, 1, tmp_tuple_element_22 );
    frame_function->f_lineno = 1543;
    {
        PyObject *call_args[] = { tmp_args_element_name_34 };
        tmp_assign_source_54 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_24, call_args );
    }

    Py_DECREF( tmp_called_name_24 );
    Py_DECREF( tmp_args_element_name_34 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1543;
        goto try_except_handler_9;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_54;
        Py_XDECREF( old );
    }

    goto branch_end_22;
    branch_no_22:;
    tmp_compare_left_12 = var_suffix;

    tmp_compare_right_12 = const_tuple_86e5eb77e1efe2c861d16de6e61a1b9f_tuple;
    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    assert( !(tmp_cmp_In_5 == -1) );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_source_name_37 = const_unicode_empty;
    tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_join );
    assert( tmp_called_name_25 != NULL );
    tmp_args_element_name_35 = PyTuple_New( 2 );
    tmp_slice_source_33 = par_word;

    if ( tmp_slice_source_33 == NULL )
    {
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_args_element_name_35 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1547;
        goto try_except_handler_9;
    }

    tmp_len_arg_17 = var_suffix;

    tmp_operand_name_13 = BUILTIN_LEN( tmp_len_arg_17 );
    if ( tmp_operand_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_args_element_name_35 );

        exception_lineno = 1547;
        goto try_except_handler_9;
    }
    tmp_slice_upper_17 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_13 );
    Py_DECREF( tmp_operand_name_13 );
    if ( tmp_slice_upper_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_args_element_name_35 );

        exception_lineno = 1547;
        goto try_except_handler_9;
    }
    tmp_tuple_element_23 = LOOKUP_SLICE( tmp_slice_source_33, Py_None, tmp_slice_upper_17 );
    Py_DECREF( tmp_slice_upper_17 );
    if ( tmp_tuple_element_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_args_element_name_35 );

        exception_lineno = 1547;
        goto try_except_handler_9;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_35, 0, tmp_tuple_element_23 );
    tmp_tuple_element_23 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_23 );
    PyTuple_SET_ITEM( tmp_args_element_name_35, 1, tmp_tuple_element_23 );
    frame_function->f_lineno = 1547;
    {
        PyObject *call_args[] = { tmp_args_element_name_35 };
        tmp_assign_source_55 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_25, call_args );
    }

    Py_DECREF( tmp_called_name_25 );
    Py_DECREF( tmp_args_element_name_35 );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1547;
        goto try_except_handler_9;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_55;
        Py_XDECREF( old );
    }

    tmp_source_name_38 = const_unicode_empty;
    tmp_called_name_26 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_join );
    assert( tmp_called_name_26 != NULL );
    tmp_args_element_name_36 = PyTuple_New( 2 );
    tmp_slice_source_34 = var_r1;

    if ( tmp_slice_source_34 == NULL )
    {
        Py_DECREF( tmp_called_name_26 );
        Py_DECREF( tmp_args_element_name_36 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1548;
        goto try_except_handler_9;
    }

    tmp_len_arg_18 = var_suffix;

    tmp_operand_name_14 = BUILTIN_LEN( tmp_len_arg_18 );
    if ( tmp_operand_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_26 );
        Py_DECREF( tmp_args_element_name_36 );

        exception_lineno = 1548;
        goto try_except_handler_9;
    }
    tmp_slice_upper_18 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_14 );
    Py_DECREF( tmp_operand_name_14 );
    if ( tmp_slice_upper_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_26 );
        Py_DECREF( tmp_args_element_name_36 );

        exception_lineno = 1548;
        goto try_except_handler_9;
    }
    tmp_tuple_element_24 = LOOKUP_SLICE( tmp_slice_source_34, Py_None, tmp_slice_upper_18 );
    Py_DECREF( tmp_slice_upper_18 );
    if ( tmp_tuple_element_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_26 );
        Py_DECREF( tmp_args_element_name_36 );

        exception_lineno = 1548;
        goto try_except_handler_9;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_36, 0, tmp_tuple_element_24 );
    tmp_tuple_element_24 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_24 );
    PyTuple_SET_ITEM( tmp_args_element_name_36, 1, tmp_tuple_element_24 );
    frame_function->f_lineno = 1548;
    {
        PyObject *call_args[] = { tmp_args_element_name_36 };
        tmp_assign_source_56 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_26, call_args );
    }

    Py_DECREF( tmp_called_name_26 );
    Py_DECREF( tmp_args_element_name_36 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1548;
        goto try_except_handler_9;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_56;
        Py_XDECREF( old );
    }

    goto branch_end_23;
    branch_no_23:;
    tmp_slice_source_35 = par_word;

    if ( tmp_slice_source_35 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1550;
        goto try_except_handler_9;
    }

    tmp_len_arg_19 = var_suffix;

    tmp_operand_name_15 = BUILTIN_LEN( tmp_len_arg_19 );
    if ( tmp_operand_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1550;
        goto try_except_handler_9;
    }
    tmp_slice_upper_19 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_15 );
    Py_DECREF( tmp_operand_name_15 );
    if ( tmp_slice_upper_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1550;
        goto try_except_handler_9;
    }
    tmp_assign_source_57 = LOOKUP_SLICE( tmp_slice_source_35, Py_None, tmp_slice_upper_19 );
    Py_DECREF( tmp_slice_upper_19 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1550;
        goto try_except_handler_9;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_57;
        Py_XDECREF( old );
    }

    tmp_slice_source_36 = var_r1;

    if ( tmp_slice_source_36 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1551;
        goto try_except_handler_9;
    }

    tmp_len_arg_20 = var_suffix;

    tmp_operand_name_16 = BUILTIN_LEN( tmp_len_arg_20 );
    if ( tmp_operand_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1551;
        goto try_except_handler_9;
    }
    tmp_slice_upper_20 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_16 );
    Py_DECREF( tmp_operand_name_16 );
    if ( tmp_slice_upper_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1551;
        goto try_except_handler_9;
    }
    tmp_assign_source_58 = LOOKUP_SLICE( tmp_slice_source_36, Py_None, tmp_slice_upper_20 );
    Py_DECREF( tmp_slice_upper_20 );
    if ( tmp_assign_source_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1551;
        goto try_except_handler_9;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_58;
        Py_XDECREF( old );
    }

    branch_end_23:;
    branch_end_22:;
    branch_no_21:;
    goto loop_end_8;
    branch_no_20:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1537;
        goto try_except_handler_9;
    }
    goto loop_start_8;
    loop_end_8:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_8__iter_value );
    tmp_for_loop_8__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_8__for_iterator );
    Py_DECREF( tmp_for_loop_8__for_iterator );
    tmp_for_loop_8__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    Py_XDECREF( tmp_for_loop_8__iter_value );
    tmp_for_loop_8__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_8__for_iterator );
    Py_DECREF( tmp_for_loop_8__for_iterator );
    tmp_for_loop_8__for_iterator = NULL;

    tmp_source_name_39 = par_self;

    tmp_iter_arg_9 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain__HungarianStemmer__step8_suffixes );
    if ( tmp_iter_arg_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1555;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_59 = MAKE_ITERATOR( tmp_iter_arg_9 );
    Py_DECREF( tmp_iter_arg_9 );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1555;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_9__for_iterator == NULL );
    tmp_for_loop_9__for_iterator = tmp_assign_source_59;

    // Tried code:
    loop_start_9:;
    tmp_next_source_9 = tmp_for_loop_9__for_iterator;

    tmp_assign_source_60 = ITERATOR_NEXT( tmp_next_source_9 );
    if ( tmp_assign_source_60 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_9;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1555;
            goto try_except_handler_10;
        }
    }

    {
        PyObject *old = tmp_for_loop_9__iter_value;
        tmp_for_loop_9__iter_value = tmp_assign_source_60;
        Py_XDECREF( old );
    }

    tmp_assign_source_61 = tmp_for_loop_9__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_61;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_12 = par_word;

    if ( tmp_called_instance_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1556;
        goto try_except_handler_10;
    }

    tmp_args_element_name_37 = var_suffix;

    frame_function->f_lineno = 1556;
    {
        PyObject *call_args[] = { tmp_args_element_name_37 };
        tmp_cond_value_12 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_12, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1556;
        goto try_except_handler_10;
    }
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_12 );

        exception_lineno = 1556;
        goto try_except_handler_10;
    }
    Py_DECREF( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == 1 )
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_called_instance_13 = var_r1;

    if ( tmp_called_instance_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1557;
        goto try_except_handler_10;
    }

    tmp_args_element_name_38 = var_suffix;

    frame_function->f_lineno = 1557;
    {
        PyObject *call_args[] = { tmp_args_element_name_38 };
        tmp_cond_value_13 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_13, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1557;
        goto try_except_handler_10;
    }
    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_13 );

        exception_lineno = 1557;
        goto try_except_handler_10;
    }
    Py_DECREF( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == 1 )
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    tmp_compare_left_13 = var_suffix;

    tmp_compare_right_13 = const_tuple_f34b893a7edb58b57f967a67af76ce1a_tuple;
    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_13, tmp_compare_left_13 );
    assert( !(tmp_cmp_In_6 == -1) );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto branch_yes_26;
    }
    else
    {
        goto branch_no_26;
    }
    branch_yes_26:;
    tmp_source_name_40 = const_unicode_empty;
    tmp_called_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_join );
    assert( tmp_called_name_27 != NULL );
    tmp_args_element_name_39 = PyTuple_New( 2 );
    tmp_slice_source_37 = par_word;

    if ( tmp_slice_source_37 == NULL )
    {
        Py_DECREF( tmp_called_name_27 );
        Py_DECREF( tmp_args_element_name_39 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1560;
        goto try_except_handler_10;
    }

    tmp_len_arg_21 = var_suffix;

    tmp_operand_name_17 = BUILTIN_LEN( tmp_len_arg_21 );
    if ( tmp_operand_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_27 );
        Py_DECREF( tmp_args_element_name_39 );

        exception_lineno = 1560;
        goto try_except_handler_10;
    }
    tmp_slice_upper_21 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_17 );
    Py_DECREF( tmp_operand_name_17 );
    if ( tmp_slice_upper_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_27 );
        Py_DECREF( tmp_args_element_name_39 );

        exception_lineno = 1560;
        goto try_except_handler_10;
    }
    tmp_tuple_element_25 = LOOKUP_SLICE( tmp_slice_source_37, Py_None, tmp_slice_upper_21 );
    Py_DECREF( tmp_slice_upper_21 );
    if ( tmp_tuple_element_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_27 );
        Py_DECREF( tmp_args_element_name_39 );

        exception_lineno = 1560;
        goto try_except_handler_10;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_39, 0, tmp_tuple_element_25 );
    tmp_tuple_element_25 = const_unicode_plain_a;
    Py_INCREF( tmp_tuple_element_25 );
    PyTuple_SET_ITEM( tmp_args_element_name_39, 1, tmp_tuple_element_25 );
    frame_function->f_lineno = 1560;
    {
        PyObject *call_args[] = { tmp_args_element_name_39 };
        tmp_assign_source_62 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_27, call_args );
    }

    Py_DECREF( tmp_called_name_27 );
    Py_DECREF( tmp_args_element_name_39 );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1560;
        goto try_except_handler_10;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_62;
        Py_XDECREF( old );
    }

    tmp_source_name_41 = const_unicode_empty;
    tmp_called_name_28 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_join );
    assert( tmp_called_name_28 != NULL );
    tmp_args_element_name_40 = PyTuple_New( 2 );
    tmp_slice_source_38 = var_r1;

    if ( tmp_slice_source_38 == NULL )
    {
        Py_DECREF( tmp_called_name_28 );
        Py_DECREF( tmp_args_element_name_40 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1561;
        goto try_except_handler_10;
    }

    tmp_len_arg_22 = var_suffix;

    tmp_operand_name_18 = BUILTIN_LEN( tmp_len_arg_22 );
    if ( tmp_operand_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_28 );
        Py_DECREF( tmp_args_element_name_40 );

        exception_lineno = 1561;
        goto try_except_handler_10;
    }
    tmp_slice_upper_22 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_18 );
    Py_DECREF( tmp_operand_name_18 );
    if ( tmp_slice_upper_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_28 );
        Py_DECREF( tmp_args_element_name_40 );

        exception_lineno = 1561;
        goto try_except_handler_10;
    }
    tmp_tuple_element_26 = LOOKUP_SLICE( tmp_slice_source_38, Py_None, tmp_slice_upper_22 );
    Py_DECREF( tmp_slice_upper_22 );
    if ( tmp_tuple_element_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_28 );
        Py_DECREF( tmp_args_element_name_40 );

        exception_lineno = 1561;
        goto try_except_handler_10;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_40, 0, tmp_tuple_element_26 );
    tmp_tuple_element_26 = const_unicode_plain_a;
    Py_INCREF( tmp_tuple_element_26 );
    PyTuple_SET_ITEM( tmp_args_element_name_40, 1, tmp_tuple_element_26 );
    frame_function->f_lineno = 1561;
    {
        PyObject *call_args[] = { tmp_args_element_name_40 };
        tmp_assign_source_63 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_28, call_args );
    }

    Py_DECREF( tmp_called_name_28 );
    Py_DECREF( tmp_args_element_name_40 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1561;
        goto try_except_handler_10;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_63;
        Py_XDECREF( old );
    }

    goto branch_end_26;
    branch_no_26:;
    tmp_compare_left_14 = var_suffix;

    tmp_compare_right_14 = const_tuple_99a0039f1c7114ab6c9055da7eed5ad0_tuple;
    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_14, tmp_compare_left_14 );
    assert( !(tmp_cmp_In_7 == -1) );
    if ( tmp_cmp_In_7 == 1 )
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_source_name_42 = const_unicode_empty;
    tmp_called_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_join );
    assert( tmp_called_name_29 != NULL );
    tmp_args_element_name_41 = PyTuple_New( 2 );
    tmp_slice_source_39 = par_word;

    if ( tmp_slice_source_39 == NULL )
    {
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_args_element_name_41 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1565;
        goto try_except_handler_10;
    }

    tmp_len_arg_23 = var_suffix;

    tmp_operand_name_19 = BUILTIN_LEN( tmp_len_arg_23 );
    if ( tmp_operand_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_args_element_name_41 );

        exception_lineno = 1565;
        goto try_except_handler_10;
    }
    tmp_slice_upper_23 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_19 );
    Py_DECREF( tmp_operand_name_19 );
    if ( tmp_slice_upper_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_args_element_name_41 );

        exception_lineno = 1565;
        goto try_except_handler_10;
    }
    tmp_tuple_element_27 = LOOKUP_SLICE( tmp_slice_source_39, Py_None, tmp_slice_upper_23 );
    Py_DECREF( tmp_slice_upper_23 );
    if ( tmp_tuple_element_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_args_element_name_41 );

        exception_lineno = 1565;
        goto try_except_handler_10;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_41, 0, tmp_tuple_element_27 );
    tmp_tuple_element_27 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_27 );
    PyTuple_SET_ITEM( tmp_args_element_name_41, 1, tmp_tuple_element_27 );
    frame_function->f_lineno = 1565;
    {
        PyObject *call_args[] = { tmp_args_element_name_41 };
        tmp_assign_source_64 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_29, call_args );
    }

    Py_DECREF( tmp_called_name_29 );
    Py_DECREF( tmp_args_element_name_41 );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1565;
        goto try_except_handler_10;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_64;
        Py_XDECREF( old );
    }

    tmp_source_name_43 = const_unicode_empty;
    tmp_called_name_30 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_join );
    assert( tmp_called_name_30 != NULL );
    tmp_args_element_name_42 = PyTuple_New( 2 );
    tmp_slice_source_40 = var_r1;

    if ( tmp_slice_source_40 == NULL )
    {
        Py_DECREF( tmp_called_name_30 );
        Py_DECREF( tmp_args_element_name_42 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1566;
        goto try_except_handler_10;
    }

    tmp_len_arg_24 = var_suffix;

    tmp_operand_name_20 = BUILTIN_LEN( tmp_len_arg_24 );
    if ( tmp_operand_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_30 );
        Py_DECREF( tmp_args_element_name_42 );

        exception_lineno = 1566;
        goto try_except_handler_10;
    }
    tmp_slice_upper_24 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_20 );
    Py_DECREF( tmp_operand_name_20 );
    if ( tmp_slice_upper_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_30 );
        Py_DECREF( tmp_args_element_name_42 );

        exception_lineno = 1566;
        goto try_except_handler_10;
    }
    tmp_tuple_element_28 = LOOKUP_SLICE( tmp_slice_source_40, Py_None, tmp_slice_upper_24 );
    Py_DECREF( tmp_slice_upper_24 );
    if ( tmp_tuple_element_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_30 );
        Py_DECREF( tmp_args_element_name_42 );

        exception_lineno = 1566;
        goto try_except_handler_10;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_42, 0, tmp_tuple_element_28 );
    tmp_tuple_element_28 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_28 );
    PyTuple_SET_ITEM( tmp_args_element_name_42, 1, tmp_tuple_element_28 );
    frame_function->f_lineno = 1566;
    {
        PyObject *call_args[] = { tmp_args_element_name_42 };
        tmp_assign_source_65 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_30, call_args );
    }

    Py_DECREF( tmp_called_name_30 );
    Py_DECREF( tmp_args_element_name_42 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1566;
        goto try_except_handler_10;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_65;
        Py_XDECREF( old );
    }

    goto branch_end_27;
    branch_no_27:;
    tmp_slice_source_41 = par_word;

    if ( tmp_slice_source_41 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1568;
        goto try_except_handler_10;
    }

    tmp_len_arg_25 = var_suffix;

    tmp_operand_name_21 = BUILTIN_LEN( tmp_len_arg_25 );
    if ( tmp_operand_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1568;
        goto try_except_handler_10;
    }
    tmp_slice_upper_25 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_21 );
    Py_DECREF( tmp_operand_name_21 );
    if ( tmp_slice_upper_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1568;
        goto try_except_handler_10;
    }
    tmp_assign_source_66 = LOOKUP_SLICE( tmp_slice_source_41, Py_None, tmp_slice_upper_25 );
    Py_DECREF( tmp_slice_upper_25 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1568;
        goto try_except_handler_10;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_66;
        Py_XDECREF( old );
    }

    tmp_slice_source_42 = var_r1;

    if ( tmp_slice_source_42 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1569;
        goto try_except_handler_10;
    }

    tmp_len_arg_26 = var_suffix;

    tmp_operand_name_22 = BUILTIN_LEN( tmp_len_arg_26 );
    if ( tmp_operand_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1569;
        goto try_except_handler_10;
    }
    tmp_slice_upper_26 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_22 );
    Py_DECREF( tmp_operand_name_22 );
    if ( tmp_slice_upper_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1569;
        goto try_except_handler_10;
    }
    tmp_assign_source_67 = LOOKUP_SLICE( tmp_slice_source_42, Py_None, tmp_slice_upper_26 );
    Py_DECREF( tmp_slice_upper_26 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1569;
        goto try_except_handler_10;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_67;
        Py_XDECREF( old );
    }

    branch_end_27:;
    branch_end_26:;
    branch_no_25:;
    goto loop_end_9;
    branch_no_24:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1555;
        goto try_except_handler_10;
    }
    goto loop_start_9;
    loop_end_9:;
    goto try_end_9;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_9__iter_value );
    tmp_for_loop_9__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_9__for_iterator );
    Py_DECREF( tmp_for_loop_9__for_iterator );
    tmp_for_loop_9__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    Py_XDECREF( tmp_for_loop_9__iter_value );
    tmp_for_loop_9__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_9__for_iterator );
    Py_DECREF( tmp_for_loop_9__for_iterator );
    tmp_for_loop_9__for_iterator = NULL;

    tmp_source_name_44 = par_self;

    tmp_iter_arg_10 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain__HungarianStemmer__step9_suffixes );
    if ( tmp_iter_arg_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1573;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_68 = MAKE_ITERATOR( tmp_iter_arg_10 );
    Py_DECREF( tmp_iter_arg_10 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1573;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_10__for_iterator == NULL );
    tmp_for_loop_10__for_iterator = tmp_assign_source_68;

    // Tried code:
    loop_start_10:;
    tmp_next_source_10 = tmp_for_loop_10__for_iterator;

    tmp_assign_source_69 = ITERATOR_NEXT( tmp_next_source_10 );
    if ( tmp_assign_source_69 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_10;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1573;
            goto try_except_handler_11;
        }
    }

    {
        PyObject *old = tmp_for_loop_10__iter_value;
        tmp_for_loop_10__iter_value = tmp_assign_source_69;
        Py_XDECREF( old );
    }

    tmp_assign_source_70 = tmp_for_loop_10__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_70;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_14 = par_word;

    if ( tmp_called_instance_14 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1574;
        goto try_except_handler_11;
    }

    tmp_args_element_name_43 = var_suffix;

    frame_function->f_lineno = 1574;
    {
        PyObject *call_args[] = { tmp_args_element_name_43 };
        tmp_cond_value_14 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_14, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1574;
        goto try_except_handler_11;
    }
    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_14 );

        exception_lineno = 1574;
        goto try_except_handler_11;
    }
    Py_DECREF( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == 1 )
    {
        goto branch_yes_28;
    }
    else
    {
        goto branch_no_28;
    }
    branch_yes_28:;
    tmp_called_instance_15 = var_r1;

    if ( tmp_called_instance_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1575;
        goto try_except_handler_11;
    }

    tmp_args_element_name_44 = var_suffix;

    frame_function->f_lineno = 1575;
    {
        PyObject *call_args[] = { tmp_args_element_name_44 };
        tmp_cond_value_15 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_15, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1575;
        goto try_except_handler_11;
    }
    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_15 );

        exception_lineno = 1575;
        goto try_except_handler_11;
    }
    Py_DECREF( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == 1 )
    {
        goto branch_yes_29;
    }
    else
    {
        goto branch_no_29;
    }
    branch_yes_29:;
    tmp_compare_left_15 = var_suffix;

    tmp_compare_right_15 = const_unicode_digest_4eac633339ede7563c52dd33096bda1f;
    tmp_cmp_Eq_8 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_15, tmp_compare_right_15 );
    if ( tmp_cmp_Eq_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1576;
        goto try_except_handler_11;
    }
    if ( tmp_cmp_Eq_8 == 1 )
    {
        goto branch_yes_30;
    }
    else
    {
        goto branch_no_30;
    }
    branch_yes_30:;
    tmp_source_name_45 = const_unicode_empty;
    tmp_called_name_31 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain_join );
    assert( tmp_called_name_31 != NULL );
    tmp_args_element_name_45 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_17 = 0;
    tmp_slice_index_upper_17 = -2;
    tmp_slice_source_43 = par_word;

    if ( tmp_slice_source_43 == NULL )
    {
        Py_DECREF( tmp_called_name_31 );
        Py_DECREF( tmp_args_element_name_45 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1577;
        goto try_except_handler_11;
    }

    tmp_tuple_element_29 = LOOKUP_INDEX_SLICE( tmp_slice_source_43, tmp_sliceslicedel_index_lower_17, tmp_slice_index_upper_17 );
    if ( tmp_tuple_element_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_31 );
        Py_DECREF( tmp_args_element_name_45 );

        exception_lineno = 1577;
        goto try_except_handler_11;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_45, 0, tmp_tuple_element_29 );
    tmp_tuple_element_29 = const_unicode_plain_a;
    Py_INCREF( tmp_tuple_element_29 );
    PyTuple_SET_ITEM( tmp_args_element_name_45, 1, tmp_tuple_element_29 );
    frame_function->f_lineno = 1577;
    {
        PyObject *call_args[] = { tmp_args_element_name_45 };
        tmp_assign_source_71 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_31, call_args );
    }

    Py_DECREF( tmp_called_name_31 );
    Py_DECREF( tmp_args_element_name_45 );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1577;
        goto try_except_handler_11;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_71;
        Py_XDECREF( old );
    }

    goto branch_end_30;
    branch_no_30:;
    tmp_compare_left_16 = var_suffix;

    tmp_compare_right_16 = const_unicode_digest_44a46dcd1c761a88aec0d1a2d5f5a3c7;
    tmp_cmp_Eq_9 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_16, tmp_compare_right_16 );
    if ( tmp_cmp_Eq_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1578;
        goto try_except_handler_11;
    }
    if ( tmp_cmp_Eq_9 == 1 )
    {
        goto branch_yes_31;
    }
    else
    {
        goto branch_no_31;
    }
    branch_yes_31:;
    tmp_source_name_46 = const_unicode_empty;
    tmp_called_name_32 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_join );
    assert( tmp_called_name_32 != NULL );
    tmp_args_element_name_46 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_18 = 0;
    tmp_slice_index_upper_18 = -2;
    tmp_slice_source_44 = par_word;

    if ( tmp_slice_source_44 == NULL )
    {
        Py_DECREF( tmp_called_name_32 );
        Py_DECREF( tmp_args_element_name_46 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1579;
        goto try_except_handler_11;
    }

    tmp_tuple_element_30 = LOOKUP_INDEX_SLICE( tmp_slice_source_44, tmp_sliceslicedel_index_lower_18, tmp_slice_index_upper_18 );
    if ( tmp_tuple_element_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_32 );
        Py_DECREF( tmp_args_element_name_46 );

        exception_lineno = 1579;
        goto try_except_handler_11;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_46, 0, tmp_tuple_element_30 );
    tmp_tuple_element_30 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_30 );
    PyTuple_SET_ITEM( tmp_args_element_name_46, 1, tmp_tuple_element_30 );
    frame_function->f_lineno = 1579;
    {
        PyObject *call_args[] = { tmp_args_element_name_46 };
        tmp_assign_source_72 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_32, call_args );
    }

    Py_DECREF( tmp_called_name_32 );
    Py_DECREF( tmp_args_element_name_46 );
    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1579;
        goto try_except_handler_11;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_72;
        Py_XDECREF( old );
    }

    goto branch_end_31;
    branch_no_31:;
    tmp_slice_source_45 = par_word;

    if ( tmp_slice_source_45 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1581;
        goto try_except_handler_11;
    }

    tmp_len_arg_27 = var_suffix;

    tmp_operand_name_23 = BUILTIN_LEN( tmp_len_arg_27 );
    if ( tmp_operand_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1581;
        goto try_except_handler_11;
    }
    tmp_slice_upper_27 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_23 );
    Py_DECREF( tmp_operand_name_23 );
    if ( tmp_slice_upper_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1581;
        goto try_except_handler_11;
    }
    tmp_assign_source_73 = LOOKUP_SLICE( tmp_slice_source_45, Py_None, tmp_slice_upper_27 );
    Py_DECREF( tmp_slice_upper_27 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1581;
        goto try_except_handler_11;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_73;
        Py_XDECREF( old );
    }

    branch_end_31:;
    branch_end_30:;
    branch_no_29:;
    goto loop_end_10;
    branch_no_28:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1573;
        goto try_except_handler_11;
    }
    goto loop_start_10;
    loop_end_10:;
    goto try_end_10;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_10__iter_value );
    tmp_for_loop_10__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_10__for_iterator );
    Py_DECREF( tmp_for_loop_10__for_iterator );
    tmp_for_loop_10__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    Py_XDECREF( tmp_for_loop_10__iter_value );
    tmp_for_loop_10__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_10__for_iterator );
    Py_DECREF( tmp_for_loop_10__for_iterator );
    tmp_for_loop_10__for_iterator = NULL;

    tmp_return_value = par_word;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1585;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_double_cons )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_double_cons,
                    var_double_cons
                );

                assert( res == 0 );
            }

            if ( var_suffix )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_suffix,
                    var_suffix
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_1_stem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_double_cons );
    var_double_cons = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_double_cons );
    var_double_cons = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_1_stem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_2___r1_hungarian( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *par_vowels = python_pars[ 2 ];
    PyObject *par_digraphs = python_pars[ 3 ];
    PyObject *var_r1 = NULL;
    PyObject *var_digraph = NULL;
    PyObject *var_i = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_called_name_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    Py_ssize_t tmp_slice_index_upper_1;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_lower_3;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_xrange_high_1;
    PyObject *tmp_xrange_high_2;
    PyObject *tmp_xrange_low_1;
    PyObject *tmp_xrange_low_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_unicode_empty;
    assert( var_r1 == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_r1 = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b43fa8fb94544c04a6f2d05e9123b316, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_subscribed_name_1 = par_word;

    tmp_subscript_name_1 = const_int_0;
    tmp_compare_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1615;
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = par_vowels;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_iter_arg_1 = par_digraphs;

    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1616;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_2;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1616;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    tmp_assign_source_4 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_digraph;
        var_digraph = tmp_assign_source_4;
        Py_INCREF( var_digraph );
        Py_XDECREF( old );
    }

    tmp_compare_left_2 = var_digraph;

    tmp_sliceslicedel_index_lower_1 = 1;
    tmp_slice_index_upper_1 = PY_SSIZE_T_MAX;
    tmp_slice_source_1 = par_word;

    tmp_compare_right_2 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_compare_right_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1617;
        goto try_except_handler_2;
    }
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_2 == -1) );
    Py_DECREF( tmp_compare_right_2 );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_slice_source_2 = par_word;

    tmp_source_name_1 = par_word;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_index );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1618;
        goto try_except_handler_2;
    }
    tmp_subscribed_name_2 = var_digraph;

    tmp_subscript_name_2 = const_int_neg_1;
    tmp_args_element_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 1618;
        goto try_except_handler_2;
    }
    frame_function->f_lineno = 1618;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_left_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1618;
        goto try_except_handler_2;
    }
    tmp_right_name_1 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1618;
        goto try_except_handler_2;
    }
    tmp_assign_source_5 = LOOKUP_SLICE( tmp_slice_source_2, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_lower_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1618;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_5;
        Py_DECREF( old );
    }

    tmp_return_value = var_r1;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_2;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1616;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__iter_value );
    Py_DECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_xrange_low_1 = const_int_pos_1;
    tmp_len_arg_1 = par_word;

    tmp_xrange_high_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_xrange_high_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1621;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_2 = BUILTIN_XRANGE2( tmp_xrange_low_1, tmp_xrange_high_1 );
    Py_DECREF( tmp_xrange_high_1 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1621;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1621;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_6;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_7 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1621;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_7;
        Py_XDECREF( old );
    }

    tmp_assign_source_8 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_8;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_3 = par_word;

    tmp_subscript_name_3 = var_i;

    tmp_compare_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1622;
        goto try_except_handler_3;
    }
    tmp_compare_right_3 = par_vowels;

    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_NotIn_1 == -1) );
    Py_DECREF( tmp_compare_left_3 );
    if ( tmp_cmp_NotIn_1 == 0 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_slice_source_3 = par_word;

    tmp_left_name_2 = var_i;

    tmp_right_name_2 = const_int_pos_1;
    tmp_slice_lower_2 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1623;
        goto try_except_handler_3;
    }
    tmp_assign_source_9 = LOOKUP_SLICE( tmp_slice_source_3, tmp_slice_lower_2, Py_None );
    Py_DECREF( tmp_slice_lower_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1623;
        goto try_except_handler_3;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_9;
        Py_DECREF( old );
    }

    goto loop_end_2;
    branch_no_3:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1621;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    goto branch_end_1;
    branch_no_1:;
    tmp_xrange_low_2 = const_int_pos_1;
    tmp_len_arg_2 = par_word;

    tmp_xrange_high_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_xrange_high_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1626;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_3 = BUILTIN_XRANGE2( tmp_xrange_low_2, tmp_xrange_high_2 );
    Py_DECREF( tmp_xrange_high_2 );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1626;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1626;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_10;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_11 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_11 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1626;
            goto try_except_handler_4;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    tmp_assign_source_12 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_12;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_4 = par_word;

    tmp_subscript_name_4 = var_i;

    tmp_compare_left_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_compare_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1627;
        goto try_except_handler_4;
    }
    tmp_compare_right_4 = par_vowels;

    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_3 == -1) );
    Py_DECREF( tmp_compare_left_4 );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_slice_source_4 = par_word;

    tmp_left_name_3 = var_i;

    tmp_right_name_3 = const_int_pos_1;
    tmp_slice_lower_3 = BINARY_OPERATION_ADD( tmp_left_name_3, tmp_right_name_3 );
    if ( tmp_slice_lower_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1628;
        goto try_except_handler_4;
    }
    tmp_assign_source_13 = LOOKUP_SLICE( tmp_slice_source_4, tmp_slice_lower_3, Py_None );
    Py_DECREF( tmp_slice_lower_3 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1628;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_13;
        Py_DECREF( old );
    }

    goto loop_end_3;
    branch_no_4:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1626;
        goto try_except_handler_4;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    branch_end_1:;
    tmp_return_value = var_r1;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1631;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( par_vowels )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_vowels,
                    par_vowels
                );

                assert( res == 0 );
            }

            if ( par_digraphs )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_digraphs,
                    par_digraphs
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_digraph )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_digraph,
                    var_digraph
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_2___r1_hungarian );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    CHECK_OBJECT( (PyObject *)par_vowels );
    Py_DECREF( par_vowels );
    par_vowels = NULL;

    CHECK_OBJECT( (PyObject *)par_digraphs );
    Py_DECREF( par_digraphs );
    par_digraphs = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_digraph );
    var_digraph = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    CHECK_OBJECT( (PyObject *)par_vowels );
    Py_DECREF( par_vowels );
    par_vowels = NULL;

    CHECK_OBJECT( (PyObject *)par_digraphs );
    Py_DECREF( par_digraphs );
    par_digraphs = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_digraph );
    var_digraph = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_2___r1_hungarian );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_10_ItalianStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__ItalianStemmer__vowels = NULL;
    PyObject *var__ItalianStemmer__step0_suffixes = NULL;
    PyObject *var__ItalianStemmer__step1_suffixes = NULL;
    PyObject *var__ItalianStemmer__step2_suffixes = NULL;
    PyObject *var_stem = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_fcf7f6b725888decd13f25d7cf364cac;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_unicode_digest_691747f70aea8454eeb7c1aa1e54f459;
    assert( var__ItalianStemmer__vowels == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var__ItalianStemmer__vowels = tmp_assign_source_3;

    tmp_assign_source_4 = const_tuple_f5a1fbff148ca09e046ddc38ac31b566_tuple;
    assert( var__ItalianStemmer__step0_suffixes == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var__ItalianStemmer__step0_suffixes = tmp_assign_source_4;

    tmp_assign_source_5 = const_tuple_101625999447a7120805ecb8b80f61a1_tuple;
    assert( var__ItalianStemmer__step1_suffixes == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__ItalianStemmer__step1_suffixes = tmp_assign_source_5;

    tmp_assign_source_6 = const_tuple_004f5b0ef7f5ba18d3dff3a8bafae5fc_tuple;
    assert( var__ItalianStemmer__step2_suffixes == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var__ItalianStemmer__step2_suffixes = tmp_assign_source_6;

    tmp_assign_source_7 = MAKE_FUNCTION_nltk$stem$snowball$$$class_10_ItalianStemmer$$$function_1_stem(  );
    assert( var_stem == NULL );
    var_stem = tmp_assign_source_7;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__ItalianStemmer__vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__ItalianStemmer__vowels,
            var__ItalianStemmer__vowels
        );

        assert( res == 0 );
    }

    if ( var__ItalianStemmer__step0_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__ItalianStemmer__step0_suffixes,
            var__ItalianStemmer__step0_suffixes
        );

        assert( res == 0 );
    }

    if ( var__ItalianStemmer__step1_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__ItalianStemmer__step1_suffixes,
            var__ItalianStemmer__step1_suffixes
        );

        assert( res == 0 );
    }

    if ( var__ItalianStemmer__step2_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__ItalianStemmer__step2_suffixes,
            var__ItalianStemmer__step2_suffixes
        );

        assert( res == 0 );
    }

    if ( var_stem )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_stem,
            var_stem
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_10_ItalianStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__ItalianStemmer__vowels );
    Py_DECREF( var__ItalianStemmer__vowels );
    var__ItalianStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__ItalianStemmer__step0_suffixes );
    Py_DECREF( var__ItalianStemmer__step0_suffixes );
    var__ItalianStemmer__step0_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__ItalianStemmer__step1_suffixes );
    Py_DECREF( var__ItalianStemmer__step1_suffixes );
    var__ItalianStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__ItalianStemmer__step2_suffixes );
    Py_DECREF( var__ItalianStemmer__step2_suffixes );
    var__ItalianStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__ItalianStemmer__vowels );
    Py_DECREF( var__ItalianStemmer__vowels );
    var__ItalianStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__ItalianStemmer__step0_suffixes );
    Py_DECREF( var__ItalianStemmer__step0_suffixes );
    var__ItalianStemmer__step0_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__ItalianStemmer__step1_suffixes );
    Py_DECREF( var__ItalianStemmer__step1_suffixes );
    var__ItalianStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__ItalianStemmer__step2_suffixes );
    Py_DECREF( var__ItalianStemmer__step2_suffixes );
    var__ItalianStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_10_ItalianStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_10_ItalianStemmer$$$function_1_stem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_step1_success = NULL;
    PyObject *var_i = NULL;
    PyObject *var_r1 = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_rv = NULL;
    PyObject *var_suffix = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    int tmp_and_left_truth_3;
    int tmp_and_left_truth_4;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_left_value_3;
    PyObject *tmp_and_left_value_4;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_and_right_value_3;
    PyObject *tmp_and_right_value_4;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_instance_12;
    PyObject *tmp_called_instance_13;
    PyObject *tmp_called_instance_14;
    PyObject *tmp_called_instance_15;
    PyObject *tmp_called_instance_16;
    PyObject *tmp_called_instance_17;
    PyObject *tmp_called_instance_18;
    PyObject *tmp_called_instance_19;
    PyObject *tmp_called_instance_20;
    PyObject *tmp_called_instance_21;
    PyObject *tmp_called_instance_22;
    PyObject *tmp_called_instance_23;
    PyObject *tmp_called_instance_24;
    PyObject *tmp_called_instance_25;
    PyObject *tmp_called_instance_26;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    int tmp_cond_truth_17;
    int tmp_cond_truth_18;
    int tmp_cond_truth_19;
    int tmp_cond_truth_20;
    int tmp_cond_truth_21;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_cond_value_17;
    PyObject *tmp_cond_value_18;
    PyObject *tmp_cond_value_19;
    PyObject *tmp_cond_value_20;
    PyObject *tmp_cond_value_21;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_left_name_6;
    PyObject *tmp_left_name_7;
    PyObject *tmp_left_name_8;
    PyObject *tmp_left_name_9;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_len_arg_6;
    PyObject *tmp_len_arg_7;
    PyObject *tmp_len_arg_8;
    PyObject *tmp_len_arg_9;
    PyObject *tmp_len_arg_10;
    PyObject *tmp_len_arg_11;
    PyObject *tmp_len_arg_12;
    PyObject *tmp_len_arg_13;
    PyObject *tmp_len_arg_14;
    PyObject *tmp_len_arg_15;
    PyObject *tmp_len_arg_16;
    PyObject *tmp_len_arg_17;
    PyObject *tmp_len_arg_18;
    PyObject *tmp_len_arg_19;
    PyObject *tmp_len_arg_20;
    PyObject *tmp_len_arg_21;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    PyObject *tmp_operand_name_4;
    PyObject *tmp_operand_name_5;
    PyObject *tmp_operand_name_6;
    PyObject *tmp_operand_name_7;
    PyObject *tmp_operand_name_8;
    PyObject *tmp_operand_name_9;
    PyObject *tmp_operand_name_10;
    PyObject *tmp_operand_name_11;
    PyObject *tmp_operand_name_12;
    PyObject *tmp_operand_name_13;
    PyObject *tmp_operand_name_14;
    PyObject *tmp_operand_name_15;
    PyObject *tmp_operand_name_16;
    PyObject *tmp_operand_name_17;
    PyObject *tmp_operand_name_18;
    PyObject *tmp_operand_name_19;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    PyObject *tmp_right_name_6;
    PyObject *tmp_right_name_7;
    PyObject *tmp_right_name_8;
    PyObject *tmp_right_name_9;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    Py_ssize_t tmp_slice_index_upper_6;
    Py_ssize_t tmp_slice_index_upper_7;
    Py_ssize_t tmp_slice_index_upper_8;
    Py_ssize_t tmp_slice_index_upper_9;
    Py_ssize_t tmp_slice_index_upper_10;
    Py_ssize_t tmp_slice_index_upper_11;
    Py_ssize_t tmp_slice_index_upper_12;
    Py_ssize_t tmp_slice_index_upper_13;
    Py_ssize_t tmp_slice_index_upper_14;
    Py_ssize_t tmp_slice_index_upper_15;
    Py_ssize_t tmp_slice_index_upper_16;
    Py_ssize_t tmp_slice_index_upper_17;
    Py_ssize_t tmp_slice_index_upper_18;
    Py_ssize_t tmp_slice_index_upper_19;
    Py_ssize_t tmp_slice_index_upper_20;
    Py_ssize_t tmp_slice_index_upper_21;
    Py_ssize_t tmp_slice_index_upper_22;
    Py_ssize_t tmp_slice_index_upper_23;
    Py_ssize_t tmp_slice_index_upper_24;
    Py_ssize_t tmp_slice_index_upper_25;
    Py_ssize_t tmp_slice_index_upper_26;
    Py_ssize_t tmp_slice_index_upper_27;
    Py_ssize_t tmp_slice_index_upper_28;
    Py_ssize_t tmp_slice_index_upper_29;
    Py_ssize_t tmp_slice_index_upper_30;
    Py_ssize_t tmp_slice_index_upper_31;
    Py_ssize_t tmp_slice_index_upper_32;
    Py_ssize_t tmp_slice_index_upper_33;
    Py_ssize_t tmp_slice_index_upper_34;
    Py_ssize_t tmp_slice_index_upper_35;
    Py_ssize_t tmp_slice_index_upper_36;
    Py_ssize_t tmp_slice_index_upper_37;
    Py_ssize_t tmp_slice_index_upper_38;
    Py_ssize_t tmp_slice_index_upper_39;
    Py_ssize_t tmp_slice_index_upper_40;
    Py_ssize_t tmp_slice_index_upper_41;
    Py_ssize_t tmp_slice_index_upper_42;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_lower_3;
    PyObject *tmp_slice_lower_4;
    PyObject *tmp_slice_lower_5;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_source_10;
    PyObject *tmp_slice_source_11;
    PyObject *tmp_slice_source_12;
    PyObject *tmp_slice_source_13;
    PyObject *tmp_slice_source_14;
    PyObject *tmp_slice_source_15;
    PyObject *tmp_slice_source_16;
    PyObject *tmp_slice_source_17;
    PyObject *tmp_slice_source_18;
    PyObject *tmp_slice_source_19;
    PyObject *tmp_slice_source_20;
    PyObject *tmp_slice_source_21;
    PyObject *tmp_slice_source_22;
    PyObject *tmp_slice_source_23;
    PyObject *tmp_slice_source_24;
    PyObject *tmp_slice_source_25;
    PyObject *tmp_slice_source_26;
    PyObject *tmp_slice_source_27;
    PyObject *tmp_slice_source_28;
    PyObject *tmp_slice_source_29;
    PyObject *tmp_slice_source_30;
    PyObject *tmp_slice_source_31;
    PyObject *tmp_slice_source_32;
    PyObject *tmp_slice_source_33;
    PyObject *tmp_slice_source_34;
    PyObject *tmp_slice_source_35;
    PyObject *tmp_slice_source_36;
    PyObject *tmp_slice_source_37;
    PyObject *tmp_slice_source_38;
    PyObject *tmp_slice_source_39;
    PyObject *tmp_slice_source_40;
    PyObject *tmp_slice_source_41;
    PyObject *tmp_slice_source_42;
    PyObject *tmp_slice_source_43;
    PyObject *tmp_slice_source_44;
    PyObject *tmp_slice_source_45;
    PyObject *tmp_slice_source_46;
    PyObject *tmp_slice_source_47;
    PyObject *tmp_slice_source_48;
    PyObject *tmp_slice_source_49;
    PyObject *tmp_slice_source_50;
    PyObject *tmp_slice_source_51;
    PyObject *tmp_slice_source_52;
    PyObject *tmp_slice_source_53;
    PyObject *tmp_slice_source_54;
    PyObject *tmp_slice_source_55;
    PyObject *tmp_slice_source_56;
    PyObject *tmp_slice_source_57;
    PyObject *tmp_slice_source_58;
    PyObject *tmp_slice_source_59;
    PyObject *tmp_slice_source_60;
    PyObject *tmp_slice_source_61;
    PyObject *tmp_slice_source_62;
    PyObject *tmp_slice_source_63;
    PyObject *tmp_slice_source_64;
    PyObject *tmp_slice_source_65;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    PyObject *tmp_slice_upper_4;
    PyObject *tmp_slice_upper_5;
    PyObject *tmp_slice_upper_6;
    PyObject *tmp_slice_upper_7;
    PyObject *tmp_slice_upper_8;
    PyObject *tmp_slice_upper_9;
    PyObject *tmp_slice_upper_10;
    PyObject *tmp_slice_upper_11;
    PyObject *tmp_slice_upper_12;
    PyObject *tmp_slice_upper_13;
    PyObject *tmp_slice_upper_14;
    PyObject *tmp_slice_upper_15;
    PyObject *tmp_slice_upper_16;
    PyObject *tmp_slice_upper_17;
    PyObject *tmp_slice_upper_18;
    PyObject *tmp_slice_upper_19;
    PyObject *tmp_slice_upper_20;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_6;
    Py_ssize_t tmp_sliceslicedel_index_lower_7;
    Py_ssize_t tmp_sliceslicedel_index_lower_8;
    Py_ssize_t tmp_sliceslicedel_index_lower_9;
    Py_ssize_t tmp_sliceslicedel_index_lower_10;
    Py_ssize_t tmp_sliceslicedel_index_lower_11;
    Py_ssize_t tmp_sliceslicedel_index_lower_12;
    Py_ssize_t tmp_sliceslicedel_index_lower_13;
    Py_ssize_t tmp_sliceslicedel_index_lower_14;
    Py_ssize_t tmp_sliceslicedel_index_lower_15;
    Py_ssize_t tmp_sliceslicedel_index_lower_16;
    Py_ssize_t tmp_sliceslicedel_index_lower_17;
    Py_ssize_t tmp_sliceslicedel_index_lower_18;
    Py_ssize_t tmp_sliceslicedel_index_lower_19;
    Py_ssize_t tmp_sliceslicedel_index_lower_20;
    Py_ssize_t tmp_sliceslicedel_index_lower_21;
    Py_ssize_t tmp_sliceslicedel_index_lower_22;
    Py_ssize_t tmp_sliceslicedel_index_lower_23;
    Py_ssize_t tmp_sliceslicedel_index_lower_24;
    Py_ssize_t tmp_sliceslicedel_index_lower_25;
    Py_ssize_t tmp_sliceslicedel_index_lower_26;
    Py_ssize_t tmp_sliceslicedel_index_lower_27;
    Py_ssize_t tmp_sliceslicedel_index_lower_28;
    Py_ssize_t tmp_sliceslicedel_index_lower_29;
    Py_ssize_t tmp_sliceslicedel_index_lower_30;
    Py_ssize_t tmp_sliceslicedel_index_lower_31;
    Py_ssize_t tmp_sliceslicedel_index_lower_32;
    Py_ssize_t tmp_sliceslicedel_index_lower_33;
    Py_ssize_t tmp_sliceslicedel_index_lower_34;
    Py_ssize_t tmp_sliceslicedel_index_lower_35;
    Py_ssize_t tmp_sliceslicedel_index_lower_36;
    Py_ssize_t tmp_sliceslicedel_index_lower_37;
    Py_ssize_t tmp_sliceslicedel_index_lower_38;
    Py_ssize_t tmp_sliceslicedel_index_lower_39;
    Py_ssize_t tmp_sliceslicedel_index_lower_40;
    Py_ssize_t tmp_sliceslicedel_index_lower_41;
    Py_ssize_t tmp_sliceslicedel_index_lower_42;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscribed_name_6;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_subscript_name_6;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_xrange_high_1;
    PyObject *tmp_xrange_high_2;
    PyObject *tmp_xrange_low_1;
    PyObject *tmp_xrange_low_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_3b7a6830f9db608ff7a466fa87e07c1a, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_word;

    tmp_source_name_1 = par_self;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stopwords );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1703;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_assign_source_1 = Py_False;
    assert( var_step1_success == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_step1_success = tmp_assign_source_1;

    tmp_called_instance_6 = par_word;

    frame_function->f_lineno = 1709;
    tmp_called_instance_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_6, const_str_plain_lower );
    if ( tmp_called_instance_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1709;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1709;
    tmp_called_instance_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_621f4aaebc85dd42d37c871e39da57a5_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_5 );
    if ( tmp_called_instance_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1709;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1709;
    tmp_called_instance_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_e49dd29108b08f32825ced55c26fcdf3_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_4 );
    if ( tmp_called_instance_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1709;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1709;
    tmp_called_instance_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_66e35d91519c98995c87b3ad14739ae1_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_3 );
    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1709;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1709;
    tmp_called_instance_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_845ac4528257b3ed391fd49fa8dae820_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1709;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1709;
    tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_58419de004459738a3a5586548685aa7_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1709;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_2;
        Py_DECREF( old );
    }

    tmp_xrange_low_1 = const_int_pos_1;
    tmp_len_arg_1 = par_word;

    tmp_xrange_high_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_xrange_high_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1717;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = BUILTIN_XRANGE2( tmp_xrange_low_1, tmp_xrange_high_1 );
    Py_DECREF( tmp_xrange_high_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1717;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1717;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_3;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1717;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_assign_source_5 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_5;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_1 = par_word;

    if ( tmp_subscribed_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1718;
        goto try_except_handler_2;
    }

    tmp_left_name_1 = var_i;

    tmp_right_name_1 = const_int_pos_1;
    tmp_subscript_name_1 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_subscript_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1718;
        goto try_except_handler_2;
    }
    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1718;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_1 = const_unicode_plain_q;
    tmp_and_left_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1718;
        goto try_except_handler_2;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 1718;
        goto try_except_handler_2;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_subscribed_name_2 = par_word;

    if ( tmp_subscribed_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1718;
        goto try_except_handler_2;
    }

    tmp_subscript_name_2 = var_i;

    tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1718;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_2 = const_unicode_plain_u;
    tmp_and_right_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1718;
        goto try_except_handler_2;
    }
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 1718;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_2 = const_unicode_empty;
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_join );
    assert( tmp_called_name_1 != NULL );
    tmp_args_element_name_1 = PyTuple_New( 3 );
    tmp_slice_source_1 = par_word;

    if ( tmp_slice_source_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1719;
        goto try_except_handler_2;
    }

    tmp_slice_upper_1 = var_i;

    tmp_tuple_element_1 = LOOKUP_SLICE( tmp_slice_source_1, Py_None, tmp_slice_upper_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1719;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_unicode_plain_U;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_1, 1, tmp_tuple_element_1 );
    tmp_slice_source_2 = par_word;

    if ( tmp_slice_source_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1719;
        goto try_except_handler_2;
    }

    tmp_left_name_2 = var_i;

    tmp_right_name_2 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1719;
        goto try_except_handler_2;
    }
    tmp_tuple_element_1 = LOOKUP_SLICE( tmp_slice_source_2, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_lower_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1719;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_1, 2, tmp_tuple_element_1 );
    frame_function->f_lineno = 1719;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1719;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1717;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_xrange_low_2 = const_int_pos_1;
    tmp_len_arg_2 = par_word;

    if ( tmp_len_arg_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1723;
        goto frame_exception_exit_1;
    }

    tmp_left_name_3 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_left_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1723;
        goto frame_exception_exit_1;
    }
    tmp_right_name_3 = const_int_pos_1;
    tmp_xrange_high_2 = BINARY_OPERATION_SUB( tmp_left_name_3, tmp_right_name_3 );
    Py_DECREF( tmp_left_name_3 );
    if ( tmp_xrange_high_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1723;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_2 = BUILTIN_XRANGE2( tmp_xrange_low_2, tmp_xrange_high_2 );
    Py_DECREF( tmp_xrange_high_2 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1723;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1723;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_7;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_8 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_8 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1723;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    tmp_assign_source_9 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_9;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_3 = par_word;

    if ( tmp_subscribed_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1724;
        goto try_except_handler_3;
    }

    tmp_left_name_4 = var_i;

    tmp_right_name_4 = const_int_pos_1;
    tmp_subscript_name_3 = BINARY_OPERATION_SUB( tmp_left_name_4, tmp_right_name_4 );
    if ( tmp_subscript_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1724;
        goto try_except_handler_3;
    }
    tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    Py_DECREF( tmp_subscript_name_3 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1724;
        goto try_except_handler_3;
    }
    tmp_source_name_3 = par_self;

    tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__ItalianStemmer__vowels );
    if ( tmp_compexpr_right_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_3 );

        exception_lineno = 1724;
        goto try_except_handler_3;
    }
    tmp_and_left_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    Py_DECREF( tmp_compexpr_right_3 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1724;
        goto try_except_handler_3;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    assert( !(tmp_and_left_truth_2 == -1) );
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_subscribed_name_4 = par_word;

    if ( tmp_subscribed_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1724;
        goto try_except_handler_3;
    }

    tmp_left_name_5 = var_i;

    tmp_right_name_5 = const_int_pos_1;
    tmp_subscript_name_4 = BINARY_OPERATION_ADD( tmp_left_name_5, tmp_right_name_5 );
    if ( tmp_subscript_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1724;
        goto try_except_handler_3;
    }
    tmp_compexpr_left_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    Py_DECREF( tmp_subscript_name_4 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1724;
        goto try_except_handler_3;
    }
    tmp_source_name_4 = par_self;

    tmp_compexpr_right_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__ItalianStemmer__vowels );
    if ( tmp_compexpr_right_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_4 );

        exception_lineno = 1724;
        goto try_except_handler_3;
    }
    tmp_and_right_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    Py_DECREF( tmp_compexpr_right_4 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1724;
        goto try_except_handler_3;
    }
    tmp_cond_value_2 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_cond_value_2 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    assert( !(tmp_cond_truth_2 == -1) );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_subscribed_name_5 = par_word;

    if ( tmp_subscribed_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1725;
        goto try_except_handler_3;
    }

    tmp_subscript_name_5 = var_i;

    tmp_compare_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1725;
        goto try_except_handler_3;
    }
    tmp_compare_right_2 = const_unicode_plain_u;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        exception_lineno = 1725;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_5 = const_unicode_empty;
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_join );
    assert( tmp_called_name_2 != NULL );
    tmp_args_element_name_2 = PyTuple_New( 3 );
    tmp_slice_source_3 = par_word;

    if ( tmp_slice_source_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1726;
        goto try_except_handler_3;
    }

    tmp_slice_upper_2 = var_i;

    tmp_tuple_element_2 = LOOKUP_SLICE( tmp_slice_source_3, Py_None, tmp_slice_upper_2 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 1726;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_2, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = const_unicode_plain_U;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_2, 1, tmp_tuple_element_2 );
    tmp_slice_source_4 = par_word;

    if ( tmp_slice_source_4 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1726;
        goto try_except_handler_3;
    }

    tmp_left_name_6 = var_i;

    tmp_right_name_6 = const_int_pos_1;
    tmp_slice_lower_2 = BINARY_OPERATION_ADD( tmp_left_name_6, tmp_right_name_6 );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 1726;
        goto try_except_handler_3;
    }
    tmp_tuple_element_2 = LOOKUP_SLICE( tmp_slice_source_4, tmp_slice_lower_2, Py_None );
    Py_DECREF( tmp_slice_lower_2 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 1726;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_2, 2, tmp_tuple_element_2 );
    frame_function->f_lineno = 1726;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1726;
        goto try_except_handler_3;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_10;
        Py_XDECREF( old );
    }

    goto branch_end_4;
    branch_no_4:;
    tmp_subscribed_name_6 = par_word;

    if ( tmp_subscribed_name_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1728;
        goto try_except_handler_3;
    }

    tmp_subscript_name_6 = var_i;

    tmp_compare_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1728;
        goto try_except_handler_3;
    }
    tmp_compare_right_3 = const_unicode_plain_i;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_3 );

        exception_lineno = 1728;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_compare_left_3 );
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_source_name_6 = const_unicode_empty;
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_join );
    assert( tmp_called_name_3 != NULL );
    tmp_args_element_name_3 = PyTuple_New( 3 );
    tmp_slice_source_5 = par_word;

    if ( tmp_slice_source_5 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1729;
        goto try_except_handler_3;
    }

    tmp_slice_upper_3 = var_i;

    tmp_tuple_element_3 = LOOKUP_SLICE( tmp_slice_source_5, Py_None, tmp_slice_upper_3 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 1729;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_3, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = const_unicode_plain_I;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_element_name_3, 1, tmp_tuple_element_3 );
    tmp_slice_source_6 = par_word;

    if ( tmp_slice_source_6 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1729;
        goto try_except_handler_3;
    }

    tmp_left_name_7 = var_i;

    tmp_right_name_7 = const_int_pos_1;
    tmp_slice_lower_3 = BINARY_OPERATION_ADD( tmp_left_name_7, tmp_right_name_7 );
    if ( tmp_slice_lower_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 1729;
        goto try_except_handler_3;
    }
    tmp_tuple_element_3 = LOOKUP_SLICE( tmp_slice_source_6, tmp_slice_lower_3, Py_None );
    Py_DECREF( tmp_slice_lower_3 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 1729;
        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_3, 2, tmp_tuple_element_3 );
    frame_function->f_lineno = 1729;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1729;
        goto try_except_handler_3;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    branch_no_5:;
    branch_end_4:;
    branch_no_3:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1723;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Tried code:
    tmp_source_name_7 = par_self;

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__r1r2_standard );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1731;
        goto try_except_handler_4;
    }
    tmp_args_element_name_4 = par_word;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1731;
        goto try_except_handler_4;
    }

    tmp_source_name_8 = par_self;

    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__ItalianStemmer__vowels );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 1731;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 1731;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_iter_arg_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1731;
        goto try_except_handler_4;
    }
    tmp_assign_source_12 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1731;
        goto try_except_handler_4;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_12;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_13 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_13 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1731;
        goto try_except_handler_5;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_13;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_14 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_14 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 1731;
        goto try_except_handler_5;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_14;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_5;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_5;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_4;
    // End of try:
    try_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_15 = tmp_tuple_unpack_1__element_1;

    assert( var_r1 == NULL );
    Py_INCREF( tmp_assign_source_15 );
    var_r1 = tmp_assign_source_15;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_16 = tmp_tuple_unpack_1__element_2;

    assert( var_r2 == NULL );
    Py_INCREF( tmp_assign_source_16 );
    var_r2 = tmp_assign_source_16;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_9 = par_self;

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__rv_standard );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1732;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = par_word;

    if ( tmp_args_element_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1732;
        goto frame_exception_exit_1;
    }

    tmp_source_name_10 = par_self;

    tmp_args_element_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__ItalianStemmer__vowels );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 1732;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1732;
    {
        PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_assign_source_17 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1732;
        goto frame_exception_exit_1;
    }
    assert( var_rv == NULL );
    var_rv = tmp_assign_source_17;

    tmp_source_name_11 = par_self;

    tmp_iter_arg_4 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__ItalianStemmer__step0_suffixes );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1735;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_18 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1735;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_18;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_19 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_19 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1735;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_19;
        Py_XDECREF( old );
    }

    tmp_assign_source_20 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_20;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_7 = var_rv;

    tmp_args_element_name_8 = var_suffix;

    frame_function->f_lineno = 1736;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_cond_value_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1736;
        goto try_except_handler_6;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 1736;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_slice_source_7 = var_rv;

    tmp_len_arg_3 = var_suffix;

    tmp_operand_name_1 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1737;
        goto try_except_handler_6;
    }
    tmp_left_name_8 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_left_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1737;
        goto try_except_handler_6;
    }
    tmp_right_name_8 = const_int_pos_4;
    tmp_slice_lower_4 = BINARY_OPERATION_SUB( tmp_left_name_8, tmp_right_name_8 );
    Py_DECREF( tmp_left_name_8 );
    if ( tmp_slice_lower_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1737;
        goto try_except_handler_6;
    }
    tmp_len_arg_4 = var_suffix;

    tmp_operand_name_2 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_4 );

        exception_lineno = 1737;
        goto try_except_handler_6;
    }
    tmp_slice_upper_4 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_slice_upper_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_4 );

        exception_lineno = 1737;
        goto try_except_handler_6;
    }
    tmp_compare_left_4 = LOOKUP_SLICE( tmp_slice_source_7, tmp_slice_lower_4, tmp_slice_upper_4 );
    Py_DECREF( tmp_slice_lower_4 );
    Py_DECREF( tmp_slice_upper_4 );
    if ( tmp_compare_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1737;
        goto try_except_handler_6;
    }
    tmp_compare_right_4 = const_tuple_unicode_plain_ando_unicode_plain_endo_tuple;
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_2 == -1) );
    Py_DECREF( tmp_compare_left_4 );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_slice_source_8 = par_word;

    if ( tmp_slice_source_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1738;
        goto try_except_handler_6;
    }

    tmp_len_arg_5 = var_suffix;

    tmp_operand_name_3 = BUILTIN_LEN( tmp_len_arg_5 );
    if ( tmp_operand_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1738;
        goto try_except_handler_6;
    }
    tmp_slice_upper_5 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_slice_upper_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1738;
        goto try_except_handler_6;
    }
    tmp_assign_source_21 = LOOKUP_SLICE( tmp_slice_source_8, Py_None, tmp_slice_upper_5 );
    Py_DECREF( tmp_slice_upper_5 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1738;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_21;
        Py_XDECREF( old );
    }

    tmp_slice_source_9 = var_r1;

    tmp_len_arg_6 = var_suffix;

    tmp_operand_name_4 = BUILTIN_LEN( tmp_len_arg_6 );
    if ( tmp_operand_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1739;
        goto try_except_handler_6;
    }
    tmp_slice_upper_6 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_4 );
    Py_DECREF( tmp_operand_name_4 );
    if ( tmp_slice_upper_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1739;
        goto try_except_handler_6;
    }
    tmp_assign_source_22 = LOOKUP_SLICE( tmp_slice_source_9, Py_None, tmp_slice_upper_6 );
    Py_DECREF( tmp_slice_upper_6 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1739;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_22;
        Py_DECREF( old );
    }

    tmp_slice_source_10 = var_r2;

    tmp_len_arg_7 = var_suffix;

    tmp_operand_name_5 = BUILTIN_LEN( tmp_len_arg_7 );
    if ( tmp_operand_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1740;
        goto try_except_handler_6;
    }
    tmp_slice_upper_7 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_5 );
    Py_DECREF( tmp_operand_name_5 );
    if ( tmp_slice_upper_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1740;
        goto try_except_handler_6;
    }
    tmp_assign_source_23 = LOOKUP_SLICE( tmp_slice_source_10, Py_None, tmp_slice_upper_7 );
    Py_DECREF( tmp_slice_upper_7 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1740;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_23;
        Py_DECREF( old );
    }

    tmp_slice_source_11 = var_rv;

    tmp_len_arg_8 = var_suffix;

    tmp_operand_name_6 = BUILTIN_LEN( tmp_len_arg_8 );
    if ( tmp_operand_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1741;
        goto try_except_handler_6;
    }
    tmp_slice_upper_8 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_6 );
    Py_DECREF( tmp_operand_name_6 );
    if ( tmp_slice_upper_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1741;
        goto try_except_handler_6;
    }
    tmp_assign_source_24 = LOOKUP_SLICE( tmp_slice_source_11, Py_None, tmp_slice_upper_8 );
    Py_DECREF( tmp_slice_upper_8 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1741;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_24;
        Py_DECREF( old );
    }

    goto branch_end_7;
    branch_no_7:;
    tmp_slice_source_12 = var_rv;

    tmp_len_arg_9 = var_suffix;

    tmp_operand_name_7 = BUILTIN_LEN( tmp_len_arg_9 );
    if ( tmp_operand_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1743;
        goto try_except_handler_6;
    }
    tmp_left_name_9 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_7 );
    Py_DECREF( tmp_operand_name_7 );
    if ( tmp_left_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1743;
        goto try_except_handler_6;
    }
    tmp_right_name_9 = const_int_pos_2;
    tmp_slice_lower_5 = BINARY_OPERATION_SUB( tmp_left_name_9, tmp_right_name_9 );
    Py_DECREF( tmp_left_name_9 );
    if ( tmp_slice_lower_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1743;
        goto try_except_handler_6;
    }
    tmp_len_arg_10 = var_suffix;

    tmp_operand_name_8 = BUILTIN_LEN( tmp_len_arg_10 );
    if ( tmp_operand_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_5 );

        exception_lineno = 1743;
        goto try_except_handler_6;
    }
    tmp_slice_upper_9 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_8 );
    Py_DECREF( tmp_operand_name_8 );
    if ( tmp_slice_upper_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_5 );

        exception_lineno = 1743;
        goto try_except_handler_6;
    }
    tmp_compare_left_5 = LOOKUP_SLICE( tmp_slice_source_12, tmp_slice_lower_5, tmp_slice_upper_9 );
    Py_DECREF( tmp_slice_lower_5 );
    Py_DECREF( tmp_slice_upper_9 );
    if ( tmp_compare_left_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1743;
        goto try_except_handler_6;
    }
    tmp_compare_right_5 = const_tuple_unicode_plain_ar_unicode_plain_er_unicode_plain_ir_tuple;
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_In_3 == -1) );
    Py_DECREF( tmp_compare_left_5 );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_source_name_12 = const_unicode_empty;
    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_join );
    assert( tmp_called_name_6 != NULL );
    tmp_args_element_name_9 = PyTuple_New( 2 );
    tmp_slice_source_13 = par_word;

    if ( tmp_slice_source_13 == NULL )
    {
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_9 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1745;
        goto try_except_handler_6;
    }

    tmp_len_arg_11 = var_suffix;

    tmp_operand_name_9 = BUILTIN_LEN( tmp_len_arg_11 );
    if ( tmp_operand_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 1745;
        goto try_except_handler_6;
    }
    tmp_slice_upper_10 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_9 );
    Py_DECREF( tmp_operand_name_9 );
    if ( tmp_slice_upper_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 1745;
        goto try_except_handler_6;
    }
    tmp_tuple_element_4 = LOOKUP_SLICE( tmp_slice_source_13, Py_None, tmp_slice_upper_10 );
    Py_DECREF( tmp_slice_upper_10 );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 1745;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_9, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_element_name_9, 1, tmp_tuple_element_4 );
    frame_function->f_lineno = 1745;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_assign_source_25 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1745;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_25;
        Py_XDECREF( old );
    }

    tmp_source_name_13 = const_unicode_empty;
    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_join );
    assert( tmp_called_name_7 != NULL );
    tmp_args_element_name_10 = PyTuple_New( 2 );
    tmp_slice_source_14 = var_r1;

    tmp_len_arg_12 = var_suffix;

    tmp_operand_name_10 = BUILTIN_LEN( tmp_len_arg_12 );
    if ( tmp_operand_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 1746;
        goto try_except_handler_6;
    }
    tmp_slice_upper_11 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_10 );
    Py_DECREF( tmp_operand_name_10 );
    if ( tmp_slice_upper_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 1746;
        goto try_except_handler_6;
    }
    tmp_tuple_element_5 = LOOKUP_SLICE( tmp_slice_source_14, Py_None, tmp_slice_upper_11 );
    Py_DECREF( tmp_slice_upper_11 );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 1746;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_10, 0, tmp_tuple_element_5 );
    tmp_tuple_element_5 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_args_element_name_10, 1, tmp_tuple_element_5 );
    frame_function->f_lineno = 1746;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_assign_source_26 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1746;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_26;
        Py_DECREF( old );
    }

    tmp_source_name_14 = const_unicode_empty;
    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_join );
    assert( tmp_called_name_8 != NULL );
    tmp_args_element_name_11 = PyTuple_New( 2 );
    tmp_slice_source_15 = var_r2;

    tmp_len_arg_13 = var_suffix;

    tmp_operand_name_11 = BUILTIN_LEN( tmp_len_arg_13 );
    if ( tmp_operand_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 1747;
        goto try_except_handler_6;
    }
    tmp_slice_upper_12 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_11 );
    Py_DECREF( tmp_operand_name_11 );
    if ( tmp_slice_upper_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 1747;
        goto try_except_handler_6;
    }
    tmp_tuple_element_6 = LOOKUP_SLICE( tmp_slice_source_15, Py_None, tmp_slice_upper_12 );
    Py_DECREF( tmp_slice_upper_12 );
    if ( tmp_tuple_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 1747;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_11, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_args_element_name_11, 1, tmp_tuple_element_6 );
    frame_function->f_lineno = 1747;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_assign_source_27 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1747;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_27;
        Py_DECREF( old );
    }

    tmp_source_name_15 = const_unicode_empty;
    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_join );
    assert( tmp_called_name_9 != NULL );
    tmp_args_element_name_12 = PyTuple_New( 2 );
    tmp_slice_source_16 = var_rv;

    tmp_len_arg_14 = var_suffix;

    tmp_operand_name_12 = BUILTIN_LEN( tmp_len_arg_14 );
    if ( tmp_operand_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_12 );

        exception_lineno = 1748;
        goto try_except_handler_6;
    }
    tmp_slice_upper_13 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_12 );
    Py_DECREF( tmp_operand_name_12 );
    if ( tmp_slice_upper_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_12 );

        exception_lineno = 1748;
        goto try_except_handler_6;
    }
    tmp_tuple_element_7 = LOOKUP_SLICE( tmp_slice_source_16, Py_None, tmp_slice_upper_13 );
    Py_DECREF( tmp_slice_upper_13 );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_12 );

        exception_lineno = 1748;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_12, 0, tmp_tuple_element_7 );
    tmp_tuple_element_7 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_args_element_name_12, 1, tmp_tuple_element_7 );
    frame_function->f_lineno = 1748;
    {
        PyObject *call_args[] = { tmp_args_element_name_12 };
        tmp_assign_source_28 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
    }

    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_12 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1748;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_28;
        Py_DECREF( old );
    }

    branch_no_8:;
    branch_end_7:;
    goto loop_end_3;
    branch_no_6:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1735;
        goto try_except_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_source_name_16 = par_self;

    tmp_iter_arg_5 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain__ItalianStemmer__step1_suffixes );
    if ( tmp_iter_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1752;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_29 = MAKE_ITERATOR( tmp_iter_arg_5 );
    Py_DECREF( tmp_iter_arg_5 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1752;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator == NULL );
    tmp_for_loop_4__for_iterator = tmp_assign_source_29;

    // Tried code:
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    tmp_assign_source_30 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_30 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1752;
            goto try_except_handler_7;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_30;
        Py_XDECREF( old );
    }

    tmp_assign_source_31 = tmp_for_loop_4__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_31;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_8 = par_word;

    if ( tmp_called_instance_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1753;
        goto try_except_handler_7;
    }

    tmp_args_element_name_13 = var_suffix;

    frame_function->f_lineno = 1753;
    {
        PyObject *call_args[] = { tmp_args_element_name_13 };
        tmp_cond_value_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1753;
        goto try_except_handler_7;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        exception_lineno = 1753;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_compexpr_left_5 = var_suffix;

    tmp_compexpr_right_5 = const_unicode_plain_amente;
    tmp_and_left_value_3 = RICH_COMPARE_EQ( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    if ( tmp_and_left_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1754;
        goto try_except_handler_7;
    }
    tmp_and_left_truth_3 = CHECK_IF_TRUE( tmp_and_left_value_3 );
    if ( tmp_and_left_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_3 );

        exception_lineno = 1754;
        goto try_except_handler_7;
    }
    if ( tmp_and_left_truth_3 == 1 )
    {
        goto and_right_3;
    }
    else
    {
        goto and_left_3;
    }
    and_right_3:;
    Py_DECREF( tmp_and_left_value_3 );
    tmp_called_instance_9 = var_r1;

    if ( tmp_called_instance_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1754;
        goto try_except_handler_7;
    }

    tmp_args_element_name_14 = var_suffix;

    frame_function->f_lineno = 1754;
    {
        PyObject *call_args[] = { tmp_args_element_name_14 };
        tmp_and_right_value_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_endswith, call_args );
    }

    if ( tmp_and_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1754;
        goto try_except_handler_7;
    }
    tmp_cond_value_5 = tmp_and_right_value_3;
    goto and_end_3;
    and_left_3:;
    tmp_cond_value_5 = tmp_and_left_value_3;
    and_end_3:;
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        exception_lineno = 1754;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_assign_source_32 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_32;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = -6;
    tmp_slice_source_17 = par_word;

    if ( tmp_slice_source_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1756;
        goto try_except_handler_7;
    }

    tmp_assign_source_33 = LOOKUP_INDEX_SLICE( tmp_slice_source_17, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1756;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_33;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = -6;
    tmp_slice_source_18 = var_r2;

    if ( tmp_slice_source_18 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 1757;
        goto try_except_handler_7;
    }

    tmp_assign_source_34 = LOOKUP_INDEX_SLICE( tmp_slice_source_18, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1757;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_34;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -6;
    tmp_slice_source_19 = var_rv;

    if ( tmp_slice_source_19 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1758;
        goto try_except_handler_7;
    }

    tmp_assign_source_35 = LOOKUP_INDEX_SLICE( tmp_slice_source_19, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1758;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_35;
        Py_XDECREF( old );
    }

    tmp_called_instance_10 = var_r2;

    frame_function->f_lineno = 1760;
    tmp_cond_value_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_iv_tuple, 0 ) );

    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1760;
        goto try_except_handler_7;
    }
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        exception_lineno = 1760;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = -2;
    tmp_slice_source_20 = par_word;

    tmp_assign_source_36 = LOOKUP_INDEX_SLICE( tmp_slice_source_20, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1761;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_36;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = -2;
    tmp_slice_source_21 = var_r2;

    tmp_assign_source_37 = LOOKUP_INDEX_SLICE( tmp_slice_source_21, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1762;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_37;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_6 = 0;
    tmp_slice_index_upper_6 = -2;
    tmp_slice_source_22 = var_rv;

    tmp_assign_source_38 = LOOKUP_INDEX_SLICE( tmp_slice_source_22, tmp_sliceslicedel_index_lower_6, tmp_slice_index_upper_6 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1763;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_38;
        Py_DECREF( old );
    }

    tmp_called_instance_11 = var_r2;

    frame_function->f_lineno = 1765;
    tmp_cond_value_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_at_tuple, 0 ) );

    if ( tmp_cond_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1765;
        goto try_except_handler_7;
    }
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        exception_lineno = 1765;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_sliceslicedel_index_lower_7 = 0;
    tmp_slice_index_upper_7 = -2;
    tmp_slice_source_23 = par_word;

    tmp_assign_source_39 = LOOKUP_INDEX_SLICE( tmp_slice_source_23, tmp_sliceslicedel_index_lower_7, tmp_slice_index_upper_7 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1766;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_39;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_8 = 0;
    tmp_slice_index_upper_8 = -2;
    tmp_slice_source_24 = var_rv;

    tmp_assign_source_40 = LOOKUP_INDEX_SLICE( tmp_slice_source_24, tmp_sliceslicedel_index_lower_8, tmp_slice_index_upper_8 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1767;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_40;
        Py_DECREF( old );
    }

    branch_no_12:;
    goto branch_end_11;
    branch_no_11:;
    tmp_called_instance_12 = var_r2;

    frame_function->f_lineno = 1769;
    tmp_cond_value_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_12, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_tuple_unicode_plain_os_unicode_plain_ic_tuple_tuple, 0 ) );

    if ( tmp_cond_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1769;
        goto try_except_handler_7;
    }
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        exception_lineno = 1769;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_sliceslicedel_index_lower_9 = 0;
    tmp_slice_index_upper_9 = -2;
    tmp_slice_source_25 = par_word;

    tmp_assign_source_41 = LOOKUP_INDEX_SLICE( tmp_slice_source_25, tmp_sliceslicedel_index_lower_9, tmp_slice_index_upper_9 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1770;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_41;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_10 = 0;
    tmp_slice_index_upper_10 = -2;
    tmp_slice_source_26 = var_rv;

    tmp_assign_source_42 = LOOKUP_INDEX_SLICE( tmp_slice_source_26, tmp_sliceslicedel_index_lower_10, tmp_slice_index_upper_10 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1771;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_42;
        Py_DECREF( old );
    }

    goto branch_end_13;
    branch_no_13:;
    tmp_called_instance_13 = var_r2;

    frame_function->f_lineno = 1773;
    tmp_cond_value_9 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_13, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_abil_tuple, 0 ) );

    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1773;
        goto try_except_handler_7;
    }
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        exception_lineno = 1773;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_sliceslicedel_index_lower_11 = 0;
    tmp_slice_index_upper_11 = -4;
    tmp_slice_source_27 = par_word;

    tmp_assign_source_43 = LOOKUP_INDEX_SLICE( tmp_slice_source_27, tmp_sliceslicedel_index_lower_11, tmp_slice_index_upper_11 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1774;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_43;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_12 = 0;
    tmp_slice_index_upper_12 = -4;
    tmp_slice_source_28 = var_rv;

    tmp_assign_source_44 = LOOKUP_INDEX_SLICE( tmp_slice_source_28, tmp_sliceslicedel_index_lower_12, tmp_slice_index_upper_12 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1775;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_44;
        Py_DECREF( old );
    }

    branch_no_14:;
    branch_end_13:;
    branch_end_11:;
    goto branch_end_10;
    branch_no_10:;
    tmp_compexpr_left_6 = var_suffix;

    tmp_compexpr_right_6 = const_tuple_72f993cfaab1015a764fda66527479d2_tuple;
    tmp_and_left_value_4 = SEQUENCE_CONTAINS( tmp_compexpr_left_6, tmp_compexpr_right_6 );
    if ( tmp_and_left_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1777;
        goto try_except_handler_7;
    }
    tmp_and_left_truth_4 = CHECK_IF_TRUE( tmp_and_left_value_4 );
    assert( !(tmp_and_left_truth_4 == -1) );
    if ( tmp_and_left_truth_4 == 1 )
    {
        goto and_right_4;
    }
    else
    {
        goto and_left_4;
    }
    and_right_4:;
    tmp_called_instance_14 = var_rv;

    if ( tmp_called_instance_14 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1779;
        goto try_except_handler_7;
    }

    tmp_args_element_name_15 = var_suffix;

    frame_function->f_lineno = 1779;
    {
        PyObject *call_args[] = { tmp_args_element_name_15 };
        tmp_and_right_value_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_14, const_str_plain_endswith, call_args );
    }

    if ( tmp_and_right_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1779;
        goto try_except_handler_7;
    }
    tmp_cond_value_10 = tmp_and_right_value_4;
    goto and_end_4;
    and_left_4:;
    Py_INCREF( tmp_and_left_value_4 );
    tmp_cond_value_10 = tmp_and_left_value_4;
    and_end_4:;
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        exception_lineno = 1779;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_assign_source_45 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_45;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_13 = 0;
    tmp_slice_index_upper_13 = -6;
    tmp_slice_source_29 = par_word;

    if ( tmp_slice_source_29 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1781;
        goto try_except_handler_7;
    }

    tmp_assign_source_46 = LOOKUP_INDEX_SLICE( tmp_slice_source_29, tmp_sliceslicedel_index_lower_13, tmp_slice_index_upper_13 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1781;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_46;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_14 = 0;
    tmp_slice_index_upper_14 = -6;
    tmp_slice_source_30 = var_rv;

    if ( tmp_slice_source_30 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1782;
        goto try_except_handler_7;
    }

    tmp_assign_source_47 = LOOKUP_INDEX_SLICE( tmp_slice_source_30, tmp_sliceslicedel_index_lower_14, tmp_slice_index_upper_14 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1782;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_47;
        Py_XDECREF( old );
    }

    goto branch_end_15;
    branch_no_15:;
    tmp_called_instance_15 = var_r2;

    if ( tmp_called_instance_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 1784;
        goto try_except_handler_7;
    }

    tmp_args_element_name_16 = var_suffix;

    frame_function->f_lineno = 1784;
    {
        PyObject *call_args[] = { tmp_args_element_name_16 };
        tmp_cond_value_11 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_15, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1784;
        goto try_except_handler_7;
    }
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_11 );

        exception_lineno = 1784;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_assign_source_48 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_48;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    tmp_compare_left_6 = var_suffix;

    tmp_compare_right_6 = const_tuple_33926bbcf7613052ed66bc027b49957d_tuple;
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_slice_source_31 = par_word;

    if ( tmp_slice_source_31 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1787;
        goto try_except_handler_7;
    }

    tmp_len_arg_15 = var_suffix;

    tmp_operand_name_13 = BUILTIN_LEN( tmp_len_arg_15 );
    if ( tmp_operand_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1787;
        goto try_except_handler_7;
    }
    tmp_slice_upper_14 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_13 );
    Py_DECREF( tmp_operand_name_13 );
    if ( tmp_slice_upper_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1787;
        goto try_except_handler_7;
    }
    tmp_assign_source_49 = LOOKUP_SLICE( tmp_slice_source_31, Py_None, tmp_slice_upper_14 );
    Py_DECREF( tmp_slice_upper_14 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1787;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_49;
        Py_XDECREF( old );
    }

    tmp_slice_source_32 = var_r2;

    if ( tmp_slice_source_32 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 1788;
        goto try_except_handler_7;
    }

    tmp_len_arg_16 = var_suffix;

    tmp_operand_name_14 = BUILTIN_LEN( tmp_len_arg_16 );
    if ( tmp_operand_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1788;
        goto try_except_handler_7;
    }
    tmp_slice_upper_15 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_14 );
    Py_DECREF( tmp_operand_name_14 );
    if ( tmp_slice_upper_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1788;
        goto try_except_handler_7;
    }
    tmp_assign_source_50 = LOOKUP_SLICE( tmp_slice_source_32, Py_None, tmp_slice_upper_15 );
    Py_DECREF( tmp_slice_upper_15 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1788;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_50;
        Py_XDECREF( old );
    }

    tmp_slice_source_33 = var_rv;

    if ( tmp_slice_source_33 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1789;
        goto try_except_handler_7;
    }

    tmp_len_arg_17 = var_suffix;

    tmp_operand_name_15 = BUILTIN_LEN( tmp_len_arg_17 );
    if ( tmp_operand_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1789;
        goto try_except_handler_7;
    }
    tmp_slice_upper_16 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_15 );
    Py_DECREF( tmp_operand_name_15 );
    if ( tmp_slice_upper_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1789;
        goto try_except_handler_7;
    }
    tmp_assign_source_51 = LOOKUP_SLICE( tmp_slice_source_33, Py_None, tmp_slice_upper_16 );
    Py_DECREF( tmp_slice_upper_16 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1789;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_51;
        Py_XDECREF( old );
    }

    tmp_called_instance_16 = var_r2;

    frame_function->f_lineno = 1791;
    tmp_cond_value_12 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_16, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_ic_tuple, 0 ) );

    if ( tmp_cond_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1791;
        goto try_except_handler_7;
    }
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_12 );

        exception_lineno = 1791;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_sliceslicedel_index_lower_15 = 0;
    tmp_slice_index_upper_15 = -2;
    tmp_slice_source_34 = par_word;

    tmp_assign_source_52 = LOOKUP_INDEX_SLICE( tmp_slice_source_34, tmp_sliceslicedel_index_lower_15, tmp_slice_index_upper_15 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1792;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_52;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_16 = 0;
    tmp_slice_index_upper_16 = -2;
    tmp_slice_source_35 = var_rv;

    tmp_assign_source_53 = LOOKUP_INDEX_SLICE( tmp_slice_source_35, tmp_sliceslicedel_index_lower_16, tmp_slice_index_upper_16 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1793;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_53;
        Py_DECREF( old );
    }

    branch_no_18:;
    goto branch_end_17;
    branch_no_17:;
    tmp_compare_left_7 = var_suffix;

    tmp_compare_right_7 = const_tuple_unicode_plain_logia_unicode_plain_logie_tuple;
    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    assert( !(tmp_cmp_In_5 == -1) );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_sliceslicedel_index_lower_17 = 0;
    tmp_slice_index_upper_17 = -2;
    tmp_slice_source_36 = par_word;

    if ( tmp_slice_source_36 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1796;
        goto try_except_handler_7;
    }

    tmp_assign_source_54 = LOOKUP_INDEX_SLICE( tmp_slice_source_36, tmp_sliceslicedel_index_lower_17, tmp_slice_index_upper_17 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1796;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_54;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_18 = 0;
    tmp_slice_index_upper_18 = -2;
    tmp_slice_source_37 = par_word;

    tmp_assign_source_55 = LOOKUP_INDEX_SLICE( tmp_slice_source_37, tmp_sliceslicedel_index_lower_18, tmp_slice_index_upper_18 );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1797;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_55;
        Py_XDECREF( old );
    }

    goto branch_end_19;
    branch_no_19:;
    tmp_compare_left_8 = var_suffix;

    tmp_compare_right_8 = const_tuple_6f6fa85f530d51930aae374e32e24830_tuple;
    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_6 == -1) );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_sliceslicedel_index_lower_19 = 0;
    tmp_slice_index_upper_19 = -5;
    tmp_slice_source_38 = par_word;

    if ( tmp_slice_source_38 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1801;
        goto try_except_handler_7;
    }

    tmp_assign_source_56 = LOOKUP_INDEX_SLICE( tmp_slice_source_38, tmp_sliceslicedel_index_lower_19, tmp_slice_index_upper_19 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1801;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_56;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_20 = 0;
    tmp_slice_index_upper_20 = -5;
    tmp_slice_source_39 = var_rv;

    if ( tmp_slice_source_39 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1802;
        goto try_except_handler_7;
    }

    tmp_assign_source_57 = LOOKUP_INDEX_SLICE( tmp_slice_source_39, tmp_sliceslicedel_index_lower_20, tmp_slice_index_upper_20 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1802;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_57;
        Py_XDECREF( old );
    }

    goto branch_end_20;
    branch_no_20:;
    tmp_compare_left_9 = var_suffix;

    tmp_compare_right_9 = const_tuple_unicode_plain_enza_unicode_plain_enze_tuple;
    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    assert( !(tmp_cmp_In_7 == -1) );
    if ( tmp_cmp_In_7 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_source_name_17 = const_unicode_empty;
    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_join );
    assert( tmp_called_name_10 != NULL );
    tmp_args_element_name_17 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_21 = 0;
    tmp_slice_index_upper_21 = -2;
    tmp_slice_source_40 = par_word;

    if ( tmp_slice_source_40 == NULL )
    {
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_args_element_name_17 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1805;
        goto try_except_handler_7;
    }

    tmp_tuple_element_8 = LOOKUP_INDEX_SLICE( tmp_slice_source_40, tmp_sliceslicedel_index_lower_21, tmp_slice_index_upper_21 );
    if ( tmp_tuple_element_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_args_element_name_17 );

        exception_lineno = 1805;
        goto try_except_handler_7;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_17, 0, tmp_tuple_element_8 );
    tmp_tuple_element_8 = const_unicode_plain_te;
    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_args_element_name_17, 1, tmp_tuple_element_8 );
    frame_function->f_lineno = 1805;
    {
        PyObject *call_args[] = { tmp_args_element_name_17 };
        tmp_assign_source_58 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
    }

    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_element_name_17 );
    if ( tmp_assign_source_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1805;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_58;
        Py_XDECREF( old );
    }

    tmp_source_name_18 = const_unicode_empty;
    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_join );
    assert( tmp_called_name_11 != NULL );
    tmp_args_element_name_18 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_22 = 0;
    tmp_slice_index_upper_22 = -2;
    tmp_slice_source_41 = var_rv;

    if ( tmp_slice_source_41 == NULL )
    {
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_18 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1806;
        goto try_except_handler_7;
    }

    tmp_tuple_element_9 = LOOKUP_INDEX_SLICE( tmp_slice_source_41, tmp_sliceslicedel_index_lower_22, tmp_slice_index_upper_22 );
    if ( tmp_tuple_element_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_18 );

        exception_lineno = 1806;
        goto try_except_handler_7;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_18, 0, tmp_tuple_element_9 );
    tmp_tuple_element_9 = const_unicode_plain_te;
    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_args_element_name_18, 1, tmp_tuple_element_9 );
    frame_function->f_lineno = 1806;
    {
        PyObject *call_args[] = { tmp_args_element_name_18 };
        tmp_assign_source_59 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
    }

    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_18 );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1806;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_59;
        Py_XDECREF( old );
    }

    goto branch_end_21;
    branch_no_21:;
    tmp_compare_left_10 = var_suffix;

    tmp_compare_right_10 = const_unicode_digest_61d5dfdfedbb4893ed3a8545e77992a3;
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_10, tmp_compare_right_10 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1808;
        goto try_except_handler_7;
    }
    if ( tmp_cmp_Eq_3 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_sliceslicedel_index_lower_23 = 0;
    tmp_slice_index_upper_23 = -3;
    tmp_slice_source_42 = par_word;

    if ( tmp_slice_source_42 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1809;
        goto try_except_handler_7;
    }

    tmp_assign_source_60 = LOOKUP_INDEX_SLICE( tmp_slice_source_42, tmp_sliceslicedel_index_lower_23, tmp_slice_index_upper_23 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1809;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_60;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_24 = 0;
    tmp_slice_index_upper_24 = -3;
    tmp_slice_source_43 = var_r2;

    if ( tmp_slice_source_43 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 1810;
        goto try_except_handler_7;
    }

    tmp_assign_source_61 = LOOKUP_INDEX_SLICE( tmp_slice_source_43, tmp_sliceslicedel_index_lower_24, tmp_slice_index_upper_24 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1810;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_61;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_25 = 0;
    tmp_slice_index_upper_25 = -3;
    tmp_slice_source_44 = var_rv;

    if ( tmp_slice_source_44 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1811;
        goto try_except_handler_7;
    }

    tmp_assign_source_62 = LOOKUP_INDEX_SLICE( tmp_slice_source_44, tmp_sliceslicedel_index_lower_25, tmp_slice_index_upper_25 );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1811;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_62;
        Py_XDECREF( old );
    }

    tmp_called_instance_17 = var_r2;

    frame_function->f_lineno = 1813;
    tmp_cond_value_13 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_17, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_tuple_unicode_plain_ic_unicode_plain_iv_tuple_tuple, 0 ) );

    if ( tmp_cond_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1813;
        goto try_except_handler_7;
    }
    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_13 );

        exception_lineno = 1813;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == 1 )
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_sliceslicedel_index_lower_26 = 0;
    tmp_slice_index_upper_26 = -2;
    tmp_slice_source_45 = par_word;

    tmp_assign_source_63 = LOOKUP_INDEX_SLICE( tmp_slice_source_45, tmp_sliceslicedel_index_lower_26, tmp_slice_index_upper_26 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1814;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_63;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_27 = 0;
    tmp_slice_index_upper_27 = -2;
    tmp_slice_source_46 = var_rv;

    tmp_assign_source_64 = LOOKUP_INDEX_SLICE( tmp_slice_source_46, tmp_sliceslicedel_index_lower_27, tmp_slice_index_upper_27 );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1815;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_64;
        Py_DECREF( old );
    }

    goto branch_end_23;
    branch_no_23:;
    tmp_called_instance_18 = var_r2;

    frame_function->f_lineno = 1817;
    tmp_cond_value_14 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_18, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_abil_tuple, 0 ) );

    if ( tmp_cond_value_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1817;
        goto try_except_handler_7;
    }
    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_14 );

        exception_lineno = 1817;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == 1 )
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_sliceslicedel_index_lower_28 = 0;
    tmp_slice_index_upper_28 = -4;
    tmp_slice_source_47 = par_word;

    tmp_assign_source_65 = LOOKUP_INDEX_SLICE( tmp_slice_source_47, tmp_sliceslicedel_index_lower_28, tmp_slice_index_upper_28 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1818;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_65;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_29 = 0;
    tmp_slice_index_upper_29 = -4;
    tmp_slice_source_48 = var_rv;

    tmp_assign_source_66 = LOOKUP_INDEX_SLICE( tmp_slice_source_48, tmp_sliceslicedel_index_lower_29, tmp_slice_index_upper_29 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1819;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_66;
        Py_DECREF( old );
    }

    branch_no_24:;
    branch_end_23:;
    goto branch_end_22;
    branch_no_22:;
    tmp_compare_left_11 = var_suffix;

    tmp_compare_right_11 = const_tuple_083a553af28068318eb4d12c441913d8_tuple;
    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    assert( !(tmp_cmp_In_8 == -1) );
    if ( tmp_cmp_In_8 == 1 )
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    tmp_sliceslicedel_index_lower_30 = 0;
    tmp_slice_index_upper_30 = -3;
    tmp_slice_source_49 = par_word;

    if ( tmp_slice_source_49 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1822;
        goto try_except_handler_7;
    }

    tmp_assign_source_67 = LOOKUP_INDEX_SLICE( tmp_slice_source_49, tmp_sliceslicedel_index_lower_30, tmp_slice_index_upper_30 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1822;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_67;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_31 = 0;
    tmp_slice_index_upper_31 = -3;
    tmp_slice_source_50 = var_r2;

    if ( tmp_slice_source_50 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 1823;
        goto try_except_handler_7;
    }

    tmp_assign_source_68 = LOOKUP_INDEX_SLICE( tmp_slice_source_50, tmp_sliceslicedel_index_lower_31, tmp_slice_index_upper_31 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1823;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_68;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_32 = 0;
    tmp_slice_index_upper_32 = -3;
    tmp_slice_source_51 = var_rv;

    if ( tmp_slice_source_51 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1824;
        goto try_except_handler_7;
    }

    tmp_assign_source_69 = LOOKUP_INDEX_SLICE( tmp_slice_source_51, tmp_sliceslicedel_index_lower_32, tmp_slice_index_upper_32 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1824;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_69;
        Py_XDECREF( old );
    }

    tmp_called_instance_19 = var_r2;

    frame_function->f_lineno = 1826;
    tmp_cond_value_15 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_19, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_at_tuple, 0 ) );

    if ( tmp_cond_value_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1826;
        goto try_except_handler_7;
    }
    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_15 );

        exception_lineno = 1826;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == 1 )
    {
        goto branch_yes_26;
    }
    else
    {
        goto branch_no_26;
    }
    branch_yes_26:;
    tmp_sliceslicedel_index_lower_33 = 0;
    tmp_slice_index_upper_33 = -2;
    tmp_slice_source_52 = par_word;

    tmp_assign_source_70 = LOOKUP_INDEX_SLICE( tmp_slice_source_52, tmp_sliceslicedel_index_lower_33, tmp_slice_index_upper_33 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1827;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_70;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_34 = 0;
    tmp_slice_index_upper_34 = -2;
    tmp_slice_source_53 = var_r2;

    tmp_assign_source_71 = LOOKUP_INDEX_SLICE( tmp_slice_source_53, tmp_sliceslicedel_index_lower_34, tmp_slice_index_upper_34 );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1828;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_71;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_35 = 0;
    tmp_slice_index_upper_35 = -2;
    tmp_slice_source_54 = var_rv;

    tmp_assign_source_72 = LOOKUP_INDEX_SLICE( tmp_slice_source_54, tmp_sliceslicedel_index_lower_35, tmp_slice_index_upper_35 );
    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1829;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_72;
        Py_DECREF( old );
    }

    tmp_called_instance_20 = var_r2;

    frame_function->f_lineno = 1831;
    tmp_cond_value_16 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_20, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_ic_tuple, 0 ) );

    if ( tmp_cond_value_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1831;
        goto try_except_handler_7;
    }
    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_16 );

        exception_lineno = 1831;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == 1 )
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_sliceslicedel_index_lower_36 = 0;
    tmp_slice_index_upper_36 = -2;
    tmp_slice_source_55 = par_word;

    tmp_assign_source_73 = LOOKUP_INDEX_SLICE( tmp_slice_source_55, tmp_sliceslicedel_index_lower_36, tmp_slice_index_upper_36 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1832;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_73;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_37 = 0;
    tmp_slice_index_upper_37 = -2;
    tmp_slice_source_56 = var_rv;

    tmp_assign_source_74 = LOOKUP_INDEX_SLICE( tmp_slice_source_56, tmp_sliceslicedel_index_lower_37, tmp_slice_index_upper_37 );
    if ( tmp_assign_source_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1833;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_74;
        Py_DECREF( old );
    }

    branch_no_27:;
    branch_no_26:;
    goto branch_end_25;
    branch_no_25:;
    tmp_slice_source_57 = par_word;

    if ( tmp_slice_source_57 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1835;
        goto try_except_handler_7;
    }

    tmp_len_arg_18 = var_suffix;

    tmp_operand_name_16 = BUILTIN_LEN( tmp_len_arg_18 );
    if ( tmp_operand_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1835;
        goto try_except_handler_7;
    }
    tmp_slice_upper_17 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_16 );
    Py_DECREF( tmp_operand_name_16 );
    if ( tmp_slice_upper_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1835;
        goto try_except_handler_7;
    }
    tmp_assign_source_75 = LOOKUP_SLICE( tmp_slice_source_57, Py_None, tmp_slice_upper_17 );
    Py_DECREF( tmp_slice_upper_17 );
    if ( tmp_assign_source_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1835;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_75;
        Py_XDECREF( old );
    }

    tmp_slice_source_58 = var_rv;

    if ( tmp_slice_source_58 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1836;
        goto try_except_handler_7;
    }

    tmp_len_arg_19 = var_suffix;

    tmp_operand_name_17 = BUILTIN_LEN( tmp_len_arg_19 );
    if ( tmp_operand_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1836;
        goto try_except_handler_7;
    }
    tmp_slice_upper_18 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_17 );
    Py_DECREF( tmp_operand_name_17 );
    if ( tmp_slice_upper_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1836;
        goto try_except_handler_7;
    }
    tmp_assign_source_76 = LOOKUP_SLICE( tmp_slice_source_58, Py_None, tmp_slice_upper_18 );
    Py_DECREF( tmp_slice_upper_18 );
    if ( tmp_assign_source_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1836;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_76;
        Py_XDECREF( old );
    }

    branch_end_25:;
    branch_end_22:;
    branch_end_21:;
    branch_end_20:;
    branch_end_19:;
    branch_end_17:;
    branch_no_16:;
    branch_end_15:;
    branch_end_10:;
    goto loop_end_4;
    branch_no_9:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1752;
        goto try_except_handler_7;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    tmp_cond_value_17 = var_step1_success;

    if ( tmp_cond_value_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step1_success" );
        exception_tb = NULL;

        exception_lineno = 1840;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_17 = CHECK_IF_TRUE( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1840;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_17 == 1 )
    {
        goto branch_no_28;
    }
    else
    {
        goto branch_yes_28;
    }
    branch_yes_28:;
    tmp_source_name_19 = par_self;

    tmp_iter_arg_6 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain__ItalianStemmer__step2_suffixes );
    if ( tmp_iter_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1841;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_77 = MAKE_ITERATOR( tmp_iter_arg_6 );
    Py_DECREF( tmp_iter_arg_6 );
    if ( tmp_assign_source_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1841;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_5__for_iterator == NULL );
    tmp_for_loop_5__for_iterator = tmp_assign_source_77;

    // Tried code:
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator;

    tmp_assign_source_78 = ITERATOR_NEXT( tmp_next_source_5 );
    if ( tmp_assign_source_78 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_5;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1841;
            goto try_except_handler_8;
        }
    }

    {
        PyObject *old = tmp_for_loop_5__iter_value;
        tmp_for_loop_5__iter_value = tmp_assign_source_78;
        Py_XDECREF( old );
    }

    tmp_assign_source_79 = tmp_for_loop_5__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_79;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_21 = var_rv;

    if ( tmp_called_instance_21 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1842;
        goto try_except_handler_8;
    }

    tmp_args_element_name_19 = var_suffix;

    frame_function->f_lineno = 1842;
    {
        PyObject *call_args[] = { tmp_args_element_name_19 };
        tmp_cond_value_18 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_21, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1842;
        goto try_except_handler_8;
    }
    tmp_cond_truth_18 = CHECK_IF_TRUE( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_18 );

        exception_lineno = 1842;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == 1 )
    {
        goto branch_yes_29;
    }
    else
    {
        goto branch_no_29;
    }
    branch_yes_29:;
    tmp_slice_source_59 = par_word;

    if ( tmp_slice_source_59 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1843;
        goto try_except_handler_8;
    }

    tmp_len_arg_20 = var_suffix;

    tmp_operand_name_18 = BUILTIN_LEN( tmp_len_arg_20 );
    if ( tmp_operand_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1843;
        goto try_except_handler_8;
    }
    tmp_slice_upper_19 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_18 );
    Py_DECREF( tmp_operand_name_18 );
    if ( tmp_slice_upper_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1843;
        goto try_except_handler_8;
    }
    tmp_assign_source_80 = LOOKUP_SLICE( tmp_slice_source_59, Py_None, tmp_slice_upper_19 );
    Py_DECREF( tmp_slice_upper_19 );
    if ( tmp_assign_source_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1843;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_80;
        Py_XDECREF( old );
    }

    tmp_slice_source_60 = var_rv;

    if ( tmp_slice_source_60 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1844;
        goto try_except_handler_8;
    }

    tmp_len_arg_21 = var_suffix;

    tmp_operand_name_19 = BUILTIN_LEN( tmp_len_arg_21 );
    if ( tmp_operand_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1844;
        goto try_except_handler_8;
    }
    tmp_slice_upper_20 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_19 );
    Py_DECREF( tmp_operand_name_19 );
    if ( tmp_slice_upper_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1844;
        goto try_except_handler_8;
    }
    tmp_assign_source_81 = LOOKUP_SLICE( tmp_slice_source_60, Py_None, tmp_slice_upper_20 );
    Py_DECREF( tmp_slice_upper_20 );
    if ( tmp_assign_source_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1844;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_81;
        Py_XDECREF( old );
    }

    goto loop_end_5;
    branch_no_29:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1841;
        goto try_except_handler_8;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    branch_no_28:;
    tmp_called_instance_22 = var_rv;

    if ( tmp_called_instance_22 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1848;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1848;
    tmp_cond_value_19 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_22, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_tuple_42984e9c76991a83543acab6e2f18f9a_tuple_tuple, 0 ) );

    if ( tmp_cond_value_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1848;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_19 = CHECK_IF_TRUE( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_19 );

        exception_lineno = 1848;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == 1 )
    {
        goto branch_yes_30;
    }
    else
    {
        goto branch_no_30;
    }
    branch_yes_30:;
    tmp_sliceslicedel_index_lower_38 = 0;
    tmp_slice_index_upper_38 = -1;
    tmp_slice_source_61 = par_word;

    if ( tmp_slice_source_61 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1850;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_82 = LOOKUP_INDEX_SLICE( tmp_slice_source_61, tmp_sliceslicedel_index_lower_38, tmp_slice_index_upper_38 );
    if ( tmp_assign_source_82 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1850;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_82;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_39 = 0;
    tmp_slice_index_upper_39 = -1;
    tmp_slice_source_62 = var_rv;

    if ( tmp_slice_source_62 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1851;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_83 = LOOKUP_INDEX_SLICE( tmp_slice_source_62, tmp_sliceslicedel_index_lower_39, tmp_slice_index_upper_39 );
    if ( tmp_assign_source_83 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1851;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_83;
        Py_XDECREF( old );
    }

    tmp_called_instance_23 = var_rv;

    frame_function->f_lineno = 1853;
    tmp_cond_value_20 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_23, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_i_tuple, 0 ) );

    if ( tmp_cond_value_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1853;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_20 = CHECK_IF_TRUE( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_20 );

        exception_lineno = 1853;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == 1 )
    {
        goto branch_yes_31;
    }
    else
    {
        goto branch_no_31;
    }
    branch_yes_31:;
    tmp_sliceslicedel_index_lower_40 = 0;
    tmp_slice_index_upper_40 = -1;
    tmp_slice_source_63 = par_word;

    tmp_assign_source_84 = LOOKUP_INDEX_SLICE( tmp_slice_source_63, tmp_sliceslicedel_index_lower_40, tmp_slice_index_upper_40 );
    if ( tmp_assign_source_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1854;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_84;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_41 = 0;
    tmp_slice_index_upper_41 = -1;
    tmp_slice_source_64 = var_rv;

    tmp_assign_source_85 = LOOKUP_INDEX_SLICE( tmp_slice_source_64, tmp_sliceslicedel_index_lower_41, tmp_slice_index_upper_41 );
    if ( tmp_assign_source_85 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1855;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_85;
        Py_DECREF( old );
    }

    branch_no_31:;
    branch_no_30:;
    tmp_called_instance_24 = var_rv;

    if ( tmp_called_instance_24 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 1858;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1858;
    tmp_cond_value_21 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_24, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_tuple_unicode_plain_ch_unicode_plain_gh_tuple_tuple, 0 ) );

    if ( tmp_cond_value_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1858;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_21 = CHECK_IF_TRUE( tmp_cond_value_21 );
    if ( tmp_cond_truth_21 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_21 );

        exception_lineno = 1858;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_21 );
    if ( tmp_cond_truth_21 == 1 )
    {
        goto branch_yes_32;
    }
    else
    {
        goto branch_no_32;
    }
    branch_yes_32:;
    tmp_sliceslicedel_index_lower_42 = 0;
    tmp_slice_index_upper_42 = -1;
    tmp_slice_source_65 = par_word;

    if ( tmp_slice_source_65 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1859;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_86 = LOOKUP_INDEX_SLICE( tmp_slice_source_65, tmp_sliceslicedel_index_lower_42, tmp_slice_index_upper_42 );
    if ( tmp_assign_source_86 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1859;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_86;
        Py_XDECREF( old );
    }

    branch_no_32:;
    tmp_called_instance_26 = par_word;

    if ( tmp_called_instance_26 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1861;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 1861;
    tmp_called_instance_25 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_26, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_unicode_plain_I_unicode_plain_i_tuple, 0 ) );

    if ( tmp_called_instance_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1861;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1861;
    tmp_assign_source_87 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_25, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_unicode_plain_U_unicode_plain_u_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_25 );
    if ( tmp_assign_source_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1861;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_87;
        Py_XDECREF( old );
    }


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_step1_success )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_step1_success,
                    var_step1_success
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_r2 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r2,
                    var_r2
                );

                assert( res == 0 );
            }

            if ( var_rv )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_rv,
                    var_rv
                );

                assert( res == 0 );
            }

            if ( var_suffix )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_suffix,
                    var_suffix
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_10_ItalianStemmer$$$function_1_stem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step1_success );
    var_step1_success = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step1_success );
    var_step1_success = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_10_ItalianStemmer$$$function_1_stem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_11_NorwegianStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__NorwegianStemmer__vowels = NULL;
    PyObject *var__NorwegianStemmer__s_ending = NULL;
    PyObject *var__NorwegianStemmer__step1_suffixes = NULL;
    PyObject *var__NorwegianStemmer__step2_suffixes = NULL;
    PyObject *var__NorwegianStemmer__step3_suffixes = NULL;
    PyObject *var_stem = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_08c166a915d14fca1c8754bb3a41f4e5;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_unicode_digest_095a177b51f187e5ba20c32fce88fe1d;
    assert( var__NorwegianStemmer__vowels == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var__NorwegianStemmer__vowels = tmp_assign_source_3;

    tmp_assign_source_4 = const_unicode_plain_bcdfghjlmnoprtvyz;
    assert( var__NorwegianStemmer__s_ending == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var__NorwegianStemmer__s_ending = tmp_assign_source_4;

    tmp_assign_source_5 = const_tuple_fe4d09a5deefee50a47d3d66a36a6f27_tuple;
    assert( var__NorwegianStemmer__step1_suffixes == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__NorwegianStemmer__step1_suffixes = tmp_assign_source_5;

    tmp_assign_source_6 = const_tuple_unicode_plain_dt_unicode_plain_vt_tuple;
    assert( var__NorwegianStemmer__step2_suffixes == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var__NorwegianStemmer__step2_suffixes = tmp_assign_source_6;

    tmp_assign_source_7 = const_tuple_0757d1e33667396b38455d34c482f4db_tuple;
    assert( var__NorwegianStemmer__step3_suffixes == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var__NorwegianStemmer__step3_suffixes = tmp_assign_source_7;

    tmp_assign_source_8 = MAKE_FUNCTION_nltk$stem$snowball$$$class_11_NorwegianStemmer$$$function_1_stem(  );
    assert( var_stem == NULL );
    var_stem = tmp_assign_source_8;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__NorwegianStemmer__vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__NorwegianStemmer__vowels,
            var__NorwegianStemmer__vowels
        );

        assert( res == 0 );
    }

    if ( var__NorwegianStemmer__s_ending )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__NorwegianStemmer__s_ending,
            var__NorwegianStemmer__s_ending
        );

        assert( res == 0 );
    }

    if ( var__NorwegianStemmer__step1_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__NorwegianStemmer__step1_suffixes,
            var__NorwegianStemmer__step1_suffixes
        );

        assert( res == 0 );
    }

    if ( var__NorwegianStemmer__step2_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__NorwegianStemmer__step2_suffixes,
            var__NorwegianStemmer__step2_suffixes
        );

        assert( res == 0 );
    }

    if ( var__NorwegianStemmer__step3_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__NorwegianStemmer__step3_suffixes,
            var__NorwegianStemmer__step3_suffixes
        );

        assert( res == 0 );
    }

    if ( var_stem )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_stem,
            var_stem
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_11_NorwegianStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__NorwegianStemmer__vowels );
    Py_DECREF( var__NorwegianStemmer__vowels );
    var__NorwegianStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__NorwegianStemmer__s_ending );
    Py_DECREF( var__NorwegianStemmer__s_ending );
    var__NorwegianStemmer__s_ending = NULL;

    CHECK_OBJECT( (PyObject *)var__NorwegianStemmer__step1_suffixes );
    Py_DECREF( var__NorwegianStemmer__step1_suffixes );
    var__NorwegianStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__NorwegianStemmer__step2_suffixes );
    Py_DECREF( var__NorwegianStemmer__step2_suffixes );
    var__NorwegianStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__NorwegianStemmer__step3_suffixes );
    Py_DECREF( var__NorwegianStemmer__step3_suffixes );
    var__NorwegianStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__NorwegianStemmer__vowels );
    Py_DECREF( var__NorwegianStemmer__vowels );
    var__NorwegianStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__NorwegianStemmer__s_ending );
    Py_DECREF( var__NorwegianStemmer__s_ending );
    var__NorwegianStemmer__s_ending = NULL;

    CHECK_OBJECT( (PyObject *)var__NorwegianStemmer__step1_suffixes );
    Py_DECREF( var__NorwegianStemmer__step1_suffixes );
    var__NorwegianStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__NorwegianStemmer__step2_suffixes );
    Py_DECREF( var__NorwegianStemmer__step2_suffixes );
    var__NorwegianStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__NorwegianStemmer__step3_suffixes );
    Py_DECREF( var__NorwegianStemmer__step3_suffixes );
    var__NorwegianStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_11_NorwegianStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_11_NorwegianStemmer$$$function_1_stem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_r1 = NULL;
    PyObject *var_suffix = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    int tmp_cmp_Eq_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    PyObject *tmp_operand_name_4;
    PyObject *tmp_operand_name_5;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_return_value;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    PyObject *tmp_slice_upper_4;
    PyObject *tmp_slice_upper_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b5b69d6e30ecfcc2bbdf301ba1783573, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_word;

    tmp_source_name_1 = par_self;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stopwords );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1913;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_called_instance_1 = par_word;

    frame_function->f_lineno = 1916;
    tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_lower );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1916;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_1;
        Py_DECREF( old );
    }

    tmp_source_name_2 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__r1_scandinavian );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1918;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_word;

    tmp_source_name_3 = par_self;

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__NorwegianStemmer__vowels );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 1918;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 1918;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1918;
        goto frame_exception_exit_1;
    }
    assert( var_r1 == NULL );
    var_r1 = tmp_assign_source_2;

    tmp_source_name_4 = par_self;

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__NorwegianStemmer__step1_suffixes );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1921;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1921;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_3;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1921;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_assign_source_5 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_5;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_2 = var_r1;

    tmp_args_element_name_3 = var_suffix;

    frame_function->f_lineno = 1922;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_cond_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1922;
        goto try_except_handler_2;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 1922;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_compare_left_2 = var_suffix;

    tmp_compare_right_2 = const_tuple_unicode_plain_erte_unicode_plain_ert_tuple;
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_5 = const_unicode_empty;
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_join );
    assert( tmp_called_name_2 != NULL );
    tmp_args_element_name_4 = PyTuple_New( 2 );
    tmp_slice_source_1 = par_word;

    tmp_len_arg_1 = var_suffix;

    tmp_operand_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 1924;
        goto try_except_handler_2;
    }
    tmp_slice_upper_1 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_slice_upper_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 1924;
        goto try_except_handler_2;
    }
    tmp_tuple_element_1 = LOOKUP_SLICE( tmp_slice_source_1, Py_None, tmp_slice_upper_1 );
    Py_DECREF( tmp_slice_upper_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_4 );

        exception_lineno = 1924;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_4, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_unicode_plain_er;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_4, 1, tmp_tuple_element_1 );
    frame_function->f_lineno = 1924;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1924;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_6;
        Py_DECREF( old );
    }

    tmp_source_name_6 = const_unicode_empty;
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_join );
    assert( tmp_called_name_3 != NULL );
    tmp_args_element_name_5 = PyTuple_New( 2 );
    tmp_slice_source_2 = var_r1;

    tmp_len_arg_2 = var_suffix;

    tmp_operand_name_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 1925;
        goto try_except_handler_2;
    }
    tmp_slice_upper_2 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_slice_upper_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 1925;
        goto try_except_handler_2;
    }
    tmp_tuple_element_2 = LOOKUP_SLICE( tmp_slice_source_2, Py_None, tmp_slice_upper_2 );
    Py_DECREF( tmp_slice_upper_2 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_5 );

        exception_lineno = 1925;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_5, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = const_unicode_plain_er;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_5, 1, tmp_tuple_element_2 );
    frame_function->f_lineno = 1925;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1925;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_7;
        Py_DECREF( old );
    }

    goto branch_end_3;
    branch_no_3:;
    tmp_compare_left_3 = var_suffix;

    tmp_compare_right_3 = const_unicode_plain_s;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1927;
        goto try_except_handler_2;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_subscribed_name_1 = par_word;

    tmp_subscript_name_1 = const_int_neg_2;
    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1928;
        goto try_except_handler_2;
    }
    tmp_source_name_7 = par_self;

    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__NorwegianStemmer__s_ending );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_1 );

        exception_lineno = 1928;
        goto try_except_handler_2;
    }
    tmp_or_left_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1928;
        goto try_except_handler_2;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    assert( !(tmp_or_left_truth_1 == -1) );
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_subscribed_name_2 = par_word;

    tmp_subscript_name_2 = const_int_neg_2;
    tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1929;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_2 = const_unicode_plain_k;
    tmp_and_left_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1929;
        goto try_except_handler_2;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 1929;
        goto try_except_handler_2;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_subscribed_name_3 = par_word;

    tmp_subscript_name_3 = const_int_neg_3;
    tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1929;
        goto try_except_handler_2;
    }
    tmp_source_name_8 = par_self;

    tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__NorwegianStemmer__vowels );
    if ( tmp_compexpr_right_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_3 );

        exception_lineno = 1929;
        goto try_except_handler_2;
    }
    tmp_and_right_value_1 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    Py_DECREF( tmp_compexpr_right_3 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1929;
        goto try_except_handler_2;
    }
    Py_INCREF( tmp_and_right_value_1 );
    tmp_or_right_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_or_right_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_value_2 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    Py_INCREF( tmp_or_left_value_1 );
    tmp_cond_value_2 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 1929;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = -1;
    tmp_slice_source_3 = par_word;

    tmp_assign_source_8 = LOOKUP_INDEX_SLICE( tmp_slice_source_3, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1930;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_8;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = -1;
    tmp_slice_source_4 = var_r1;

    tmp_assign_source_9 = LOOKUP_INDEX_SLICE( tmp_slice_source_4, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1931;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_9;
        Py_DECREF( old );
    }

    branch_no_5:;
    goto branch_end_4;
    branch_no_4:;
    tmp_slice_source_5 = par_word;

    tmp_len_arg_3 = var_suffix;

    tmp_operand_name_3 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_operand_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1933;
        goto try_except_handler_2;
    }
    tmp_slice_upper_3 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_slice_upper_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1933;
        goto try_except_handler_2;
    }
    tmp_assign_source_10 = LOOKUP_SLICE( tmp_slice_source_5, Py_None, tmp_slice_upper_3 );
    Py_DECREF( tmp_slice_upper_3 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1933;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_10;
        Py_DECREF( old );
    }

    tmp_slice_source_6 = var_r1;

    tmp_len_arg_4 = var_suffix;

    tmp_operand_name_4 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_operand_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1934;
        goto try_except_handler_2;
    }
    tmp_slice_upper_4 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_4 );
    Py_DECREF( tmp_operand_name_4 );
    if ( tmp_slice_upper_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1934;
        goto try_except_handler_2;
    }
    tmp_assign_source_11 = LOOKUP_SLICE( tmp_slice_source_6, Py_None, tmp_slice_upper_4 );
    Py_DECREF( tmp_slice_upper_4 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1934;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_11;
        Py_DECREF( old );
    }

    branch_end_4:;
    branch_end_3:;
    goto loop_end_1;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1921;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_source_name_9 = par_self;

    tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__NorwegianStemmer__step2_suffixes );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1938;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_12 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1938;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_12;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_13 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_13 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1938;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_13;
        Py_XDECREF( old );
    }

    tmp_assign_source_14 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_14;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_3 = var_r1;

    if ( tmp_called_instance_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1939;
        goto try_except_handler_3;
    }

    tmp_args_element_name_6 = var_suffix;

    frame_function->f_lineno = 1939;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_cond_value_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1939;
        goto try_except_handler_3;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 1939;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -1;
    tmp_slice_source_7 = par_word;

    if ( tmp_slice_source_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1940;
        goto try_except_handler_3;
    }

    tmp_assign_source_15 = LOOKUP_INDEX_SLICE( tmp_slice_source_7, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1940;
        goto try_except_handler_3;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_15;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = -1;
    tmp_slice_source_8 = var_r1;

    if ( tmp_slice_source_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1941;
        goto try_except_handler_3;
    }

    tmp_assign_source_16 = LOOKUP_INDEX_SLICE( tmp_slice_source_8, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1941;
        goto try_except_handler_3;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_16;
        Py_XDECREF( old );
    }

    goto loop_end_2;
    branch_no_6:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1938;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_source_name_10 = par_self;

    tmp_iter_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__NorwegianStemmer__step3_suffixes );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1945;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_17 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1945;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_17;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_18 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_18 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 1945;
            goto try_except_handler_4;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_18;
        Py_XDECREF( old );
    }

    tmp_assign_source_19 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_19;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_4 = var_r1;

    if ( tmp_called_instance_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 1946;
        goto try_except_handler_4;
    }

    tmp_args_element_name_7 = var_suffix;

    frame_function->f_lineno = 1946;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_cond_value_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1946;
        goto try_except_handler_4;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        exception_lineno = 1946;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_slice_source_9 = par_word;

    if ( tmp_slice_source_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1947;
        goto try_except_handler_4;
    }

    tmp_len_arg_5 = var_suffix;

    tmp_operand_name_5 = BUILTIN_LEN( tmp_len_arg_5 );
    if ( tmp_operand_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1947;
        goto try_except_handler_4;
    }
    tmp_slice_upper_5 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_5 );
    Py_DECREF( tmp_operand_name_5 );
    if ( tmp_slice_upper_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1947;
        goto try_except_handler_4;
    }
    tmp_assign_source_20 = LOOKUP_SLICE( tmp_slice_source_9, Py_None, tmp_slice_upper_5 );
    Py_DECREF( tmp_slice_upper_5 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1947;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_20;
        Py_XDECREF( old );
    }

    goto loop_end_3;
    branch_no_7:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1945;
        goto try_except_handler_4;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_return_value = par_word;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 1951;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_suffix )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_suffix,
                    var_suffix
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_11_NorwegianStemmer$$$function_1_stem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_11_NorwegianStemmer$$$function_1_stem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_12_PortugueseStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__PortugueseStemmer__vowels = NULL;
    PyObject *var__PortugueseStemmer__step1_suffixes = NULL;
    PyObject *var__PortugueseStemmer__step2_suffixes = NULL;
    PyObject *var__PortugueseStemmer__step4_suffixes = NULL;
    PyObject *var_stem = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_007691032e40e7582adc29d110e2df12;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_unicode_digest_2bcaf158af91b9090915dd94ad19b47e;
    assert( var__PortugueseStemmer__vowels == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var__PortugueseStemmer__vowels = tmp_assign_source_3;

    tmp_assign_source_4 = const_tuple_fd74d5f1f14a0238bc6599fa81fa3c15_tuple;
    assert( var__PortugueseStemmer__step1_suffixes == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var__PortugueseStemmer__step1_suffixes = tmp_assign_source_4;

    tmp_assign_source_5 = const_tuple_bc2b3a79dd230f51972e38fb3dacac9e_tuple;
    assert( var__PortugueseStemmer__step2_suffixes == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__PortugueseStemmer__step2_suffixes = tmp_assign_source_5;

    tmp_assign_source_6 = const_tuple_ef5ebc574a79dfd720fdbeab30f99197_tuple;
    assert( var__PortugueseStemmer__step4_suffixes == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var__PortugueseStemmer__step4_suffixes = tmp_assign_source_6;

    tmp_assign_source_7 = MAKE_FUNCTION_nltk$stem$snowball$$$class_12_PortugueseStemmer$$$function_1_stem(  );
    assert( var_stem == NULL );
    var_stem = tmp_assign_source_7;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__PortugueseStemmer__vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__PortugueseStemmer__vowels,
            var__PortugueseStemmer__vowels
        );

        assert( res == 0 );
    }

    if ( var__PortugueseStemmer__step1_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__PortugueseStemmer__step1_suffixes,
            var__PortugueseStemmer__step1_suffixes
        );

        assert( res == 0 );
    }

    if ( var__PortugueseStemmer__step2_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__PortugueseStemmer__step2_suffixes,
            var__PortugueseStemmer__step2_suffixes
        );

        assert( res == 0 );
    }

    if ( var__PortugueseStemmer__step4_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__PortugueseStemmer__step4_suffixes,
            var__PortugueseStemmer__step4_suffixes
        );

        assert( res == 0 );
    }

    if ( var_stem )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_stem,
            var_stem
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_12_PortugueseStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__PortugueseStemmer__vowels );
    Py_DECREF( var__PortugueseStemmer__vowels );
    var__PortugueseStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__PortugueseStemmer__step1_suffixes );
    Py_DECREF( var__PortugueseStemmer__step1_suffixes );
    var__PortugueseStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__PortugueseStemmer__step2_suffixes );
    Py_DECREF( var__PortugueseStemmer__step2_suffixes );
    var__PortugueseStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__PortugueseStemmer__step4_suffixes );
    Py_DECREF( var__PortugueseStemmer__step4_suffixes );
    var__PortugueseStemmer__step4_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__PortugueseStemmer__vowels );
    Py_DECREF( var__PortugueseStemmer__vowels );
    var__PortugueseStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__PortugueseStemmer__step1_suffixes );
    Py_DECREF( var__PortugueseStemmer__step1_suffixes );
    var__PortugueseStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__PortugueseStemmer__step2_suffixes );
    Py_DECREF( var__PortugueseStemmer__step2_suffixes );
    var__PortugueseStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__PortugueseStemmer__step4_suffixes );
    Py_DECREF( var__PortugueseStemmer__step4_suffixes );
    var__PortugueseStemmer__step4_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_12_PortugueseStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_12_PortugueseStemmer$$$function_1_stem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_step1_success = NULL;
    PyObject *var_step2_success = NULL;
    PyObject *var_r1 = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_rv = NULL;
    PyObject *var_suffix = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    int tmp_and_left_truth_3;
    int tmp_and_left_truth_4;
    int tmp_and_left_truth_5;
    int tmp_and_left_truth_6;
    int tmp_and_left_truth_7;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_left_value_3;
    PyObject *tmp_and_left_value_4;
    PyObject *tmp_and_left_value_5;
    PyObject *tmp_and_left_value_6;
    PyObject *tmp_and_left_value_7;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_and_right_value_3;
    PyObject *tmp_and_right_value_4;
    PyObject *tmp_and_right_value_5;
    PyObject *tmp_and_right_value_6;
    PyObject *tmp_and_right_value_7;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_instance_12;
    PyObject *tmp_called_instance_13;
    PyObject *tmp_called_instance_14;
    PyObject *tmp_called_instance_15;
    PyObject *tmp_called_instance_16;
    PyObject *tmp_called_instance_17;
    PyObject *tmp_called_instance_18;
    PyObject *tmp_called_instance_19;
    PyObject *tmp_called_instance_20;
    PyObject *tmp_called_instance_21;
    PyObject *tmp_called_instance_22;
    PyObject *tmp_called_instance_23;
    PyObject *tmp_called_instance_24;
    PyObject *tmp_called_instance_25;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    int tmp_cmp_Eq_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    int tmp_cond_truth_17;
    int tmp_cond_truth_18;
    int tmp_cond_truth_19;
    int tmp_cond_truth_20;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_cond_value_17;
    PyObject *tmp_cond_value_18;
    PyObject *tmp_cond_value_19;
    PyObject *tmp_cond_value_20;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_len_arg_6;
    PyObject *tmp_len_arg_7;
    PyObject *tmp_len_arg_8;
    PyObject *tmp_len_arg_9;
    PyObject *tmp_len_arg_10;
    PyObject *tmp_len_arg_11;
    PyObject *tmp_len_arg_12;
    PyObject *tmp_len_arg_13;
    PyObject *tmp_len_arg_14;
    PyObject *tmp_len_arg_15;
    PyObject *tmp_len_arg_16;
    PyObject *tmp_len_arg_17;
    PyObject *tmp_len_arg_18;
    PyObject *tmp_len_arg_19;
    PyObject *tmp_len_arg_20;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    PyObject *tmp_operand_name_4;
    PyObject *tmp_operand_name_5;
    PyObject *tmp_operand_name_6;
    PyObject *tmp_operand_name_7;
    PyObject *tmp_operand_name_8;
    PyObject *tmp_operand_name_9;
    PyObject *tmp_operand_name_10;
    PyObject *tmp_operand_name_11;
    PyObject *tmp_operand_name_12;
    PyObject *tmp_operand_name_13;
    PyObject *tmp_operand_name_14;
    PyObject *tmp_operand_name_15;
    PyObject *tmp_operand_name_16;
    PyObject *tmp_operand_name_17;
    PyObject *tmp_operand_name_18;
    PyObject *tmp_operand_name_19;
    PyObject *tmp_operand_name_20;
    PyObject *tmp_operand_name_21;
    PyObject *tmp_operand_name_22;
    int tmp_or_left_truth_1;
    int tmp_or_left_truth_2;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_left_value_2;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_or_right_value_2;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    Py_ssize_t tmp_slice_index_upper_6;
    Py_ssize_t tmp_slice_index_upper_7;
    Py_ssize_t tmp_slice_index_upper_8;
    Py_ssize_t tmp_slice_index_upper_9;
    Py_ssize_t tmp_slice_index_upper_10;
    Py_ssize_t tmp_slice_index_upper_11;
    Py_ssize_t tmp_slice_index_upper_12;
    Py_ssize_t tmp_slice_index_upper_13;
    Py_ssize_t tmp_slice_index_upper_14;
    Py_ssize_t tmp_slice_index_upper_15;
    Py_ssize_t tmp_slice_index_upper_16;
    Py_ssize_t tmp_slice_index_upper_17;
    Py_ssize_t tmp_slice_index_upper_18;
    Py_ssize_t tmp_slice_index_upper_19;
    Py_ssize_t tmp_slice_index_upper_20;
    Py_ssize_t tmp_slice_index_upper_21;
    Py_ssize_t tmp_slice_index_upper_22;
    Py_ssize_t tmp_slice_index_upper_23;
    Py_ssize_t tmp_slice_index_upper_24;
    Py_ssize_t tmp_slice_index_upper_25;
    Py_ssize_t tmp_slice_index_upper_26;
    Py_ssize_t tmp_slice_index_upper_27;
    Py_ssize_t tmp_slice_index_upper_28;
    Py_ssize_t tmp_slice_index_upper_29;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_source_10;
    PyObject *tmp_slice_source_11;
    PyObject *tmp_slice_source_12;
    PyObject *tmp_slice_source_13;
    PyObject *tmp_slice_source_14;
    PyObject *tmp_slice_source_15;
    PyObject *tmp_slice_source_16;
    PyObject *tmp_slice_source_17;
    PyObject *tmp_slice_source_18;
    PyObject *tmp_slice_source_19;
    PyObject *tmp_slice_source_20;
    PyObject *tmp_slice_source_21;
    PyObject *tmp_slice_source_22;
    PyObject *tmp_slice_source_23;
    PyObject *tmp_slice_source_24;
    PyObject *tmp_slice_source_25;
    PyObject *tmp_slice_source_26;
    PyObject *tmp_slice_source_27;
    PyObject *tmp_slice_source_28;
    PyObject *tmp_slice_source_29;
    PyObject *tmp_slice_source_30;
    PyObject *tmp_slice_source_31;
    PyObject *tmp_slice_source_32;
    PyObject *tmp_slice_source_33;
    PyObject *tmp_slice_source_34;
    PyObject *tmp_slice_source_35;
    PyObject *tmp_slice_source_36;
    PyObject *tmp_slice_source_37;
    PyObject *tmp_slice_source_38;
    PyObject *tmp_slice_source_39;
    PyObject *tmp_slice_source_40;
    PyObject *tmp_slice_source_41;
    PyObject *tmp_slice_source_42;
    PyObject *tmp_slice_source_43;
    PyObject *tmp_slice_source_44;
    PyObject *tmp_slice_source_45;
    PyObject *tmp_slice_source_46;
    PyObject *tmp_slice_source_47;
    PyObject *tmp_slice_source_48;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    PyObject *tmp_slice_upper_4;
    PyObject *tmp_slice_upper_5;
    PyObject *tmp_slice_upper_6;
    PyObject *tmp_slice_upper_7;
    PyObject *tmp_slice_upper_8;
    PyObject *tmp_slice_upper_9;
    PyObject *tmp_slice_upper_10;
    PyObject *tmp_slice_upper_11;
    PyObject *tmp_slice_upper_12;
    PyObject *tmp_slice_upper_13;
    PyObject *tmp_slice_upper_14;
    PyObject *tmp_slice_upper_15;
    PyObject *tmp_slice_upper_16;
    PyObject *tmp_slice_upper_17;
    PyObject *tmp_slice_upper_18;
    PyObject *tmp_slice_upper_19;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_6;
    Py_ssize_t tmp_sliceslicedel_index_lower_7;
    Py_ssize_t tmp_sliceslicedel_index_lower_8;
    Py_ssize_t tmp_sliceslicedel_index_lower_9;
    Py_ssize_t tmp_sliceslicedel_index_lower_10;
    Py_ssize_t tmp_sliceslicedel_index_lower_11;
    Py_ssize_t tmp_sliceslicedel_index_lower_12;
    Py_ssize_t tmp_sliceslicedel_index_lower_13;
    Py_ssize_t tmp_sliceslicedel_index_lower_14;
    Py_ssize_t tmp_sliceslicedel_index_lower_15;
    Py_ssize_t tmp_sliceslicedel_index_lower_16;
    Py_ssize_t tmp_sliceslicedel_index_lower_17;
    Py_ssize_t tmp_sliceslicedel_index_lower_18;
    Py_ssize_t tmp_sliceslicedel_index_lower_19;
    Py_ssize_t tmp_sliceslicedel_index_lower_20;
    Py_ssize_t tmp_sliceslicedel_index_lower_21;
    Py_ssize_t tmp_sliceslicedel_index_lower_22;
    Py_ssize_t tmp_sliceslicedel_index_lower_23;
    Py_ssize_t tmp_sliceslicedel_index_lower_24;
    Py_ssize_t tmp_sliceslicedel_index_lower_25;
    Py_ssize_t tmp_sliceslicedel_index_lower_26;
    Py_ssize_t tmp_sliceslicedel_index_lower_27;
    Py_ssize_t tmp_sliceslicedel_index_lower_28;
    Py_ssize_t tmp_sliceslicedel_index_lower_29;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_f5d007b48c80586982a1e994dfc49279, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_word;

    tmp_source_name_1 = par_self;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stopwords );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2027;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_assign_source_1 = Py_False;
    assert( var_step1_success == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_step1_success = tmp_assign_source_1;

    tmp_assign_source_2 = Py_False;
    assert( var_step2_success == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var_step2_success = tmp_assign_source_2;

    tmp_called_instance_3 = par_word;

    frame_function->f_lineno = 2033;
    tmp_called_instance_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_lower );
    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2033;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2033;
    tmp_called_instance_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_76a3773110ed3fb7fc901dca7c8e8633_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2033;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2033;
    tmp_assign_source_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_a871f55427dc6112c3254b0f3775cc0d_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2033;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_3;
        Py_DECREF( old );
    }

    // Tried code:
    tmp_source_name_2 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__r1r2_standard );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2037;
        goto try_except_handler_2;
    }
    tmp_args_element_name_1 = par_word;

    tmp_source_name_3 = par_self;

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__PortugueseStemmer__vowels );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 2037;
        goto try_except_handler_2;
    }
    frame_function->f_lineno = 2037;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2037;
        goto try_except_handler_2;
    }
    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2037;
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 2037;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_6 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 2037;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_1;

    assert( var_r1 == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var_r1 = tmp_assign_source_7;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_8 = tmp_tuple_unpack_1__element_2;

    assert( var_r2 == NULL );
    Py_INCREF( tmp_assign_source_8 );
    var_r2 = tmp_assign_source_8;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_4 = par_self;

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__rv_standard );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2038;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = par_word;

    tmp_source_name_5 = par_self;

    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__PortugueseStemmer__vowels );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 2038;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2038;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2038;
        goto frame_exception_exit_1;
    }
    assert( var_rv == NULL );
    var_rv = tmp_assign_source_9;

    tmp_source_name_6 = par_self;

    tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__PortugueseStemmer__step1_suffixes );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2041;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2041;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_10;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_11 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_11 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2041;
            goto try_except_handler_4;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    tmp_assign_source_12 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_12;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_4 = par_word;

    tmp_args_element_name_5 = var_suffix;

    frame_function->f_lineno = 2042;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_cond_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2042;
        goto try_except_handler_4;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 2042;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_compexpr_left_1 = var_suffix;

    tmp_compexpr_right_1 = const_unicode_plain_amente;
    tmp_and_left_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2043;
        goto try_except_handler_4;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 2043;
        goto try_except_handler_4;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_called_instance_5 = var_r1;

    tmp_args_element_name_6 = var_suffix;

    frame_function->f_lineno = 2043;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_and_right_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_endswith, call_args );
    }

    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2043;
        goto try_except_handler_4;
    }
    tmp_cond_value_2 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_2 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 2043;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_13 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_13;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = -6;
    tmp_slice_source_1 = par_word;

    tmp_assign_source_14 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2046;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_14;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = -6;
    tmp_slice_source_2 = var_r2;

    tmp_assign_source_15 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2047;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_15;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -6;
    tmp_slice_source_3 = var_rv;

    tmp_assign_source_16 = LOOKUP_INDEX_SLICE( tmp_slice_source_3, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2048;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_16;
        Py_DECREF( old );
    }

    tmp_called_instance_6 = var_r2;

    frame_function->f_lineno = 2050;
    tmp_cond_value_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_iv_tuple, 0 ) );

    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2050;
        goto try_except_handler_4;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 2050;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = -2;
    tmp_slice_source_4 = par_word;

    tmp_assign_source_17 = LOOKUP_INDEX_SLICE( tmp_slice_source_4, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2051;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_17;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = -2;
    tmp_slice_source_5 = var_r2;

    tmp_assign_source_18 = LOOKUP_INDEX_SLICE( tmp_slice_source_5, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2052;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_18;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_6 = 0;
    tmp_slice_index_upper_6 = -2;
    tmp_slice_source_6 = var_rv;

    tmp_assign_source_19 = LOOKUP_INDEX_SLICE( tmp_slice_source_6, tmp_sliceslicedel_index_lower_6, tmp_slice_index_upper_6 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2053;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_19;
        Py_DECREF( old );
    }

    tmp_called_instance_7 = var_r2;

    frame_function->f_lineno = 2055;
    tmp_cond_value_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_at_tuple, 0 ) );

    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2055;
        goto try_except_handler_4;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        exception_lineno = 2055;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_sliceslicedel_index_lower_7 = 0;
    tmp_slice_index_upper_7 = -2;
    tmp_slice_source_7 = par_word;

    tmp_assign_source_20 = LOOKUP_INDEX_SLICE( tmp_slice_source_7, tmp_sliceslicedel_index_lower_7, tmp_slice_index_upper_7 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2056;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_20;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_8 = 0;
    tmp_slice_index_upper_8 = -2;
    tmp_slice_source_8 = var_rv;

    tmp_assign_source_21 = LOOKUP_INDEX_SLICE( tmp_slice_source_8, tmp_sliceslicedel_index_lower_8, tmp_slice_index_upper_8 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2057;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_21;
        Py_DECREF( old );
    }

    branch_no_5:;
    goto branch_end_4;
    branch_no_4:;
    tmp_called_instance_8 = var_r2;

    frame_function->f_lineno = 2059;
    tmp_cond_value_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_e1df4d1ee61aeadd133357000470ee2a_tuple, 0 ) );

    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2059;
        goto try_except_handler_4;
    }
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        exception_lineno = 2059;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_sliceslicedel_index_lower_9 = 0;
    tmp_slice_index_upper_9 = -2;
    tmp_slice_source_9 = par_word;

    tmp_assign_source_22 = LOOKUP_INDEX_SLICE( tmp_slice_source_9, tmp_sliceslicedel_index_lower_9, tmp_slice_index_upper_9 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2060;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_22;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_10 = 0;
    tmp_slice_index_upper_10 = -2;
    tmp_slice_source_10 = var_rv;

    tmp_assign_source_23 = LOOKUP_INDEX_SLICE( tmp_slice_source_10, tmp_sliceslicedel_index_lower_10, tmp_slice_index_upper_10 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2061;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_23;
        Py_DECREF( old );
    }

    branch_no_6:;
    branch_end_4:;
    goto branch_end_3;
    branch_no_3:;
    tmp_compexpr_left_2 = var_suffix;

    tmp_compexpr_right_2 = const_tuple_unicode_plain_ira_unicode_plain_iras_tuple;
    tmp_and_left_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2063;
        goto try_except_handler_4;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    assert( !(tmp_and_left_truth_2 == -1) );
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_called_instance_9 = var_rv;

    tmp_args_element_name_7 = var_suffix;

    frame_function->f_lineno = 2063;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_and_left_value_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_endswith, call_args );
    }

    if ( tmp_and_left_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2063;
        goto try_except_handler_4;
    }
    tmp_and_left_truth_3 = CHECK_IF_TRUE( tmp_and_left_value_3 );
    if ( tmp_and_left_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_3 );

        exception_lineno = 2064;
        goto try_except_handler_4;
    }
    if ( tmp_and_left_truth_3 == 1 )
    {
        goto and_right_3;
    }
    else
    {
        goto and_left_3;
    }
    and_right_3:;
    Py_DECREF( tmp_and_left_value_3 );
    tmp_slice_source_11 = par_word;

    tmp_len_arg_1 = var_suffix;

    tmp_operand_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2064;
        goto try_except_handler_4;
    }
    tmp_left_name_1 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2064;
        goto try_except_handler_4;
    }
    tmp_right_name_1 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2064;
        goto try_except_handler_4;
    }
    tmp_len_arg_2 = var_suffix;

    tmp_operand_name_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_1 );

        exception_lineno = 2064;
        goto try_except_handler_4;
    }
    tmp_slice_upper_1 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_slice_upper_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_1 );

        exception_lineno = 2064;
        goto try_except_handler_4;
    }
    tmp_compexpr_left_3 = LOOKUP_SLICE( tmp_slice_source_11, tmp_slice_lower_1, tmp_slice_upper_1 );
    Py_DECREF( tmp_slice_lower_1 );
    Py_DECREF( tmp_slice_upper_1 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2064;
        goto try_except_handler_4;
    }
    tmp_compexpr_right_3 = const_unicode_plain_e;
    tmp_and_right_value_3 = RICH_COMPARE_EQ( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    if ( tmp_and_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2064;
        goto try_except_handler_4;
    }
    tmp_and_right_value_2 = tmp_and_right_value_3;
    goto and_end_3;
    and_left_3:;
    tmp_and_right_value_2 = tmp_and_left_value_3;
    and_end_3:;
    tmp_cond_value_6 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    Py_INCREF( tmp_and_left_value_2 );
    tmp_cond_value_6 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        exception_lineno = 2064;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_assign_source_24 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_24;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    tmp_source_name_7 = const_unicode_empty;
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_join );
    assert( tmp_called_name_3 != NULL );
    tmp_args_element_name_8 = PyTuple_New( 2 );
    tmp_slice_source_12 = par_word;

    tmp_len_arg_3 = var_suffix;

    tmp_operand_name_3 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_operand_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 2067;
        goto try_except_handler_4;
    }
    tmp_slice_upper_2 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_slice_upper_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 2067;
        goto try_except_handler_4;
    }
    tmp_tuple_element_1 = LOOKUP_SLICE( tmp_slice_source_12, Py_None, tmp_slice_upper_2 );
    Py_DECREF( tmp_slice_upper_2 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 2067;
        goto try_except_handler_4;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_8, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_unicode_plain_ir;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_8, 1, tmp_tuple_element_1 );
    frame_function->f_lineno = 2067;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_assign_source_25 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_8 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2067;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_25;
        Py_DECREF( old );
    }

    tmp_source_name_8 = const_unicode_empty;
    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_join );
    assert( tmp_called_name_4 != NULL );
    tmp_args_element_name_9 = PyTuple_New( 2 );
    tmp_slice_source_13 = var_rv;

    tmp_len_arg_4 = var_suffix;

    tmp_operand_name_4 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_operand_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 2068;
        goto try_except_handler_4;
    }
    tmp_slice_upper_3 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_4 );
    Py_DECREF( tmp_operand_name_4 );
    if ( tmp_slice_upper_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 2068;
        goto try_except_handler_4;
    }
    tmp_tuple_element_2 = LOOKUP_SLICE( tmp_slice_source_13, Py_None, tmp_slice_upper_3 );
    Py_DECREF( tmp_slice_upper_3 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 2068;
        goto try_except_handler_4;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_9, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = const_unicode_plain_ir;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_9, 1, tmp_tuple_element_2 );
    frame_function->f_lineno = 2068;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_assign_source_26 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2068;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_26;
        Py_DECREF( old );
    }

    goto branch_end_7;
    branch_no_7:;
    tmp_called_instance_10 = var_r2;

    tmp_args_element_name_10 = var_suffix;

    frame_function->f_lineno = 2070;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_cond_value_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2070;
        goto try_except_handler_4;
    }
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        exception_lineno = 2070;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_assign_source_27 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_27;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    tmp_compare_left_2 = var_suffix;

    tmp_compare_right_2 = const_tuple_45f82c3622d28aff3edecb8d8a588741_tuple;
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_sliceslicedel_index_lower_11 = 0;
    tmp_slice_index_upper_11 = -2;
    tmp_slice_source_14 = par_word;

    tmp_assign_source_28 = LOOKUP_INDEX_SLICE( tmp_slice_source_14, tmp_sliceslicedel_index_lower_11, tmp_slice_index_upper_11 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2074;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_28;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_12 = 0;
    tmp_slice_index_upper_12 = -2;
    tmp_slice_source_15 = var_rv;

    tmp_assign_source_29 = LOOKUP_INDEX_SLICE( tmp_slice_source_15, tmp_sliceslicedel_index_lower_12, tmp_slice_index_upper_12 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2075;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_29;
        Py_DECREF( old );
    }

    goto branch_end_9;
    branch_no_9:;
    tmp_compare_left_3 = var_suffix;

    tmp_compare_right_3 = const_tuple_45f6ea7f15c39e03730b7dca9834b46a_tuple;
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_source_name_9 = const_unicode_empty;
    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_join );
    assert( tmp_called_name_5 != NULL );
    tmp_args_element_name_11 = PyTuple_New( 2 );
    tmp_slice_source_16 = par_word;

    tmp_len_arg_5 = var_suffix;

    tmp_operand_name_5 = BUILTIN_LEN( tmp_len_arg_5 );
    if ( tmp_operand_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 2078;
        goto try_except_handler_4;
    }
    tmp_slice_upper_4 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_5 );
    Py_DECREF( tmp_operand_name_5 );
    if ( tmp_slice_upper_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 2078;
        goto try_except_handler_4;
    }
    tmp_tuple_element_3 = LOOKUP_SLICE( tmp_slice_source_16, Py_None, tmp_slice_upper_4 );
    Py_DECREF( tmp_slice_upper_4 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 2078;
        goto try_except_handler_4;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_11, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = const_unicode_plain_u;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_element_name_11, 1, tmp_tuple_element_3 );
    frame_function->f_lineno = 2078;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_assign_source_30 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2078;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_30;
        Py_DECREF( old );
    }

    tmp_source_name_10 = const_unicode_empty;
    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_join );
    assert( tmp_called_name_6 != NULL );
    tmp_args_element_name_12 = PyTuple_New( 2 );
    tmp_slice_source_17 = var_rv;

    tmp_len_arg_6 = var_suffix;

    tmp_operand_name_6 = BUILTIN_LEN( tmp_len_arg_6 );
    if ( tmp_operand_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_12 );

        exception_lineno = 2079;
        goto try_except_handler_4;
    }
    tmp_slice_upper_5 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_6 );
    Py_DECREF( tmp_operand_name_6 );
    if ( tmp_slice_upper_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_12 );

        exception_lineno = 2079;
        goto try_except_handler_4;
    }
    tmp_tuple_element_4 = LOOKUP_SLICE( tmp_slice_source_17, Py_None, tmp_slice_upper_5 );
    Py_DECREF( tmp_slice_upper_5 );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_12 );

        exception_lineno = 2079;
        goto try_except_handler_4;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_12, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_unicode_plain_u;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_element_name_12, 1, tmp_tuple_element_4 );
    frame_function->f_lineno = 2079;
    {
        PyObject *call_args[] = { tmp_args_element_name_12 };
        tmp_assign_source_31 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_12 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2079;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_31;
        Py_DECREF( old );
    }

    goto branch_end_10;
    branch_no_10:;
    tmp_compare_left_4 = var_suffix;

    tmp_compare_right_4 = const_tuple_613172038fa6e48d0211bb10a817635f_tuple;
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_source_name_11 = const_unicode_empty;
    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_join );
    assert( tmp_called_name_7 != NULL );
    tmp_args_element_name_13 = PyTuple_New( 2 );
    tmp_slice_source_18 = par_word;

    tmp_len_arg_7 = var_suffix;

    tmp_operand_name_7 = BUILTIN_LEN( tmp_len_arg_7 );
    if ( tmp_operand_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 2082;
        goto try_except_handler_4;
    }
    tmp_slice_upper_6 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_7 );
    Py_DECREF( tmp_operand_name_7 );
    if ( tmp_slice_upper_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 2082;
        goto try_except_handler_4;
    }
    tmp_tuple_element_5 = LOOKUP_SLICE( tmp_slice_source_18, Py_None, tmp_slice_upper_6 );
    Py_DECREF( tmp_slice_upper_6 );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 2082;
        goto try_except_handler_4;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_13, 0, tmp_tuple_element_5 );
    tmp_tuple_element_5 = const_unicode_plain_ente;
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_args_element_name_13, 1, tmp_tuple_element_5 );
    frame_function->f_lineno = 2082;
    {
        PyObject *call_args[] = { tmp_args_element_name_13 };
        tmp_assign_source_32 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2082;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_32;
        Py_DECREF( old );
    }

    tmp_source_name_12 = const_unicode_empty;
    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_join );
    assert( tmp_called_name_8 != NULL );
    tmp_args_element_name_14 = PyTuple_New( 2 );
    tmp_slice_source_19 = var_rv;

    tmp_len_arg_8 = var_suffix;

    tmp_operand_name_8 = BUILTIN_LEN( tmp_len_arg_8 );
    if ( tmp_operand_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 2083;
        goto try_except_handler_4;
    }
    tmp_slice_upper_7 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_8 );
    Py_DECREF( tmp_operand_name_8 );
    if ( tmp_slice_upper_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 2083;
        goto try_except_handler_4;
    }
    tmp_tuple_element_6 = LOOKUP_SLICE( tmp_slice_source_19, Py_None, tmp_slice_upper_7 );
    Py_DECREF( tmp_slice_upper_7 );
    if ( tmp_tuple_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 2083;
        goto try_except_handler_4;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_14, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = const_unicode_plain_ente;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_args_element_name_14, 1, tmp_tuple_element_6 );
    frame_function->f_lineno = 2083;
    {
        PyObject *call_args[] = { tmp_args_element_name_14 };
        tmp_assign_source_33 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_element_name_14 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2083;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_33;
        Py_DECREF( old );
    }

    goto branch_end_11;
    branch_no_11:;
    tmp_compare_left_5 = var_suffix;

    tmp_compare_right_5 = const_unicode_plain_mente;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2085;
        goto try_except_handler_4;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_sliceslicedel_index_lower_13 = 0;
    tmp_slice_index_upper_13 = -5;
    tmp_slice_source_20 = par_word;

    tmp_assign_source_34 = LOOKUP_INDEX_SLICE( tmp_slice_source_20, tmp_sliceslicedel_index_lower_13, tmp_slice_index_upper_13 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2086;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_34;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_14 = 0;
    tmp_slice_index_upper_14 = -5;
    tmp_slice_source_21 = var_r2;

    tmp_assign_source_35 = LOOKUP_INDEX_SLICE( tmp_slice_source_21, tmp_sliceslicedel_index_lower_14, tmp_slice_index_upper_14 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2087;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_35;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_15 = 0;
    tmp_slice_index_upper_15 = -5;
    tmp_slice_source_22 = var_rv;

    tmp_assign_source_36 = LOOKUP_INDEX_SLICE( tmp_slice_source_22, tmp_sliceslicedel_index_lower_15, tmp_slice_index_upper_15 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2088;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_36;
        Py_DECREF( old );
    }

    tmp_called_instance_11 = var_r2;

    frame_function->f_lineno = 2090;
    tmp_cond_value_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_tuple_bc37331094be7bf4e1a82223baa15ba2_tuple_tuple, 0 ) );

    if ( tmp_cond_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2090;
        goto try_except_handler_4;
    }
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        exception_lineno = 2090;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_sliceslicedel_index_lower_16 = 0;
    tmp_slice_index_upper_16 = -4;
    tmp_slice_source_23 = par_word;

    tmp_assign_source_37 = LOOKUP_INDEX_SLICE( tmp_slice_source_23, tmp_sliceslicedel_index_lower_16, tmp_slice_index_upper_16 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2091;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_37;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_17 = 0;
    tmp_slice_index_upper_17 = -4;
    tmp_slice_source_24 = var_rv;

    tmp_assign_source_38 = LOOKUP_INDEX_SLICE( tmp_slice_source_24, tmp_sliceslicedel_index_lower_17, tmp_slice_index_upper_17 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2092;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_38;
        Py_DECREF( old );
    }

    branch_no_13:;
    goto branch_end_12;
    branch_no_12:;
    tmp_compare_left_6 = var_suffix;

    tmp_compare_right_6 = const_tuple_unicode_plain_idade_unicode_plain_idades_tuple;
    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    assert( !(tmp_cmp_In_5 == -1) );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_slice_source_25 = par_word;

    tmp_len_arg_9 = var_suffix;

    tmp_operand_name_9 = BUILTIN_LEN( tmp_len_arg_9 );
    if ( tmp_operand_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2095;
        goto try_except_handler_4;
    }
    tmp_slice_upper_8 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_9 );
    Py_DECREF( tmp_operand_name_9 );
    if ( tmp_slice_upper_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2095;
        goto try_except_handler_4;
    }
    tmp_assign_source_39 = LOOKUP_SLICE( tmp_slice_source_25, Py_None, tmp_slice_upper_8 );
    Py_DECREF( tmp_slice_upper_8 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2095;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_39;
        Py_DECREF( old );
    }

    tmp_slice_source_26 = var_r2;

    tmp_len_arg_10 = var_suffix;

    tmp_operand_name_10 = BUILTIN_LEN( tmp_len_arg_10 );
    if ( tmp_operand_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2096;
        goto try_except_handler_4;
    }
    tmp_slice_upper_9 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_10 );
    Py_DECREF( tmp_operand_name_10 );
    if ( tmp_slice_upper_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2096;
        goto try_except_handler_4;
    }
    tmp_assign_source_40 = LOOKUP_SLICE( tmp_slice_source_26, Py_None, tmp_slice_upper_9 );
    Py_DECREF( tmp_slice_upper_9 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2096;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_40;
        Py_DECREF( old );
    }

    tmp_slice_source_27 = var_rv;

    tmp_len_arg_11 = var_suffix;

    tmp_operand_name_11 = BUILTIN_LEN( tmp_len_arg_11 );
    if ( tmp_operand_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2097;
        goto try_except_handler_4;
    }
    tmp_slice_upper_10 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_11 );
    Py_DECREF( tmp_operand_name_11 );
    if ( tmp_slice_upper_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2097;
        goto try_except_handler_4;
    }
    tmp_assign_source_41 = LOOKUP_SLICE( tmp_slice_source_27, Py_None, tmp_slice_upper_10 );
    Py_DECREF( tmp_slice_upper_10 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2097;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_41;
        Py_DECREF( old );
    }

    tmp_called_instance_12 = var_r2;

    frame_function->f_lineno = 2099;
    tmp_cond_value_9 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_12, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_tuple_unicode_plain_ic_unicode_plain_iv_tuple_tuple, 0 ) );

    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2099;
        goto try_except_handler_4;
    }
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        exception_lineno = 2099;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_sliceslicedel_index_lower_18 = 0;
    tmp_slice_index_upper_18 = -2;
    tmp_slice_source_28 = par_word;

    tmp_assign_source_42 = LOOKUP_INDEX_SLICE( tmp_slice_source_28, tmp_sliceslicedel_index_lower_18, tmp_slice_index_upper_18 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2100;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_42;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_19 = 0;
    tmp_slice_index_upper_19 = -2;
    tmp_slice_source_29 = var_rv;

    tmp_assign_source_43 = LOOKUP_INDEX_SLICE( tmp_slice_source_29, tmp_sliceslicedel_index_lower_19, tmp_slice_index_upper_19 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2101;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_43;
        Py_DECREF( old );
    }

    goto branch_end_15;
    branch_no_15:;
    tmp_called_instance_13 = var_r2;

    frame_function->f_lineno = 2103;
    tmp_cond_value_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_13, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_abil_tuple, 0 ) );

    if ( tmp_cond_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2103;
        goto try_except_handler_4;
    }
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        exception_lineno = 2103;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_sliceslicedel_index_lower_20 = 0;
    tmp_slice_index_upper_20 = -4;
    tmp_slice_source_30 = par_word;

    tmp_assign_source_44 = LOOKUP_INDEX_SLICE( tmp_slice_source_30, tmp_sliceslicedel_index_lower_20, tmp_slice_index_upper_20 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2104;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_44;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_21 = 0;
    tmp_slice_index_upper_21 = -4;
    tmp_slice_source_31 = var_rv;

    tmp_assign_source_45 = LOOKUP_INDEX_SLICE( tmp_slice_source_31, tmp_sliceslicedel_index_lower_21, tmp_slice_index_upper_21 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2105;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_45;
        Py_DECREF( old );
    }

    branch_no_16:;
    branch_end_15:;
    goto branch_end_14;
    branch_no_14:;
    tmp_compare_left_7 = var_suffix;

    tmp_compare_right_7 = const_tuple_effd7a5e0d0cc87a372a9c76d2f302db_tuple;
    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    assert( !(tmp_cmp_In_6 == -1) );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_slice_source_32 = par_word;

    tmp_len_arg_12 = var_suffix;

    tmp_operand_name_12 = BUILTIN_LEN( tmp_len_arg_12 );
    if ( tmp_operand_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2108;
        goto try_except_handler_4;
    }
    tmp_slice_upper_11 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_12 );
    Py_DECREF( tmp_operand_name_12 );
    if ( tmp_slice_upper_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2108;
        goto try_except_handler_4;
    }
    tmp_assign_source_46 = LOOKUP_SLICE( tmp_slice_source_32, Py_None, tmp_slice_upper_11 );
    Py_DECREF( tmp_slice_upper_11 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2108;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_46;
        Py_DECREF( old );
    }

    tmp_slice_source_33 = var_r2;

    tmp_len_arg_13 = var_suffix;

    tmp_operand_name_13 = BUILTIN_LEN( tmp_len_arg_13 );
    if ( tmp_operand_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2109;
        goto try_except_handler_4;
    }
    tmp_slice_upper_12 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_13 );
    Py_DECREF( tmp_operand_name_13 );
    if ( tmp_slice_upper_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2109;
        goto try_except_handler_4;
    }
    tmp_assign_source_47 = LOOKUP_SLICE( tmp_slice_source_33, Py_None, tmp_slice_upper_12 );
    Py_DECREF( tmp_slice_upper_12 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2109;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_47;
        Py_DECREF( old );
    }

    tmp_slice_source_34 = var_rv;

    tmp_len_arg_14 = var_suffix;

    tmp_operand_name_14 = BUILTIN_LEN( tmp_len_arg_14 );
    if ( tmp_operand_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2110;
        goto try_except_handler_4;
    }
    tmp_slice_upper_13 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_14 );
    Py_DECREF( tmp_operand_name_14 );
    if ( tmp_slice_upper_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2110;
        goto try_except_handler_4;
    }
    tmp_assign_source_48 = LOOKUP_SLICE( tmp_slice_source_34, Py_None, tmp_slice_upper_13 );
    Py_DECREF( tmp_slice_upper_13 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2110;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_48;
        Py_DECREF( old );
    }

    tmp_called_instance_14 = var_r2;

    frame_function->f_lineno = 2112;
    tmp_cond_value_11 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_14, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_at_tuple, 0 ) );

    if ( tmp_cond_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2112;
        goto try_except_handler_4;
    }
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_11 );

        exception_lineno = 2112;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_sliceslicedel_index_lower_22 = 0;
    tmp_slice_index_upper_22 = -2;
    tmp_slice_source_35 = par_word;

    tmp_assign_source_49 = LOOKUP_INDEX_SLICE( tmp_slice_source_35, tmp_sliceslicedel_index_lower_22, tmp_slice_index_upper_22 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2113;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_49;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_23 = 0;
    tmp_slice_index_upper_23 = -2;
    tmp_slice_source_36 = var_rv;

    tmp_assign_source_50 = LOOKUP_INDEX_SLICE( tmp_slice_source_36, tmp_sliceslicedel_index_lower_23, tmp_slice_index_upper_23 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2114;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_50;
        Py_DECREF( old );
    }

    branch_no_18:;
    goto branch_end_17;
    branch_no_17:;
    tmp_slice_source_37 = par_word;

    tmp_len_arg_15 = var_suffix;

    tmp_operand_name_15 = BUILTIN_LEN( tmp_len_arg_15 );
    if ( tmp_operand_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2116;
        goto try_except_handler_4;
    }
    tmp_slice_upper_14 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_15 );
    Py_DECREF( tmp_operand_name_15 );
    if ( tmp_slice_upper_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2116;
        goto try_except_handler_4;
    }
    tmp_assign_source_51 = LOOKUP_SLICE( tmp_slice_source_37, Py_None, tmp_slice_upper_14 );
    Py_DECREF( tmp_slice_upper_14 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2116;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_51;
        Py_DECREF( old );
    }

    tmp_slice_source_38 = var_rv;

    tmp_len_arg_16 = var_suffix;

    tmp_operand_name_16 = BUILTIN_LEN( tmp_len_arg_16 );
    if ( tmp_operand_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2117;
        goto try_except_handler_4;
    }
    tmp_slice_upper_15 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_16 );
    Py_DECREF( tmp_operand_name_16 );
    if ( tmp_slice_upper_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2117;
        goto try_except_handler_4;
    }
    tmp_assign_source_52 = LOOKUP_SLICE( tmp_slice_source_38, Py_None, tmp_slice_upper_15 );
    Py_DECREF( tmp_slice_upper_15 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2117;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_52;
        Py_DECREF( old );
    }

    branch_end_17:;
    branch_end_14:;
    branch_end_12:;
    branch_end_11:;
    branch_end_10:;
    branch_end_9:;
    branch_no_8:;
    branch_end_7:;
    branch_end_3:;
    goto loop_end_1;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2041;
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_cond_value_12 = var_step1_success;

    if ( tmp_cond_value_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step1_success" );
        exception_tb = NULL;

        exception_lineno = 2121;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2121;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_12 == 1 )
    {
        goto branch_no_19;
    }
    else
    {
        goto branch_yes_19;
    }
    branch_yes_19:;
    tmp_source_name_13 = par_self;

    tmp_iter_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain__PortugueseStemmer__step2_suffixes );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2122;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_53 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2122;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_53;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_54 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_54 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2122;
            goto try_except_handler_5;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_54;
        Py_XDECREF( old );
    }

    tmp_assign_source_55 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_55;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_15 = var_rv;

    if ( tmp_called_instance_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2123;
        goto try_except_handler_5;
    }

    tmp_args_element_name_15 = var_suffix;

    frame_function->f_lineno = 2123;
    {
        PyObject *call_args[] = { tmp_args_element_name_15 };
        tmp_cond_value_13 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_15, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2123;
        goto try_except_handler_5;
    }
    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_13 );

        exception_lineno = 2123;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_assign_source_56 = Py_True;
    {
        PyObject *old = var_step2_success;
        assert( old != NULL );
        var_step2_success = tmp_assign_source_56;
        Py_INCREF( var_step2_success );
        Py_DECREF( old );
    }

    tmp_slice_source_39 = par_word;

    if ( tmp_slice_source_39 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2126;
        goto try_except_handler_5;
    }

    tmp_len_arg_17 = var_suffix;

    tmp_operand_name_17 = BUILTIN_LEN( tmp_len_arg_17 );
    if ( tmp_operand_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2126;
        goto try_except_handler_5;
    }
    tmp_slice_upper_16 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_17 );
    Py_DECREF( tmp_operand_name_17 );
    if ( tmp_slice_upper_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2126;
        goto try_except_handler_5;
    }
    tmp_assign_source_57 = LOOKUP_SLICE( tmp_slice_source_39, Py_None, tmp_slice_upper_16 );
    Py_DECREF( tmp_slice_upper_16 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2126;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_57;
        Py_XDECREF( old );
    }

    tmp_slice_source_40 = var_rv;

    if ( tmp_slice_source_40 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2127;
        goto try_except_handler_5;
    }

    tmp_len_arg_18 = var_suffix;

    tmp_operand_name_18 = BUILTIN_LEN( tmp_len_arg_18 );
    if ( tmp_operand_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2127;
        goto try_except_handler_5;
    }
    tmp_slice_upper_17 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_18 );
    Py_DECREF( tmp_operand_name_18 );
    if ( tmp_slice_upper_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2127;
        goto try_except_handler_5;
    }
    tmp_assign_source_58 = LOOKUP_SLICE( tmp_slice_source_40, Py_None, tmp_slice_upper_17 );
    Py_DECREF( tmp_slice_upper_17 );
    if ( tmp_assign_source_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2127;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_58;
        Py_XDECREF( old );
    }

    goto loop_end_2;
    branch_no_20:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2122;
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    branch_no_19:;
    tmp_or_left_value_1 = var_step1_success;

    if ( tmp_or_left_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step1_success" );
        exception_tb = NULL;

        exception_lineno = 2131;
        goto frame_exception_exit_1;
    }

    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2131;
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_or_right_value_1 = var_step2_success;

    if ( tmp_or_right_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step2_success" );
        exception_tb = NULL;

        exception_lineno = 2131;
        goto frame_exception_exit_1;
    }

    tmp_cond_value_14 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_14 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2131;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_14 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_called_instance_16 = var_rv;

    if ( tmp_called_instance_16 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2132;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 2132;
    tmp_and_left_value_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_16, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_i_tuple, 0 ) );

    if ( tmp_and_left_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2132;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_4 = CHECK_IF_TRUE( tmp_and_left_value_4 );
    if ( tmp_and_left_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_4 );

        exception_lineno = 2132;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_4 == 1 )
    {
        goto and_right_4;
    }
    else
    {
        goto and_left_4;
    }
    and_right_4:;
    Py_DECREF( tmp_and_left_value_4 );
    tmp_subscribed_name_1 = par_word;

    if ( tmp_subscribed_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2132;
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_1 = const_int_neg_2;
    tmp_compexpr_left_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2132;
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_4 = const_unicode_plain_c;
    tmp_and_right_value_4 = RICH_COMPARE_EQ( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_and_right_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2132;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_15 = tmp_and_right_value_4;
    goto and_end_4;
    and_left_4:;
    tmp_cond_value_15 = tmp_and_left_value_4;
    and_end_4:;
    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_15 );

        exception_lineno = 2132;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_sliceslicedel_index_lower_24 = 0;
    tmp_slice_index_upper_24 = -1;
    tmp_slice_source_41 = par_word;

    if ( tmp_slice_source_41 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2133;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_59 = LOOKUP_INDEX_SLICE( tmp_slice_source_41, tmp_sliceslicedel_index_lower_24, tmp_slice_index_upper_24 );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2133;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_59;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_25 = 0;
    tmp_slice_index_upper_25 = -1;
    tmp_slice_source_42 = var_rv;

    if ( tmp_slice_source_42 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2134;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_60 = LOOKUP_INDEX_SLICE( tmp_slice_source_42, tmp_sliceslicedel_index_lower_25, tmp_slice_index_upper_25 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2134;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_60;
        Py_XDECREF( old );
    }

    branch_no_22:;
    branch_no_21:;
    tmp_operand_name_19 = var_step1_success;

    if ( tmp_operand_name_19 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step1_success" );
        exception_tb = NULL;

        exception_lineno = 2137;
        goto frame_exception_exit_1;
    }

    tmp_and_left_value_5 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_19 );
    if ( tmp_and_left_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2137;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_5 = CHECK_IF_TRUE( tmp_and_left_value_5 );
    if ( tmp_and_left_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2137;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_5 == 1 )
    {
        goto and_right_5;
    }
    else
    {
        goto and_left_5;
    }
    and_right_5:;
    tmp_operand_name_20 = var_step2_success;

    if ( tmp_operand_name_20 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step2_success" );
        exception_tb = NULL;

        exception_lineno = 2137;
        goto frame_exception_exit_1;
    }

    tmp_and_right_value_5 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_20 );
    if ( tmp_and_right_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2137;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_16 = tmp_and_right_value_5;
    goto and_end_5;
    and_left_5:;
    tmp_cond_value_16 = tmp_and_left_value_5;
    and_end_5:;
    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2137;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_16 == 1 )
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_source_name_14 = par_self;

    tmp_iter_arg_4 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain__PortugueseStemmer__step4_suffixes );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2138;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_61 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2138;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_61;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_62 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_62 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2138;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_62;
        Py_XDECREF( old );
    }

    tmp_assign_source_63 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_63;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_17 = var_rv;

    if ( tmp_called_instance_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2139;
        goto try_except_handler_6;
    }

    tmp_args_element_name_16 = var_suffix;

    frame_function->f_lineno = 2139;
    {
        PyObject *call_args[] = { tmp_args_element_name_16 };
        tmp_cond_value_17 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_17, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2139;
        goto try_except_handler_6;
    }
    tmp_cond_truth_17 = CHECK_IF_TRUE( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_17 );

        exception_lineno = 2139;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == 1 )
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_slice_source_43 = par_word;

    if ( tmp_slice_source_43 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2140;
        goto try_except_handler_6;
    }

    tmp_len_arg_19 = var_suffix;

    tmp_operand_name_21 = BUILTIN_LEN( tmp_len_arg_19 );
    if ( tmp_operand_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2140;
        goto try_except_handler_6;
    }
    tmp_slice_upper_18 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_21 );
    Py_DECREF( tmp_operand_name_21 );
    if ( tmp_slice_upper_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2140;
        goto try_except_handler_6;
    }
    tmp_assign_source_64 = LOOKUP_SLICE( tmp_slice_source_43, Py_None, tmp_slice_upper_18 );
    Py_DECREF( tmp_slice_upper_18 );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2140;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_64;
        Py_XDECREF( old );
    }

    tmp_slice_source_44 = var_rv;

    if ( tmp_slice_source_44 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2141;
        goto try_except_handler_6;
    }

    tmp_len_arg_20 = var_suffix;

    tmp_operand_name_22 = BUILTIN_LEN( tmp_len_arg_20 );
    if ( tmp_operand_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2141;
        goto try_except_handler_6;
    }
    tmp_slice_upper_19 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_22 );
    Py_DECREF( tmp_operand_name_22 );
    if ( tmp_slice_upper_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2141;
        goto try_except_handler_6;
    }
    tmp_assign_source_65 = LOOKUP_SLICE( tmp_slice_source_44, Py_None, tmp_slice_upper_19 );
    Py_DECREF( tmp_slice_upper_19 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2141;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_65;
        Py_XDECREF( old );
    }

    goto loop_end_3;
    branch_no_24:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2138;
        goto try_except_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    branch_no_23:;
    tmp_called_instance_18 = var_rv;

    if ( tmp_called_instance_18 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2145;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 2145;
    tmp_cond_value_18 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_18, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_tuple_0d91b14694a1e22a71f0e20a0419e2c8_tuple_tuple, 0 ) );

    if ( tmp_cond_value_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2145;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_18 = CHECK_IF_TRUE( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_18 );

        exception_lineno = 2145;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == 1 )
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    tmp_sliceslicedel_index_lower_26 = 0;
    tmp_slice_index_upper_26 = -1;
    tmp_slice_source_45 = par_word;

    if ( tmp_slice_source_45 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2146;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_66 = LOOKUP_INDEX_SLICE( tmp_slice_source_45, tmp_sliceslicedel_index_lower_26, tmp_slice_index_upper_26 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2146;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_66;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_27 = 0;
    tmp_slice_index_upper_27 = -1;
    tmp_slice_source_46 = var_rv;

    if ( tmp_slice_source_46 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2147;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_67 = LOOKUP_INDEX_SLICE( tmp_slice_source_46, tmp_sliceslicedel_index_lower_27, tmp_slice_index_upper_27 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2147;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_67;
        Py_XDECREF( old );
    }

    tmp_called_instance_19 = par_word;

    frame_function->f_lineno = 2149;
    tmp_and_left_value_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_19, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_gu_tuple, 0 ) );

    if ( tmp_and_left_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2149;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_6 = CHECK_IF_TRUE( tmp_and_left_value_6 );
    if ( tmp_and_left_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_6 );

        exception_lineno = 2149;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_6 == 1 )
    {
        goto and_right_6;
    }
    else
    {
        goto and_left_6;
    }
    and_right_6:;
    Py_DECREF( tmp_and_left_value_6 );
    tmp_called_instance_20 = var_rv;

    frame_function->f_lineno = 2149;
    tmp_and_right_value_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_20, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_u_tuple, 0 ) );

    if ( tmp_and_right_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2149;
        goto frame_exception_exit_1;
    }
    tmp_or_left_value_2 = tmp_and_right_value_6;
    goto and_end_6;
    and_left_6:;
    tmp_or_left_value_2 = tmp_and_left_value_6;
    and_end_6:;
    tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
    if ( tmp_or_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_2 );

        exception_lineno = 2150;
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_2 == 1 )
    {
        goto or_left_2;
    }
    else
    {
        goto or_right_2;
    }
    or_right_2:;
    Py_DECREF( tmp_or_left_value_2 );
    tmp_called_instance_21 = par_word;

    frame_function->f_lineno = 2150;
    tmp_and_left_value_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_21, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_ci_tuple, 0 ) );

    if ( tmp_and_left_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2150;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_7 = CHECK_IF_TRUE( tmp_and_left_value_7 );
    if ( tmp_and_left_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_7 );

        exception_lineno = 2150;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_7 == 1 )
    {
        goto and_right_7;
    }
    else
    {
        goto and_left_7;
    }
    and_right_7:;
    Py_DECREF( tmp_and_left_value_7 );
    tmp_called_instance_22 = var_rv;

    frame_function->f_lineno = 2150;
    tmp_and_right_value_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_22, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_i_tuple, 0 ) );

    if ( tmp_and_right_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2150;
        goto frame_exception_exit_1;
    }
    tmp_or_right_value_2 = tmp_and_right_value_7;
    goto and_end_7;
    and_left_7:;
    tmp_or_right_value_2 = tmp_and_left_value_7;
    and_end_7:;
    tmp_cond_value_19 = tmp_or_right_value_2;
    goto or_end_2;
    or_left_2:;
    tmp_cond_value_19 = tmp_or_left_value_2;
    or_end_2:;
    tmp_cond_truth_19 = CHECK_IF_TRUE( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_19 );

        exception_lineno = 2150;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == 1 )
    {
        goto branch_yes_26;
    }
    else
    {
        goto branch_no_26;
    }
    branch_yes_26:;
    tmp_sliceslicedel_index_lower_28 = 0;
    tmp_slice_index_upper_28 = -1;
    tmp_slice_source_47 = par_word;

    tmp_assign_source_68 = LOOKUP_INDEX_SLICE( tmp_slice_source_47, tmp_sliceslicedel_index_lower_28, tmp_slice_index_upper_28 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2151;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_68;
        Py_DECREF( old );
    }

    branch_no_26:;
    goto branch_end_25;
    branch_no_25:;
    tmp_called_instance_23 = par_word;

    if ( tmp_called_instance_23 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2153;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 2153;
    tmp_cond_value_20 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_23, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_digest_71e905b11a810a0c249b8d42f53379d6_tuple, 0 ) );

    if ( tmp_cond_value_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2153;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_20 = CHECK_IF_TRUE( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_20 );

        exception_lineno = 2153;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == 1 )
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_source_name_15 = const_unicode_empty;
    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_join );
    assert( tmp_called_name_9 != NULL );
    tmp_args_element_name_17 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_29 = 0;
    tmp_slice_index_upper_29 = -1;
    tmp_slice_source_48 = par_word;

    if ( tmp_slice_source_48 == NULL )
    {
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_17 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2154;
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_7 = LOOKUP_INDEX_SLICE( tmp_slice_source_48, tmp_sliceslicedel_index_lower_29, tmp_slice_index_upper_29 );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_17 );

        exception_lineno = 2154;
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_17, 0, tmp_tuple_element_7 );
    tmp_tuple_element_7 = const_unicode_plain_c;
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_args_element_name_17, 1, tmp_tuple_element_7 );
    frame_function->f_lineno = 2154;
    {
        PyObject *call_args[] = { tmp_args_element_name_17 };
        tmp_assign_source_69 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
    }

    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_17 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2154;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_69;
        Py_XDECREF( old );
    }

    branch_no_27:;
    branch_end_25:;
    tmp_called_instance_25 = par_word;

    if ( tmp_called_instance_25 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2156;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 2156;
    tmp_called_instance_24 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_25, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_055154112601037720a87eaf42da26be_tuple, 0 ) );

    if ( tmp_called_instance_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2156;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2156;
    tmp_assign_source_70 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_24, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_e181b636e1bca13587d7f801cd876854_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_24 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2156;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_70;
        Py_XDECREF( old );
    }


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_step1_success )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_step1_success,
                    var_step1_success
                );

                assert( res == 0 );
            }

            if ( var_step2_success )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_step2_success,
                    var_step2_success
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_r2 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r2,
                    var_r2
                );

                assert( res == 0 );
            }

            if ( var_rv )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_rv,
                    var_rv
                );

                assert( res == 0 );
            }

            if ( var_suffix )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_suffix,
                    var_suffix
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_12_PortugueseStemmer$$$function_1_stem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step1_success );
    var_step1_success = NULL;

    Py_XDECREF( var_step2_success );
    var_step2_success = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step1_success );
    var_step1_success = NULL;

    Py_XDECREF( var_step2_success );
    var_step2_success = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_12_PortugueseStemmer$$$function_1_stem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_13_RomanianStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__RomanianStemmer__vowels = NULL;
    PyObject *var__RomanianStemmer__step0_suffixes = NULL;
    PyObject *var__RomanianStemmer__step1_suffixes = NULL;
    PyObject *var__RomanianStemmer__step2_suffixes = NULL;
    PyObject *var__RomanianStemmer__step3_suffixes = NULL;
    PyObject *var_stem = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_96eb7bf4544fb87bb2ae37c1564b7553;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_unicode_digest_2e3371447b82ef26caa45342c6366bca;
    assert( var__RomanianStemmer__vowels == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var__RomanianStemmer__vowels = tmp_assign_source_3;

    tmp_assign_source_4 = const_tuple_add1684b9049f9f731cce96a1eaa51d2_tuple;
    assert( var__RomanianStemmer__step0_suffixes == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var__RomanianStemmer__step0_suffixes = tmp_assign_source_4;

    tmp_assign_source_5 = const_tuple_7c67d7a4be913a24b94b80d63c2a05b8_tuple;
    assert( var__RomanianStemmer__step1_suffixes == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__RomanianStemmer__step1_suffixes = tmp_assign_source_5;

    tmp_assign_source_6 = const_tuple_651dad646088a5dfd8c659c2a41682ed_tuple;
    assert( var__RomanianStemmer__step2_suffixes == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var__RomanianStemmer__step2_suffixes = tmp_assign_source_6;

    tmp_assign_source_7 = const_tuple_f924b321de9aa9cca45835accd5cb58a_tuple;
    assert( var__RomanianStemmer__step3_suffixes == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var__RomanianStemmer__step3_suffixes = tmp_assign_source_7;

    tmp_assign_source_8 = MAKE_FUNCTION_nltk$stem$snowball$$$class_13_RomanianStemmer$$$function_1_stem(  );
    assert( var_stem == NULL );
    var_stem = tmp_assign_source_8;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__RomanianStemmer__vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RomanianStemmer__vowels,
            var__RomanianStemmer__vowels
        );

        assert( res == 0 );
    }

    if ( var__RomanianStemmer__step0_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RomanianStemmer__step0_suffixes,
            var__RomanianStemmer__step0_suffixes
        );

        assert( res == 0 );
    }

    if ( var__RomanianStemmer__step1_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RomanianStemmer__step1_suffixes,
            var__RomanianStemmer__step1_suffixes
        );

        assert( res == 0 );
    }

    if ( var__RomanianStemmer__step2_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RomanianStemmer__step2_suffixes,
            var__RomanianStemmer__step2_suffixes
        );

        assert( res == 0 );
    }

    if ( var__RomanianStemmer__step3_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RomanianStemmer__step3_suffixes,
            var__RomanianStemmer__step3_suffixes
        );

        assert( res == 0 );
    }

    if ( var_stem )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_stem,
            var_stem
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_13_RomanianStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__RomanianStemmer__vowels );
    Py_DECREF( var__RomanianStemmer__vowels );
    var__RomanianStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__RomanianStemmer__step0_suffixes );
    Py_DECREF( var__RomanianStemmer__step0_suffixes );
    var__RomanianStemmer__step0_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RomanianStemmer__step1_suffixes );
    Py_DECREF( var__RomanianStemmer__step1_suffixes );
    var__RomanianStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RomanianStemmer__step2_suffixes );
    Py_DECREF( var__RomanianStemmer__step2_suffixes );
    var__RomanianStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RomanianStemmer__step3_suffixes );
    Py_DECREF( var__RomanianStemmer__step3_suffixes );
    var__RomanianStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__RomanianStemmer__vowels );
    Py_DECREF( var__RomanianStemmer__vowels );
    var__RomanianStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__RomanianStemmer__step0_suffixes );
    Py_DECREF( var__RomanianStemmer__step0_suffixes );
    var__RomanianStemmer__step0_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RomanianStemmer__step1_suffixes );
    Py_DECREF( var__RomanianStemmer__step1_suffixes );
    var__RomanianStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RomanianStemmer__step2_suffixes );
    Py_DECREF( var__RomanianStemmer__step2_suffixes );
    var__RomanianStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RomanianStemmer__step3_suffixes );
    Py_DECREF( var__RomanianStemmer__step3_suffixes );
    var__RomanianStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_13_RomanianStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_13_RomanianStemmer$$$function_1_stem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_step1_success = NULL;
    PyObject *var_step2_success = NULL;
    PyObject *var_i = NULL;
    PyObject *var_r1 = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_rv = NULL;
    PyObject *var_suffix = NULL;
    PyObject *var_replacement_done = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *tmp_for_loop_6__for_iterator = NULL;
    PyObject *tmp_for_loop_6__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    int tmp_and_left_truth_3;
    int tmp_and_left_truth_4;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_left_value_3;
    PyObject *tmp_and_left_value_4;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_and_right_value_3;
    PyObject *tmp_and_right_value_4;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_Eq_4;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    int tmp_cmp_In_10;
    int tmp_cmp_In_11;
    int tmp_cmp_In_12;
    int tmp_cmp_In_13;
    int tmp_cmp_In_14;
    int tmp_cmp_In_15;
    int tmp_cmp_In_16;
    int tmp_cmp_In_17;
    int tmp_cmp_In_18;
    int tmp_cmp_In_19;
    int tmp_cmp_In_20;
    int tmp_cmp_In_21;
    int tmp_cmp_In_22;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_left_17;
    PyObject *tmp_compare_left_18;
    PyObject *tmp_compare_left_19;
    PyObject *tmp_compare_left_20;
    PyObject *tmp_compare_left_21;
    PyObject *tmp_compare_left_22;
    PyObject *tmp_compare_left_23;
    PyObject *tmp_compare_left_24;
    PyObject *tmp_compare_left_25;
    PyObject *tmp_compare_left_26;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_compare_right_17;
    PyObject *tmp_compare_right_18;
    PyObject *tmp_compare_right_19;
    PyObject *tmp_compare_right_20;
    PyObject *tmp_compare_right_21;
    PyObject *tmp_compare_right_22;
    PyObject *tmp_compare_right_23;
    PyObject *tmp_compare_right_24;
    PyObject *tmp_compare_right_25;
    PyObject *tmp_compare_right_26;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_left_7;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    PyObject *tmp_compexpr_right_7;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_left_name_6;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_len_arg_6;
    PyObject *tmp_len_arg_7;
    PyObject *tmp_len_arg_8;
    PyObject *tmp_len_arg_9;
    PyObject *tmp_len_arg_10;
    PyObject *tmp_len_arg_11;
    PyObject *tmp_len_arg_12;
    PyObject *tmp_len_arg_13;
    PyObject *tmp_len_arg_14;
    PyObject *tmp_len_arg_15;
    PyObject *tmp_len_arg_16;
    PyObject *tmp_len_arg_17;
    PyObject *tmp_len_arg_18;
    PyObject *tmp_len_arg_19;
    PyObject *tmp_len_arg_20;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    PyObject *tmp_operand_name_4;
    PyObject *tmp_operand_name_5;
    PyObject *tmp_operand_name_6;
    PyObject *tmp_operand_name_7;
    PyObject *tmp_operand_name_8;
    PyObject *tmp_operand_name_9;
    PyObject *tmp_operand_name_10;
    PyObject *tmp_operand_name_11;
    PyObject *tmp_operand_name_12;
    PyObject *tmp_operand_name_13;
    PyObject *tmp_operand_name_14;
    PyObject *tmp_operand_name_15;
    PyObject *tmp_operand_name_16;
    PyObject *tmp_operand_name_17;
    PyObject *tmp_operand_name_18;
    PyObject *tmp_operand_name_19;
    PyObject *tmp_operand_name_20;
    PyObject *tmp_operand_name_21;
    PyObject *tmp_operand_name_22;
    int tmp_or_left_truth_1;
    int tmp_or_left_truth_2;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_left_value_2;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_or_right_value_2;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    PyObject *tmp_right_name_6;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_source_10;
    PyObject *tmp_slice_source_11;
    PyObject *tmp_slice_source_12;
    PyObject *tmp_slice_source_13;
    PyObject *tmp_slice_source_14;
    PyObject *tmp_slice_source_15;
    PyObject *tmp_slice_source_16;
    PyObject *tmp_slice_source_17;
    PyObject *tmp_slice_source_18;
    PyObject *tmp_slice_source_19;
    PyObject *tmp_slice_source_20;
    PyObject *tmp_slice_source_21;
    PyObject *tmp_slice_source_22;
    PyObject *tmp_slice_source_23;
    PyObject *tmp_slice_source_24;
    PyObject *tmp_slice_source_25;
    PyObject *tmp_slice_source_26;
    PyObject *tmp_slice_source_27;
    PyObject *tmp_slice_source_28;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    PyObject *tmp_slice_upper_4;
    PyObject *tmp_slice_upper_5;
    PyObject *tmp_slice_upper_6;
    PyObject *tmp_slice_upper_7;
    PyObject *tmp_slice_upper_8;
    PyObject *tmp_slice_upper_9;
    PyObject *tmp_slice_upper_10;
    PyObject *tmp_slice_upper_11;
    PyObject *tmp_slice_upper_12;
    PyObject *tmp_slice_upper_13;
    PyObject *tmp_slice_upper_14;
    PyObject *tmp_slice_upper_15;
    PyObject *tmp_slice_upper_16;
    PyObject *tmp_slice_upper_17;
    PyObject *tmp_slice_upper_18;
    PyObject *tmp_slice_upper_19;
    PyObject *tmp_slice_upper_20;
    PyObject *tmp_slice_upper_21;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscribed_name_6;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_subscript_name_6;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_tuple_element_13;
    PyObject *tmp_tuple_element_14;
    PyObject *tmp_tuple_element_15;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_xrange_high_1;
    PyObject *tmp_xrange_low_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = Py_False;
    assert( var_step1_success == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_step1_success = tmp_assign_source_1;

    tmp_assign_source_2 = Py_False;
    assert( var_step2_success == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var_step2_success = tmp_assign_source_2;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_c291c3a3150eaddb0391313781f9c5e8, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_instance_1 = par_word;

    frame_function->f_lineno = 2258;
    tmp_assign_source_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_lower );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2258;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_3;
        Py_DECREF( old );
    }

    tmp_xrange_low_1 = const_int_pos_1;
    tmp_len_arg_1 = par_word;

    tmp_left_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2260;
        goto frame_exception_exit_1;
    }
    tmp_right_name_1 = const_int_pos_1;
    tmp_xrange_high_1 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_xrange_high_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2260;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = BUILTIN_XRANGE2( tmp_xrange_low_1, tmp_xrange_high_1 );
    Py_DECREF( tmp_xrange_high_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2260;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2260;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_4;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2260;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_assign_source_6 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_6;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_1 = par_word;

    if ( tmp_subscribed_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2261;
        goto try_except_handler_2;
    }

    tmp_left_name_2 = var_i;

    tmp_right_name_2 = const_int_pos_1;
    tmp_subscript_name_1 = BINARY_OPERATION_SUB( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_subscript_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2261;
        goto try_except_handler_2;
    }
    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2261;
        goto try_except_handler_2;
    }
    tmp_source_name_1 = par_self;

    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__RomanianStemmer__vowels );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_1 );

        exception_lineno = 2261;
        goto try_except_handler_2;
    }
    tmp_and_left_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2261;
        goto try_except_handler_2;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    assert( !(tmp_and_left_truth_1 == -1) );
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_subscribed_name_2 = par_word;

    if ( tmp_subscribed_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2261;
        goto try_except_handler_2;
    }

    tmp_left_name_3 = var_i;

    tmp_right_name_3 = const_int_pos_1;
    tmp_subscript_name_2 = BINARY_OPERATION_ADD( tmp_left_name_3, tmp_right_name_3 );
    if ( tmp_subscript_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2261;
        goto try_except_handler_2;
    }
    tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    Py_DECREF( tmp_subscript_name_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2261;
        goto try_except_handler_2;
    }
    tmp_source_name_2 = par_self;

    tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__RomanianStemmer__vowels );
    if ( tmp_compexpr_right_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_2 );

        exception_lineno = 2261;
        goto try_except_handler_2;
    }
    tmp_and_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    Py_DECREF( tmp_compexpr_right_2 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2261;
        goto try_except_handler_2;
    }
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    assert( !(tmp_cond_truth_1 == -1) );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_subscribed_name_3 = par_word;

    if ( tmp_subscribed_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2262;
        goto try_except_handler_2;
    }

    tmp_subscript_name_3 = var_i;

    tmp_compare_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2262;
        goto try_except_handler_2;
    }
    tmp_compare_right_1 = const_unicode_plain_u;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 2262;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_3 = const_unicode_empty;
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_join );
    assert( tmp_called_name_1 != NULL );
    tmp_args_element_name_1 = PyTuple_New( 3 );
    tmp_slice_source_1 = par_word;

    if ( tmp_slice_source_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2263;
        goto try_except_handler_2;
    }

    tmp_slice_upper_1 = var_i;

    tmp_tuple_element_1 = LOOKUP_SLICE( tmp_slice_source_1, Py_None, tmp_slice_upper_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 2263;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_unicode_plain_U;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_element_name_1, 1, tmp_tuple_element_1 );
    tmp_slice_source_2 = par_word;

    if ( tmp_slice_source_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2263;
        goto try_except_handler_2;
    }

    tmp_left_name_4 = var_i;

    tmp_right_name_4 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_ADD( tmp_left_name_4, tmp_right_name_4 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 2263;
        goto try_except_handler_2;
    }
    tmp_tuple_element_1 = LOOKUP_SLICE( tmp_slice_source_2, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_lower_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 2263;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_1, 2, tmp_tuple_element_1 );
    frame_function->f_lineno = 2263;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2263;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_7;
        Py_XDECREF( old );
    }

    goto branch_end_2;
    branch_no_2:;
    tmp_subscribed_name_4 = par_word;

    if ( tmp_subscribed_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2265;
        goto try_except_handler_2;
    }

    tmp_subscript_name_4 = var_i;

    tmp_compare_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2265;
        goto try_except_handler_2;
    }
    tmp_compare_right_2 = const_unicode_plain_i;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        exception_lineno = 2265;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_4 = const_unicode_empty;
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_join );
    assert( tmp_called_name_2 != NULL );
    tmp_args_element_name_2 = PyTuple_New( 3 );
    tmp_slice_source_3 = par_word;

    if ( tmp_slice_source_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2266;
        goto try_except_handler_2;
    }

    tmp_slice_upper_2 = var_i;

    tmp_tuple_element_2 = LOOKUP_SLICE( tmp_slice_source_3, Py_None, tmp_slice_upper_2 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 2266;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_2, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = const_unicode_plain_I;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_element_name_2, 1, tmp_tuple_element_2 );
    tmp_slice_source_4 = par_word;

    if ( tmp_slice_source_4 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2266;
        goto try_except_handler_2;
    }

    tmp_left_name_5 = var_i;

    tmp_right_name_5 = const_int_pos_1;
    tmp_slice_lower_2 = BINARY_OPERATION_ADD( tmp_left_name_5, tmp_right_name_5 );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 2266;
        goto try_except_handler_2;
    }
    tmp_tuple_element_2 = LOOKUP_SLICE( tmp_slice_source_4, tmp_slice_lower_2, Py_None );
    Py_DECREF( tmp_slice_lower_2 );
    if ( tmp_tuple_element_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );

        exception_lineno = 2266;
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_2, 2, tmp_tuple_element_2 );
    frame_function->f_lineno = 2266;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2266;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    branch_no_3:;
    branch_end_2:;
    branch_no_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2260;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Tried code:
    tmp_source_name_5 = par_self;

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__r1r2_standard );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2268;
        goto try_except_handler_3;
    }
    tmp_args_element_name_3 = par_word;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2268;
        goto try_except_handler_3;
    }

    tmp_source_name_6 = par_self;

    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__RomanianStemmer__vowels );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 2268;
        goto try_except_handler_3;
    }
    frame_function->f_lineno = 2268;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2268;
        goto try_except_handler_3;
    }
    tmp_assign_source_9 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2268;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_9;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_10 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_10 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 2268;
        goto try_except_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_10;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_11 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_11 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 2268;
        goto try_except_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_11;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_4;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_3;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_12 = tmp_tuple_unpack_1__element_1;

    assert( var_r1 == NULL );
    Py_INCREF( tmp_assign_source_12 );
    var_r1 = tmp_assign_source_12;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_13 = tmp_tuple_unpack_1__element_2;

    assert( var_r2 == NULL );
    Py_INCREF( tmp_assign_source_13 );
    var_r2 = tmp_assign_source_13;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_7 = par_self;

    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__rv_standard );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2269;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = par_word;

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2269;
        goto frame_exception_exit_1;
    }

    tmp_source_name_8 = par_self;

    tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__RomanianStemmer__vowels );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_4 );

        exception_lineno = 2269;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2269;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_assign_source_14 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2269;
        goto frame_exception_exit_1;
    }
    assert( var_rv == NULL );
    var_rv = tmp_assign_source_14;

    tmp_source_name_9 = par_self;

    tmp_iter_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__RomanianStemmer__step0_suffixes );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2272;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_15 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2272;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_15;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_16 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_16 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2272;
            goto try_except_handler_5;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_16;
        Py_XDECREF( old );
    }

    tmp_assign_source_17 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_17;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_2 = par_word;

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2273;
        goto try_except_handler_5;
    }

    tmp_args_element_name_7 = var_suffix;

    frame_function->f_lineno = 2273;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_cond_value_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2273;
        goto try_except_handler_5;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 2273;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_compare_left_3 = var_suffix;

    tmp_compare_right_3 = var_r1;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_compare_left_4 = var_suffix;

    tmp_compare_right_4 = const_tuple_unicode_plain_ul_unicode_plain_ului_tuple;
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_slice_source_5 = par_word;

    if ( tmp_slice_source_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2276;
        goto try_except_handler_5;
    }

    tmp_len_arg_2 = var_suffix;

    tmp_operand_name_1 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2276;
        goto try_except_handler_5;
    }
    tmp_slice_upper_3 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_slice_upper_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2276;
        goto try_except_handler_5;
    }
    tmp_assign_source_18 = LOOKUP_SLICE( tmp_slice_source_5, Py_None, tmp_slice_upper_3 );
    Py_DECREF( tmp_slice_upper_3 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2276;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_18;
        Py_XDECREF( old );
    }

    tmp_compare_left_5 = var_suffix;

    tmp_compare_right_5 = var_rv;

    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_slice_source_6 = var_rv;

    tmp_len_arg_3 = var_suffix;

    tmp_operand_name_2 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2279;
        goto try_except_handler_5;
    }
    tmp_slice_upper_4 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_slice_upper_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2279;
        goto try_except_handler_5;
    }
    tmp_assign_source_19 = LOOKUP_SLICE( tmp_slice_source_6, Py_None, tmp_slice_upper_4 );
    Py_DECREF( tmp_slice_upper_4 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2279;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_19;
        Py_DECREF( old );
    }

    goto branch_end_7;
    branch_no_7:;
    tmp_assign_source_20 = const_unicode_empty;
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_20;
        Py_INCREF( var_rv );
        Py_DECREF( old );
    }

    branch_end_7:;
    goto branch_end_6;
    branch_no_6:;
    tmp_compexpr_left_3 = var_suffix;

    tmp_compexpr_right_3 = const_unicode_plain_aua;
    tmp_or_left_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2283;
        goto try_except_handler_5;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_1 );

        exception_lineno = 2284;
        goto try_except_handler_5;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    Py_DECREF( tmp_or_left_value_1 );
    tmp_compexpr_left_4 = var_suffix;

    tmp_compexpr_right_4 = const_unicode_plain_atei;
    tmp_or_left_value_2 = RICH_COMPARE_EQ( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    if ( tmp_or_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2283;
        goto try_except_handler_5;
    }
    tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
    if ( tmp_or_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_2 );

        exception_lineno = 2284;
        goto try_except_handler_5;
    }
    if ( tmp_or_left_truth_2 == 1 )
    {
        goto or_left_2;
    }
    else
    {
        goto or_right_2;
    }
    or_right_2:;
    Py_DECREF( tmp_or_left_value_2 );
    tmp_compexpr_left_5 = var_suffix;

    tmp_compexpr_right_5 = const_unicode_plain_ile;
    tmp_and_left_value_2 = RICH_COMPARE_EQ( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2284;
        goto try_except_handler_5;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    if ( tmp_and_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_2 );

        exception_lineno = 2284;
        goto try_except_handler_5;
    }
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    Py_DECREF( tmp_and_left_value_2 );
    tmp_sliceslicedel_index_lower_1 = -5;
    tmp_slice_index_upper_1 = -3;
    tmp_slice_source_7 = par_word;

    if ( tmp_slice_source_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2284;
        goto try_except_handler_5;
    }

    tmp_compexpr_left_6 = LOOKUP_INDEX_SLICE( tmp_slice_source_7, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_compexpr_left_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2284;
        goto try_except_handler_5;
    }
    tmp_compexpr_right_6 = const_unicode_plain_ab;
    tmp_and_right_value_2 = RICH_COMPARE_NE( tmp_compexpr_left_6, tmp_compexpr_right_6 );
    Py_DECREF( tmp_compexpr_left_6 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2284;
        goto try_except_handler_5;
    }
    tmp_or_right_value_2 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_or_right_value_2 = tmp_and_left_value_2;
    and_end_2:;
    tmp_or_right_value_1 = tmp_or_right_value_2;
    goto or_end_2;
    or_left_2:;
    tmp_or_right_value_1 = tmp_or_left_value_2;
    or_end_2:;
    tmp_cond_value_3 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_3 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 2284;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = -2;
    tmp_slice_source_8 = par_word;

    if ( tmp_slice_source_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2285;
        goto try_except_handler_5;
    }

    tmp_assign_source_21 = LOOKUP_INDEX_SLICE( tmp_slice_source_8, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2285;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_21;
        Py_XDECREF( old );
    }

    goto branch_end_8;
    branch_no_8:;
    tmp_compare_left_6 = var_suffix;

    tmp_compare_right_6 = const_tuple_unicode_plain_ea_unicode_plain_ele_unicode_plain_elor_tuple;
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_source_name_10 = const_unicode_empty;
    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_join );
    assert( tmp_called_name_5 != NULL );
    tmp_args_element_name_8 = PyTuple_New( 2 );
    tmp_slice_source_9 = par_word;

    if ( tmp_slice_source_9 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_8 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2288;
        goto try_except_handler_5;
    }

    tmp_len_arg_4 = var_suffix;

    tmp_operand_name_3 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_operand_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 2288;
        goto try_except_handler_5;
    }
    tmp_slice_upper_5 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_slice_upper_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 2288;
        goto try_except_handler_5;
    }
    tmp_tuple_element_3 = LOOKUP_SLICE( tmp_slice_source_9, Py_None, tmp_slice_upper_5 );
    Py_DECREF( tmp_slice_upper_5 );
    if ( tmp_tuple_element_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_8 );

        exception_lineno = 2288;
        goto try_except_handler_5;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_8, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_element_name_8, 1, tmp_tuple_element_3 );
    frame_function->f_lineno = 2288;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_assign_source_22 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_8 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2288;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_22;
        Py_XDECREF( old );
    }

    tmp_compare_left_7 = var_suffix;

    tmp_compare_right_7 = var_rv;

    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    assert( !(tmp_cmp_In_5 == -1) );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_source_name_11 = const_unicode_empty;
    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_join );
    assert( tmp_called_name_6 != NULL );
    tmp_args_element_name_9 = PyTuple_New( 2 );
    tmp_slice_source_10 = var_rv;

    tmp_len_arg_5 = var_suffix;

    tmp_operand_name_4 = BUILTIN_LEN( tmp_len_arg_5 );
    if ( tmp_operand_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 2291;
        goto try_except_handler_5;
    }
    tmp_slice_upper_6 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_4 );
    Py_DECREF( tmp_operand_name_4 );
    if ( tmp_slice_upper_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 2291;
        goto try_except_handler_5;
    }
    tmp_tuple_element_4 = LOOKUP_SLICE( tmp_slice_source_10, Py_None, tmp_slice_upper_6 );
    Py_DECREF( tmp_slice_upper_6 );
    if ( tmp_tuple_element_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_9 );

        exception_lineno = 2291;
        goto try_except_handler_5;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_9, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = const_unicode_plain_e;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_element_name_9, 1, tmp_tuple_element_4 );
    frame_function->f_lineno = 2291;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_assign_source_23 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2291;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_23;
        Py_DECREF( old );
    }

    goto branch_end_10;
    branch_no_10:;
    tmp_assign_source_24 = const_unicode_empty;
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_24;
        Py_INCREF( var_rv );
        Py_DECREF( old );
    }

    branch_end_10:;
    goto branch_end_9;
    branch_no_9:;
    tmp_compare_left_8 = var_suffix;

    tmp_compare_right_8 = const_tuple_631b7a7920642fcb1d2abc186f9e311c_tuple;
    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_6 == -1) );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_source_name_12 = const_unicode_empty;
    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_join );
    assert( tmp_called_name_7 != NULL );
    tmp_args_element_name_10 = PyTuple_New( 2 );
    tmp_slice_source_11 = par_word;

    if ( tmp_slice_source_11 == NULL )
    {
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2297;
        goto try_except_handler_5;
    }

    tmp_len_arg_6 = var_suffix;

    tmp_operand_name_5 = BUILTIN_LEN( tmp_len_arg_6 );
    if ( tmp_operand_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 2297;
        goto try_except_handler_5;
    }
    tmp_slice_upper_7 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_5 );
    Py_DECREF( tmp_operand_name_5 );
    if ( tmp_slice_upper_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 2297;
        goto try_except_handler_5;
    }
    tmp_tuple_element_5 = LOOKUP_SLICE( tmp_slice_source_11, Py_None, tmp_slice_upper_7 );
    Py_DECREF( tmp_slice_upper_7 );
    if ( tmp_tuple_element_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_10 );

        exception_lineno = 2297;
        goto try_except_handler_5;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_10, 0, tmp_tuple_element_5 );
    tmp_tuple_element_5 = const_unicode_plain_i;
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_args_element_name_10, 1, tmp_tuple_element_5 );
    frame_function->f_lineno = 2297;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_assign_source_25 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2297;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_25;
        Py_XDECREF( old );
    }

    tmp_compare_left_9 = var_suffix;

    tmp_compare_right_9 = var_rv;

    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    assert( !(tmp_cmp_In_7 == -1) );
    if ( tmp_cmp_In_7 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_source_name_13 = const_unicode_empty;
    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_join );
    assert( tmp_called_name_8 != NULL );
    tmp_args_element_name_11 = PyTuple_New( 2 );
    tmp_slice_source_12 = var_rv;

    tmp_len_arg_7 = var_suffix;

    tmp_operand_name_6 = BUILTIN_LEN( tmp_len_arg_7 );
    if ( tmp_operand_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 2300;
        goto try_except_handler_5;
    }
    tmp_slice_upper_8 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_6 );
    Py_DECREF( tmp_operand_name_6 );
    if ( tmp_slice_upper_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 2300;
        goto try_except_handler_5;
    }
    tmp_tuple_element_6 = LOOKUP_SLICE( tmp_slice_source_12, Py_None, tmp_slice_upper_8 );
    Py_DECREF( tmp_slice_upper_8 );
    if ( tmp_tuple_element_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_11 );

        exception_lineno = 2300;
        goto try_except_handler_5;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_11, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = const_unicode_plain_i;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_args_element_name_11, 1, tmp_tuple_element_6 );
    frame_function->f_lineno = 2300;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_assign_source_26 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2300;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_26;
        Py_DECREF( old );
    }

    goto branch_end_12;
    branch_no_12:;
    tmp_assign_source_27 = const_unicode_empty;
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_27;
        Py_INCREF( var_rv );
        Py_DECREF( old );
    }

    branch_end_12:;
    goto branch_end_11;
    branch_no_11:;
    tmp_compare_left_10 = var_suffix;

    tmp_compare_right_10 = const_tuple_6575b8f2b70c0cddeffa84d666a3e963_tuple;
    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    assert( !(tmp_cmp_In_8 == -1) );
    if ( tmp_cmp_In_8 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -1;
    tmp_slice_source_13 = par_word;

    if ( tmp_slice_source_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2305;
        goto try_except_handler_5;
    }

    tmp_assign_source_28 = LOOKUP_INDEX_SLICE( tmp_slice_source_13, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2305;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_28;
        Py_XDECREF( old );
    }

    branch_no_13:;
    branch_end_11:;
    branch_end_9:;
    branch_end_8:;
    branch_end_6:;
    branch_no_5:;
    goto loop_end_2;
    branch_no_4:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2272;
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    loop_start_3:;
    tmp_assign_source_29 = Py_False;
    {
        PyObject *old = var_replacement_done;
        var_replacement_done = tmp_assign_source_29;
        Py_INCREF( var_replacement_done );
        Py_XDECREF( old );
    }

    tmp_source_name_14 = par_self;

    tmp_iter_arg_4 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain__RomanianStemmer__step1_suffixes );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2313;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_30 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2313;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = tmp_for_loop_3__for_iterator;
        tmp_for_loop_3__for_iterator = tmp_assign_source_30;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_4:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_31 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_31 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2313;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_31;
        Py_XDECREF( old );
    }

    tmp_assign_source_32 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_32;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_3 = par_word;

    if ( tmp_called_instance_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2314;
        goto try_except_handler_6;
    }

    tmp_args_element_name_12 = var_suffix;

    frame_function->f_lineno = 2314;
    {
        PyObject *call_args[] = { tmp_args_element_name_12 };
        tmp_cond_value_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2314;
        goto try_except_handler_6;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        exception_lineno = 2314;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_compare_left_11 = var_suffix;

    tmp_compare_right_11 = var_r1;

    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    assert( !(tmp_cmp_In_9 == -1) );
    if ( tmp_cmp_In_9 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_assign_source_33 = Py_True;
    {
        PyObject *old = var_step1_success;
        var_step1_success = tmp_assign_source_33;
        Py_INCREF( var_step1_success );
        Py_XDECREF( old );
    }

    tmp_assign_source_34 = Py_True;
    {
        PyObject *old = var_replacement_done;
        assert( old != NULL );
        var_replacement_done = tmp_assign_source_34;
        Py_INCREF( var_replacement_done );
        Py_DECREF( old );
    }

    tmp_compare_left_12 = var_suffix;

    tmp_compare_right_12 = const_tuple_c8d27353a56896ad9935ffe2c05e32b1_tuple;
    tmp_cmp_In_10 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    assert( !(tmp_cmp_In_10 == -1) );
    if ( tmp_cmp_In_10 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_source_name_15 = const_unicode_empty;
    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_join );
    assert( tmp_called_name_9 != NULL );
    tmp_args_element_name_13 = PyTuple_New( 2 );
    tmp_slice_source_14 = par_word;

    if ( tmp_slice_source_14 == NULL )
    {
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_13 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2322;
        goto try_except_handler_6;
    }

    tmp_len_arg_8 = var_suffix;

    tmp_operand_name_7 = BUILTIN_LEN( tmp_len_arg_8 );
    if ( tmp_operand_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 2322;
        goto try_except_handler_6;
    }
    tmp_slice_upper_9 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_7 );
    Py_DECREF( tmp_operand_name_7 );
    if ( tmp_slice_upper_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 2322;
        goto try_except_handler_6;
    }
    tmp_tuple_element_7 = LOOKUP_SLICE( tmp_slice_source_14, Py_None, tmp_slice_upper_9 );
    Py_DECREF( tmp_slice_upper_9 );
    if ( tmp_tuple_element_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_13 );

        exception_lineno = 2322;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_13, 0, tmp_tuple_element_7 );
    tmp_tuple_element_7 = const_unicode_plain_abil;
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_args_element_name_13, 1, tmp_tuple_element_7 );
    frame_function->f_lineno = 2322;
    {
        PyObject *call_args[] = { tmp_args_element_name_13 };
        tmp_assign_source_35 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
    }

    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2322;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_35;
        Py_XDECREF( old );
    }

    goto branch_end_16;
    branch_no_16:;
    tmp_compare_left_13 = var_suffix;

    tmp_compare_right_13 = const_unicode_plain_ibilitate;
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_13, tmp_compare_right_13 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2324;
        goto try_except_handler_6;
    }
    if ( tmp_cmp_Eq_3 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = -5;
    tmp_slice_source_15 = par_word;

    if ( tmp_slice_source_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2325;
        goto try_except_handler_6;
    }

    tmp_assign_source_36 = LOOKUP_INDEX_SLICE( tmp_slice_source_15, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2325;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_36;
        Py_XDECREF( old );
    }

    goto branch_end_17;
    branch_no_17:;
    tmp_compare_left_14 = var_suffix;

    tmp_compare_right_14 = const_tuple_d7e10d442828c304a208e17e88dbafe5_tuple;
    tmp_cmp_In_11 = PySequence_Contains( tmp_compare_right_14, tmp_compare_left_14 );
    assert( !(tmp_cmp_In_11 == -1) );
    if ( tmp_cmp_In_11 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_source_name_16 = const_unicode_empty;
    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_join );
    assert( tmp_called_name_10 != NULL );
    tmp_args_element_name_14 = PyTuple_New( 2 );
    tmp_slice_source_16 = par_word;

    if ( tmp_slice_source_16 == NULL )
    {
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_args_element_name_14 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2330;
        goto try_except_handler_6;
    }

    tmp_len_arg_9 = var_suffix;

    tmp_operand_name_8 = BUILTIN_LEN( tmp_len_arg_9 );
    if ( tmp_operand_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 2330;
        goto try_except_handler_6;
    }
    tmp_slice_upper_10 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_8 );
    Py_DECREF( tmp_operand_name_8 );
    if ( tmp_slice_upper_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 2330;
        goto try_except_handler_6;
    }
    tmp_tuple_element_8 = LOOKUP_SLICE( tmp_slice_source_16, Py_None, tmp_slice_upper_10 );
    Py_DECREF( tmp_slice_upper_10 );
    if ( tmp_tuple_element_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_args_element_name_14 );

        exception_lineno = 2330;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_14, 0, tmp_tuple_element_8 );
    tmp_tuple_element_8 = const_unicode_plain_iv;
    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_args_element_name_14, 1, tmp_tuple_element_8 );
    frame_function->f_lineno = 2330;
    {
        PyObject *call_args[] = { tmp_args_element_name_14 };
        tmp_assign_source_37 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
    }

    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_element_name_14 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2330;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_37;
        Py_XDECREF( old );
    }

    goto branch_end_18;
    branch_no_18:;
    tmp_compare_left_15 = var_suffix;

    tmp_compare_right_15 = const_tuple_64d77b551539755c4fc18b73746163f5_tuple;
    tmp_cmp_In_12 = PySequence_Contains( tmp_compare_right_15, tmp_compare_left_15 );
    assert( !(tmp_cmp_In_12 == -1) );
    if ( tmp_cmp_In_12 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_source_name_17 = const_unicode_empty;
    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_join );
    assert( tmp_called_name_11 != NULL );
    tmp_args_element_name_15 = PyTuple_New( 2 );
    tmp_slice_source_17 = par_word;

    if ( tmp_slice_source_17 == NULL )
    {
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_15 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2338;
        goto try_except_handler_6;
    }

    tmp_len_arg_10 = var_suffix;

    tmp_operand_name_9 = BUILTIN_LEN( tmp_len_arg_10 );
    if ( tmp_operand_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_15 );

        exception_lineno = 2338;
        goto try_except_handler_6;
    }
    tmp_slice_upper_11 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_9 );
    Py_DECREF( tmp_operand_name_9 );
    if ( tmp_slice_upper_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_15 );

        exception_lineno = 2338;
        goto try_except_handler_6;
    }
    tmp_tuple_element_9 = LOOKUP_SLICE( tmp_slice_source_17, Py_None, tmp_slice_upper_11 );
    Py_DECREF( tmp_slice_upper_11 );
    if ( tmp_tuple_element_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_15 );

        exception_lineno = 2338;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_15, 0, tmp_tuple_element_9 );
    tmp_tuple_element_9 = const_unicode_plain_ic;
    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_args_element_name_15, 1, tmp_tuple_element_9 );
    frame_function->f_lineno = 2338;
    {
        PyObject *call_args[] = { tmp_args_element_name_15 };
        tmp_assign_source_38 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
    }

    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2338;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_38;
        Py_XDECREF( old );
    }

    goto branch_end_19;
    branch_no_19:;
    tmp_compare_left_16 = var_suffix;

    tmp_compare_right_16 = const_tuple_cca63d82a13a14cfedbce230d5d00a29_tuple;
    tmp_cmp_In_13 = PySequence_Contains( tmp_compare_right_16, tmp_compare_left_16 );
    assert( !(tmp_cmp_In_13 == -1) );
    if ( tmp_cmp_In_13 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_source_name_18 = const_unicode_empty;
    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_join );
    assert( tmp_called_name_12 != NULL );
    tmp_args_element_name_16 = PyTuple_New( 2 );
    tmp_slice_source_18 = par_word;

    if ( tmp_slice_source_18 == NULL )
    {
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_args_element_name_16 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2345;
        goto try_except_handler_6;
    }

    tmp_len_arg_11 = var_suffix;

    tmp_operand_name_10 = BUILTIN_LEN( tmp_len_arg_11 );
    if ( tmp_operand_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 2345;
        goto try_except_handler_6;
    }
    tmp_slice_upper_12 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_10 );
    Py_DECREF( tmp_operand_name_10 );
    if ( tmp_slice_upper_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 2345;
        goto try_except_handler_6;
    }
    tmp_tuple_element_10 = LOOKUP_SLICE( tmp_slice_source_18, Py_None, tmp_slice_upper_12 );
    Py_DECREF( tmp_slice_upper_12 );
    if ( tmp_tuple_element_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_args_element_name_16 );

        exception_lineno = 2345;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_16, 0, tmp_tuple_element_10 );
    tmp_tuple_element_10 = const_unicode_plain_at;
    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_args_element_name_16, 1, tmp_tuple_element_10 );
    frame_function->f_lineno = 2345;
    {
        PyObject *call_args[] = { tmp_args_element_name_16 };
        tmp_assign_source_39 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
    }

    Py_DECREF( tmp_called_name_12 );
    Py_DECREF( tmp_args_element_name_16 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2345;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_39;
        Py_XDECREF( old );
    }

    tmp_compare_left_17 = var_suffix;

    tmp_compare_right_17 = var_r2;

    if ( tmp_compare_right_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 2347;
        goto try_except_handler_6;
    }

    tmp_cmp_In_14 = PySequence_Contains( tmp_compare_right_17, tmp_compare_left_17 );
    assert( !(tmp_cmp_In_14 == -1) );
    if ( tmp_cmp_In_14 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_source_name_19 = const_unicode_empty;
    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_join );
    assert( tmp_called_name_13 != NULL );
    tmp_args_element_name_17 = PyTuple_New( 2 );
    tmp_slice_source_19 = var_r2;

    if ( tmp_slice_source_19 == NULL )
    {
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_17 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 2348;
        goto try_except_handler_6;
    }

    tmp_len_arg_12 = var_suffix;

    tmp_operand_name_11 = BUILTIN_LEN( tmp_len_arg_12 );
    if ( tmp_operand_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_17 );

        exception_lineno = 2348;
        goto try_except_handler_6;
    }
    tmp_slice_upper_13 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_11 );
    Py_DECREF( tmp_operand_name_11 );
    if ( tmp_slice_upper_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_17 );

        exception_lineno = 2348;
        goto try_except_handler_6;
    }
    tmp_tuple_element_11 = LOOKUP_SLICE( tmp_slice_source_19, Py_None, tmp_slice_upper_13 );
    Py_DECREF( tmp_slice_upper_13 );
    if ( tmp_tuple_element_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_17 );

        exception_lineno = 2348;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_17, 0, tmp_tuple_element_11 );
    tmp_tuple_element_11 = const_unicode_plain_at;
    Py_INCREF( tmp_tuple_element_11 );
    PyTuple_SET_ITEM( tmp_args_element_name_17, 1, tmp_tuple_element_11 );
    frame_function->f_lineno = 2348;
    {
        PyObject *call_args[] = { tmp_args_element_name_17 };
        tmp_assign_source_40 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, call_args );
    }

    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_args_element_name_17 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2348;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_40;
        Py_XDECREF( old );
    }

    branch_no_21:;
    goto branch_end_20;
    branch_no_20:;
    tmp_compare_left_18 = var_suffix;

    tmp_compare_right_18 = const_tuple_50cf5626dc820b899305d6108d631dae_tuple;
    tmp_cmp_In_15 = PySequence_Contains( tmp_compare_right_18, tmp_compare_left_18 );
    assert( !(tmp_cmp_In_15 == -1) );
    if ( tmp_cmp_In_15 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_source_name_20 = const_unicode_empty;
    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_join );
    assert( tmp_called_name_14 != NULL );
    tmp_args_element_name_18 = PyTuple_New( 2 );
    tmp_slice_source_20 = par_word;

    if ( tmp_slice_source_20 == NULL )
    {
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_args_element_name_18 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2353;
        goto try_except_handler_6;
    }

    tmp_len_arg_13 = var_suffix;

    tmp_operand_name_12 = BUILTIN_LEN( tmp_len_arg_13 );
    if ( tmp_operand_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_args_element_name_18 );

        exception_lineno = 2353;
        goto try_except_handler_6;
    }
    tmp_slice_upper_14 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_12 );
    Py_DECREF( tmp_operand_name_12 );
    if ( tmp_slice_upper_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_args_element_name_18 );

        exception_lineno = 2353;
        goto try_except_handler_6;
    }
    tmp_tuple_element_12 = LOOKUP_SLICE( tmp_slice_source_20, Py_None, tmp_slice_upper_14 );
    Py_DECREF( tmp_slice_upper_14 );
    if ( tmp_tuple_element_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_args_element_name_18 );

        exception_lineno = 2353;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_18, 0, tmp_tuple_element_12 );
    tmp_tuple_element_12 = const_unicode_plain_it;
    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_args_element_name_18, 1, tmp_tuple_element_12 );
    frame_function->f_lineno = 2353;
    {
        PyObject *call_args[] = { tmp_args_element_name_18 };
        tmp_assign_source_41 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, call_args );
    }

    Py_DECREF( tmp_called_name_14 );
    Py_DECREF( tmp_args_element_name_18 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2353;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_41;
        Py_XDECREF( old );
    }

    tmp_compare_left_19 = var_suffix;

    tmp_compare_right_19 = var_r2;

    if ( tmp_compare_right_19 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 2355;
        goto try_except_handler_6;
    }

    tmp_cmp_In_16 = PySequence_Contains( tmp_compare_right_19, tmp_compare_left_19 );
    assert( !(tmp_cmp_In_16 == -1) );
    if ( tmp_cmp_In_16 == 1 )
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_source_name_21 = const_unicode_empty;
    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_join );
    assert( tmp_called_name_15 != NULL );
    tmp_args_element_name_19 = PyTuple_New( 2 );
    tmp_slice_source_21 = var_r2;

    if ( tmp_slice_source_21 == NULL )
    {
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_19 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 2356;
        goto try_except_handler_6;
    }

    tmp_len_arg_14 = var_suffix;

    tmp_operand_name_13 = BUILTIN_LEN( tmp_len_arg_14 );
    if ( tmp_operand_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 2356;
        goto try_except_handler_6;
    }
    tmp_slice_upper_15 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_13 );
    Py_DECREF( tmp_operand_name_13 );
    if ( tmp_slice_upper_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 2356;
        goto try_except_handler_6;
    }
    tmp_tuple_element_13 = LOOKUP_SLICE( tmp_slice_source_21, Py_None, tmp_slice_upper_15 );
    Py_DECREF( tmp_slice_upper_15 );
    if ( tmp_tuple_element_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_19 );

        exception_lineno = 2356;
        goto try_except_handler_6;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_19, 0, tmp_tuple_element_13 );
    tmp_tuple_element_13 = const_unicode_plain_it;
    Py_INCREF( tmp_tuple_element_13 );
    PyTuple_SET_ITEM( tmp_args_element_name_19, 1, tmp_tuple_element_13 );
    frame_function->f_lineno = 2356;
    {
        PyObject *call_args[] = { tmp_args_element_name_19 };
        tmp_assign_source_42 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
    }

    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_args_element_name_19 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2356;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_42;
        Py_XDECREF( old );
    }

    branch_no_23:;
    branch_no_22:;
    branch_end_20:;
    branch_end_19:;
    branch_end_18:;
    branch_end_17:;
    branch_end_16:;
    goto branch_end_15;
    branch_no_15:;
    tmp_assign_source_43 = Py_False;
    {
        PyObject *old = var_step1_success;
        var_step1_success = tmp_assign_source_43;
        Py_INCREF( var_step1_success );
        Py_XDECREF( old );
    }

    branch_end_15:;
    goto loop_end_4;
    branch_no_14:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2313;
        goto try_except_handler_6;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_cond_value_5 = var_replacement_done;

    if ( tmp_cond_value_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "replacement_done" );
        exception_tb = NULL;

        exception_lineno = 2361;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2361;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_no_24;
    }
    else
    {
        goto branch_yes_24;
    }
    branch_yes_24:;
    goto loop_end_3;
    branch_no_24:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2309;
        goto frame_exception_exit_1;
    }
    goto loop_start_3;
    loop_end_3:;
    tmp_source_name_22 = par_self;

    tmp_iter_arg_5 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain__RomanianStemmer__step2_suffixes );
    if ( tmp_iter_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2365;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_44 = MAKE_ITERATOR( tmp_iter_arg_5 );
    Py_DECREF( tmp_iter_arg_5 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2365;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator == NULL );
    tmp_for_loop_4__for_iterator = tmp_assign_source_44;

    // Tried code:
    loop_start_5:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    tmp_assign_source_45 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_45 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_5;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2365;
            goto try_except_handler_7;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_45;
        Py_XDECREF( old );
    }

    tmp_assign_source_46 = tmp_for_loop_4__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_46;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_4 = par_word;

    if ( tmp_called_instance_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2366;
        goto try_except_handler_7;
    }

    tmp_args_element_name_20 = var_suffix;

    frame_function->f_lineno = 2366;
    {
        PyObject *call_args[] = { tmp_args_element_name_20 };
        tmp_cond_value_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2366;
        goto try_except_handler_7;
    }
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        exception_lineno = 2366;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    tmp_compare_left_20 = var_suffix;

    tmp_compare_right_20 = var_r2;

    if ( tmp_compare_right_20 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 2367;
        goto try_except_handler_7;
    }

    tmp_cmp_In_17 = PySequence_Contains( tmp_compare_right_20, tmp_compare_left_20 );
    assert( !(tmp_cmp_In_17 == -1) );
    if ( tmp_cmp_In_17 == 1 )
    {
        goto branch_yes_26;
    }
    else
    {
        goto branch_no_26;
    }
    branch_yes_26:;
    tmp_assign_source_47 = Py_True;
    {
        PyObject *old = var_step2_success;
        assert( old != NULL );
        var_step2_success = tmp_assign_source_47;
        Py_INCREF( var_step2_success );
        Py_DECREF( old );
    }

    tmp_compare_left_21 = var_suffix;

    tmp_compare_right_21 = const_tuple_unicode_plain_iune_unicode_plain_iuni_tuple;
    tmp_cmp_In_18 = PySequence_Contains( tmp_compare_right_21, tmp_compare_left_21 );
    assert( !(tmp_cmp_In_18 == -1) );
    if ( tmp_cmp_In_18 == 1 )
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_subscribed_name_5 = par_word;

    if ( tmp_subscribed_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2371;
        goto try_except_handler_7;
    }

    tmp_subscript_name_5 = const_int_neg_5;
    tmp_compare_left_22 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    if ( tmp_compare_left_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2371;
        goto try_except_handler_7;
    }
    tmp_compare_right_22 = const_unicode_digest_7aba63cfda7797771cb4210f1bb01e9d;
    tmp_cmp_Eq_4 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_22, tmp_compare_right_22 );
    if ( tmp_cmp_Eq_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_22 );

        exception_lineno = 2371;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_compare_left_22 );
    if ( tmp_cmp_Eq_4 == 1 )
    {
        goto branch_yes_28;
    }
    else
    {
        goto branch_no_28;
    }
    branch_yes_28:;
    tmp_source_name_23 = const_unicode_empty;
    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_join );
    assert( tmp_called_name_16 != NULL );
    tmp_args_element_name_21 = PyTuple_New( 2 );
    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = -5;
    tmp_slice_source_22 = par_word;

    if ( tmp_slice_source_22 == NULL )
    {
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_args_element_name_21 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2372;
        goto try_except_handler_7;
    }

    tmp_tuple_element_14 = LOOKUP_INDEX_SLICE( tmp_slice_source_22, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_tuple_element_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_args_element_name_21 );

        exception_lineno = 2372;
        goto try_except_handler_7;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_21, 0, tmp_tuple_element_14 );
    tmp_tuple_element_14 = const_unicode_plain_t;
    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_args_element_name_21, 1, tmp_tuple_element_14 );
    frame_function->f_lineno = 2372;
    {
        PyObject *call_args[] = { tmp_args_element_name_21 };
        tmp_assign_source_48 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, call_args );
    }

    Py_DECREF( tmp_called_name_16 );
    Py_DECREF( tmp_args_element_name_21 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2372;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_48;
        Py_XDECREF( old );
    }

    branch_no_28:;
    goto branch_end_27;
    branch_no_27:;
    tmp_compare_left_23 = var_suffix;

    tmp_compare_right_23 = const_tuple_9da71f3069d6bd8c817bc6992dcef6bf_tuple;
    tmp_cmp_In_19 = PySequence_Contains( tmp_compare_right_23, tmp_compare_left_23 );
    assert( !(tmp_cmp_In_19 == -1) );
    if ( tmp_cmp_In_19 == 1 )
    {
        goto branch_yes_29;
    }
    else
    {
        goto branch_no_29;
    }
    branch_yes_29:;
    tmp_source_name_24 = const_unicode_empty;
    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_join );
    assert( tmp_called_name_17 != NULL );
    tmp_args_element_name_22 = PyTuple_New( 2 );
    tmp_slice_source_23 = par_word;

    if ( tmp_slice_source_23 == NULL )
    {
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_22 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2376;
        goto try_except_handler_7;
    }

    tmp_len_arg_15 = var_suffix;

    tmp_operand_name_14 = BUILTIN_LEN( tmp_len_arg_15 );
    if ( tmp_operand_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 2376;
        goto try_except_handler_7;
    }
    tmp_slice_upper_16 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_14 );
    Py_DECREF( tmp_operand_name_14 );
    if ( tmp_slice_upper_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 2376;
        goto try_except_handler_7;
    }
    tmp_tuple_element_15 = LOOKUP_SLICE( tmp_slice_source_23, Py_None, tmp_slice_upper_16 );
    Py_DECREF( tmp_slice_upper_16 );
    if ( tmp_tuple_element_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_22 );

        exception_lineno = 2376;
        goto try_except_handler_7;
    }
    PyTuple_SET_ITEM( tmp_args_element_name_22, 0, tmp_tuple_element_15 );
    tmp_tuple_element_15 = const_unicode_plain_ist;
    Py_INCREF( tmp_tuple_element_15 );
    PyTuple_SET_ITEM( tmp_args_element_name_22, 1, tmp_tuple_element_15 );
    frame_function->f_lineno = 2376;
    {
        PyObject *call_args[] = { tmp_args_element_name_22 };
        tmp_assign_source_49 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_17, call_args );
    }

    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_args_element_name_22 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2376;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_49;
        Py_XDECREF( old );
    }

    goto branch_end_29;
    branch_no_29:;
    tmp_slice_source_24 = par_word;

    if ( tmp_slice_source_24 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2379;
        goto try_except_handler_7;
    }

    tmp_len_arg_16 = var_suffix;

    tmp_operand_name_15 = BUILTIN_LEN( tmp_len_arg_16 );
    if ( tmp_operand_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2379;
        goto try_except_handler_7;
    }
    tmp_slice_upper_17 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_15 );
    Py_DECREF( tmp_operand_name_15 );
    if ( tmp_slice_upper_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2379;
        goto try_except_handler_7;
    }
    tmp_assign_source_50 = LOOKUP_SLICE( tmp_slice_source_24, Py_None, tmp_slice_upper_17 );
    Py_DECREF( tmp_slice_upper_17 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2379;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_50;
        Py_XDECREF( old );
    }

    branch_end_29:;
    branch_end_27:;
    branch_no_26:;
    goto loop_end_5;
    branch_no_25:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2365;
        goto try_except_handler_7;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    tmp_operand_name_16 = var_step1_success;

    if ( tmp_operand_name_16 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step1_success" );
        exception_tb = NULL;

        exception_lineno = 2383;
        goto frame_exception_exit_1;
    }

    tmp_and_left_value_3 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_16 );
    if ( tmp_and_left_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2383;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_3 = CHECK_IF_TRUE( tmp_and_left_value_3 );
    if ( tmp_and_left_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2383;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_3 == 1 )
    {
        goto and_right_3;
    }
    else
    {
        goto and_left_3;
    }
    and_right_3:;
    tmp_operand_name_17 = var_step2_success;

    if ( tmp_operand_name_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step2_success" );
        exception_tb = NULL;

        exception_lineno = 2383;
        goto frame_exception_exit_1;
    }

    tmp_and_right_value_3 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_17 );
    if ( tmp_and_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2383;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_7 = tmp_and_right_value_3;
    goto and_end_3;
    and_left_3:;
    tmp_cond_value_7 = tmp_and_left_value_3;
    and_end_3:;
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2383;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_30;
    }
    else
    {
        goto branch_no_30;
    }
    branch_yes_30:;
    tmp_source_name_25 = par_self;

    tmp_iter_arg_6 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain__RomanianStemmer__step3_suffixes );
    if ( tmp_iter_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2384;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_51 = MAKE_ITERATOR( tmp_iter_arg_6 );
    Py_DECREF( tmp_iter_arg_6 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2384;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_5__for_iterator == NULL );
    tmp_for_loop_5__for_iterator = tmp_assign_source_51;

    // Tried code:
    loop_start_6:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator;

    tmp_assign_source_52 = ITERATOR_NEXT( tmp_next_source_5 );
    if ( tmp_assign_source_52 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_6;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2384;
            goto try_except_handler_8;
        }
    }

    {
        PyObject *old = tmp_for_loop_5__iter_value;
        tmp_for_loop_5__iter_value = tmp_assign_source_52;
        Py_XDECREF( old );
    }

    tmp_assign_source_53 = tmp_for_loop_5__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_53;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_5 = par_word;

    if ( tmp_called_instance_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2385;
        goto try_except_handler_8;
    }

    tmp_args_element_name_23 = var_suffix;

    frame_function->f_lineno = 2385;
    {
        PyObject *call_args[] = { tmp_args_element_name_23 };
        tmp_cond_value_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2385;
        goto try_except_handler_8;
    }
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        exception_lineno = 2385;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_31;
    }
    else
    {
        goto branch_no_31;
    }
    branch_yes_31:;
    tmp_compare_left_24 = var_suffix;

    tmp_compare_right_24 = var_rv;

    if ( tmp_compare_right_24 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2386;
        goto try_except_handler_8;
    }

    tmp_cmp_In_20 = PySequence_Contains( tmp_compare_right_24, tmp_compare_left_24 );
    assert( !(tmp_cmp_In_20 == -1) );
    if ( tmp_cmp_In_20 == 1 )
    {
        goto branch_yes_32;
    }
    else
    {
        goto branch_no_32;
    }
    branch_yes_32:;
    tmp_compare_left_25 = var_suffix;

    tmp_compare_right_25 = const_tuple_31374448d9a6d0406a7cc0f1ed0182f0_tuple;
    tmp_cmp_In_21 = PySequence_Contains( tmp_compare_right_25, tmp_compare_left_25 );
    assert( !(tmp_cmp_In_21 == -1) );
    if ( tmp_cmp_In_21 == 1 )
    {
        goto branch_yes_33;
    }
    else
    {
        goto branch_no_33;
    }
    branch_yes_33:;
    tmp_slice_source_25 = par_word;

    if ( tmp_slice_source_25 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2394;
        goto try_except_handler_8;
    }

    tmp_len_arg_17 = var_suffix;

    tmp_operand_name_18 = BUILTIN_LEN( tmp_len_arg_17 );
    if ( tmp_operand_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2394;
        goto try_except_handler_8;
    }
    tmp_slice_upper_18 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_18 );
    Py_DECREF( tmp_operand_name_18 );
    if ( tmp_slice_upper_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2394;
        goto try_except_handler_8;
    }
    tmp_assign_source_54 = LOOKUP_SLICE( tmp_slice_source_25, Py_None, tmp_slice_upper_18 );
    Py_DECREF( tmp_slice_upper_18 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2394;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_54;
        Py_XDECREF( old );
    }

    tmp_slice_source_26 = var_rv;

    if ( tmp_slice_source_26 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2395;
        goto try_except_handler_8;
    }

    tmp_len_arg_18 = var_suffix;

    tmp_operand_name_19 = BUILTIN_LEN( tmp_len_arg_18 );
    if ( tmp_operand_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2395;
        goto try_except_handler_8;
    }
    tmp_slice_upper_19 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_19 );
    Py_DECREF( tmp_operand_name_19 );
    if ( tmp_slice_upper_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2395;
        goto try_except_handler_8;
    }
    tmp_assign_source_55 = LOOKUP_SLICE( tmp_slice_source_26, Py_None, tmp_slice_upper_19 );
    Py_DECREF( tmp_slice_upper_19 );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2395;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_55;
        Py_XDECREF( old );
    }

    goto branch_end_33;
    branch_no_33:;
    tmp_called_instance_6 = var_rv;

    if ( tmp_called_instance_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2397;
        goto try_except_handler_8;
    }

    tmp_args_element_name_24 = var_suffix;

    frame_function->f_lineno = 2397;
    {
        PyObject *call_args[] = { tmp_args_element_name_24 };
        tmp_operand_name_20 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_startswith, call_args );
    }

    if ( tmp_operand_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2397;
        goto try_except_handler_8;
    }
    tmp_and_left_value_4 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_20 );
    Py_DECREF( tmp_operand_name_20 );
    if ( tmp_and_left_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2397;
        goto try_except_handler_8;
    }
    tmp_and_left_truth_4 = CHECK_IF_TRUE( tmp_and_left_value_4 );
    if ( tmp_and_left_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2398;
        goto try_except_handler_8;
    }
    if ( tmp_and_left_truth_4 == 1 )
    {
        goto and_right_4;
    }
    else
    {
        goto and_left_4;
    }
    and_right_4:;
    tmp_subscribed_name_6 = var_rv;

    if ( tmp_subscribed_name_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2398;
        goto try_except_handler_8;
    }

    tmp_called_instance_7 = var_rv;

    if ( tmp_called_instance_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2398;
        goto try_except_handler_8;
    }

    tmp_args_element_name_25 = var_suffix;

    frame_function->f_lineno = 2398;
    {
        PyObject *call_args[] = { tmp_args_element_name_25 };
        tmp_left_name_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_index, call_args );
    }

    if ( tmp_left_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2398;
        goto try_except_handler_8;
    }
    tmp_right_name_6 = const_int_pos_1;
    tmp_subscript_name_6 = BINARY_OPERATION_SUB( tmp_left_name_6, tmp_right_name_6 );
    Py_DECREF( tmp_left_name_6 );
    if ( tmp_subscript_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2398;
        goto try_except_handler_8;
    }
    tmp_compexpr_left_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
    Py_DECREF( tmp_subscript_name_6 );
    if ( tmp_compexpr_left_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2398;
        goto try_except_handler_8;
    }
    tmp_compexpr_right_7 = const_unicode_digest_e5b7e954d23d1556af222cafe527afe3;
    tmp_and_right_value_4 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
    Py_DECREF( tmp_compexpr_left_7 );
    if ( tmp_and_right_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2398;
        goto try_except_handler_8;
    }
    tmp_cond_value_9 = tmp_and_right_value_4;
    goto and_end_4;
    and_left_4:;
    tmp_cond_value_9 = tmp_and_left_value_4;
    and_end_4:;
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2398;
        goto try_except_handler_8;
    }
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_34;
    }
    else
    {
        goto branch_no_34;
    }
    branch_yes_34:;
    tmp_slice_source_27 = par_word;

    if ( tmp_slice_source_27 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2400;
        goto try_except_handler_8;
    }

    tmp_len_arg_19 = var_suffix;

    tmp_operand_name_21 = BUILTIN_LEN( tmp_len_arg_19 );
    if ( tmp_operand_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2400;
        goto try_except_handler_8;
    }
    tmp_slice_upper_20 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_21 );
    Py_DECREF( tmp_operand_name_21 );
    if ( tmp_slice_upper_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2400;
        goto try_except_handler_8;
    }
    tmp_assign_source_56 = LOOKUP_SLICE( tmp_slice_source_27, Py_None, tmp_slice_upper_20 );
    Py_DECREF( tmp_slice_upper_20 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2400;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_56;
        Py_XDECREF( old );
    }

    branch_no_34:;
    branch_end_33:;
    goto loop_end_6;
    branch_no_32:;
    branch_no_31:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2384;
        goto try_except_handler_8;
    }
    goto loop_start_6;
    loop_end_6:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    branch_no_30:;
    tmp_iter_arg_7 = const_tuple_fb7608fc06bb47c52c1a00144f395302_tuple;
    tmp_assign_source_57 = MAKE_ITERATOR( tmp_iter_arg_7 );
    assert( tmp_assign_source_57 != NULL );
    assert( tmp_for_loop_6__for_iterator == NULL );
    tmp_for_loop_6__for_iterator = tmp_assign_source_57;

    // Tried code:
    loop_start_7:;
    tmp_next_source_6 = tmp_for_loop_6__for_iterator;

    tmp_assign_source_58 = ITERATOR_NEXT( tmp_next_source_6 );
    if ( tmp_assign_source_58 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_7;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2404;
            goto try_except_handler_9;
        }
    }

    {
        PyObject *old = tmp_for_loop_6__iter_value;
        tmp_for_loop_6__iter_value = tmp_assign_source_58;
        Py_XDECREF( old );
    }

    tmp_assign_source_59 = tmp_for_loop_6__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_59;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_8 = par_word;

    if ( tmp_called_instance_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2405;
        goto try_except_handler_9;
    }

    tmp_args_element_name_26 = var_suffix;

    frame_function->f_lineno = 2405;
    {
        PyObject *call_args[] = { tmp_args_element_name_26 };
        tmp_cond_value_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2405;
        goto try_except_handler_9;
    }
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        exception_lineno = 2405;
        goto try_except_handler_9;
    }
    Py_DECREF( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_35;
    }
    else
    {
        goto branch_no_35;
    }
    branch_yes_35:;
    tmp_compare_left_26 = var_suffix;

    tmp_compare_right_26 = var_rv;

    if ( tmp_compare_right_26 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2406;
        goto try_except_handler_9;
    }

    tmp_cmp_In_22 = PySequence_Contains( tmp_compare_right_26, tmp_compare_left_26 );
    assert( !(tmp_cmp_In_22 == -1) );
    if ( tmp_cmp_In_22 == 1 )
    {
        goto branch_yes_36;
    }
    else
    {
        goto branch_no_36;
    }
    branch_yes_36:;
    tmp_slice_source_28 = par_word;

    if ( tmp_slice_source_28 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2407;
        goto try_except_handler_9;
    }

    tmp_len_arg_20 = var_suffix;

    tmp_operand_name_22 = BUILTIN_LEN( tmp_len_arg_20 );
    if ( tmp_operand_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2407;
        goto try_except_handler_9;
    }
    tmp_slice_upper_21 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_22 );
    Py_DECREF( tmp_operand_name_22 );
    if ( tmp_slice_upper_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2407;
        goto try_except_handler_9;
    }
    tmp_assign_source_60 = LOOKUP_SLICE( tmp_slice_source_28, Py_None, tmp_slice_upper_21 );
    Py_DECREF( tmp_slice_upper_21 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2407;
        goto try_except_handler_9;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_60;
        Py_XDECREF( old );
    }

    branch_no_36:;
    goto loop_end_7;
    branch_no_35:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2404;
        goto try_except_handler_9;
    }
    goto loop_start_7;
    loop_end_7:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    tmp_called_instance_10 = par_word;

    if ( tmp_called_instance_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2410;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 2410;
    tmp_called_instance_9 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_10, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_unicode_plain_I_unicode_plain_i_tuple, 0 ) );

    if ( tmp_called_instance_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2410;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2410;
    tmp_assign_source_61 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_9, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_unicode_plain_U_unicode_plain_u_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_9 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2410;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_61;
        Py_XDECREF( old );
    }


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_step1_success )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_step1_success,
                    var_step1_success
                );

                assert( res == 0 );
            }

            if ( var_step2_success )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_step2_success,
                    var_step2_success
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_r2 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r2,
                    var_r2
                );

                assert( res == 0 );
            }

            if ( var_rv )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_rv,
                    var_rv
                );

                assert( res == 0 );
            }

            if ( var_suffix )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_suffix,
                    var_suffix
                );

                assert( res == 0 );
            }

            if ( var_replacement_done )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_replacement_done,
                    var_replacement_done
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_13_RomanianStemmer$$$function_1_stem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step1_success );
    var_step1_success = NULL;

    Py_XDECREF( var_step2_success );
    var_step2_success = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    CHECK_OBJECT( (PyObject *)var_r1 );
    Py_DECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    Py_XDECREF( var_replacement_done );
    var_replacement_done = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step1_success );
    var_step1_success = NULL;

    Py_XDECREF( var_step2_success );
    var_step2_success = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    Py_XDECREF( var_replacement_done );
    var_replacement_done = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_13_RomanianStemmer$$$function_1_stem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_14_RussianStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__RussianStemmer__perfective_gerund_suffixes = NULL;
    PyObject *var__RussianStemmer__adjectival_suffixes = NULL;
    PyObject *var__RussianStemmer__reflexive_suffixes = NULL;
    PyObject *var__RussianStemmer__verb_suffixes = NULL;
    PyObject *var__RussianStemmer__noun_suffixes = NULL;
    PyObject *var__RussianStemmer__superlative_suffixes = NULL;
    PyObject *var__RussianStemmer__derivational_suffixes = NULL;
    PyObject *var_stem = NULL;
    PyObject *var__RussianStemmer__regions_russian = NULL;
    PyObject *var__RussianStemmer__cyrillic_to_roman = NULL;
    PyObject *var__RussianStemmer__roman_to_cyrillic = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_72254343b67d1170c7dc8158ec915d3a;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_tuple_924391ca6475244603f15fd2a11094db_tuple;
    assert( var__RussianStemmer__perfective_gerund_suffixes == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var__RussianStemmer__perfective_gerund_suffixes = tmp_assign_source_3;

    tmp_assign_source_4 = const_tuple_16b37ec7cb872ad451b56151cdb77735_tuple;
    assert( var__RussianStemmer__adjectival_suffixes == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var__RussianStemmer__adjectival_suffixes = tmp_assign_source_4;

    tmp_assign_source_5 = const_tuple_ab93cd02888dc6ebbce56f88252cffc0_tuple;
    assert( var__RussianStemmer__reflexive_suffixes == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__RussianStemmer__reflexive_suffixes = tmp_assign_source_5;

    tmp_assign_source_6 = const_tuple_e0fe9f2b0a779e4be824cff8d4b76b90_tuple;
    assert( var__RussianStemmer__verb_suffixes == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var__RussianStemmer__verb_suffixes = tmp_assign_source_6;

    tmp_assign_source_7 = const_tuple_8d452526ebecaf5c65d57e47f06a0155_tuple;
    assert( var__RussianStemmer__noun_suffixes == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var__RussianStemmer__noun_suffixes = tmp_assign_source_7;

    tmp_assign_source_8 = const_tuple_219621fff021e23d2ead53cf1b753854_tuple;
    assert( var__RussianStemmer__superlative_suffixes == NULL );
    Py_INCREF( tmp_assign_source_8 );
    var__RussianStemmer__superlative_suffixes = tmp_assign_source_8;

    tmp_assign_source_9 = const_tuple_fc3385a3fcb339a8c3a51b260f9ddea8_tuple;
    assert( var__RussianStemmer__derivational_suffixes == NULL );
    Py_INCREF( tmp_assign_source_9 );
    var__RussianStemmer__derivational_suffixes = tmp_assign_source_9;

    tmp_assign_source_10 = MAKE_FUNCTION_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_1_stem(  );
    assert( var_stem == NULL );
    var_stem = tmp_assign_source_10;

    tmp_assign_source_11 = MAKE_FUNCTION_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_2___regions_russian(  );
    assert( var__RussianStemmer__regions_russian == NULL );
    var__RussianStemmer__regions_russian = tmp_assign_source_11;

    tmp_assign_source_12 = MAKE_FUNCTION_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_3___cyrillic_to_roman(  );
    assert( var__RussianStemmer__cyrillic_to_roman == NULL );
    var__RussianStemmer__cyrillic_to_roman = tmp_assign_source_12;

    tmp_assign_source_13 = MAKE_FUNCTION_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_4___roman_to_cyrillic(  );
    assert( var__RussianStemmer__roman_to_cyrillic == NULL );
    var__RussianStemmer__roman_to_cyrillic = tmp_assign_source_13;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__RussianStemmer__perfective_gerund_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_digest_c7298b4f3c76de2d7a6153f9e0251ff7,
            var__RussianStemmer__perfective_gerund_suffixes
        );

        assert( res == 0 );
    }

    if ( var__RussianStemmer__adjectival_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RussianStemmer__adjectival_suffixes,
            var__RussianStemmer__adjectival_suffixes
        );

        assert( res == 0 );
    }

    if ( var__RussianStemmer__reflexive_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RussianStemmer__reflexive_suffixes,
            var__RussianStemmer__reflexive_suffixes
        );

        assert( res == 0 );
    }

    if ( var__RussianStemmer__verb_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RussianStemmer__verb_suffixes,
            var__RussianStemmer__verb_suffixes
        );

        assert( res == 0 );
    }

    if ( var__RussianStemmer__noun_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RussianStemmer__noun_suffixes,
            var__RussianStemmer__noun_suffixes
        );

        assert( res == 0 );
    }

    if ( var__RussianStemmer__superlative_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RussianStemmer__superlative_suffixes,
            var__RussianStemmer__superlative_suffixes
        );

        assert( res == 0 );
    }

    if ( var__RussianStemmer__derivational_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RussianStemmer__derivational_suffixes,
            var__RussianStemmer__derivational_suffixes
        );

        assert( res == 0 );
    }

    if ( var_stem )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_stem,
            var_stem
        );

        assert( res == 0 );
    }

    if ( var__RussianStemmer__regions_russian )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RussianStemmer__regions_russian,
            var__RussianStemmer__regions_russian
        );

        assert( res == 0 );
    }

    if ( var__RussianStemmer__cyrillic_to_roman )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RussianStemmer__cyrillic_to_roman,
            var__RussianStemmer__cyrillic_to_roman
        );

        assert( res == 0 );
    }

    if ( var__RussianStemmer__roman_to_cyrillic )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__RussianStemmer__roman_to_cyrillic,
            var__RussianStemmer__roman_to_cyrillic
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_14_RussianStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__perfective_gerund_suffixes );
    Py_DECREF( var__RussianStemmer__perfective_gerund_suffixes );
    var__RussianStemmer__perfective_gerund_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__adjectival_suffixes );
    Py_DECREF( var__RussianStemmer__adjectival_suffixes );
    var__RussianStemmer__adjectival_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__reflexive_suffixes );
    Py_DECREF( var__RussianStemmer__reflexive_suffixes );
    var__RussianStemmer__reflexive_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__verb_suffixes );
    Py_DECREF( var__RussianStemmer__verb_suffixes );
    var__RussianStemmer__verb_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__noun_suffixes );
    Py_DECREF( var__RussianStemmer__noun_suffixes );
    var__RussianStemmer__noun_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__superlative_suffixes );
    Py_DECREF( var__RussianStemmer__superlative_suffixes );
    var__RussianStemmer__superlative_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__derivational_suffixes );
    Py_DECREF( var__RussianStemmer__derivational_suffixes );
    var__RussianStemmer__derivational_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__regions_russian );
    Py_DECREF( var__RussianStemmer__regions_russian );
    var__RussianStemmer__regions_russian = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__cyrillic_to_roman );
    Py_DECREF( var__RussianStemmer__cyrillic_to_roman );
    var__RussianStemmer__cyrillic_to_roman = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__roman_to_cyrillic );
    Py_DECREF( var__RussianStemmer__roman_to_cyrillic );
    var__RussianStemmer__roman_to_cyrillic = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__perfective_gerund_suffixes );
    Py_DECREF( var__RussianStemmer__perfective_gerund_suffixes );
    var__RussianStemmer__perfective_gerund_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__adjectival_suffixes );
    Py_DECREF( var__RussianStemmer__adjectival_suffixes );
    var__RussianStemmer__adjectival_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__reflexive_suffixes );
    Py_DECREF( var__RussianStemmer__reflexive_suffixes );
    var__RussianStemmer__reflexive_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__verb_suffixes );
    Py_DECREF( var__RussianStemmer__verb_suffixes );
    var__RussianStemmer__verb_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__noun_suffixes );
    Py_DECREF( var__RussianStemmer__noun_suffixes );
    var__RussianStemmer__noun_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__superlative_suffixes );
    Py_DECREF( var__RussianStemmer__superlative_suffixes );
    var__RussianStemmer__superlative_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__derivational_suffixes );
    Py_DECREF( var__RussianStemmer__derivational_suffixes );
    var__RussianStemmer__derivational_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__regions_russian );
    Py_DECREF( var__RussianStemmer__regions_russian );
    var__RussianStemmer__regions_russian = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__cyrillic_to_roman );
    Py_DECREF( var__RussianStemmer__cyrillic_to_roman );
    var__RussianStemmer__cyrillic_to_roman = NULL;

    CHECK_OBJECT( (PyObject *)var__RussianStemmer__roman_to_cyrillic );
    Py_DECREF( var__RussianStemmer__roman_to_cyrillic );
    var__RussianStemmer__roman_to_cyrillic = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_14_RussianStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_1_stem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_chr_exceeded = NULL;
    PyObject *var_i = NULL;
    PyObject *var_step1_success = NULL;
    PyObject *var_adjectival_removed = NULL;
    PyObject *var_verb_removed = NULL;
    PyObject *var_undouble_success = NULL;
    PyObject *var_superlative_removed = NULL;
    PyObject *var_rv = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_suffix = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *tmp_for_loop_6__for_iterator = NULL;
    PyObject *tmp_for_loop_6__iter_value = NULL;
    PyObject *tmp_for_loop_7__for_iterator = NULL;
    PyObject *tmp_for_loop_7__iter_value = NULL;
    PyObject *tmp_for_loop_8__for_iterator = NULL;
    PyObject *tmp_for_loop_8__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_instance_12;
    PyObject *tmp_called_instance_13;
    PyObject *tmp_called_name_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    int tmp_cond_truth_17;
    int tmp_cond_truth_18;
    int tmp_cond_truth_19;
    int tmp_cond_truth_20;
    int tmp_cond_truth_21;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_cond_value_17;
    PyObject *tmp_cond_value_18;
    PyObject *tmp_cond_value_19;
    PyObject *tmp_cond_value_20;
    PyObject *tmp_cond_value_21;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iter_arg_8;
    PyObject *tmp_iter_arg_9;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_left_name_6;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_len_arg_6;
    PyObject *tmp_len_arg_7;
    PyObject *tmp_len_arg_8;
    PyObject *tmp_len_arg_9;
    PyObject *tmp_len_arg_10;
    PyObject *tmp_len_arg_11;
    PyObject *tmp_len_arg_12;
    PyObject *tmp_len_arg_13;
    PyObject *tmp_len_arg_14;
    PyObject *tmp_len_arg_15;
    PyObject *tmp_len_arg_16;
    PyObject *tmp_len_arg_17;
    PyObject *tmp_len_arg_18;
    PyObject *tmp_len_arg_19;
    PyObject *tmp_len_arg_20;
    PyObject *tmp_len_arg_21;
    PyObject *tmp_len_arg_22;
    PyObject *tmp_len_arg_23;
    PyObject *tmp_len_arg_24;
    PyObject *tmp_len_arg_25;
    PyObject *tmp_len_arg_26;
    PyObject *tmp_len_arg_27;
    PyObject *tmp_len_arg_28;
    PyObject *tmp_len_arg_29;
    PyObject *tmp_len_arg_30;
    PyObject *tmp_len_arg_31;
    PyObject *tmp_len_arg_32;
    PyObject *tmp_len_arg_33;
    PyObject *tmp_len_arg_34;
    PyObject *tmp_len_arg_35;
    PyObject *tmp_len_arg_36;
    PyObject *tmp_len_arg_37;
    PyObject *tmp_len_arg_38;
    PyObject *tmp_len_arg_39;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_next_source_7;
    PyObject *tmp_next_source_8;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    PyObject *tmp_operand_name_4;
    PyObject *tmp_operand_name_5;
    PyObject *tmp_operand_name_6;
    PyObject *tmp_operand_name_7;
    PyObject *tmp_operand_name_8;
    PyObject *tmp_operand_name_9;
    PyObject *tmp_operand_name_10;
    PyObject *tmp_operand_name_11;
    PyObject *tmp_operand_name_12;
    PyObject *tmp_operand_name_13;
    PyObject *tmp_operand_name_14;
    PyObject *tmp_operand_name_15;
    PyObject *tmp_operand_name_16;
    PyObject *tmp_operand_name_17;
    PyObject *tmp_operand_name_18;
    PyObject *tmp_operand_name_19;
    PyObject *tmp_operand_name_20;
    PyObject *tmp_operand_name_21;
    PyObject *tmp_operand_name_22;
    PyObject *tmp_operand_name_23;
    PyObject *tmp_operand_name_24;
    PyObject *tmp_operand_name_25;
    PyObject *tmp_operand_name_26;
    PyObject *tmp_operand_name_27;
    PyObject *tmp_operand_name_28;
    PyObject *tmp_operand_name_29;
    PyObject *tmp_operand_name_30;
    PyObject *tmp_operand_name_31;
    PyObject *tmp_operand_name_32;
    PyObject *tmp_operand_name_33;
    PyObject *tmp_operand_name_34;
    PyObject *tmp_operand_name_35;
    PyObject *tmp_operand_name_36;
    PyObject *tmp_operand_name_37;
    PyObject *tmp_operand_name_38;
    PyObject *tmp_operand_name_39;
    PyObject *tmp_operand_name_40;
    PyObject *tmp_operand_name_41;
    PyObject *tmp_operand_name_42;
    int tmp_or_left_truth_1;
    int tmp_or_left_truth_2;
    int tmp_or_left_truth_3;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_left_value_2;
    PyObject *tmp_or_left_value_3;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_or_right_value_2;
    PyObject *tmp_or_right_value_3;
    PyObject *tmp_ord_arg_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    PyObject *tmp_right_name_6;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_lower_3;
    PyObject *tmp_slice_lower_4;
    PyObject *tmp_slice_lower_5;
    PyObject *tmp_slice_lower_6;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_source_10;
    PyObject *tmp_slice_source_11;
    PyObject *tmp_slice_source_12;
    PyObject *tmp_slice_source_13;
    PyObject *tmp_slice_source_14;
    PyObject *tmp_slice_source_15;
    PyObject *tmp_slice_source_16;
    PyObject *tmp_slice_source_17;
    PyObject *tmp_slice_source_18;
    PyObject *tmp_slice_source_19;
    PyObject *tmp_slice_source_20;
    PyObject *tmp_slice_source_21;
    PyObject *tmp_slice_source_22;
    PyObject *tmp_slice_source_23;
    PyObject *tmp_slice_source_24;
    PyObject *tmp_slice_source_25;
    PyObject *tmp_slice_source_26;
    PyObject *tmp_slice_source_27;
    PyObject *tmp_slice_source_28;
    PyObject *tmp_slice_source_29;
    PyObject *tmp_slice_source_30;
    PyObject *tmp_slice_source_31;
    PyObject *tmp_slice_source_32;
    PyObject *tmp_slice_source_33;
    PyObject *tmp_slice_source_34;
    PyObject *tmp_slice_source_35;
    PyObject *tmp_slice_source_36;
    PyObject *tmp_slice_source_37;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    PyObject *tmp_slice_upper_4;
    PyObject *tmp_slice_upper_5;
    PyObject *tmp_slice_upper_6;
    PyObject *tmp_slice_upper_7;
    PyObject *tmp_slice_upper_8;
    PyObject *tmp_slice_upper_9;
    PyObject *tmp_slice_upper_10;
    PyObject *tmp_slice_upper_11;
    PyObject *tmp_slice_upper_12;
    PyObject *tmp_slice_upper_13;
    PyObject *tmp_slice_upper_14;
    PyObject *tmp_slice_upper_15;
    PyObject *tmp_slice_upper_16;
    PyObject *tmp_slice_upper_17;
    PyObject *tmp_slice_upper_18;
    PyObject *tmp_slice_upper_19;
    PyObject *tmp_slice_upper_20;
    PyObject *tmp_slice_upper_21;
    PyObject *tmp_slice_upper_22;
    PyObject *tmp_slice_upper_23;
    PyObject *tmp_slice_upper_24;
    PyObject *tmp_slice_upper_25;
    PyObject *tmp_slice_upper_26;
    PyObject *tmp_slice_upper_27;
    PyObject *tmp_slice_upper_28;
    PyObject *tmp_slice_upper_29;
    PyObject *tmp_slice_upper_30;
    PyObject *tmp_slice_upper_31;
    PyObject *tmp_slice_upper_32;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_xrange_low_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_b8e3267eed385f2afcfa7820714635b8, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_word;

    tmp_source_name_1 = par_self;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stopwords );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2545;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_assign_source_1 = Py_False;
    assert( var_chr_exceeded == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_chr_exceeded = tmp_assign_source_1;

    tmp_len_arg_1 = par_word;

    tmp_xrange_low_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_xrange_low_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2549;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = BUILTIN_XRANGE1( tmp_xrange_low_1 );
    Py_DECREF( tmp_xrange_low_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2549;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2549;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_2;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2549;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    tmp_assign_source_4 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_4;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_1 = par_word;

    tmp_subscript_name_1 = var_i;

    tmp_ord_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_ord_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2550;
        goto try_except_handler_2;
    }
    tmp_compare_left_2 = BUILTIN_ORD( tmp_ord_arg_1 );
    Py_DECREF( tmp_ord_arg_1 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2550;
        goto try_except_handler_2;
    }
    tmp_compare_right_2 = const_xrange_256;
    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_NotIn_1 == -1) );
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_cmp_NotIn_1 == 0 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assign_source_5 = Py_True;
    {
        PyObject *old = var_chr_exceeded;
        assert( old != NULL );
        var_chr_exceeded = tmp_assign_source_5;
        Py_INCREF( var_chr_exceeded );
        Py_DECREF( old );
    }

    goto loop_end_1;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2549;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_cond_value_1 = var_chr_exceeded;

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2554;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_instance_1 = par_self;

    tmp_args_element_name_1 = par_word;

    frame_function->f_lineno = 2555;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain__RussianStemmer__cyrillic_to_roman, call_args );
    }

    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2555;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_6;
        Py_DECREF( old );
    }

    branch_no_3:;
    tmp_assign_source_7 = Py_False;
    assert( var_step1_success == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var_step1_success = tmp_assign_source_7;

    tmp_assign_source_8 = Py_False;
    assert( var_adjectival_removed == NULL );
    Py_INCREF( tmp_assign_source_8 );
    var_adjectival_removed = tmp_assign_source_8;

    tmp_assign_source_9 = Py_False;
    assert( var_verb_removed == NULL );
    Py_INCREF( tmp_assign_source_9 );
    var_verb_removed = tmp_assign_source_9;

    tmp_assign_source_10 = Py_False;
    assert( var_undouble_success == NULL );
    Py_INCREF( tmp_assign_source_10 );
    var_undouble_success = tmp_assign_source_10;

    tmp_assign_source_11 = Py_False;
    assert( var_superlative_removed == NULL );
    Py_INCREF( tmp_assign_source_11 );
    var_superlative_removed = tmp_assign_source_11;

    // Tried code:
    tmp_called_instance_2 = par_self;

    tmp_args_element_name_2 = par_word;

    frame_function->f_lineno = 2563;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_iter_arg_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain__RussianStemmer__regions_russian, call_args );
    }

    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2563;
        goto try_except_handler_3;
    }
    tmp_assign_source_12 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2563;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_12;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_13 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_13 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 2563;
        goto try_except_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_13;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_14 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_14 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 2563;
        goto try_except_handler_4;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_14;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_4;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_3;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_15 = tmp_tuple_unpack_1__element_1;

    assert( var_rv == NULL );
    Py_INCREF( tmp_assign_source_15 );
    var_rv = tmp_assign_source_15;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_16 = tmp_tuple_unpack_1__element_2;

    assert( var_r2 == NULL );
    Py_INCREF( tmp_assign_source_16 );
    var_r2 = tmp_assign_source_16;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_2 = par_self;

    tmp_iter_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_digest_c7298b4f3c76de2d7a6153f9e0251ff7 );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2566;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_17 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2566;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_17;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_18 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_18 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2566;
            goto try_except_handler_5;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_18;
        Py_XDECREF( old );
    }

    tmp_assign_source_19 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_19;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_3 = var_rv;

    tmp_args_element_name_3 = var_suffix;

    frame_function->f_lineno = 2567;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_cond_value_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2567;
        goto try_except_handler_5;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 2567;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_compare_left_3 = var_suffix;

    tmp_compare_right_3 = const_tuple_2113415aedfb96e4da28dce140250380_tuple;
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_slice_source_1 = var_rv;

    tmp_len_arg_2 = var_suffix;

    tmp_operand_name_1 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2569;
        goto try_except_handler_5;
    }
    tmp_left_name_1 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2569;
        goto try_except_handler_5;
    }
    tmp_right_name_1 = const_int_pos_3;
    tmp_slice_lower_1 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2569;
        goto try_except_handler_5;
    }
    tmp_len_arg_3 = var_suffix;

    tmp_operand_name_2 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_1 );

        exception_lineno = 2569;
        goto try_except_handler_5;
    }
    tmp_slice_upper_1 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_slice_upper_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_1 );

        exception_lineno = 2569;
        goto try_except_handler_5;
    }
    tmp_compexpr_left_1 = LOOKUP_SLICE( tmp_slice_source_1, tmp_slice_lower_1, tmp_slice_upper_1 );
    Py_DECREF( tmp_slice_lower_1 );
    Py_DECREF( tmp_slice_upper_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2569;
        goto try_except_handler_5;
    }
    tmp_compexpr_right_1 = const_str_digest_1a27b7b9da7216996c1254ad3ffa3531;
    tmp_or_left_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2569;
        goto try_except_handler_5;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_1 );

        exception_lineno = 2570;
        goto try_except_handler_5;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    Py_DECREF( tmp_or_left_value_1 );
    tmp_slice_source_2 = var_rv;

    tmp_len_arg_4 = var_suffix;

    tmp_operand_name_3 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_operand_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2570;
        goto try_except_handler_5;
    }
    tmp_left_name_2 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_left_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2570;
        goto try_except_handler_5;
    }
    tmp_right_name_2 = const_int_pos_1;
    tmp_slice_lower_2 = BINARY_OPERATION_SUB( tmp_left_name_2, tmp_right_name_2 );
    Py_DECREF( tmp_left_name_2 );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2570;
        goto try_except_handler_5;
    }
    tmp_len_arg_5 = var_suffix;

    tmp_operand_name_4 = BUILTIN_LEN( tmp_len_arg_5 );
    if ( tmp_operand_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_2 );

        exception_lineno = 2570;
        goto try_except_handler_5;
    }
    tmp_slice_upper_2 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_4 );
    Py_DECREF( tmp_operand_name_4 );
    if ( tmp_slice_upper_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_2 );

        exception_lineno = 2570;
        goto try_except_handler_5;
    }
    tmp_compexpr_left_2 = LOOKUP_SLICE( tmp_slice_source_2, tmp_slice_lower_2, tmp_slice_upper_2 );
    Py_DECREF( tmp_slice_lower_2 );
    Py_DECREF( tmp_slice_upper_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2570;
        goto try_except_handler_5;
    }
    tmp_compexpr_right_2 = const_str_plain_a;
    tmp_or_right_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2570;
        goto try_except_handler_5;
    }
    tmp_cond_value_3 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_3 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 2570;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_slice_source_3 = par_word;

    tmp_len_arg_6 = var_suffix;

    tmp_operand_name_5 = BUILTIN_LEN( tmp_len_arg_6 );
    if ( tmp_operand_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2571;
        goto try_except_handler_5;
    }
    tmp_slice_upper_3 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_5 );
    Py_DECREF( tmp_operand_name_5 );
    if ( tmp_slice_upper_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2571;
        goto try_except_handler_5;
    }
    tmp_assign_source_20 = LOOKUP_SLICE( tmp_slice_source_3, Py_None, tmp_slice_upper_3 );
    Py_DECREF( tmp_slice_upper_3 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2571;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_20;
        Py_DECREF( old );
    }

    tmp_slice_source_4 = var_r2;

    tmp_len_arg_7 = var_suffix;

    tmp_operand_name_6 = BUILTIN_LEN( tmp_len_arg_7 );
    if ( tmp_operand_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2572;
        goto try_except_handler_5;
    }
    tmp_slice_upper_4 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_6 );
    Py_DECREF( tmp_operand_name_6 );
    if ( tmp_slice_upper_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2572;
        goto try_except_handler_5;
    }
    tmp_assign_source_21 = LOOKUP_SLICE( tmp_slice_source_4, Py_None, tmp_slice_upper_4 );
    Py_DECREF( tmp_slice_upper_4 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2572;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_21;
        Py_DECREF( old );
    }

    tmp_slice_source_5 = var_rv;

    tmp_len_arg_8 = var_suffix;

    tmp_operand_name_7 = BUILTIN_LEN( tmp_len_arg_8 );
    if ( tmp_operand_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2573;
        goto try_except_handler_5;
    }
    tmp_slice_upper_5 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_7 );
    Py_DECREF( tmp_operand_name_7 );
    if ( tmp_slice_upper_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2573;
        goto try_except_handler_5;
    }
    tmp_assign_source_22 = LOOKUP_SLICE( tmp_slice_source_5, Py_None, tmp_slice_upper_5 );
    Py_DECREF( tmp_slice_upper_5 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2573;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_22;
        Py_DECREF( old );
    }

    tmp_assign_source_23 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_23;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    goto loop_end_2;
    branch_no_6:;
    goto branch_end_5;
    branch_no_5:;
    tmp_slice_source_6 = par_word;

    tmp_len_arg_9 = var_suffix;

    tmp_operand_name_8 = BUILTIN_LEN( tmp_len_arg_9 );
    if ( tmp_operand_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2577;
        goto try_except_handler_5;
    }
    tmp_slice_upper_6 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_8 );
    Py_DECREF( tmp_operand_name_8 );
    if ( tmp_slice_upper_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2577;
        goto try_except_handler_5;
    }
    tmp_assign_source_24 = LOOKUP_SLICE( tmp_slice_source_6, Py_None, tmp_slice_upper_6 );
    Py_DECREF( tmp_slice_upper_6 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2577;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_24;
        Py_DECREF( old );
    }

    tmp_slice_source_7 = var_r2;

    tmp_len_arg_10 = var_suffix;

    tmp_operand_name_9 = BUILTIN_LEN( tmp_len_arg_10 );
    if ( tmp_operand_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2578;
        goto try_except_handler_5;
    }
    tmp_slice_upper_7 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_9 );
    Py_DECREF( tmp_operand_name_9 );
    if ( tmp_slice_upper_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2578;
        goto try_except_handler_5;
    }
    tmp_assign_source_25 = LOOKUP_SLICE( tmp_slice_source_7, Py_None, tmp_slice_upper_7 );
    Py_DECREF( tmp_slice_upper_7 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2578;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_25;
        Py_DECREF( old );
    }

    tmp_slice_source_8 = var_rv;

    tmp_len_arg_11 = var_suffix;

    tmp_operand_name_10 = BUILTIN_LEN( tmp_len_arg_11 );
    if ( tmp_operand_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2579;
        goto try_except_handler_5;
    }
    tmp_slice_upper_8 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_10 );
    Py_DECREF( tmp_operand_name_10 );
    if ( tmp_slice_upper_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2579;
        goto try_except_handler_5;
    }
    tmp_assign_source_26 = LOOKUP_SLICE( tmp_slice_source_8, Py_None, tmp_slice_upper_8 );
    Py_DECREF( tmp_slice_upper_8 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2579;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_26;
        Py_DECREF( old );
    }

    tmp_assign_source_27 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_27;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    goto loop_end_2;
    branch_end_5:;
    branch_no_4:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2566;
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_cond_value_4 = var_step1_success;

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2583;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_no_7;
    }
    else
    {
        goto branch_yes_7;
    }
    branch_yes_7:;
    tmp_source_name_3 = par_self;

    tmp_iter_arg_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__RussianStemmer__reflexive_suffixes );
    if ( tmp_iter_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2584;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_28 = MAKE_ITERATOR( tmp_iter_arg_4 );
    Py_DECREF( tmp_iter_arg_4 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2584;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_28;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_29 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_29 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2584;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_29;
        Py_XDECREF( old );
    }

    tmp_assign_source_30 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_30;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_4 = var_rv;

    tmp_args_element_name_4 = var_suffix;

    frame_function->f_lineno = 2585;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_cond_value_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2585;
        goto try_except_handler_6;
    }
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        exception_lineno = 2585;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_slice_source_9 = par_word;

    if ( tmp_slice_source_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2586;
        goto try_except_handler_6;
    }

    tmp_len_arg_12 = var_suffix;

    tmp_operand_name_11 = BUILTIN_LEN( tmp_len_arg_12 );
    if ( tmp_operand_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2586;
        goto try_except_handler_6;
    }
    tmp_slice_upper_9 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_11 );
    Py_DECREF( tmp_operand_name_11 );
    if ( tmp_slice_upper_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2586;
        goto try_except_handler_6;
    }
    tmp_assign_source_31 = LOOKUP_SLICE( tmp_slice_source_9, Py_None, tmp_slice_upper_9 );
    Py_DECREF( tmp_slice_upper_9 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2586;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_31;
        Py_XDECREF( old );
    }

    tmp_slice_source_10 = var_r2;

    tmp_len_arg_13 = var_suffix;

    tmp_operand_name_12 = BUILTIN_LEN( tmp_len_arg_13 );
    if ( tmp_operand_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2587;
        goto try_except_handler_6;
    }
    tmp_slice_upper_10 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_12 );
    Py_DECREF( tmp_operand_name_12 );
    if ( tmp_slice_upper_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2587;
        goto try_except_handler_6;
    }
    tmp_assign_source_32 = LOOKUP_SLICE( tmp_slice_source_10, Py_None, tmp_slice_upper_10 );
    Py_DECREF( tmp_slice_upper_10 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2587;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_32;
        Py_DECREF( old );
    }

    tmp_slice_source_11 = var_rv;

    tmp_len_arg_14 = var_suffix;

    tmp_operand_name_13 = BUILTIN_LEN( tmp_len_arg_14 );
    if ( tmp_operand_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2588;
        goto try_except_handler_6;
    }
    tmp_slice_upper_11 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_13 );
    Py_DECREF( tmp_operand_name_13 );
    if ( tmp_slice_upper_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2588;
        goto try_except_handler_6;
    }
    tmp_assign_source_33 = LOOKUP_SLICE( tmp_slice_source_11, Py_None, tmp_slice_upper_11 );
    Py_DECREF( tmp_slice_upper_11 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2588;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_33;
        Py_DECREF( old );
    }

    goto loop_end_3;
    branch_no_8:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2584;
        goto try_except_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_source_name_4 = par_self;

    tmp_iter_arg_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__RussianStemmer__adjectival_suffixes );
    if ( tmp_iter_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2591;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_34 = MAKE_ITERATOR( tmp_iter_arg_5 );
    Py_DECREF( tmp_iter_arg_5 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2591;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator == NULL );
    tmp_for_loop_4__for_iterator = tmp_assign_source_34;

    // Tried code:
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    tmp_assign_source_35 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_35 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2591;
            goto try_except_handler_7;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_35;
        Py_XDECREF( old );
    }

    tmp_assign_source_36 = tmp_for_loop_4__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_36;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_5 = var_rv;

    if ( tmp_called_instance_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2592;
        goto try_except_handler_7;
    }

    tmp_args_element_name_5 = var_suffix;

    frame_function->f_lineno = 2592;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_cond_value_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2592;
        goto try_except_handler_7;
    }
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        exception_lineno = 2592;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_compare_left_4 = var_suffix;

    tmp_compare_right_4 = const_tuple_75eda4c05d75c8ab2d309455415cafcd_tuple;
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_slice_source_12 = var_rv;

    if ( tmp_slice_source_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2628;
        goto try_except_handler_7;
    }

    tmp_len_arg_15 = var_suffix;

    tmp_operand_name_14 = BUILTIN_LEN( tmp_len_arg_15 );
    if ( tmp_operand_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2628;
        goto try_except_handler_7;
    }
    tmp_left_name_3 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_14 );
    Py_DECREF( tmp_operand_name_14 );
    if ( tmp_left_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2628;
        goto try_except_handler_7;
    }
    tmp_right_name_3 = const_int_pos_3;
    tmp_slice_lower_3 = BINARY_OPERATION_SUB( tmp_left_name_3, tmp_right_name_3 );
    Py_DECREF( tmp_left_name_3 );
    if ( tmp_slice_lower_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2628;
        goto try_except_handler_7;
    }
    tmp_len_arg_16 = var_suffix;

    tmp_operand_name_15 = BUILTIN_LEN( tmp_len_arg_16 );
    if ( tmp_operand_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_3 );

        exception_lineno = 2628;
        goto try_except_handler_7;
    }
    tmp_slice_upper_12 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_15 );
    Py_DECREF( tmp_operand_name_15 );
    if ( tmp_slice_upper_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_3 );

        exception_lineno = 2628;
        goto try_except_handler_7;
    }
    tmp_compexpr_left_3 = LOOKUP_SLICE( tmp_slice_source_12, tmp_slice_lower_3, tmp_slice_upper_12 );
    Py_DECREF( tmp_slice_lower_3 );
    Py_DECREF( tmp_slice_upper_12 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2628;
        goto try_except_handler_7;
    }
    tmp_compexpr_right_3 = const_str_digest_1a27b7b9da7216996c1254ad3ffa3531;
    tmp_or_left_value_2 = RICH_COMPARE_EQ( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    if ( tmp_or_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2628;
        goto try_except_handler_7;
    }
    tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
    if ( tmp_or_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_2 );

        exception_lineno = 2629;
        goto try_except_handler_7;
    }
    if ( tmp_or_left_truth_2 == 1 )
    {
        goto or_left_2;
    }
    else
    {
        goto or_right_2;
    }
    or_right_2:;
    Py_DECREF( tmp_or_left_value_2 );
    tmp_slice_source_13 = var_rv;

    if ( tmp_slice_source_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2629;
        goto try_except_handler_7;
    }

    tmp_len_arg_17 = var_suffix;

    tmp_operand_name_16 = BUILTIN_LEN( tmp_len_arg_17 );
    if ( tmp_operand_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2629;
        goto try_except_handler_7;
    }
    tmp_left_name_4 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_16 );
    Py_DECREF( tmp_operand_name_16 );
    if ( tmp_left_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2629;
        goto try_except_handler_7;
    }
    tmp_right_name_4 = const_int_pos_1;
    tmp_slice_lower_4 = BINARY_OPERATION_SUB( tmp_left_name_4, tmp_right_name_4 );
    Py_DECREF( tmp_left_name_4 );
    if ( tmp_slice_lower_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2629;
        goto try_except_handler_7;
    }
    tmp_len_arg_18 = var_suffix;

    tmp_operand_name_17 = BUILTIN_LEN( tmp_len_arg_18 );
    if ( tmp_operand_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_4 );

        exception_lineno = 2629;
        goto try_except_handler_7;
    }
    tmp_slice_upper_13 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_17 );
    Py_DECREF( tmp_operand_name_17 );
    if ( tmp_slice_upper_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_4 );

        exception_lineno = 2629;
        goto try_except_handler_7;
    }
    tmp_compexpr_left_4 = LOOKUP_SLICE( tmp_slice_source_13, tmp_slice_lower_4, tmp_slice_upper_13 );
    Py_DECREF( tmp_slice_lower_4 );
    Py_DECREF( tmp_slice_upper_13 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2629;
        goto try_except_handler_7;
    }
    tmp_compexpr_right_4 = const_str_plain_a;
    tmp_or_right_value_2 = RICH_COMPARE_EQ( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_or_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2629;
        goto try_except_handler_7;
    }
    tmp_cond_value_7 = tmp_or_right_value_2;
    goto or_end_2;
    or_left_2:;
    tmp_cond_value_7 = tmp_or_left_value_2;
    or_end_2:;
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        exception_lineno = 2629;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_slice_source_14 = par_word;

    if ( tmp_slice_source_14 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2630;
        goto try_except_handler_7;
    }

    tmp_len_arg_19 = var_suffix;

    tmp_operand_name_18 = BUILTIN_LEN( tmp_len_arg_19 );
    if ( tmp_operand_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2630;
        goto try_except_handler_7;
    }
    tmp_slice_upper_14 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_18 );
    Py_DECREF( tmp_operand_name_18 );
    if ( tmp_slice_upper_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2630;
        goto try_except_handler_7;
    }
    tmp_assign_source_37 = LOOKUP_SLICE( tmp_slice_source_14, Py_None, tmp_slice_upper_14 );
    Py_DECREF( tmp_slice_upper_14 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2630;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_37;
        Py_XDECREF( old );
    }

    tmp_slice_source_15 = var_r2;

    if ( tmp_slice_source_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 2631;
        goto try_except_handler_7;
    }

    tmp_len_arg_20 = var_suffix;

    tmp_operand_name_19 = BUILTIN_LEN( tmp_len_arg_20 );
    if ( tmp_operand_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2631;
        goto try_except_handler_7;
    }
    tmp_slice_upper_15 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_19 );
    Py_DECREF( tmp_operand_name_19 );
    if ( tmp_slice_upper_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2631;
        goto try_except_handler_7;
    }
    tmp_assign_source_38 = LOOKUP_SLICE( tmp_slice_source_15, Py_None, tmp_slice_upper_15 );
    Py_DECREF( tmp_slice_upper_15 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2631;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_38;
        Py_XDECREF( old );
    }

    tmp_slice_source_16 = var_rv;

    if ( tmp_slice_source_16 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2632;
        goto try_except_handler_7;
    }

    tmp_len_arg_21 = var_suffix;

    tmp_operand_name_20 = BUILTIN_LEN( tmp_len_arg_21 );
    if ( tmp_operand_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2632;
        goto try_except_handler_7;
    }
    tmp_slice_upper_16 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_20 );
    Py_DECREF( tmp_operand_name_20 );
    if ( tmp_slice_upper_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2632;
        goto try_except_handler_7;
    }
    tmp_assign_source_39 = LOOKUP_SLICE( tmp_slice_source_16, Py_None, tmp_slice_upper_16 );
    Py_DECREF( tmp_slice_upper_16 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2632;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_39;
        Py_XDECREF( old );
    }

    tmp_assign_source_40 = Py_True;
    {
        PyObject *old = var_adjectival_removed;
        assert( old != NULL );
        var_adjectival_removed = tmp_assign_source_40;
        Py_INCREF( var_adjectival_removed );
        Py_DECREF( old );
    }

    goto loop_end_4;
    branch_no_11:;
    goto branch_end_10;
    branch_no_10:;
    tmp_slice_source_17 = par_word;

    if ( tmp_slice_source_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2636;
        goto try_except_handler_7;
    }

    tmp_len_arg_22 = var_suffix;

    tmp_operand_name_21 = BUILTIN_LEN( tmp_len_arg_22 );
    if ( tmp_operand_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2636;
        goto try_except_handler_7;
    }
    tmp_slice_upper_17 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_21 );
    Py_DECREF( tmp_operand_name_21 );
    if ( tmp_slice_upper_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2636;
        goto try_except_handler_7;
    }
    tmp_assign_source_41 = LOOKUP_SLICE( tmp_slice_source_17, Py_None, tmp_slice_upper_17 );
    Py_DECREF( tmp_slice_upper_17 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2636;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_41;
        Py_XDECREF( old );
    }

    tmp_slice_source_18 = var_r2;

    if ( tmp_slice_source_18 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 2637;
        goto try_except_handler_7;
    }

    tmp_len_arg_23 = var_suffix;

    tmp_operand_name_22 = BUILTIN_LEN( tmp_len_arg_23 );
    if ( tmp_operand_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2637;
        goto try_except_handler_7;
    }
    tmp_slice_upper_18 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_22 );
    Py_DECREF( tmp_operand_name_22 );
    if ( tmp_slice_upper_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2637;
        goto try_except_handler_7;
    }
    tmp_assign_source_42 = LOOKUP_SLICE( tmp_slice_source_18, Py_None, tmp_slice_upper_18 );
    Py_DECREF( tmp_slice_upper_18 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2637;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_42;
        Py_XDECREF( old );
    }

    tmp_slice_source_19 = var_rv;

    if ( tmp_slice_source_19 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2638;
        goto try_except_handler_7;
    }

    tmp_len_arg_24 = var_suffix;

    tmp_operand_name_23 = BUILTIN_LEN( tmp_len_arg_24 );
    if ( tmp_operand_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2638;
        goto try_except_handler_7;
    }
    tmp_slice_upper_19 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_23 );
    Py_DECREF( tmp_operand_name_23 );
    if ( tmp_slice_upper_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2638;
        goto try_except_handler_7;
    }
    tmp_assign_source_43 = LOOKUP_SLICE( tmp_slice_source_19, Py_None, tmp_slice_upper_19 );
    Py_DECREF( tmp_slice_upper_19 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2638;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_43;
        Py_XDECREF( old );
    }

    tmp_assign_source_44 = Py_True;
    {
        PyObject *old = var_adjectival_removed;
        assert( old != NULL );
        var_adjectival_removed = tmp_assign_source_44;
        Py_INCREF( var_adjectival_removed );
        Py_DECREF( old );
    }

    goto loop_end_4;
    branch_end_10:;
    branch_no_9:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2591;
        goto try_except_handler_7;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    tmp_cond_value_8 = var_adjectival_removed;

    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2642;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_no_12;
    }
    else
    {
        goto branch_yes_12;
    }
    branch_yes_12:;
    tmp_source_name_5 = par_self;

    tmp_iter_arg_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__RussianStemmer__verb_suffixes );
    if ( tmp_iter_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2643;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_45 = MAKE_ITERATOR( tmp_iter_arg_6 );
    Py_DECREF( tmp_iter_arg_6 );
    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2643;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_5__for_iterator == NULL );
    tmp_for_loop_5__for_iterator = tmp_assign_source_45;

    // Tried code:
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator;

    tmp_assign_source_46 = ITERATOR_NEXT( tmp_next_source_5 );
    if ( tmp_assign_source_46 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_5;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2643;
            goto try_except_handler_8;
        }
    }

    {
        PyObject *old = tmp_for_loop_5__iter_value;
        tmp_for_loop_5__iter_value = tmp_assign_source_46;
        Py_XDECREF( old );
    }

    tmp_assign_source_47 = tmp_for_loop_5__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_47;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_6 = var_rv;

    if ( tmp_called_instance_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2644;
        goto try_except_handler_8;
    }

    tmp_args_element_name_6 = var_suffix;

    frame_function->f_lineno = 2644;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_cond_value_9 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2644;
        goto try_except_handler_8;
    }
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        exception_lineno = 2644;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_compare_left_5 = var_suffix;

    tmp_compare_right_5 = const_tuple_dcc0308af62b122287f65dbfd0030b9d_tuple;
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_slice_source_20 = var_rv;

    if ( tmp_slice_source_20 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2649;
        goto try_except_handler_8;
    }

    tmp_len_arg_25 = var_suffix;

    tmp_operand_name_24 = BUILTIN_LEN( tmp_len_arg_25 );
    if ( tmp_operand_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2649;
        goto try_except_handler_8;
    }
    tmp_left_name_5 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_24 );
    Py_DECREF( tmp_operand_name_24 );
    if ( tmp_left_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2649;
        goto try_except_handler_8;
    }
    tmp_right_name_5 = const_int_pos_3;
    tmp_slice_lower_5 = BINARY_OPERATION_SUB( tmp_left_name_5, tmp_right_name_5 );
    Py_DECREF( tmp_left_name_5 );
    if ( tmp_slice_lower_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2649;
        goto try_except_handler_8;
    }
    tmp_len_arg_26 = var_suffix;

    tmp_operand_name_25 = BUILTIN_LEN( tmp_len_arg_26 );
    if ( tmp_operand_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_5 );

        exception_lineno = 2649;
        goto try_except_handler_8;
    }
    tmp_slice_upper_20 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_25 );
    Py_DECREF( tmp_operand_name_25 );
    if ( tmp_slice_upper_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_5 );

        exception_lineno = 2649;
        goto try_except_handler_8;
    }
    tmp_compexpr_left_5 = LOOKUP_SLICE( tmp_slice_source_20, tmp_slice_lower_5, tmp_slice_upper_20 );
    Py_DECREF( tmp_slice_lower_5 );
    Py_DECREF( tmp_slice_upper_20 );
    if ( tmp_compexpr_left_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2649;
        goto try_except_handler_8;
    }
    tmp_compexpr_right_5 = const_str_digest_1a27b7b9da7216996c1254ad3ffa3531;
    tmp_or_left_value_3 = RICH_COMPARE_EQ( tmp_compexpr_left_5, tmp_compexpr_right_5 );
    Py_DECREF( tmp_compexpr_left_5 );
    if ( tmp_or_left_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2649;
        goto try_except_handler_8;
    }
    tmp_or_left_truth_3 = CHECK_IF_TRUE( tmp_or_left_value_3 );
    if ( tmp_or_left_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_3 );

        exception_lineno = 2650;
        goto try_except_handler_8;
    }
    if ( tmp_or_left_truth_3 == 1 )
    {
        goto or_left_3;
    }
    else
    {
        goto or_right_3;
    }
    or_right_3:;
    Py_DECREF( tmp_or_left_value_3 );
    tmp_slice_source_21 = var_rv;

    if ( tmp_slice_source_21 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2650;
        goto try_except_handler_8;
    }

    tmp_len_arg_27 = var_suffix;

    tmp_operand_name_26 = BUILTIN_LEN( tmp_len_arg_27 );
    if ( tmp_operand_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2650;
        goto try_except_handler_8;
    }
    tmp_left_name_6 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_26 );
    Py_DECREF( tmp_operand_name_26 );
    if ( tmp_left_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2650;
        goto try_except_handler_8;
    }
    tmp_right_name_6 = const_int_pos_1;
    tmp_slice_lower_6 = BINARY_OPERATION_SUB( tmp_left_name_6, tmp_right_name_6 );
    Py_DECREF( tmp_left_name_6 );
    if ( tmp_slice_lower_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2650;
        goto try_except_handler_8;
    }
    tmp_len_arg_28 = var_suffix;

    tmp_operand_name_27 = BUILTIN_LEN( tmp_len_arg_28 );
    if ( tmp_operand_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_6 );

        exception_lineno = 2650;
        goto try_except_handler_8;
    }
    tmp_slice_upper_21 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_27 );
    Py_DECREF( tmp_operand_name_27 );
    if ( tmp_slice_upper_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_6 );

        exception_lineno = 2650;
        goto try_except_handler_8;
    }
    tmp_compexpr_left_6 = LOOKUP_SLICE( tmp_slice_source_21, tmp_slice_lower_6, tmp_slice_upper_21 );
    Py_DECREF( tmp_slice_lower_6 );
    Py_DECREF( tmp_slice_upper_21 );
    if ( tmp_compexpr_left_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2650;
        goto try_except_handler_8;
    }
    tmp_compexpr_right_6 = const_str_plain_a;
    tmp_or_right_value_3 = RICH_COMPARE_EQ( tmp_compexpr_left_6, tmp_compexpr_right_6 );
    Py_DECREF( tmp_compexpr_left_6 );
    if ( tmp_or_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2650;
        goto try_except_handler_8;
    }
    tmp_cond_value_10 = tmp_or_right_value_3;
    goto or_end_3;
    or_left_3:;
    tmp_cond_value_10 = tmp_or_left_value_3;
    or_end_3:;
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        exception_lineno = 2650;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_slice_source_22 = par_word;

    if ( tmp_slice_source_22 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2651;
        goto try_except_handler_8;
    }

    tmp_len_arg_29 = var_suffix;

    tmp_operand_name_28 = BUILTIN_LEN( tmp_len_arg_29 );
    if ( tmp_operand_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2651;
        goto try_except_handler_8;
    }
    tmp_slice_upper_22 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_28 );
    Py_DECREF( tmp_operand_name_28 );
    if ( tmp_slice_upper_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2651;
        goto try_except_handler_8;
    }
    tmp_assign_source_48 = LOOKUP_SLICE( tmp_slice_source_22, Py_None, tmp_slice_upper_22 );
    Py_DECREF( tmp_slice_upper_22 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2651;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_48;
        Py_XDECREF( old );
    }

    tmp_slice_source_23 = var_r2;

    if ( tmp_slice_source_23 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 2652;
        goto try_except_handler_8;
    }

    tmp_len_arg_30 = var_suffix;

    tmp_operand_name_29 = BUILTIN_LEN( tmp_len_arg_30 );
    if ( tmp_operand_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2652;
        goto try_except_handler_8;
    }
    tmp_slice_upper_23 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_29 );
    Py_DECREF( tmp_operand_name_29 );
    if ( tmp_slice_upper_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2652;
        goto try_except_handler_8;
    }
    tmp_assign_source_49 = LOOKUP_SLICE( tmp_slice_source_23, Py_None, tmp_slice_upper_23 );
    Py_DECREF( tmp_slice_upper_23 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2652;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_49;
        Py_XDECREF( old );
    }

    tmp_slice_source_24 = var_rv;

    if ( tmp_slice_source_24 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2653;
        goto try_except_handler_8;
    }

    tmp_len_arg_31 = var_suffix;

    tmp_operand_name_30 = BUILTIN_LEN( tmp_len_arg_31 );
    if ( tmp_operand_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2653;
        goto try_except_handler_8;
    }
    tmp_slice_upper_24 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_30 );
    Py_DECREF( tmp_operand_name_30 );
    if ( tmp_slice_upper_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2653;
        goto try_except_handler_8;
    }
    tmp_assign_source_50 = LOOKUP_SLICE( tmp_slice_source_24, Py_None, tmp_slice_upper_24 );
    Py_DECREF( tmp_slice_upper_24 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2653;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_50;
        Py_XDECREF( old );
    }

    tmp_assign_source_51 = Py_True;
    {
        PyObject *old = var_verb_removed;
        assert( old != NULL );
        var_verb_removed = tmp_assign_source_51;
        Py_INCREF( var_verb_removed );
        Py_DECREF( old );
    }

    goto loop_end_5;
    branch_no_15:;
    goto branch_end_14;
    branch_no_14:;
    tmp_slice_source_25 = par_word;

    if ( tmp_slice_source_25 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2657;
        goto try_except_handler_8;
    }

    tmp_len_arg_32 = var_suffix;

    tmp_operand_name_31 = BUILTIN_LEN( tmp_len_arg_32 );
    if ( tmp_operand_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2657;
        goto try_except_handler_8;
    }
    tmp_slice_upper_25 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_31 );
    Py_DECREF( tmp_operand_name_31 );
    if ( tmp_slice_upper_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2657;
        goto try_except_handler_8;
    }
    tmp_assign_source_52 = LOOKUP_SLICE( tmp_slice_source_25, Py_None, tmp_slice_upper_25 );
    Py_DECREF( tmp_slice_upper_25 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2657;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_52;
        Py_XDECREF( old );
    }

    tmp_slice_source_26 = var_r2;

    if ( tmp_slice_source_26 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 2658;
        goto try_except_handler_8;
    }

    tmp_len_arg_33 = var_suffix;

    tmp_operand_name_32 = BUILTIN_LEN( tmp_len_arg_33 );
    if ( tmp_operand_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2658;
        goto try_except_handler_8;
    }
    tmp_slice_upper_26 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_32 );
    Py_DECREF( tmp_operand_name_32 );
    if ( tmp_slice_upper_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2658;
        goto try_except_handler_8;
    }
    tmp_assign_source_53 = LOOKUP_SLICE( tmp_slice_source_26, Py_None, tmp_slice_upper_26 );
    Py_DECREF( tmp_slice_upper_26 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2658;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_53;
        Py_XDECREF( old );
    }

    tmp_slice_source_27 = var_rv;

    if ( tmp_slice_source_27 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2659;
        goto try_except_handler_8;
    }

    tmp_len_arg_34 = var_suffix;

    tmp_operand_name_33 = BUILTIN_LEN( tmp_len_arg_34 );
    if ( tmp_operand_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2659;
        goto try_except_handler_8;
    }
    tmp_slice_upper_27 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_33 );
    Py_DECREF( tmp_operand_name_33 );
    if ( tmp_slice_upper_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2659;
        goto try_except_handler_8;
    }
    tmp_assign_source_54 = LOOKUP_SLICE( tmp_slice_source_27, Py_None, tmp_slice_upper_27 );
    Py_DECREF( tmp_slice_upper_27 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2659;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_54;
        Py_XDECREF( old );
    }

    tmp_assign_source_55 = Py_True;
    {
        PyObject *old = var_verb_removed;
        assert( old != NULL );
        var_verb_removed = tmp_assign_source_55;
        Py_INCREF( var_verb_removed );
        Py_DECREF( old );
    }

    goto loop_end_5;
    branch_end_14:;
    branch_no_13:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2643;
        goto try_except_handler_8;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    branch_no_12:;
    tmp_operand_name_34 = var_adjectival_removed;

    tmp_and_left_value_1 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_34 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2663;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2663;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_operand_name_35 = var_verb_removed;

    if ( tmp_operand_name_35 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "verb_removed" );
        exception_tb = NULL;

        exception_lineno = 2663;
        goto frame_exception_exit_1;
    }

    tmp_and_right_value_1 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_35 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2663;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_11 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_11 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2663;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_11 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_source_name_6 = par_self;

    tmp_iter_arg_7 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__RussianStemmer__noun_suffixes );
    if ( tmp_iter_arg_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2664;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_56 = MAKE_ITERATOR( tmp_iter_arg_7 );
    Py_DECREF( tmp_iter_arg_7 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2664;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_6__for_iterator == NULL );
    tmp_for_loop_6__for_iterator = tmp_assign_source_56;

    // Tried code:
    loop_start_6:;
    tmp_next_source_6 = tmp_for_loop_6__for_iterator;

    tmp_assign_source_57 = ITERATOR_NEXT( tmp_next_source_6 );
    if ( tmp_assign_source_57 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_6;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2664;
            goto try_except_handler_9;
        }
    }

    {
        PyObject *old = tmp_for_loop_6__iter_value;
        tmp_for_loop_6__iter_value = tmp_assign_source_57;
        Py_XDECREF( old );
    }

    tmp_assign_source_58 = tmp_for_loop_6__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_58;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_7 = var_rv;

    if ( tmp_called_instance_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2665;
        goto try_except_handler_9;
    }

    tmp_args_element_name_7 = var_suffix;

    frame_function->f_lineno = 2665;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_cond_value_12 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2665;
        goto try_except_handler_9;
    }
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_12 );

        exception_lineno = 2665;
        goto try_except_handler_9;
    }
    Py_DECREF( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_slice_source_28 = par_word;

    if ( tmp_slice_source_28 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2666;
        goto try_except_handler_9;
    }

    tmp_len_arg_35 = var_suffix;

    tmp_operand_name_36 = BUILTIN_LEN( tmp_len_arg_35 );
    if ( tmp_operand_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2666;
        goto try_except_handler_9;
    }
    tmp_slice_upper_28 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_36 );
    Py_DECREF( tmp_operand_name_36 );
    if ( tmp_slice_upper_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2666;
        goto try_except_handler_9;
    }
    tmp_assign_source_59 = LOOKUP_SLICE( tmp_slice_source_28, Py_None, tmp_slice_upper_28 );
    Py_DECREF( tmp_slice_upper_28 );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2666;
        goto try_except_handler_9;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_59;
        Py_XDECREF( old );
    }

    tmp_slice_source_29 = var_r2;

    if ( tmp_slice_source_29 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 2667;
        goto try_except_handler_9;
    }

    tmp_len_arg_36 = var_suffix;

    tmp_operand_name_37 = BUILTIN_LEN( tmp_len_arg_36 );
    if ( tmp_operand_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2667;
        goto try_except_handler_9;
    }
    tmp_slice_upper_29 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_37 );
    Py_DECREF( tmp_operand_name_37 );
    if ( tmp_slice_upper_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2667;
        goto try_except_handler_9;
    }
    tmp_assign_source_60 = LOOKUP_SLICE( tmp_slice_source_29, Py_None, tmp_slice_upper_29 );
    Py_DECREF( tmp_slice_upper_29 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2667;
        goto try_except_handler_9;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_60;
        Py_XDECREF( old );
    }

    tmp_slice_source_30 = var_rv;

    if ( tmp_slice_source_30 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2668;
        goto try_except_handler_9;
    }

    tmp_len_arg_37 = var_suffix;

    tmp_operand_name_38 = BUILTIN_LEN( tmp_len_arg_37 );
    if ( tmp_operand_name_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2668;
        goto try_except_handler_9;
    }
    tmp_slice_upper_30 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_38 );
    Py_DECREF( tmp_operand_name_38 );
    if ( tmp_slice_upper_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2668;
        goto try_except_handler_9;
    }
    tmp_assign_source_61 = LOOKUP_SLICE( tmp_slice_source_30, Py_None, tmp_slice_upper_30 );
    Py_DECREF( tmp_slice_upper_30 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2668;
        goto try_except_handler_9;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_61;
        Py_XDECREF( old );
    }

    goto loop_end_6;
    branch_no_17:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2664;
        goto try_except_handler_9;
    }
    goto loop_start_6;
    loop_end_6:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    branch_no_16:;
    branch_no_7:;
    tmp_called_instance_8 = var_rv;

    if ( tmp_called_instance_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2672;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 2672;
    tmp_cond_value_13 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_str_plain_i_tuple, 0 ) );

    if ( tmp_cond_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2672;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_13 );

        exception_lineno = 2672;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = -1;
    tmp_slice_source_31 = par_word;

    if ( tmp_slice_source_31 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2673;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_62 = LOOKUP_INDEX_SLICE( tmp_slice_source_31, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2673;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_62;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = -1;
    tmp_slice_source_32 = var_r2;

    if ( tmp_slice_source_32 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 2674;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_63 = LOOKUP_INDEX_SLICE( tmp_slice_source_32, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2674;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_63;
        Py_XDECREF( old );
    }

    branch_no_18:;
    tmp_source_name_7 = par_self;

    tmp_iter_arg_8 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__RussianStemmer__derivational_suffixes );
    if ( tmp_iter_arg_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2677;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_64 = MAKE_ITERATOR( tmp_iter_arg_8 );
    Py_DECREF( tmp_iter_arg_8 );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2677;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_7__for_iterator == NULL );
    tmp_for_loop_7__for_iterator = tmp_assign_source_64;

    // Tried code:
    loop_start_7:;
    tmp_next_source_7 = tmp_for_loop_7__for_iterator;

    tmp_assign_source_65 = ITERATOR_NEXT( tmp_next_source_7 );
    if ( tmp_assign_source_65 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_7;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2677;
            goto try_except_handler_10;
        }
    }

    {
        PyObject *old = tmp_for_loop_7__iter_value;
        tmp_for_loop_7__iter_value = tmp_assign_source_65;
        Py_XDECREF( old );
    }

    tmp_assign_source_66 = tmp_for_loop_7__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_66;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_9 = var_r2;

    if ( tmp_called_instance_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 2678;
        goto try_except_handler_10;
    }

    tmp_args_element_name_8 = var_suffix;

    frame_function->f_lineno = 2678;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_cond_value_14 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2678;
        goto try_except_handler_10;
    }
    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_14 );

        exception_lineno = 2678;
        goto try_except_handler_10;
    }
    Py_DECREF( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_slice_source_33 = par_word;

    if ( tmp_slice_source_33 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2679;
        goto try_except_handler_10;
    }

    tmp_len_arg_38 = var_suffix;

    tmp_operand_name_39 = BUILTIN_LEN( tmp_len_arg_38 );
    if ( tmp_operand_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2679;
        goto try_except_handler_10;
    }
    tmp_slice_upper_31 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_39 );
    Py_DECREF( tmp_operand_name_39 );
    if ( tmp_slice_upper_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2679;
        goto try_except_handler_10;
    }
    tmp_assign_source_67 = LOOKUP_SLICE( tmp_slice_source_33, Py_None, tmp_slice_upper_31 );
    Py_DECREF( tmp_slice_upper_31 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2679;
        goto try_except_handler_10;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_67;
        Py_XDECREF( old );
    }

    goto loop_end_7;
    branch_no_19:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2677;
        goto try_except_handler_10;
    }
    goto loop_start_7;
    loop_end_7:;
    goto try_end_9;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    Py_XDECREF( tmp_for_loop_7__iter_value );
    tmp_for_loop_7__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_7__for_iterator );
    Py_DECREF( tmp_for_loop_7__for_iterator );
    tmp_for_loop_7__for_iterator = NULL;

    tmp_called_instance_10 = par_word;

    if ( tmp_called_instance_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2683;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 2683;
    tmp_cond_value_15 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_str_plain_nn_tuple, 0 ) );

    if ( tmp_cond_value_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2683;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_15 );

        exception_lineno = 2683;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -1;
    tmp_slice_source_34 = par_word;

    if ( tmp_slice_source_34 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2684;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_68 = LOOKUP_INDEX_SLICE( tmp_slice_source_34, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2684;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_68;
        Py_XDECREF( old );
    }

    tmp_assign_source_69 = Py_True;
    {
        PyObject *old = var_undouble_success;
        assert( old != NULL );
        var_undouble_success = tmp_assign_source_69;
        Py_INCREF( var_undouble_success );
        Py_DECREF( old );
    }

    branch_no_20:;
    tmp_cond_value_16 = var_undouble_success;

    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2687;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_16 == 1 )
    {
        goto branch_no_21;
    }
    else
    {
        goto branch_yes_21;
    }
    branch_yes_21:;
    tmp_source_name_8 = par_self;

    tmp_iter_arg_9 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__RussianStemmer__superlative_suffixes );
    if ( tmp_iter_arg_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2688;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_70 = MAKE_ITERATOR( tmp_iter_arg_9 );
    Py_DECREF( tmp_iter_arg_9 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2688;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_8__for_iterator == NULL );
    tmp_for_loop_8__for_iterator = tmp_assign_source_70;

    // Tried code:
    loop_start_8:;
    tmp_next_source_8 = tmp_for_loop_8__for_iterator;

    tmp_assign_source_71 = ITERATOR_NEXT( tmp_next_source_8 );
    if ( tmp_assign_source_71 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_8;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2688;
            goto try_except_handler_11;
        }
    }

    {
        PyObject *old = tmp_for_loop_8__iter_value;
        tmp_for_loop_8__iter_value = tmp_assign_source_71;
        Py_XDECREF( old );
    }

    tmp_assign_source_72 = tmp_for_loop_8__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_72;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_11 = par_word;

    if ( tmp_called_instance_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2689;
        goto try_except_handler_11;
    }

    tmp_args_element_name_9 = var_suffix;

    frame_function->f_lineno = 2689;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_cond_value_17 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2689;
        goto try_except_handler_11;
    }
    tmp_cond_truth_17 = CHECK_IF_TRUE( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_17 );

        exception_lineno = 2689;
        goto try_except_handler_11;
    }
    Py_DECREF( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_slice_source_35 = par_word;

    if ( tmp_slice_source_35 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2690;
        goto try_except_handler_11;
    }

    tmp_len_arg_39 = var_suffix;

    tmp_operand_name_40 = BUILTIN_LEN( tmp_len_arg_39 );
    if ( tmp_operand_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2690;
        goto try_except_handler_11;
    }
    tmp_slice_upper_32 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_40 );
    Py_DECREF( tmp_operand_name_40 );
    if ( tmp_slice_upper_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2690;
        goto try_except_handler_11;
    }
    tmp_assign_source_73 = LOOKUP_SLICE( tmp_slice_source_35, Py_None, tmp_slice_upper_32 );
    Py_DECREF( tmp_slice_upper_32 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2690;
        goto try_except_handler_11;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_73;
        Py_XDECREF( old );
    }

    tmp_assign_source_74 = Py_True;
    {
        PyObject *old = var_superlative_removed;
        assert( old != NULL );
        var_superlative_removed = tmp_assign_source_74;
        Py_INCREF( var_superlative_removed );
        Py_DECREF( old );
    }

    goto loop_end_8;
    branch_no_22:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2688;
        goto try_except_handler_11;
    }
    goto loop_start_8;
    loop_end_8:;
    goto try_end_10;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_8__iter_value );
    tmp_for_loop_8__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_8__for_iterator );
    Py_DECREF( tmp_for_loop_8__for_iterator );
    tmp_for_loop_8__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    Py_XDECREF( tmp_for_loop_8__iter_value );
    tmp_for_loop_8__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_8__for_iterator );
    Py_DECREF( tmp_for_loop_8__for_iterator );
    tmp_for_loop_8__for_iterator = NULL;

    tmp_called_instance_12 = par_word;

    if ( tmp_called_instance_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2693;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 2693;
    tmp_cond_value_18 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_12, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_str_plain_nn_tuple, 0 ) );

    if ( tmp_cond_value_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2693;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_18 = CHECK_IF_TRUE( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_18 );

        exception_lineno = 2693;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == 1 )
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = -1;
    tmp_slice_source_36 = par_word;

    if ( tmp_slice_source_36 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2694;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_75 = LOOKUP_INDEX_SLICE( tmp_slice_source_36, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_assign_source_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2694;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_75;
        Py_XDECREF( old );
    }

    branch_no_23:;
    branch_no_21:;
    tmp_operand_name_41 = var_undouble_success;

    tmp_and_left_value_2 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_41 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2696;
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    if ( tmp_and_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2696;
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_operand_name_42 = var_superlative_removed;

    if ( tmp_operand_name_42 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "superlative_removed" );
        exception_tb = NULL;

        exception_lineno = 2696;
        goto frame_exception_exit_1;
    }

    tmp_and_right_value_2 = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_42 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2696;
        goto frame_exception_exit_1;
    }
    tmp_cond_value_19 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_cond_value_19 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_19 = CHECK_IF_TRUE( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2696;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_19 == 1 )
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_called_instance_13 = par_word;

    if ( tmp_called_instance_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2697;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 2697;
    tmp_cond_value_20 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_13, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_str_chr_39_tuple, 0 ) );

    if ( tmp_cond_value_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2697;
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_20 = CHECK_IF_TRUE( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_20 );

        exception_lineno = 2697;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == 1 )
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = -1;
    tmp_slice_source_37 = par_word;

    if ( tmp_slice_source_37 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2698;
        goto frame_exception_exit_1;
    }

    tmp_assign_source_76 = LOOKUP_INDEX_SLICE( tmp_slice_source_37, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_assign_source_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2698;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_76;
        Py_XDECREF( old );
    }

    branch_no_25:;
    branch_no_24:;
    tmp_cond_value_21 = var_chr_exceeded;

    tmp_cond_truth_21 = CHECK_IF_TRUE( tmp_cond_value_21 );
    if ( tmp_cond_truth_21 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2700;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_21 == 1 )
    {
        goto branch_yes_26;
    }
    else
    {
        goto branch_no_26;
    }
    branch_yes_26:;
    tmp_source_name_9 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__RussianStemmer__roman_to_cyrillic );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2701;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_10 = par_word;

    if ( tmp_args_element_name_10 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2701;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 2701;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_assign_source_77 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_assign_source_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2701;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_77;
        Py_XDECREF( old );
    }

    branch_no_26:;
    tmp_return_value = par_word;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2704;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_chr_exceeded )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_chr_exceeded,
                    var_chr_exceeded
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }

            if ( var_step1_success )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_step1_success,
                    var_step1_success
                );

                assert( res == 0 );
            }

            if ( var_adjectival_removed )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_adjectival_removed,
                    var_adjectival_removed
                );

                assert( res == 0 );
            }

            if ( var_verb_removed )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_verb_removed,
                    var_verb_removed
                );

                assert( res == 0 );
            }

            if ( var_undouble_success )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_undouble_success,
                    var_undouble_success
                );

                assert( res == 0 );
            }

            if ( var_superlative_removed )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_superlative_removed,
                    var_superlative_removed
                );

                assert( res == 0 );
            }

            if ( var_rv )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_rv,
                    var_rv
                );

                assert( res == 0 );
            }

            if ( var_r2 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r2,
                    var_r2
                );

                assert( res == 0 );
            }

            if ( var_suffix )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_suffix,
                    var_suffix
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_14_RussianStemmer$$$function_1_stem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_chr_exceeded );
    var_chr_exceeded = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_step1_success );
    var_step1_success = NULL;

    Py_XDECREF( var_adjectival_removed );
    var_adjectival_removed = NULL;

    Py_XDECREF( var_verb_removed );
    var_verb_removed = NULL;

    Py_XDECREF( var_undouble_success );
    var_undouble_success = NULL;

    Py_XDECREF( var_superlative_removed );
    var_superlative_removed = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_chr_exceeded );
    var_chr_exceeded = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_step1_success );
    var_step1_success = NULL;

    Py_XDECREF( var_adjectival_removed );
    var_adjectival_removed = NULL;

    Py_XDECREF( var_verb_removed );
    var_verb_removed = NULL;

    Py_XDECREF( var_undouble_success );
    var_undouble_success = NULL;

    Py_XDECREF( var_superlative_removed );
    var_superlative_removed = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_14_RussianStemmer$$$function_1_stem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_2___regions_russian( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_r1 = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_rv = NULL;
    PyObject *var_i = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_lower_2;
    PyObject *tmp_slice_lower_3;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_xrange_high_1;
    PyObject *tmp_xrange_high_2;
    PyObject *tmp_xrange_low_1;
    PyObject *tmp_xrange_low_2;
    PyObject *tmp_xrange_low_3;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_unicode_empty;
    assert( var_r1 == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_r1 = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_empty;
    assert( var_r2 == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var_r2 = tmp_assign_source_2;

    tmp_assign_source_3 = const_unicode_empty;
    assert( var_rv == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var_rv = tmp_assign_source_3;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_0e81928e7aeb07816c6a2f33bb9fc9d3, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_instance_3 = par_word;

    frame_function->f_lineno = 2735;
    tmp_called_instance_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_02ebd4f0f06223894f5b9eef8c76b64c_tuple, 0 ) );

    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2735;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2735;
    tmp_called_instance_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_7e838b0b675132306448d0bcce1e1d9e_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2735;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2735;
    tmp_assign_source_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_b805d9073ad1d8a2b37827c66df08183_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2735;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_4;
        Py_DECREF( old );
    }

    tmp_xrange_low_1 = const_int_pos_1;
    tmp_len_arg_1 = par_word;

    tmp_xrange_high_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_xrange_high_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2739;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_1 = BUILTIN_XRANGE2( tmp_xrange_low_1, tmp_xrange_high_1 );
    Py_DECREF( tmp_xrange_high_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2739;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2739;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_5;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_6 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2739;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    tmp_assign_source_7 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_7;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_1 = par_word;

    tmp_subscript_name_1 = var_i;

    tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2740;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_1 = const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple;
    tmp_and_left_value_1 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2740;
        goto try_except_handler_2;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    assert( !(tmp_and_left_truth_1 == -1) );
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_subscribed_name_2 = par_word;

    tmp_left_name_1 = var_i;

    tmp_right_name_1 = const_int_pos_1;
    tmp_subscript_name_2 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_subscript_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2740;
        goto try_except_handler_2;
    }
    tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    Py_DECREF( tmp_subscript_name_2 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2740;
        goto try_except_handler_2;
    }
    tmp_compexpr_right_2 = const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple;
    tmp_and_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2740;
        goto try_except_handler_2;
    }
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    assert( !(tmp_cond_truth_1 == -1) );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_slice_source_1 = par_word;

    tmp_left_name_2 = var_i;

    tmp_right_name_2 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2741;
        goto try_except_handler_2;
    }
    tmp_assign_source_8 = LOOKUP_SLICE( tmp_slice_source_1, tmp_slice_lower_1, Py_None );
    Py_DECREF( tmp_slice_lower_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2741;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_8;
        Py_DECREF( old );
    }

    goto loop_end_1;
    branch_no_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2739;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_xrange_low_2 = const_int_pos_1;
    tmp_len_arg_2 = var_r1;

    tmp_xrange_high_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_xrange_high_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2744;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_2 = BUILTIN_XRANGE2( tmp_xrange_low_2, tmp_xrange_high_2 );
    Py_DECREF( tmp_xrange_high_2 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2744;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_9 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2744;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_9;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_10 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2744;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_10;
        Py_XDECREF( old );
    }

    tmp_assign_source_11 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_11;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_3 = var_r1;

    tmp_subscript_name_3 = var_i;

    tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2745;
        goto try_except_handler_3;
    }
    tmp_compexpr_right_3 = const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple;
    tmp_and_left_value_2 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2745;
        goto try_except_handler_3;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    assert( !(tmp_and_left_truth_2 == -1) );
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_subscribed_name_4 = var_r1;

    tmp_left_name_3 = var_i;

    tmp_right_name_3 = const_int_pos_1;
    tmp_subscript_name_4 = BINARY_OPERATION_SUB( tmp_left_name_3, tmp_right_name_3 );
    if ( tmp_subscript_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2745;
        goto try_except_handler_3;
    }
    tmp_compexpr_left_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    Py_DECREF( tmp_subscript_name_4 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2745;
        goto try_except_handler_3;
    }
    tmp_compexpr_right_4 = const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple;
    tmp_and_right_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2745;
        goto try_except_handler_3;
    }
    tmp_cond_value_2 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_cond_value_2 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    assert( !(tmp_cond_truth_2 == -1) );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_slice_source_2 = var_r1;

    tmp_left_name_4 = var_i;

    tmp_right_name_4 = const_int_pos_1;
    tmp_slice_lower_2 = BINARY_OPERATION_ADD( tmp_left_name_4, tmp_right_name_4 );
    if ( tmp_slice_lower_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2746;
        goto try_except_handler_3;
    }
    tmp_assign_source_12 = LOOKUP_SLICE( tmp_slice_source_2, tmp_slice_lower_2, Py_None );
    Py_DECREF( tmp_slice_lower_2 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2746;
        goto try_except_handler_3;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_12;
        Py_DECREF( old );
    }

    goto loop_end_2;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2744;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_len_arg_3 = par_word;

    tmp_xrange_low_3 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_xrange_low_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2749;
        goto frame_exception_exit_1;
    }
    tmp_iter_arg_3 = BUILTIN_XRANGE1( tmp_xrange_low_3 );
    Py_DECREF( tmp_xrange_low_3 );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2749;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_13 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2749;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_13;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_14 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_14 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2749;
            goto try_except_handler_4;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_14;
        Py_XDECREF( old );
    }

    tmp_assign_source_15 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_i;
        var_i = tmp_assign_source_15;
        Py_INCREF( var_i );
        Py_XDECREF( old );
    }

    tmp_subscribed_name_5 = par_word;

    tmp_subscript_name_5 = var_i;

    tmp_compare_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2750;
        goto try_except_handler_4;
    }
    tmp_compare_right_1 = const_tuple_b94addbdc1f3bb5b1837e33d6224e488_tuple;
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_slice_source_3 = par_word;

    tmp_left_name_5 = var_i;

    tmp_right_name_5 = const_int_pos_1;
    tmp_slice_lower_3 = BINARY_OPERATION_ADD( tmp_left_name_5, tmp_right_name_5 );
    if ( tmp_slice_lower_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2751;
        goto try_except_handler_4;
    }
    tmp_assign_source_16 = LOOKUP_SLICE( tmp_slice_source_3, tmp_slice_lower_3, Py_None );
    Py_DECREF( tmp_slice_lower_3 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2751;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_16;
        Py_DECREF( old );
    }

    goto loop_end_3;
    branch_no_3:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2749;
        goto try_except_handler_4;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_called_instance_6 = var_r2;

    frame_function->f_lineno = 2754;
    tmp_called_instance_5 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_6, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_db0e7b73bc82184a512d41e2dc27d746_tuple, 0 ) );

    if ( tmp_called_instance_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2754;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2754;
    tmp_called_instance_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_546d6552b3521163be5f081fa48ff42c_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_5 );
    if ( tmp_called_instance_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2754;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2754;
    tmp_assign_source_17 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_c91f679374c05c952ac066e817ce23bb_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_4 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2754;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_17;
        Py_DECREF( old );
    }

    tmp_called_instance_9 = var_rv;

    frame_function->f_lineno = 2757;
    tmp_called_instance_8 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_9, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_db0e7b73bc82184a512d41e2dc27d746_tuple, 0 ) );

    if ( tmp_called_instance_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2757;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2757;
    tmp_called_instance_7 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_8, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_546d6552b3521163be5f081fa48ff42c_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_8 );
    if ( tmp_called_instance_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2757;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2757;
    tmp_assign_source_18 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_7, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_c91f679374c05c952ac066e817ce23bb_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_7 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2757;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_18;
        Py_DECREF( old );
    }


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_r2 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r2,
                    var_r2
                );

                assert( res == 0 );
            }

            if ( var_rv )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_rv,
                    var_rv
                );

                assert( res == 0 );
            }

            if ( var_i )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_i,
                    var_i
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = PyTuple_New( 2 );
    tmp_tuple_element_1 = var_rv;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_r2;

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_14_RussianStemmer$$$function_2___regions_russian );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    CHECK_OBJECT( (PyObject *)var_r1 );
    Py_DECREF( var_r1 );
    var_r1 = NULL;

    CHECK_OBJECT( (PyObject *)var_r2 );
    Py_DECREF( var_r2 );
    var_r2 = NULL;

    CHECK_OBJECT( (PyObject *)var_rv );
    Py_DECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_14_RussianStemmer$$$function_2___regions_russian );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_3___cyrillic_to_roman( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_instance_12;
    PyObject *tmp_called_instance_13;
    PyObject *tmp_called_instance_14;
    PyObject *tmp_called_instance_15;
    PyObject *tmp_called_instance_16;
    PyObject *tmp_called_instance_17;
    PyObject *tmp_called_instance_18;
    PyObject *tmp_called_instance_19;
    PyObject *tmp_called_instance_20;
    PyObject *tmp_called_instance_21;
    PyObject *tmp_called_instance_22;
    PyObject *tmp_called_instance_23;
    PyObject *tmp_called_instance_24;
    PyObject *tmp_called_instance_25;
    PyObject *tmp_called_instance_26;
    PyObject *tmp_called_instance_27;
    PyObject *tmp_called_instance_28;
    PyObject *tmp_called_instance_29;
    PyObject *tmp_called_instance_30;
    PyObject *tmp_called_instance_31;
    PyObject *tmp_called_instance_32;
    PyObject *tmp_called_instance_33;
    PyObject *tmp_called_instance_34;
    PyObject *tmp_called_instance_35;
    PyObject *tmp_called_instance_36;
    PyObject *tmp_called_instance_37;
    PyObject *tmp_called_instance_38;
    PyObject *tmp_called_instance_39;
    PyObject *tmp_called_instance_40;
    PyObject *tmp_called_instance_41;
    PyObject *tmp_called_instance_42;
    PyObject *tmp_called_instance_43;
    PyObject *tmp_called_instance_44;
    PyObject *tmp_called_instance_45;
    PyObject *tmp_called_instance_46;
    PyObject *tmp_called_instance_47;
    PyObject *tmp_called_instance_48;
    PyObject *tmp_called_instance_49;
    PyObject *tmp_called_instance_50;
    PyObject *tmp_called_instance_51;
    PyObject *tmp_called_instance_52;
    PyObject *tmp_called_instance_53;
    PyObject *tmp_called_instance_54;
    PyObject *tmp_called_instance_55;
    PyObject *tmp_called_instance_56;
    PyObject *tmp_called_instance_57;
    PyObject *tmp_called_instance_58;
    PyObject *tmp_called_instance_59;
    PyObject *tmp_called_instance_60;
    PyObject *tmp_called_instance_61;
    PyObject *tmp_called_instance_62;
    PyObject *tmp_called_instance_63;
    PyObject *tmp_called_instance_64;
    PyObject *tmp_called_instance_65;
    PyObject *tmp_called_instance_66;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_c7fb3173e9bd546d002cfa28c8a4468c, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_instance_66 = par_word;

    frame_function->f_lineno = 2782;
    tmp_called_instance_65 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_66, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_f9cb4ff683cf07968ae8d155d1b96271_tuple, 0 ) );

    if ( tmp_called_instance_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_64 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_65, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_e4a2b6178dc0988dedc3e67c3c0bb944_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_65 );
    if ( tmp_called_instance_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_63 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_64, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_8cc965b5bf73320d8782cd161d56cb64_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_64 );
    if ( tmp_called_instance_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_62 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_63, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_e4ead1c0f352d0adb324f18db20cdc82_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_63 );
    if ( tmp_called_instance_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_61 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_62, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_e45fcfb5ae2858f99ff073e0f05deccb_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_62 );
    if ( tmp_called_instance_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_60 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_61, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_be984219f2a6953e0abfc723cf12fc82_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_61 );
    if ( tmp_called_instance_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_59 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_60, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_e6d3ea5d4f340370863c7e2a11288cab_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_60 );
    if ( tmp_called_instance_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_58 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_59, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_5ac6184bb29ef34436ac6fd7caeea57d_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_59 );
    if ( tmp_called_instance_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_57 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_58, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_3240bbfe0aed66c65b85a290788af24a_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_58 );
    if ( tmp_called_instance_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_56 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_57, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_c7db4b0079ad3df0cf65655e34767d18_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_57 );
    if ( tmp_called_instance_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_55 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_56, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_33d056d1a7b7183e31308cd4f61243bb_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_56 );
    if ( tmp_called_instance_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_54 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_55, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_160f3b20f9ad8ebb28cc691487a684a1_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_55 );
    if ( tmp_called_instance_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_53 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_54, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_b8ad20ed5996d87d3c3c79dd34fe76be_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_54 );
    if ( tmp_called_instance_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_52 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_53, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_f905ea8aed2128045948b1711df084de_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_53 );
    if ( tmp_called_instance_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_51 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_52, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_88d314ab5ad7450947332961e7d6321e_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_52 );
    if ( tmp_called_instance_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_50 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_51, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_dd133fbb3fa8b8ae72b8c8e4f63aa8d1_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_51 );
    if ( tmp_called_instance_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_49 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_50, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_c7fff8f64e1a348ef3c18d88e5495bce_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_50 );
    if ( tmp_called_instance_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_48 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_49, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_0575198efcc749dda95e1cee1bb814d1_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_49 );
    if ( tmp_called_instance_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_47 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_48, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_a02cc15d798cbb5cd6c292e1b050fa68_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_48 );
    if ( tmp_called_instance_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_46 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_47, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_e8aad01d4693334cb34df20b3f260563_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_47 );
    if ( tmp_called_instance_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_45 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_46, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_78940e8a91fb5b986e3e798d0050db75_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_46 );
    if ( tmp_called_instance_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_44 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_45, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_0afea4878374468609999fa017a0ee81_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_45 );
    if ( tmp_called_instance_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_43 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_44, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_6b3e9d7d85648178d3c04c6f21e43d0d_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_44 );
    if ( tmp_called_instance_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_42 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_43, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_ecbcc231e2a3f1a302573e90d9a9eec8_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_43 );
    if ( tmp_called_instance_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_41 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_42, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_10e4de01aad20d678087669dddcf6313_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_42 );
    if ( tmp_called_instance_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_40 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_41, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_84a1aa2866c339e3e02dfed8263c6c26_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_41 );
    if ( tmp_called_instance_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_39 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_40, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_8ec0d9a1d9cf86f808e22f6e483cb49a_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_40 );
    if ( tmp_called_instance_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_38 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_39, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_7c3f8809c19f91da7ee612f4f48c8357_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_39 );
    if ( tmp_called_instance_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_37 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_38, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_3bf1a19e4006ee5b3fe56e3ef11f4cd2_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_38 );
    if ( tmp_called_instance_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_36 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_37, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_8ffcc2f3a509c5f2adf3ce0677e97f16_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_37 );
    if ( tmp_called_instance_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_35 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_36, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_99e62a547a74aba922bb773545af840d_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_36 );
    if ( tmp_called_instance_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_34 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_35, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_a660101c8de48f0e71b192fa160ba29f_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_35 );
    if ( tmp_called_instance_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_33 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_34, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_bb54ed81b8031ebb4abb8754ce70dbaf_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_34 );
    if ( tmp_called_instance_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_32 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_33, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_c789034d7278fd1af36a082e0ca2e00d_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_33 );
    if ( tmp_called_instance_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_31 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_32, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_a4eb71c9a63ca533f5e948ad9ea356d1_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_32 );
    if ( tmp_called_instance_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_30 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_31, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_a609368ea8d61aa400a42520a41e4921_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_31 );
    if ( tmp_called_instance_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_29 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_30, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_74398d8d991a606c997a40bef640d5e3_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_30 );
    if ( tmp_called_instance_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_28 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_29, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_f70df800f719f9906537973c60e42b5c_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_29 );
    if ( tmp_called_instance_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_27 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_28, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_af35dc52706f6375dc3872b21259f02c_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_28 );
    if ( tmp_called_instance_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_26 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_27, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_6d37e7b6a6ae7a3e19ade00ac9b563e8_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_27 );
    if ( tmp_called_instance_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_25 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_26, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_a444720439c08ed85804bf03a3ba9154_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_26 );
    if ( tmp_called_instance_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_24 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_25, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_1868edefb949b0d730a3408476f6d119_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_25 );
    if ( tmp_called_instance_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_23 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_24, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_b1b3f739aa671e601b1d8cedaace3566_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_24 );
    if ( tmp_called_instance_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_22 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_23, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_d20eb7083b055f1e3bb3d0d3fe80de07_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_23 );
    if ( tmp_called_instance_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_21 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_22, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_47c15f4b53b78c0b369cee3694bd7dda_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_22 );
    if ( tmp_called_instance_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_20 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_21, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_8f02c732f2934489cace301e08adbe3f_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_21 );
    if ( tmp_called_instance_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_19 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_20, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_6e4e1a4ee8a90c1492f5d415d26faee3_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_20 );
    if ( tmp_called_instance_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_18 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_19, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_99d8f76ba257f5f1c6aa6c5cddac83df_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_19 );
    if ( tmp_called_instance_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_17 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_18, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_9d60038e96c518aa7b726c75071cf2e0_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_18 );
    if ( tmp_called_instance_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_16 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_17, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_25686e15499762bcf0699ac1d9fa2920_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_17 );
    if ( tmp_called_instance_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_15 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_16, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_50e44c3d4eda2e5d2e5961d782d8fd0b_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_16 );
    if ( tmp_called_instance_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_14 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_15, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_77f671eb92d9e5b84e89d4de32ca1791_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_15 );
    if ( tmp_called_instance_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_13 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_14, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_e6a6b25a6f2f3505d9f21b160250b8f7_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_14 );
    if ( tmp_called_instance_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_12 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_13, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_a5adf8286787c0820a5abe7f474bb9b0_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_13 );
    if ( tmp_called_instance_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_11 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_12, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_85d73053cefb5c5e13e442a4d52e324b_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_12 );
    if ( tmp_called_instance_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_10 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_11, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_51997d27c66f220f3eab87efda1a277f_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_11 );
    if ( tmp_called_instance_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_9 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_10, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_eb0e9336027c8b1dc1fe8296977c0a7d_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_10 );
    if ( tmp_called_instance_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_8 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_9, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_7b93e7ba12b6e9eb5774d9fb6261550a_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_9 );
    if ( tmp_called_instance_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_7 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_8, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_2cc978adf415f49d0e73ca86beffe7bd_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_8 );
    if ( tmp_called_instance_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_6 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_7, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_91c51dd9fc301c0955e5315e6469c7e1_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_7 );
    if ( tmp_called_instance_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_5 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_6, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_6c8d5372f67b01d07556f5bd0e1d2cbf_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_6 );
    if ( tmp_called_instance_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_b77ab985c2bf34760b2abc78cae789df_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_5 );
    if ( tmp_called_instance_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_b3ce605d0c06c1c8ad0f5879320a1b91_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_4 );
    if ( tmp_called_instance_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_34a0ae3c2a0fd59cc66eb2ec229e03f1_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_3 );
    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_called_instance_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_ec2707c9429d69fbd8cc75cfffeb8493_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2782;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_2901820b7f658cad81e39efab3a56684_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2782;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_1;
        Py_DECREF( old );
    }


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_14_RussianStemmer$$$function_3___cyrillic_to_roman );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_14_RussianStemmer$$$function_3___cyrillic_to_roman );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_4___roman_to_cyrillic( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_instance_12;
    PyObject *tmp_called_instance_13;
    PyObject *tmp_called_instance_14;
    PyObject *tmp_called_instance_15;
    PyObject *tmp_called_instance_16;
    PyObject *tmp_called_instance_17;
    PyObject *tmp_called_instance_18;
    PyObject *tmp_called_instance_19;
    PyObject *tmp_called_instance_20;
    PyObject *tmp_called_instance_21;
    PyObject *tmp_called_instance_22;
    PyObject *tmp_called_instance_23;
    PyObject *tmp_called_instance_24;
    PyObject *tmp_called_instance_25;
    PyObject *tmp_called_instance_26;
    PyObject *tmp_called_instance_27;
    PyObject *tmp_called_instance_28;
    PyObject *tmp_called_instance_29;
    PyObject *tmp_called_instance_30;
    PyObject *tmp_called_instance_31;
    PyObject *tmp_called_instance_32;
    PyObject *tmp_called_instance_33;
    PyObject *tmp_frame_locals;
    PyObject *tmp_return_value;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_4e74bcc9a19b69bc9cadf240f2165ca1, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_called_instance_33 = par_word;

    frame_function->f_lineno = 2837;
    tmp_called_instance_32 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_33, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_a41dd2420b3ae149f1666e62fcba434d_tuple, 0 ) );

    if ( tmp_called_instance_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_31 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_32, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_c8b0ddde77da258cac1124f6b76a7449_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_32 );
    if ( tmp_called_instance_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_30 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_31, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_589e49ae696cce436a88167757c933ec_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_31 );
    if ( tmp_called_instance_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_29 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_30, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_bd8616f9487ba4c42dff80340f26ed9f_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_30 );
    if ( tmp_called_instance_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_28 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_29, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_ec79e0c9060ccc1ce0f76f8f3ef19338_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_29 );
    if ( tmp_called_instance_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_27 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_28, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_32696cb57069936efe3e669be2a205d8_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_28 );
    if ( tmp_called_instance_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_26 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_27, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_b426ffd81fbdd9cc4c4f98795874329c_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_27 );
    if ( tmp_called_instance_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_25 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_26, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_8080a60c5794aeda7756249d3900f6c9_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_26 );
    if ( tmp_called_instance_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_24 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_25, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_8e1bbc732e03c0e80a4a7029d959f013_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_25 );
    if ( tmp_called_instance_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_23 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_24, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_2bffbad65294b3b0c0243910f8264539_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_24 );
    if ( tmp_called_instance_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_22 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_23, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_78cf67f7af49e763286d58581ebf2847_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_23 );
    if ( tmp_called_instance_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_21 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_22, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_706e42975b2d521bea0c9b1cf76e71b1_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_22 );
    if ( tmp_called_instance_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_20 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_21, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_4fcaecdeef3fd40a2c85a2ee5fa562c9_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_21 );
    if ( tmp_called_instance_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_19 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_20, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_2fb5854997cab90a4d05ff60aa40c954_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_20 );
    if ( tmp_called_instance_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_18 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_19, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_b02b073265ed77383de1c095c4694220_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_19 );
    if ( tmp_called_instance_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_17 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_18, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_36ad135685f7e7dbaac0aff64f3f5315_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_18 );
    if ( tmp_called_instance_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_16 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_17, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_730978f03211e3bbdd5bec24058bb6c7_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_17 );
    if ( tmp_called_instance_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_15 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_16, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_78cf67f7af49e763286d58581ebf2847_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_16 );
    if ( tmp_called_instance_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_14 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_15, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_2b1549b64f8ac42e80a45692dd5adeae_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_15 );
    if ( tmp_called_instance_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_13 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_14, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_5ef37cf62d4b1b7803a0fd96573db4b6_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_14 );
    if ( tmp_called_instance_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_12 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_13, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_f11cb483adc2f66ad177f31d8d53f3ea_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_13 );
    if ( tmp_called_instance_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_11 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_12, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_e0b9b30507db9495c0b29b9620ba5238_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_12 );
    if ( tmp_called_instance_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_10 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_11, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_2cfc31b0cb7404929bdf899a5e519f78_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_11 );
    if ( tmp_called_instance_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_9 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_10, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_a233b622ffc791bc6c21ecf19aad8eed_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_10 );
    if ( tmp_called_instance_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_8 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_9, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_1e56be17625de98c40e42533ea3c3431_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_9 );
    if ( tmp_called_instance_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_7 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_8, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_65f125ed4f286331649efeaaa6fca05f_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_8 );
    if ( tmp_called_instance_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_6 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_7, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_62b0a6e40bd18f99e49b8d10b307b29b_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_7 );
    if ( tmp_called_instance_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_5 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_6, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_9b5feff1ee70654ffe342974cb86fce9_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_6 );
    if ( tmp_called_instance_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_0f5e8bfba6ac77c9b30b565f0f40fbe9_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_5 );
    if ( tmp_called_instance_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_b96c0dbe5027a79804a581f967622434_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_4 );
    if ( tmp_called_instance_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_7b67d509afa9aa514095723bb027880d_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_3 );
    if ( tmp_called_instance_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_called_instance_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_3b7d4e44f32e024571c694878f45a271_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_2 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2837;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_bd83cadbf93eff15b5b969c939dc876e_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2837;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_1;
        Py_DECREF( old );
    }


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_14_RussianStemmer$$$function_4___roman_to_cyrillic );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_14_RussianStemmer$$$function_4___roman_to_cyrillic );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_15_SpanishStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__SpanishStemmer__vowels = NULL;
    PyObject *var__SpanishStemmer__step0_suffixes = NULL;
    PyObject *var__SpanishStemmer__step1_suffixes = NULL;
    PyObject *var__SpanishStemmer__step2a_suffixes = NULL;
    PyObject *var__SpanishStemmer__step2b_suffixes = NULL;
    PyObject *var__SpanishStemmer__step3_suffixes = NULL;
    PyObject *var_stem = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_e0316f5240157982f6f73bf8990e84e2;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_unicode_digest_b37c2c14d2bcb2e0e6af94881a75579f;
    assert( var__SpanishStemmer__vowels == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var__SpanishStemmer__vowels = tmp_assign_source_3;

    tmp_assign_source_4 = const_tuple_278dd68eb95b34c5f6faa93314ffd030_tuple;
    assert( var__SpanishStemmer__step0_suffixes == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var__SpanishStemmer__step0_suffixes = tmp_assign_source_4;

    tmp_assign_source_5 = const_tuple_a19ef6e59d188e1b2c55a365e53b7e61_tuple;
    assert( var__SpanishStemmer__step1_suffixes == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__SpanishStemmer__step1_suffixes = tmp_assign_source_5;

    tmp_assign_source_6 = const_tuple_5632f189044678f18ed25f289d6373d4_tuple;
    assert( var__SpanishStemmer__step2a_suffixes == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var__SpanishStemmer__step2a_suffixes = tmp_assign_source_6;

    tmp_assign_source_7 = const_tuple_601f59e1b476e7f4d6bf50a646a84ab1_tuple;
    assert( var__SpanishStemmer__step2b_suffixes == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var__SpanishStemmer__step2b_suffixes = tmp_assign_source_7;

    tmp_assign_source_8 = const_tuple_91ee3847503a56a732a8cba289d0b7e8_tuple;
    assert( var__SpanishStemmer__step3_suffixes == NULL );
    Py_INCREF( tmp_assign_source_8 );
    var__SpanishStemmer__step3_suffixes = tmp_assign_source_8;

    tmp_assign_source_9 = MAKE_FUNCTION_nltk$stem$snowball$$$class_15_SpanishStemmer$$$function_1_stem(  );
    assert( var_stem == NULL );
    var_stem = tmp_assign_source_9;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__SpanishStemmer__vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__SpanishStemmer__vowels,
            var__SpanishStemmer__vowels
        );

        assert( res == 0 );
    }

    if ( var__SpanishStemmer__step0_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__SpanishStemmer__step0_suffixes,
            var__SpanishStemmer__step0_suffixes
        );

        assert( res == 0 );
    }

    if ( var__SpanishStemmer__step1_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__SpanishStemmer__step1_suffixes,
            var__SpanishStemmer__step1_suffixes
        );

        assert( res == 0 );
    }

    if ( var__SpanishStemmer__step2a_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__SpanishStemmer__step2a_suffixes,
            var__SpanishStemmer__step2a_suffixes
        );

        assert( res == 0 );
    }

    if ( var__SpanishStemmer__step2b_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__SpanishStemmer__step2b_suffixes,
            var__SpanishStemmer__step2b_suffixes
        );

        assert( res == 0 );
    }

    if ( var__SpanishStemmer__step3_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__SpanishStemmer__step3_suffixes,
            var__SpanishStemmer__step3_suffixes
        );

        assert( res == 0 );
    }

    if ( var_stem )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_stem,
            var_stem
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_15_SpanishStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__SpanishStemmer__vowels );
    Py_DECREF( var__SpanishStemmer__vowels );
    var__SpanishStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__SpanishStemmer__step0_suffixes );
    Py_DECREF( var__SpanishStemmer__step0_suffixes );
    var__SpanishStemmer__step0_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__SpanishStemmer__step1_suffixes );
    Py_DECREF( var__SpanishStemmer__step1_suffixes );
    var__SpanishStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__SpanishStemmer__step2a_suffixes );
    Py_DECREF( var__SpanishStemmer__step2a_suffixes );
    var__SpanishStemmer__step2a_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__SpanishStemmer__step2b_suffixes );
    Py_DECREF( var__SpanishStemmer__step2b_suffixes );
    var__SpanishStemmer__step2b_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__SpanishStemmer__step3_suffixes );
    Py_DECREF( var__SpanishStemmer__step3_suffixes );
    var__SpanishStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__SpanishStemmer__vowels );
    Py_DECREF( var__SpanishStemmer__vowels );
    var__SpanishStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__SpanishStemmer__step0_suffixes );
    Py_DECREF( var__SpanishStemmer__step0_suffixes );
    var__SpanishStemmer__step0_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__SpanishStemmer__step1_suffixes );
    Py_DECREF( var__SpanishStemmer__step1_suffixes );
    var__SpanishStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__SpanishStemmer__step2a_suffixes );
    Py_DECREF( var__SpanishStemmer__step2a_suffixes );
    var__SpanishStemmer__step2a_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__SpanishStemmer__step2b_suffixes );
    Py_DECREF( var__SpanishStemmer__step2b_suffixes );
    var__SpanishStemmer__step2b_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__SpanishStemmer__step3_suffixes );
    Py_DECREF( var__SpanishStemmer__step3_suffixes );
    var__SpanishStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_15_SpanishStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_15_SpanishStemmer$$$function_1_stem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_step1_success = NULL;
    PyObject *var_r1 = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_rv = NULL;
    PyObject *var_suffix = NULL;
    PyObject *var_pre_suff = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    PyObject *tmp_for_loop_6__for_iterator = NULL;
    PyObject *tmp_for_loop_6__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    int tmp_and_left_truth_3;
    int tmp_and_left_truth_4;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_left_value_3;
    PyObject *tmp_and_left_value_4;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_and_right_value_3;
    PyObject *tmp_and_right_value_4;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_instance_12;
    PyObject *tmp_called_instance_13;
    PyObject *tmp_called_instance_14;
    PyObject *tmp_called_instance_15;
    PyObject *tmp_called_instance_16;
    PyObject *tmp_called_instance_17;
    PyObject *tmp_called_instance_18;
    PyObject *tmp_called_instance_19;
    PyObject *tmp_called_instance_20;
    PyObject *tmp_called_instance_21;
    PyObject *tmp_called_instance_22;
    PyObject *tmp_called_instance_23;
    PyObject *tmp_called_instance_24;
    PyObject *tmp_called_instance_25;
    PyObject *tmp_called_instance_26;
    PyObject *tmp_called_instance_27;
    PyObject *tmp_called_instance_28;
    PyObject *tmp_called_instance_29;
    PyObject *tmp_called_instance_30;
    PyObject *tmp_called_instance_31;
    PyObject *tmp_called_instance_32;
    PyObject *tmp_called_instance_33;
    PyObject *tmp_called_instance_34;
    PyObject *tmp_called_instance_35;
    PyObject *tmp_called_instance_36;
    PyObject *tmp_called_instance_37;
    PyObject *tmp_called_instance_38;
    PyObject *tmp_called_instance_39;
    PyObject *tmp_called_instance_40;
    PyObject *tmp_called_instance_41;
    PyObject *tmp_called_instance_42;
    PyObject *tmp_called_instance_43;
    PyObject *tmp_called_instance_44;
    PyObject *tmp_called_instance_45;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cmp_Eq_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    int tmp_cond_truth_17;
    int tmp_cond_truth_18;
    int tmp_cond_truth_19;
    int tmp_cond_truth_20;
    int tmp_cond_truth_21;
    int tmp_cond_truth_22;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_cond_value_17;
    PyObject *tmp_cond_value_18;
    PyObject *tmp_cond_value_19;
    PyObject *tmp_cond_value_20;
    PyObject *tmp_cond_value_21;
    PyObject *tmp_cond_value_22;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iter_arg_5;
    PyObject *tmp_iter_arg_6;
    PyObject *tmp_iter_arg_7;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_len_arg_5;
    PyObject *tmp_len_arg_6;
    PyObject *tmp_len_arg_7;
    PyObject *tmp_len_arg_8;
    PyObject *tmp_len_arg_9;
    PyObject *tmp_len_arg_10;
    PyObject *tmp_len_arg_11;
    PyObject *tmp_len_arg_12;
    PyObject *tmp_len_arg_13;
    PyObject *tmp_len_arg_14;
    PyObject *tmp_len_arg_15;
    PyObject *tmp_len_arg_16;
    PyObject *tmp_len_arg_17;
    PyObject *tmp_len_arg_18;
    PyObject *tmp_len_arg_19;
    PyObject *tmp_len_arg_20;
    PyObject *tmp_len_arg_21;
    PyObject *tmp_len_arg_22;
    PyObject *tmp_len_arg_23;
    PyObject *tmp_len_arg_24;
    PyObject *tmp_len_arg_25;
    PyObject *tmp_len_arg_26;
    PyObject *tmp_len_arg_27;
    PyObject *tmp_len_arg_28;
    PyObject *tmp_len_arg_29;
    PyObject *tmp_len_arg_30;
    PyObject *tmp_len_arg_31;
    PyObject *tmp_len_arg_32;
    PyObject *tmp_len_arg_33;
    PyObject *tmp_len_arg_34;
    PyObject *tmp_len_arg_35;
    PyObject *tmp_len_arg_36;
    PyObject *tmp_len_arg_37;
    PyObject *tmp_len_arg_38;
    PyObject *tmp_len_arg_39;
    PyObject *tmp_len_arg_40;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_next_source_4;
    PyObject *tmp_next_source_5;
    PyObject *tmp_next_source_6;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    PyObject *tmp_operand_name_4;
    PyObject *tmp_operand_name_5;
    PyObject *tmp_operand_name_6;
    PyObject *tmp_operand_name_7;
    PyObject *tmp_operand_name_8;
    PyObject *tmp_operand_name_9;
    PyObject *tmp_operand_name_10;
    PyObject *tmp_operand_name_11;
    PyObject *tmp_operand_name_12;
    PyObject *tmp_operand_name_13;
    PyObject *tmp_operand_name_14;
    PyObject *tmp_operand_name_15;
    PyObject *tmp_operand_name_16;
    PyObject *tmp_operand_name_17;
    PyObject *tmp_operand_name_18;
    PyObject *tmp_operand_name_19;
    PyObject *tmp_operand_name_20;
    PyObject *tmp_operand_name_21;
    PyObject *tmp_operand_name_22;
    PyObject *tmp_operand_name_23;
    PyObject *tmp_operand_name_24;
    PyObject *tmp_operand_name_25;
    PyObject *tmp_operand_name_26;
    PyObject *tmp_operand_name_27;
    PyObject *tmp_operand_name_28;
    PyObject *tmp_operand_name_29;
    PyObject *tmp_operand_name_30;
    PyObject *tmp_operand_name_31;
    PyObject *tmp_operand_name_32;
    PyObject *tmp_operand_name_33;
    PyObject *tmp_operand_name_34;
    PyObject *tmp_operand_name_35;
    PyObject *tmp_operand_name_36;
    PyObject *tmp_operand_name_37;
    PyObject *tmp_operand_name_38;
    PyObject *tmp_operand_name_39;
    PyObject *tmp_operand_name_40;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    Py_ssize_t tmp_slice_index_upper_6;
    Py_ssize_t tmp_slice_index_upper_7;
    Py_ssize_t tmp_slice_index_upper_8;
    Py_ssize_t tmp_slice_index_upper_9;
    Py_ssize_t tmp_slice_index_upper_10;
    Py_ssize_t tmp_slice_index_upper_11;
    Py_ssize_t tmp_slice_index_upper_12;
    Py_ssize_t tmp_slice_index_upper_13;
    Py_ssize_t tmp_slice_index_upper_14;
    Py_ssize_t tmp_slice_index_upper_15;
    Py_ssize_t tmp_slice_index_upper_16;
    Py_ssize_t tmp_slice_index_upper_17;
    Py_ssize_t tmp_slice_index_upper_18;
    Py_ssize_t tmp_slice_index_upper_19;
    Py_ssize_t tmp_slice_index_upper_20;
    Py_ssize_t tmp_slice_index_upper_21;
    Py_ssize_t tmp_slice_index_upper_22;
    Py_ssize_t tmp_slice_index_upper_23;
    PyObject *tmp_slice_lower_1;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_source_10;
    PyObject *tmp_slice_source_11;
    PyObject *tmp_slice_source_12;
    PyObject *tmp_slice_source_13;
    PyObject *tmp_slice_source_14;
    PyObject *tmp_slice_source_15;
    PyObject *tmp_slice_source_16;
    PyObject *tmp_slice_source_17;
    PyObject *tmp_slice_source_18;
    PyObject *tmp_slice_source_19;
    PyObject *tmp_slice_source_20;
    PyObject *tmp_slice_source_21;
    PyObject *tmp_slice_source_22;
    PyObject *tmp_slice_source_23;
    PyObject *tmp_slice_source_24;
    PyObject *tmp_slice_source_25;
    PyObject *tmp_slice_source_26;
    PyObject *tmp_slice_source_27;
    PyObject *tmp_slice_source_28;
    PyObject *tmp_slice_source_29;
    PyObject *tmp_slice_source_30;
    PyObject *tmp_slice_source_31;
    PyObject *tmp_slice_source_32;
    PyObject *tmp_slice_source_33;
    PyObject *tmp_slice_source_34;
    PyObject *tmp_slice_source_35;
    PyObject *tmp_slice_source_36;
    PyObject *tmp_slice_source_37;
    PyObject *tmp_slice_source_38;
    PyObject *tmp_slice_source_39;
    PyObject *tmp_slice_source_40;
    PyObject *tmp_slice_source_41;
    PyObject *tmp_slice_source_42;
    PyObject *tmp_slice_source_43;
    PyObject *tmp_slice_source_44;
    PyObject *tmp_slice_source_45;
    PyObject *tmp_slice_source_46;
    PyObject *tmp_slice_source_47;
    PyObject *tmp_slice_source_48;
    PyObject *tmp_slice_source_49;
    PyObject *tmp_slice_source_50;
    PyObject *tmp_slice_source_51;
    PyObject *tmp_slice_source_52;
    PyObject *tmp_slice_source_53;
    PyObject *tmp_slice_source_54;
    PyObject *tmp_slice_source_55;
    PyObject *tmp_slice_source_56;
    PyObject *tmp_slice_source_57;
    PyObject *tmp_slice_source_58;
    PyObject *tmp_slice_source_59;
    PyObject *tmp_slice_source_60;
    PyObject *tmp_slice_source_61;
    PyObject *tmp_slice_source_62;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    PyObject *tmp_slice_upper_4;
    PyObject *tmp_slice_upper_5;
    PyObject *tmp_slice_upper_6;
    PyObject *tmp_slice_upper_7;
    PyObject *tmp_slice_upper_8;
    PyObject *tmp_slice_upper_9;
    PyObject *tmp_slice_upper_10;
    PyObject *tmp_slice_upper_11;
    PyObject *tmp_slice_upper_12;
    PyObject *tmp_slice_upper_13;
    PyObject *tmp_slice_upper_14;
    PyObject *tmp_slice_upper_15;
    PyObject *tmp_slice_upper_16;
    PyObject *tmp_slice_upper_17;
    PyObject *tmp_slice_upper_18;
    PyObject *tmp_slice_upper_19;
    PyObject *tmp_slice_upper_20;
    PyObject *tmp_slice_upper_21;
    PyObject *tmp_slice_upper_22;
    PyObject *tmp_slice_upper_23;
    PyObject *tmp_slice_upper_24;
    PyObject *tmp_slice_upper_25;
    PyObject *tmp_slice_upper_26;
    PyObject *tmp_slice_upper_27;
    PyObject *tmp_slice_upper_28;
    PyObject *tmp_slice_upper_29;
    PyObject *tmp_slice_upper_30;
    PyObject *tmp_slice_upper_31;
    PyObject *tmp_slice_upper_32;
    PyObject *tmp_slice_upper_33;
    PyObject *tmp_slice_upper_34;
    PyObject *tmp_slice_upper_35;
    PyObject *tmp_slice_upper_36;
    PyObject *tmp_slice_upper_37;
    PyObject *tmp_slice_upper_38;
    PyObject *tmp_slice_upper_39;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_6;
    Py_ssize_t tmp_sliceslicedel_index_lower_7;
    Py_ssize_t tmp_sliceslicedel_index_lower_8;
    Py_ssize_t tmp_sliceslicedel_index_lower_9;
    Py_ssize_t tmp_sliceslicedel_index_lower_10;
    Py_ssize_t tmp_sliceslicedel_index_lower_11;
    Py_ssize_t tmp_sliceslicedel_index_lower_12;
    Py_ssize_t tmp_sliceslicedel_index_lower_13;
    Py_ssize_t tmp_sliceslicedel_index_lower_14;
    Py_ssize_t tmp_sliceslicedel_index_lower_15;
    Py_ssize_t tmp_sliceslicedel_index_lower_16;
    Py_ssize_t tmp_sliceslicedel_index_lower_17;
    Py_ssize_t tmp_sliceslicedel_index_lower_18;
    Py_ssize_t tmp_sliceslicedel_index_lower_19;
    Py_ssize_t tmp_sliceslicedel_index_lower_20;
    Py_ssize_t tmp_sliceslicedel_index_lower_21;
    Py_ssize_t tmp_sliceslicedel_index_lower_22;
    Py_ssize_t tmp_sliceslicedel_index_lower_23;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_bf12e7d340de9a095d26f12b190c4152, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_word;

    tmp_source_name_1 = par_self;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stopwords );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2940;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_assign_source_1 = Py_False;
    assert( var_step1_success == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_step1_success = tmp_assign_source_1;

    tmp_called_instance_1 = par_word;

    frame_function->f_lineno = 2945;
    tmp_assign_source_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_lower );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2945;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_2;
        Py_DECREF( old );
    }

    // Tried code:
    tmp_source_name_2 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__r1r2_standard );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2947;
        goto try_except_handler_2;
    }
    tmp_args_element_name_1 = par_word;

    tmp_source_name_3 = par_self;

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__SpanishStemmer__vowels );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 2947;
        goto try_except_handler_2;
    }
    frame_function->f_lineno = 2947;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2947;
        goto try_except_handler_2;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2947;
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 2947;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        exception_lineno = 2947;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;

    assert( var_r1 == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var_r1 = tmp_assign_source_6;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;

    assert( var_r2 == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var_r2 = tmp_assign_source_7;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_4 = par_self;

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__rv_standard );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2948;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = par_word;

    tmp_source_name_5 = par_self;

    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__SpanishStemmer__vowels );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 2948;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 2948;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2948;
        goto frame_exception_exit_1;
    }
    assert( var_rv == NULL );
    var_rv = tmp_assign_source_8;

    tmp_source_name_6 = par_self;

    tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__SpanishStemmer__step0_suffixes );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2951;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_9 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2951;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_9;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_10 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_10 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2951;
            goto try_except_handler_4;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_10;
        Py_XDECREF( old );
    }

    tmp_assign_source_11 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_11;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_2 = par_word;

    tmp_args_element_name_5 = var_suffix;

    frame_function->f_lineno = 2952;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_cond_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2952;
        goto try_except_handler_4;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 2952;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_instance_3 = var_rv;

    tmp_args_element_name_6 = var_suffix;

    frame_function->f_lineno = 2953;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_cond_value_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2953;
        goto try_except_handler_4;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 2953;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_slice_source_1 = var_rv;

    tmp_len_arg_1 = var_suffix;

    tmp_operand_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2954;
        goto try_except_handler_4;
    }
    tmp_slice_upper_1 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_slice_upper_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2954;
        goto try_except_handler_4;
    }
    tmp_called_instance_4 = LOOKUP_SLICE( tmp_slice_source_1, Py_None, tmp_slice_upper_1 );
    Py_DECREF( tmp_slice_upper_1 );
    if ( tmp_called_instance_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2954;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2954;
    tmp_cond_value_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_tuple_30882c6f62be8cc245864da0c792bb7b_tuple_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_4 );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2954;
        goto try_except_handler_4;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 2954;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_slice_source_2 = par_word;

    tmp_len_arg_2 = var_suffix;

    tmp_operand_name_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2958;
        goto try_except_handler_4;
    }
    tmp_slice_upper_2 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_slice_upper_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2958;
        goto try_except_handler_4;
    }
    tmp_called_instance_7 = LOOKUP_SLICE( tmp_slice_source_2, Py_None, tmp_slice_upper_2 );
    Py_DECREF( tmp_slice_upper_2 );
    if ( tmp_called_instance_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2958;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2958;
    tmp_called_instance_6 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_7, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_5eff0911f36248c31970c9d9669b12e2_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_7 );
    if ( tmp_called_instance_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2958;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2958;
    tmp_called_instance_5 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_6, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_af47b87413332a5bef6ea1fc7af3c92e_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_6 );
    if ( tmp_called_instance_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2958;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2958;
    tmp_assign_source_12 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_dc8d33361ac7399a3d0f321f8e95c4b2_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_5 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2958;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_12;
        Py_DECREF( old );
    }

    tmp_slice_source_3 = var_r1;

    tmp_len_arg_3 = var_suffix;

    tmp_operand_name_3 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_operand_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2961;
        goto try_except_handler_4;
    }
    tmp_slice_upper_3 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_slice_upper_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2961;
        goto try_except_handler_4;
    }
    tmp_called_instance_10 = LOOKUP_SLICE( tmp_slice_source_3, Py_None, tmp_slice_upper_3 );
    Py_DECREF( tmp_slice_upper_3 );
    if ( tmp_called_instance_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2961;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2961;
    tmp_called_instance_9 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_10, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_5eff0911f36248c31970c9d9669b12e2_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_10 );
    if ( tmp_called_instance_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2961;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2961;
    tmp_called_instance_8 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_9, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_af47b87413332a5bef6ea1fc7af3c92e_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_9 );
    if ( tmp_called_instance_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2961;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2961;
    tmp_assign_source_13 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_8, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_dc8d33361ac7399a3d0f321f8e95c4b2_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_8 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2961;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_13;
        Py_DECREF( old );
    }

    tmp_slice_source_4 = var_r2;

    tmp_len_arg_4 = var_suffix;

    tmp_operand_name_4 = BUILTIN_LEN( tmp_len_arg_4 );
    if ( tmp_operand_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2964;
        goto try_except_handler_4;
    }
    tmp_slice_upper_4 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_4 );
    Py_DECREF( tmp_operand_name_4 );
    if ( tmp_slice_upper_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2964;
        goto try_except_handler_4;
    }
    tmp_called_instance_13 = LOOKUP_SLICE( tmp_slice_source_4, Py_None, tmp_slice_upper_4 );
    Py_DECREF( tmp_slice_upper_4 );
    if ( tmp_called_instance_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2964;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2964;
    tmp_called_instance_12 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_13, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_5eff0911f36248c31970c9d9669b12e2_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_13 );
    if ( tmp_called_instance_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2964;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2964;
    tmp_called_instance_11 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_12, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_af47b87413332a5bef6ea1fc7af3c92e_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_12 );
    if ( tmp_called_instance_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2964;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2964;
    tmp_assign_source_14 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_11, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_dc8d33361ac7399a3d0f321f8e95c4b2_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_11 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2964;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_14;
        Py_DECREF( old );
    }

    tmp_slice_source_5 = var_rv;

    tmp_len_arg_5 = var_suffix;

    tmp_operand_name_5 = BUILTIN_LEN( tmp_len_arg_5 );
    if ( tmp_operand_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2967;
        goto try_except_handler_4;
    }
    tmp_slice_upper_5 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_5 );
    Py_DECREF( tmp_operand_name_5 );
    if ( tmp_slice_upper_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2967;
        goto try_except_handler_4;
    }
    tmp_called_instance_16 = LOOKUP_SLICE( tmp_slice_source_5, Py_None, tmp_slice_upper_5 );
    Py_DECREF( tmp_slice_upper_5 );
    if ( tmp_called_instance_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2967;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2967;
    tmp_called_instance_15 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_16, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_5eff0911f36248c31970c9d9669b12e2_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_16 );
    if ( tmp_called_instance_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2967;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2967;
    tmp_called_instance_14 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_15, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_af47b87413332a5bef6ea1fc7af3c92e_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_15 );
    if ( tmp_called_instance_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2967;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2967;
    tmp_assign_source_15 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_14, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_dc8d33361ac7399a3d0f321f8e95c4b2_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_14 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2967;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_15;
        Py_DECREF( old );
    }

    goto branch_end_4;
    branch_no_4:;
    tmp_slice_source_6 = var_rv;

    tmp_len_arg_6 = var_suffix;

    tmp_operand_name_6 = BUILTIN_LEN( tmp_len_arg_6 );
    if ( tmp_operand_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2971;
        goto try_except_handler_4;
    }
    tmp_slice_upper_6 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_6 );
    Py_DECREF( tmp_operand_name_6 );
    if ( tmp_slice_upper_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2971;
        goto try_except_handler_4;
    }
    tmp_called_instance_17 = LOOKUP_SLICE( tmp_slice_source_6, Py_None, tmp_slice_upper_6 );
    Py_DECREF( tmp_slice_upper_6 );
    if ( tmp_called_instance_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2971;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2971;
    tmp_cond_value_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_17, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_tuple_d1153c9e51c48c0996c3271524d5509a_tuple_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_17 );
    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2971;
        goto try_except_handler_4;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        exception_lineno = 2971;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_slice_source_7 = par_word;

    tmp_len_arg_7 = var_suffix;

    tmp_operand_name_7 = BUILTIN_LEN( tmp_len_arg_7 );
    if ( tmp_operand_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2973;
        goto try_except_handler_4;
    }
    tmp_slice_upper_7 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_7 );
    Py_DECREF( tmp_operand_name_7 );
    if ( tmp_slice_upper_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2973;
        goto try_except_handler_4;
    }
    tmp_assign_source_16 = LOOKUP_SLICE( tmp_slice_source_7, Py_None, tmp_slice_upper_7 );
    Py_DECREF( tmp_slice_upper_7 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2973;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_16;
        Py_DECREF( old );
    }

    tmp_slice_source_8 = var_r1;

    tmp_len_arg_8 = var_suffix;

    tmp_operand_name_8 = BUILTIN_LEN( tmp_len_arg_8 );
    if ( tmp_operand_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2974;
        goto try_except_handler_4;
    }
    tmp_slice_upper_8 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_8 );
    Py_DECREF( tmp_operand_name_8 );
    if ( tmp_slice_upper_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2974;
        goto try_except_handler_4;
    }
    tmp_assign_source_17 = LOOKUP_SLICE( tmp_slice_source_8, Py_None, tmp_slice_upper_8 );
    Py_DECREF( tmp_slice_upper_8 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2974;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_17;
        Py_DECREF( old );
    }

    tmp_slice_source_9 = var_r2;

    tmp_len_arg_9 = var_suffix;

    tmp_operand_name_9 = BUILTIN_LEN( tmp_len_arg_9 );
    if ( tmp_operand_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2975;
        goto try_except_handler_4;
    }
    tmp_slice_upper_9 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_9 );
    Py_DECREF( tmp_operand_name_9 );
    if ( tmp_slice_upper_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2975;
        goto try_except_handler_4;
    }
    tmp_assign_source_18 = LOOKUP_SLICE( tmp_slice_source_9, Py_None, tmp_slice_upper_9 );
    Py_DECREF( tmp_slice_upper_9 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2975;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_18;
        Py_DECREF( old );
    }

    tmp_slice_source_10 = var_rv;

    tmp_len_arg_10 = var_suffix;

    tmp_operand_name_10 = BUILTIN_LEN( tmp_len_arg_10 );
    if ( tmp_operand_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2976;
        goto try_except_handler_4;
    }
    tmp_slice_upper_10 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_10 );
    Py_DECREF( tmp_operand_name_10 );
    if ( tmp_slice_upper_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2976;
        goto try_except_handler_4;
    }
    tmp_assign_source_19 = LOOKUP_SLICE( tmp_slice_source_10, Py_None, tmp_slice_upper_10 );
    Py_DECREF( tmp_slice_upper_10 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2976;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_19;
        Py_DECREF( old );
    }

    goto branch_end_5;
    branch_no_5:;
    tmp_slice_source_11 = var_rv;

    tmp_len_arg_11 = var_suffix;

    tmp_operand_name_11 = BUILTIN_LEN( tmp_len_arg_11 );
    if ( tmp_operand_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2978;
        goto try_except_handler_4;
    }
    tmp_slice_upper_11 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_11 );
    Py_DECREF( tmp_operand_name_11 );
    if ( tmp_slice_upper_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2978;
        goto try_except_handler_4;
    }
    tmp_called_instance_18 = LOOKUP_SLICE( tmp_slice_source_11, Py_None, tmp_slice_upper_11 );
    Py_DECREF( tmp_slice_upper_11 );
    if ( tmp_called_instance_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2978;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2978;
    tmp_and_left_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_18, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_yendo_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_18 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2978;
        goto try_except_handler_4;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 2979;
        goto try_except_handler_4;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_slice_source_12 = par_word;

    tmp_len_arg_12 = var_suffix;

    tmp_operand_name_12 = BUILTIN_LEN( tmp_len_arg_12 );
    if ( tmp_operand_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2979;
        goto try_except_handler_4;
    }
    tmp_slice_upper_12 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_12 );
    Py_DECREF( tmp_operand_name_12 );
    if ( tmp_slice_upper_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2979;
        goto try_except_handler_4;
    }
    tmp_called_instance_19 = LOOKUP_SLICE( tmp_slice_source_12, Py_None, tmp_slice_upper_12 );
    Py_DECREF( tmp_slice_upper_12 );
    if ( tmp_called_instance_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2979;
        goto try_except_handler_4;
    }
    frame_function->f_lineno = 2979;
    tmp_and_right_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_19, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_uyendo_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_19 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2979;
        goto try_except_handler_4;
    }
    tmp_cond_value_5 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_5 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        exception_lineno = 2979;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_slice_source_13 = par_word;

    tmp_len_arg_13 = var_suffix;

    tmp_operand_name_13 = BUILTIN_LEN( tmp_len_arg_13 );
    if ( tmp_operand_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2980;
        goto try_except_handler_4;
    }
    tmp_slice_upper_13 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_13 );
    Py_DECREF( tmp_operand_name_13 );
    if ( tmp_slice_upper_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2980;
        goto try_except_handler_4;
    }
    tmp_assign_source_20 = LOOKUP_SLICE( tmp_slice_source_13, Py_None, tmp_slice_upper_13 );
    Py_DECREF( tmp_slice_upper_13 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2980;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_20;
        Py_DECREF( old );
    }

    tmp_slice_source_14 = var_r1;

    tmp_len_arg_14 = var_suffix;

    tmp_operand_name_14 = BUILTIN_LEN( tmp_len_arg_14 );
    if ( tmp_operand_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2981;
        goto try_except_handler_4;
    }
    tmp_slice_upper_14 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_14 );
    Py_DECREF( tmp_operand_name_14 );
    if ( tmp_slice_upper_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2981;
        goto try_except_handler_4;
    }
    tmp_assign_source_21 = LOOKUP_SLICE( tmp_slice_source_14, Py_None, tmp_slice_upper_14 );
    Py_DECREF( tmp_slice_upper_14 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2981;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_21;
        Py_DECREF( old );
    }

    tmp_slice_source_15 = var_r2;

    tmp_len_arg_15 = var_suffix;

    tmp_operand_name_15 = BUILTIN_LEN( tmp_len_arg_15 );
    if ( tmp_operand_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2982;
        goto try_except_handler_4;
    }
    tmp_slice_upper_15 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_15 );
    Py_DECREF( tmp_operand_name_15 );
    if ( tmp_slice_upper_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2982;
        goto try_except_handler_4;
    }
    tmp_assign_source_22 = LOOKUP_SLICE( tmp_slice_source_15, Py_None, tmp_slice_upper_15 );
    Py_DECREF( tmp_slice_upper_15 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2982;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_22;
        Py_DECREF( old );
    }

    tmp_slice_source_16 = var_rv;

    tmp_len_arg_16 = var_suffix;

    tmp_operand_name_16 = BUILTIN_LEN( tmp_len_arg_16 );
    if ( tmp_operand_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2983;
        goto try_except_handler_4;
    }
    tmp_slice_upper_16 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_16 );
    Py_DECREF( tmp_operand_name_16 );
    if ( tmp_slice_upper_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2983;
        goto try_except_handler_4;
    }
    tmp_assign_source_23 = LOOKUP_SLICE( tmp_slice_source_16, Py_None, tmp_slice_upper_16 );
    Py_DECREF( tmp_slice_upper_16 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2983;
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_23;
        Py_DECREF( old );
    }

    branch_no_6:;
    branch_end_5:;
    branch_end_4:;
    branch_no_3:;
    goto loop_end_1;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2951;
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_source_name_7 = par_self;

    tmp_iter_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__SpanishStemmer__step1_suffixes );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2987;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_24 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2987;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_24;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_25 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_25 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 2987;
            goto try_except_handler_5;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_25;
        Py_XDECREF( old );
    }

    tmp_assign_source_26 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_26;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_20 = par_word;

    if ( tmp_called_instance_20 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2988;
        goto try_except_handler_5;
    }

    tmp_args_element_name_7 = var_suffix;

    frame_function->f_lineno = 2988;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_cond_value_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_20, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2988;
        goto try_except_handler_5;
    }
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_6 );

        exception_lineno = 2988;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_compexpr_left_1 = var_suffix;

    tmp_compexpr_right_1 = const_unicode_plain_amente;
    tmp_and_left_value_2 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_and_left_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2989;
        goto try_except_handler_5;
    }
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    if ( tmp_and_left_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_2 );

        exception_lineno = 2989;
        goto try_except_handler_5;
    }
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    Py_DECREF( tmp_and_left_value_2 );
    tmp_called_instance_21 = var_r1;

    if ( tmp_called_instance_21 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 2989;
        goto try_except_handler_5;
    }

    tmp_args_element_name_8 = var_suffix;

    frame_function->f_lineno = 2989;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_and_right_value_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_21, const_str_plain_endswith, call_args );
    }

    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2989;
        goto try_except_handler_5;
    }
    tmp_cond_value_7 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_cond_value_7 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_7 );

        exception_lineno = 2989;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_assign_source_27 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_27;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = -6;
    tmp_slice_source_17 = par_word;

    if ( tmp_slice_source_17 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 2991;
        goto try_except_handler_5;
    }

    tmp_assign_source_28 = LOOKUP_INDEX_SLICE( tmp_slice_source_17, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2991;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_28;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = -6;
    tmp_slice_source_18 = var_r2;

    if ( tmp_slice_source_18 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 2992;
        goto try_except_handler_5;
    }

    tmp_assign_source_29 = LOOKUP_INDEX_SLICE( tmp_slice_source_18, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2992;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_29;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -6;
    tmp_slice_source_19 = var_rv;

    if ( tmp_slice_source_19 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 2993;
        goto try_except_handler_5;
    }

    tmp_assign_source_30 = LOOKUP_INDEX_SLICE( tmp_slice_source_19, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2993;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_30;
        Py_XDECREF( old );
    }

    tmp_called_instance_22 = var_r2;

    frame_function->f_lineno = 2995;
    tmp_cond_value_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_22, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_iv_tuple, 0 ) );

    if ( tmp_cond_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2995;
        goto try_except_handler_5;
    }
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_8 );

        exception_lineno = 2995;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = -2;
    tmp_slice_source_20 = par_word;

    tmp_assign_source_31 = LOOKUP_INDEX_SLICE( tmp_slice_source_20, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2996;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_31;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = -2;
    tmp_slice_source_21 = var_r2;

    tmp_assign_source_32 = LOOKUP_INDEX_SLICE( tmp_slice_source_21, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2997;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        assert( old != NULL );
        var_r2 = tmp_assign_source_32;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_6 = 0;
    tmp_slice_index_upper_6 = -2;
    tmp_slice_source_22 = var_rv;

    tmp_assign_source_33 = LOOKUP_INDEX_SLICE( tmp_slice_source_22, tmp_sliceslicedel_index_lower_6, tmp_slice_index_upper_6 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2998;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_33;
        Py_DECREF( old );
    }

    tmp_called_instance_23 = var_r2;

    frame_function->f_lineno = 3000;
    tmp_cond_value_9 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_23, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_at_tuple, 0 ) );

    if ( tmp_cond_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3000;
        goto try_except_handler_5;
    }
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_9 );

        exception_lineno = 3000;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_sliceslicedel_index_lower_7 = 0;
    tmp_slice_index_upper_7 = -2;
    tmp_slice_source_23 = par_word;

    tmp_assign_source_34 = LOOKUP_INDEX_SLICE( tmp_slice_source_23, tmp_sliceslicedel_index_lower_7, tmp_slice_index_upper_7 );
    if ( tmp_assign_source_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3001;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_34;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_8 = 0;
    tmp_slice_index_upper_8 = -2;
    tmp_slice_source_24 = var_rv;

    tmp_assign_source_35 = LOOKUP_INDEX_SLICE( tmp_slice_source_24, tmp_sliceslicedel_index_lower_8, tmp_slice_index_upper_8 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3002;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_35;
        Py_DECREF( old );
    }

    branch_no_10:;
    goto branch_end_9;
    branch_no_9:;
    tmp_called_instance_24 = var_r2;

    frame_function->f_lineno = 3004;
    tmp_cond_value_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_24, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_e1df4d1ee61aeadd133357000470ee2a_tuple, 0 ) );

    if ( tmp_cond_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3004;
        goto try_except_handler_5;
    }
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_10 );

        exception_lineno = 3004;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_sliceslicedel_index_lower_9 = 0;
    tmp_slice_index_upper_9 = -2;
    tmp_slice_source_25 = par_word;

    tmp_assign_source_36 = LOOKUP_INDEX_SLICE( tmp_slice_source_25, tmp_sliceslicedel_index_lower_9, tmp_slice_index_upper_9 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3005;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_36;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_10 = 0;
    tmp_slice_index_upper_10 = -2;
    tmp_slice_source_26 = var_rv;

    tmp_assign_source_37 = LOOKUP_INDEX_SLICE( tmp_slice_source_26, tmp_sliceslicedel_index_lower_10, tmp_slice_index_upper_10 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3006;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_37;
        Py_DECREF( old );
    }

    branch_no_11:;
    branch_end_9:;
    goto branch_end_8;
    branch_no_8:;
    tmp_called_instance_25 = var_r2;

    if ( tmp_called_instance_25 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 3008;
        goto try_except_handler_5;
    }

    tmp_args_element_name_9 = var_suffix;

    frame_function->f_lineno = 3008;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_cond_value_11 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_25, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3008;
        goto try_except_handler_5;
    }
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_11 );

        exception_lineno = 3008;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_assign_source_38 = Py_True;
    {
        PyObject *old = var_step1_success;
        assert( old != NULL );
        var_step1_success = tmp_assign_source_38;
        Py_INCREF( var_step1_success );
        Py_DECREF( old );
    }

    tmp_compare_left_2 = var_suffix;

    tmp_compare_right_2 = const_tuple_273838185a55647a58438d7281766748_tuple;
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_slice_source_27 = par_word;

    if ( tmp_slice_source_27 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3013;
        goto try_except_handler_5;
    }

    tmp_len_arg_17 = var_suffix;

    tmp_operand_name_17 = BUILTIN_LEN( tmp_len_arg_17 );
    if ( tmp_operand_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3013;
        goto try_except_handler_5;
    }
    tmp_slice_upper_17 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_17 );
    Py_DECREF( tmp_operand_name_17 );
    if ( tmp_slice_upper_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3013;
        goto try_except_handler_5;
    }
    tmp_assign_source_39 = LOOKUP_SLICE( tmp_slice_source_27, Py_None, tmp_slice_upper_17 );
    Py_DECREF( tmp_slice_upper_17 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3013;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_39;
        Py_XDECREF( old );
    }

    tmp_slice_source_28 = var_r2;

    if ( tmp_slice_source_28 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 3014;
        goto try_except_handler_5;
    }

    tmp_len_arg_18 = var_suffix;

    tmp_operand_name_18 = BUILTIN_LEN( tmp_len_arg_18 );
    if ( tmp_operand_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3014;
        goto try_except_handler_5;
    }
    tmp_slice_upper_18 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_18 );
    Py_DECREF( tmp_operand_name_18 );
    if ( tmp_slice_upper_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3014;
        goto try_except_handler_5;
    }
    tmp_assign_source_40 = LOOKUP_SLICE( tmp_slice_source_28, Py_None, tmp_slice_upper_18 );
    Py_DECREF( tmp_slice_upper_18 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3014;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_40;
        Py_XDECREF( old );
    }

    tmp_slice_source_29 = var_rv;

    if ( tmp_slice_source_29 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3015;
        goto try_except_handler_5;
    }

    tmp_len_arg_19 = var_suffix;

    tmp_operand_name_19 = BUILTIN_LEN( tmp_len_arg_19 );
    if ( tmp_operand_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3015;
        goto try_except_handler_5;
    }
    tmp_slice_upper_19 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_19 );
    Py_DECREF( tmp_operand_name_19 );
    if ( tmp_slice_upper_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3015;
        goto try_except_handler_5;
    }
    tmp_assign_source_41 = LOOKUP_SLICE( tmp_slice_source_29, Py_None, tmp_slice_upper_19 );
    Py_DECREF( tmp_slice_upper_19 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3015;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_41;
        Py_XDECREF( old );
    }

    tmp_called_instance_26 = var_r2;

    frame_function->f_lineno = 3017;
    tmp_cond_value_12 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_26, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_ic_tuple, 0 ) );

    if ( tmp_cond_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3017;
        goto try_except_handler_5;
    }
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_12 );

        exception_lineno = 3017;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_sliceslicedel_index_lower_11 = 0;
    tmp_slice_index_upper_11 = -2;
    tmp_slice_source_30 = par_word;

    tmp_assign_source_42 = LOOKUP_INDEX_SLICE( tmp_slice_source_30, tmp_sliceslicedel_index_lower_11, tmp_slice_index_upper_11 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3018;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_42;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_12 = 0;
    tmp_slice_index_upper_12 = -2;
    tmp_slice_source_31 = var_rv;

    tmp_assign_source_43 = LOOKUP_INDEX_SLICE( tmp_slice_source_31, tmp_sliceslicedel_index_lower_12, tmp_slice_index_upper_12 );
    if ( tmp_assign_source_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3019;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_43;
        Py_DECREF( old );
    }

    branch_no_14:;
    goto branch_end_13;
    branch_no_13:;
    tmp_compare_left_3 = var_suffix;

    tmp_compare_right_3 = const_tuple_45f82c3622d28aff3edecb8d8a588741_tuple;
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_called_instance_27 = par_word;

    if ( tmp_called_instance_27 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3022;
        goto try_except_handler_5;
    }

    tmp_args_element_name_10 = var_suffix;

    tmp_args_element_name_11 = const_unicode_plain_log;
    frame_function->f_lineno = 3022;
    {
        PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11 };
        tmp_assign_source_44 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_27, const_str_plain_replace, call_args );
    }

    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3022;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_44;
        Py_XDECREF( old );
    }

    tmp_called_instance_28 = var_rv;

    if ( tmp_called_instance_28 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3023;
        goto try_except_handler_5;
    }

    tmp_args_element_name_12 = var_suffix;

    tmp_args_element_name_13 = const_unicode_plain_log;
    frame_function->f_lineno = 3023;
    {
        PyObject *call_args[] = { tmp_args_element_name_12, tmp_args_element_name_13 };
        tmp_assign_source_45 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_28, const_str_plain_replace, call_args );
    }

    if ( tmp_assign_source_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3023;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_45;
        Py_XDECREF( old );
    }

    goto branch_end_15;
    branch_no_15:;
    tmp_compare_left_4 = var_suffix;

    tmp_compare_right_4 = const_tuple_45f6ea7f15c39e03730b7dca9834b46a_tuple;
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_called_instance_29 = par_word;

    if ( tmp_called_instance_29 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3026;
        goto try_except_handler_5;
    }

    tmp_args_element_name_14 = var_suffix;

    tmp_args_element_name_15 = const_unicode_plain_u;
    frame_function->f_lineno = 3026;
    {
        PyObject *call_args[] = { tmp_args_element_name_14, tmp_args_element_name_15 };
        tmp_assign_source_46 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_29, const_str_plain_replace, call_args );
    }

    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3026;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_46;
        Py_XDECREF( old );
    }

    tmp_called_instance_30 = var_rv;

    if ( tmp_called_instance_30 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3027;
        goto try_except_handler_5;
    }

    tmp_args_element_name_16 = var_suffix;

    tmp_args_element_name_17 = const_unicode_plain_u;
    frame_function->f_lineno = 3027;
    {
        PyObject *call_args[] = { tmp_args_element_name_16, tmp_args_element_name_17 };
        tmp_assign_source_47 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_30, const_str_plain_replace, call_args );
    }

    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3027;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_47;
        Py_XDECREF( old );
    }

    goto branch_end_16;
    branch_no_16:;
    tmp_compare_left_5 = var_suffix;

    tmp_compare_right_5 = const_tuple_unicode_plain_encia_unicode_plain_encias_tuple;
    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_In_5 == -1) );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_called_instance_31 = par_word;

    if ( tmp_called_instance_31 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3030;
        goto try_except_handler_5;
    }

    tmp_args_element_name_18 = var_suffix;

    tmp_args_element_name_19 = const_unicode_plain_ente;
    frame_function->f_lineno = 3030;
    {
        PyObject *call_args[] = { tmp_args_element_name_18, tmp_args_element_name_19 };
        tmp_assign_source_48 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_31, const_str_plain_replace, call_args );
    }

    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3030;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_48;
        Py_XDECREF( old );
    }

    tmp_called_instance_32 = var_rv;

    if ( tmp_called_instance_32 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3031;
        goto try_except_handler_5;
    }

    tmp_args_element_name_20 = var_suffix;

    tmp_args_element_name_21 = const_unicode_plain_ente;
    frame_function->f_lineno = 3031;
    {
        PyObject *call_args[] = { tmp_args_element_name_20, tmp_args_element_name_21 };
        tmp_assign_source_49 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_32, const_str_plain_replace, call_args );
    }

    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3031;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_49;
        Py_XDECREF( old );
    }

    goto branch_end_17;
    branch_no_17:;
    tmp_compare_left_6 = var_suffix;

    tmp_compare_right_6 = const_unicode_plain_mente;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3033;
        goto try_except_handler_5;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_sliceslicedel_index_lower_13 = 0;
    tmp_slice_index_upper_13 = -5;
    tmp_slice_source_32 = par_word;

    if ( tmp_slice_source_32 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3034;
        goto try_except_handler_5;
    }

    tmp_assign_source_50 = LOOKUP_INDEX_SLICE( tmp_slice_source_32, tmp_sliceslicedel_index_lower_13, tmp_slice_index_upper_13 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3034;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_50;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_14 = 0;
    tmp_slice_index_upper_14 = -5;
    tmp_slice_source_33 = var_r2;

    if ( tmp_slice_source_33 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 3035;
        goto try_except_handler_5;
    }

    tmp_assign_source_51 = LOOKUP_INDEX_SLICE( tmp_slice_source_33, tmp_sliceslicedel_index_lower_14, tmp_slice_index_upper_14 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3035;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_51;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_15 = 0;
    tmp_slice_index_upper_15 = -5;
    tmp_slice_source_34 = var_rv;

    if ( tmp_slice_source_34 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3036;
        goto try_except_handler_5;
    }

    tmp_assign_source_52 = LOOKUP_INDEX_SLICE( tmp_slice_source_34, tmp_sliceslicedel_index_lower_15, tmp_slice_index_upper_15 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3036;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_52;
        Py_XDECREF( old );
    }

    tmp_called_instance_33 = var_r2;

    frame_function->f_lineno = 3038;
    tmp_cond_value_13 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_33, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_860ff0d7fde116990e75009b9e4efd2f_tuple, 0 ) );

    if ( tmp_cond_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3038;
        goto try_except_handler_5;
    }
    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_13 );

        exception_lineno = 3038;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_sliceslicedel_index_lower_16 = 0;
    tmp_slice_index_upper_16 = -4;
    tmp_slice_source_35 = par_word;

    tmp_assign_source_53 = LOOKUP_INDEX_SLICE( tmp_slice_source_35, tmp_sliceslicedel_index_lower_16, tmp_slice_index_upper_16 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3039;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_53;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_17 = 0;
    tmp_slice_index_upper_17 = -4;
    tmp_slice_source_36 = var_rv;

    tmp_assign_source_54 = LOOKUP_INDEX_SLICE( tmp_slice_source_36, tmp_sliceslicedel_index_lower_17, tmp_slice_index_upper_17 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3040;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_54;
        Py_DECREF( old );
    }

    branch_no_19:;
    goto branch_end_18;
    branch_no_18:;
    tmp_compare_left_7 = var_suffix;

    tmp_compare_right_7 = const_tuple_unicode_plain_idad_unicode_plain_idades_tuple;
    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    assert( !(tmp_cmp_In_6 == -1) );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_slice_source_37 = par_word;

    if ( tmp_slice_source_37 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3043;
        goto try_except_handler_5;
    }

    tmp_len_arg_20 = var_suffix;

    tmp_operand_name_20 = BUILTIN_LEN( tmp_len_arg_20 );
    if ( tmp_operand_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3043;
        goto try_except_handler_5;
    }
    tmp_slice_upper_20 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_20 );
    Py_DECREF( tmp_operand_name_20 );
    if ( tmp_slice_upper_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3043;
        goto try_except_handler_5;
    }
    tmp_assign_source_55 = LOOKUP_SLICE( tmp_slice_source_37, Py_None, tmp_slice_upper_20 );
    Py_DECREF( tmp_slice_upper_20 );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3043;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_55;
        Py_XDECREF( old );
    }

    tmp_slice_source_38 = var_r2;

    if ( tmp_slice_source_38 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 3044;
        goto try_except_handler_5;
    }

    tmp_len_arg_21 = var_suffix;

    tmp_operand_name_21 = BUILTIN_LEN( tmp_len_arg_21 );
    if ( tmp_operand_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3044;
        goto try_except_handler_5;
    }
    tmp_slice_upper_21 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_21 );
    Py_DECREF( tmp_operand_name_21 );
    if ( tmp_slice_upper_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3044;
        goto try_except_handler_5;
    }
    tmp_assign_source_56 = LOOKUP_SLICE( tmp_slice_source_38, Py_None, tmp_slice_upper_21 );
    Py_DECREF( tmp_slice_upper_21 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3044;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_56;
        Py_XDECREF( old );
    }

    tmp_slice_source_39 = var_rv;

    if ( tmp_slice_source_39 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3045;
        goto try_except_handler_5;
    }

    tmp_len_arg_22 = var_suffix;

    tmp_operand_name_22 = BUILTIN_LEN( tmp_len_arg_22 );
    if ( tmp_operand_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3045;
        goto try_except_handler_5;
    }
    tmp_slice_upper_22 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_22 );
    Py_DECREF( tmp_operand_name_22 );
    if ( tmp_slice_upper_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3045;
        goto try_except_handler_5;
    }
    tmp_assign_source_57 = LOOKUP_SLICE( tmp_slice_source_39, Py_None, tmp_slice_upper_22 );
    Py_DECREF( tmp_slice_upper_22 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3045;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_57;
        Py_XDECREF( old );
    }

    tmp_iter_arg_4 = const_tuple_unicode_plain_abil_unicode_plain_ic_unicode_plain_iv_tuple;
    tmp_assign_source_58 = MAKE_ITERATOR( tmp_iter_arg_4 );
    assert( tmp_assign_source_58 != NULL );
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_58;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_59 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_59 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 3047;
            goto try_except_handler_6;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_59;
        Py_XDECREF( old );
    }

    tmp_assign_source_60 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_pre_suff;
        var_pre_suff = tmp_assign_source_60;
        Py_INCREF( var_pre_suff );
        Py_XDECREF( old );
    }

    tmp_called_instance_34 = var_r2;

    tmp_args_element_name_22 = var_pre_suff;

    frame_function->f_lineno = 3048;
    {
        PyObject *call_args[] = { tmp_args_element_name_22 };
        tmp_cond_value_14 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_34, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3048;
        goto try_except_handler_6;
    }
    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_14 );

        exception_lineno = 3048;
        goto try_except_handler_6;
    }
    Py_DECREF( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_slice_source_40 = par_word;

    if ( tmp_slice_source_40 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3049;
        goto try_except_handler_6;
    }

    tmp_len_arg_23 = var_pre_suff;

    tmp_operand_name_23 = BUILTIN_LEN( tmp_len_arg_23 );
    if ( tmp_operand_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3049;
        goto try_except_handler_6;
    }
    tmp_slice_upper_23 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_23 );
    Py_DECREF( tmp_operand_name_23 );
    if ( tmp_slice_upper_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3049;
        goto try_except_handler_6;
    }
    tmp_assign_source_61 = LOOKUP_SLICE( tmp_slice_source_40, Py_None, tmp_slice_upper_23 );
    Py_DECREF( tmp_slice_upper_23 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3049;
        goto try_except_handler_6;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_61;
        Py_XDECREF( old );
    }

    tmp_slice_source_41 = var_rv;

    if ( tmp_slice_source_41 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3050;
        goto try_except_handler_6;
    }

    tmp_len_arg_24 = var_pre_suff;

    tmp_operand_name_24 = BUILTIN_LEN( tmp_len_arg_24 );
    if ( tmp_operand_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3050;
        goto try_except_handler_6;
    }
    tmp_slice_upper_24 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_24 );
    Py_DECREF( tmp_operand_name_24 );
    if ( tmp_slice_upper_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3050;
        goto try_except_handler_6;
    }
    tmp_assign_source_62 = LOOKUP_SLICE( tmp_slice_source_41, Py_None, tmp_slice_upper_24 );
    Py_DECREF( tmp_slice_upper_24 );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3050;
        goto try_except_handler_6;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_62;
        Py_XDECREF( old );
    }

    branch_no_21:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3047;
        goto try_except_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_5;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    goto branch_end_20;
    branch_no_20:;
    tmp_compare_left_8 = var_suffix;

    tmp_compare_right_8 = const_tuple_5dd3f522472d9cd25a2399d8badf9b77_tuple;
    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_7 == -1) );
    if ( tmp_cmp_In_7 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_slice_source_42 = par_word;

    if ( tmp_slice_source_42 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3053;
        goto try_except_handler_5;
    }

    tmp_len_arg_25 = var_suffix;

    tmp_operand_name_25 = BUILTIN_LEN( tmp_len_arg_25 );
    if ( tmp_operand_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3053;
        goto try_except_handler_5;
    }
    tmp_slice_upper_25 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_25 );
    Py_DECREF( tmp_operand_name_25 );
    if ( tmp_slice_upper_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3053;
        goto try_except_handler_5;
    }
    tmp_assign_source_63 = LOOKUP_SLICE( tmp_slice_source_42, Py_None, tmp_slice_upper_25 );
    Py_DECREF( tmp_slice_upper_25 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3053;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_63;
        Py_XDECREF( old );
    }

    tmp_slice_source_43 = var_r2;

    if ( tmp_slice_source_43 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r2" );
        exception_tb = NULL;

        exception_lineno = 3054;
        goto try_except_handler_5;
    }

    tmp_len_arg_26 = var_suffix;

    tmp_operand_name_26 = BUILTIN_LEN( tmp_len_arg_26 );
    if ( tmp_operand_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3054;
        goto try_except_handler_5;
    }
    tmp_slice_upper_26 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_26 );
    Py_DECREF( tmp_operand_name_26 );
    if ( tmp_slice_upper_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3054;
        goto try_except_handler_5;
    }
    tmp_assign_source_64 = LOOKUP_SLICE( tmp_slice_source_43, Py_None, tmp_slice_upper_26 );
    Py_DECREF( tmp_slice_upper_26 );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3054;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_r2;
        var_r2 = tmp_assign_source_64;
        Py_XDECREF( old );
    }

    tmp_slice_source_44 = var_rv;

    if ( tmp_slice_source_44 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3055;
        goto try_except_handler_5;
    }

    tmp_len_arg_27 = var_suffix;

    tmp_operand_name_27 = BUILTIN_LEN( tmp_len_arg_27 );
    if ( tmp_operand_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3055;
        goto try_except_handler_5;
    }
    tmp_slice_upper_27 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_27 );
    Py_DECREF( tmp_operand_name_27 );
    if ( tmp_slice_upper_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3055;
        goto try_except_handler_5;
    }
    tmp_assign_source_65 = LOOKUP_SLICE( tmp_slice_source_44, Py_None, tmp_slice_upper_27 );
    Py_DECREF( tmp_slice_upper_27 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3055;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_65;
        Py_XDECREF( old );
    }

    tmp_called_instance_35 = var_r2;

    frame_function->f_lineno = 3056;
    tmp_cond_value_15 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_35, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_at_tuple, 0 ) );

    if ( tmp_cond_value_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3056;
        goto try_except_handler_5;
    }
    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_15 );

        exception_lineno = 3056;
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == 1 )
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_sliceslicedel_index_lower_18 = 0;
    tmp_slice_index_upper_18 = -2;
    tmp_slice_source_45 = par_word;

    tmp_assign_source_66 = LOOKUP_INDEX_SLICE( tmp_slice_source_45, tmp_sliceslicedel_index_lower_18, tmp_slice_index_upper_18 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3057;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_66;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_19 = 0;
    tmp_slice_index_upper_19 = -2;
    tmp_slice_source_46 = var_rv;

    tmp_assign_source_67 = LOOKUP_INDEX_SLICE( tmp_slice_source_46, tmp_sliceslicedel_index_lower_19, tmp_slice_index_upper_19 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3058;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_67;
        Py_DECREF( old );
    }

    branch_no_23:;
    goto branch_end_22;
    branch_no_22:;
    tmp_slice_source_47 = par_word;

    if ( tmp_slice_source_47 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3060;
        goto try_except_handler_5;
    }

    tmp_len_arg_28 = var_suffix;

    tmp_operand_name_28 = BUILTIN_LEN( tmp_len_arg_28 );
    if ( tmp_operand_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3060;
        goto try_except_handler_5;
    }
    tmp_slice_upper_28 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_28 );
    Py_DECREF( tmp_operand_name_28 );
    if ( tmp_slice_upper_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3060;
        goto try_except_handler_5;
    }
    tmp_assign_source_68 = LOOKUP_SLICE( tmp_slice_source_47, Py_None, tmp_slice_upper_28 );
    Py_DECREF( tmp_slice_upper_28 );
    if ( tmp_assign_source_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3060;
        goto try_except_handler_5;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_68;
        Py_XDECREF( old );
    }

    tmp_slice_source_48 = var_rv;

    if ( tmp_slice_source_48 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3061;
        goto try_except_handler_5;
    }

    tmp_len_arg_29 = var_suffix;

    tmp_operand_name_29 = BUILTIN_LEN( tmp_len_arg_29 );
    if ( tmp_operand_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3061;
        goto try_except_handler_5;
    }
    tmp_slice_upper_29 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_29 );
    Py_DECREF( tmp_operand_name_29 );
    if ( tmp_slice_upper_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3061;
        goto try_except_handler_5;
    }
    tmp_assign_source_69 = LOOKUP_SLICE( tmp_slice_source_48, Py_None, tmp_slice_upper_29 );
    Py_DECREF( tmp_slice_upper_29 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3061;
        goto try_except_handler_5;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_69;
        Py_XDECREF( old );
    }

    branch_end_22:;
    branch_end_20:;
    branch_end_18:;
    branch_end_17:;
    branch_end_16:;
    branch_end_15:;
    branch_end_13:;
    branch_no_12:;
    branch_end_8:;
    goto loop_end_2;
    branch_no_7:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2987;
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_cond_value_16 = var_step1_success;

    if ( tmp_cond_value_16 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "step1_success" );
        exception_tb = NULL;

        exception_lineno = 3065;
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3065;
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_16 == 1 )
    {
        goto branch_no_24;
    }
    else
    {
        goto branch_yes_24;
    }
    branch_yes_24:;
    tmp_source_name_8 = par_self;

    tmp_iter_arg_5 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__SpanishStemmer__step2a_suffixes );
    if ( tmp_iter_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3066;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_70 = MAKE_ITERATOR( tmp_iter_arg_5 );
    Py_DECREF( tmp_iter_arg_5 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3066;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_4__for_iterator == NULL );
    tmp_for_loop_4__for_iterator = tmp_assign_source_70;

    // Tried code:
    loop_start_4:;
    tmp_next_source_4 = tmp_for_loop_4__for_iterator;

    tmp_assign_source_71 = ITERATOR_NEXT( tmp_next_source_4 );
    if ( tmp_assign_source_71 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_4;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 3066;
            goto try_except_handler_7;
        }
    }

    {
        PyObject *old = tmp_for_loop_4__iter_value;
        tmp_for_loop_4__iter_value = tmp_assign_source_71;
        Py_XDECREF( old );
    }

    tmp_assign_source_72 = tmp_for_loop_4__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_72;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_36 = var_rv;

    if ( tmp_called_instance_36 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3067;
        goto try_except_handler_7;
    }

    tmp_args_element_name_23 = var_suffix;

    frame_function->f_lineno = 3067;
    {
        PyObject *call_args[] = { tmp_args_element_name_23 };
        tmp_and_left_value_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_36, const_str_plain_endswith, call_args );
    }

    if ( tmp_and_left_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3067;
        goto try_except_handler_7;
    }
    tmp_and_left_truth_3 = CHECK_IF_TRUE( tmp_and_left_value_3 );
    if ( tmp_and_left_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_3 );

        exception_lineno = 3068;
        goto try_except_handler_7;
    }
    if ( tmp_and_left_truth_3 == 1 )
    {
        goto and_right_3;
    }
    else
    {
        goto and_left_3;
    }
    and_right_3:;
    Py_DECREF( tmp_and_left_value_3 );
    tmp_slice_source_49 = par_word;

    if ( tmp_slice_source_49 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3068;
        goto try_except_handler_7;
    }

    tmp_len_arg_30 = var_suffix;

    tmp_operand_name_30 = BUILTIN_LEN( tmp_len_arg_30 );
    if ( tmp_operand_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3068;
        goto try_except_handler_7;
    }
    tmp_left_name_1 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_30 );
    Py_DECREF( tmp_operand_name_30 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3068;
        goto try_except_handler_7;
    }
    tmp_right_name_1 = const_int_pos_1;
    tmp_slice_lower_1 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_slice_lower_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3068;
        goto try_except_handler_7;
    }
    tmp_len_arg_31 = var_suffix;

    tmp_operand_name_31 = BUILTIN_LEN( tmp_len_arg_31 );
    if ( tmp_operand_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_1 );

        exception_lineno = 3068;
        goto try_except_handler_7;
    }
    tmp_slice_upper_30 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_31 );
    Py_DECREF( tmp_operand_name_31 );
    if ( tmp_slice_upper_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_slice_lower_1 );

        exception_lineno = 3068;
        goto try_except_handler_7;
    }
    tmp_compexpr_left_2 = LOOKUP_SLICE( tmp_slice_source_49, tmp_slice_lower_1, tmp_slice_upper_30 );
    Py_DECREF( tmp_slice_lower_1 );
    Py_DECREF( tmp_slice_upper_30 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3068;
        goto try_except_handler_7;
    }
    tmp_compexpr_right_2 = const_unicode_plain_u;
    tmp_and_right_value_3 = RICH_COMPARE_EQ( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    if ( tmp_and_right_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3068;
        goto try_except_handler_7;
    }
    tmp_cond_value_17 = tmp_and_right_value_3;
    goto and_end_3;
    and_left_3:;
    tmp_cond_value_17 = tmp_and_left_value_3;
    and_end_3:;
    tmp_cond_truth_17 = CHECK_IF_TRUE( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_17 );

        exception_lineno = 3068;
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == 1 )
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    tmp_slice_source_50 = par_word;

    if ( tmp_slice_source_50 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3069;
        goto try_except_handler_7;
    }

    tmp_len_arg_32 = var_suffix;

    tmp_operand_name_32 = BUILTIN_LEN( tmp_len_arg_32 );
    if ( tmp_operand_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3069;
        goto try_except_handler_7;
    }
    tmp_slice_upper_31 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_32 );
    Py_DECREF( tmp_operand_name_32 );
    if ( tmp_slice_upper_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3069;
        goto try_except_handler_7;
    }
    tmp_assign_source_73 = LOOKUP_SLICE( tmp_slice_source_50, Py_None, tmp_slice_upper_31 );
    Py_DECREF( tmp_slice_upper_31 );
    if ( tmp_assign_source_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3069;
        goto try_except_handler_7;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_73;
        Py_XDECREF( old );
    }

    tmp_slice_source_51 = var_rv;

    if ( tmp_slice_source_51 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3070;
        goto try_except_handler_7;
    }

    tmp_len_arg_33 = var_suffix;

    tmp_operand_name_33 = BUILTIN_LEN( tmp_len_arg_33 );
    if ( tmp_operand_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3070;
        goto try_except_handler_7;
    }
    tmp_slice_upper_32 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_33 );
    Py_DECREF( tmp_operand_name_33 );
    if ( tmp_slice_upper_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3070;
        goto try_except_handler_7;
    }
    tmp_assign_source_74 = LOOKUP_SLICE( tmp_slice_source_51, Py_None, tmp_slice_upper_32 );
    Py_DECREF( tmp_slice_upper_32 );
    if ( tmp_assign_source_74 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3070;
        goto try_except_handler_7;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_74;
        Py_XDECREF( old );
    }

    goto loop_end_4;
    branch_no_25:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3066;
        goto try_except_handler_7;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_4__iter_value );
    tmp_for_loop_4__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
    Py_DECREF( tmp_for_loop_4__for_iterator );
    tmp_for_loop_4__for_iterator = NULL;

    tmp_source_name_9 = par_self;

    tmp_iter_arg_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__SpanishStemmer__step2b_suffixes );
    if ( tmp_iter_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3074;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_75 = MAKE_ITERATOR( tmp_iter_arg_6 );
    Py_DECREF( tmp_iter_arg_6 );
    if ( tmp_assign_source_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3074;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_5__for_iterator == NULL );
    tmp_for_loop_5__for_iterator = tmp_assign_source_75;

    // Tried code:
    loop_start_5:;
    tmp_next_source_5 = tmp_for_loop_5__for_iterator;

    tmp_assign_source_76 = ITERATOR_NEXT( tmp_next_source_5 );
    if ( tmp_assign_source_76 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_5;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 3074;
            goto try_except_handler_8;
        }
    }

    {
        PyObject *old = tmp_for_loop_5__iter_value;
        tmp_for_loop_5__iter_value = tmp_assign_source_76;
        Py_XDECREF( old );
    }

    tmp_assign_source_77 = tmp_for_loop_5__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_77;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_37 = var_rv;

    if ( tmp_called_instance_37 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3075;
        goto try_except_handler_8;
    }

    tmp_args_element_name_24 = var_suffix;

    frame_function->f_lineno = 3075;
    {
        PyObject *call_args[] = { tmp_args_element_name_24 };
        tmp_cond_value_18 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_37, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3075;
        goto try_except_handler_8;
    }
    tmp_cond_truth_18 = CHECK_IF_TRUE( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_18 );

        exception_lineno = 3075;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == 1 )
    {
        goto branch_yes_26;
    }
    else
    {
        goto branch_no_26;
    }
    branch_yes_26:;
    tmp_compare_left_9 = var_suffix;

    tmp_compare_right_9 = const_tuple_a1823a300173c705318d9829a719d4d6_tuple;
    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    assert( !(tmp_cmp_In_8 == -1) );
    if ( tmp_cmp_In_8 == 1 )
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_slice_source_52 = par_word;

    if ( tmp_slice_source_52 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3077;
        goto try_except_handler_8;
    }

    tmp_len_arg_34 = var_suffix;

    tmp_operand_name_34 = BUILTIN_LEN( tmp_len_arg_34 );
    if ( tmp_operand_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3077;
        goto try_except_handler_8;
    }
    tmp_slice_upper_33 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_34 );
    Py_DECREF( tmp_operand_name_34 );
    if ( tmp_slice_upper_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3077;
        goto try_except_handler_8;
    }
    tmp_assign_source_78 = LOOKUP_SLICE( tmp_slice_source_52, Py_None, tmp_slice_upper_33 );
    Py_DECREF( tmp_slice_upper_33 );
    if ( tmp_assign_source_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3077;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_78;
        Py_XDECREF( old );
    }

    tmp_slice_source_53 = var_rv;

    if ( tmp_slice_source_53 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3078;
        goto try_except_handler_8;
    }

    tmp_len_arg_35 = var_suffix;

    tmp_operand_name_35 = BUILTIN_LEN( tmp_len_arg_35 );
    if ( tmp_operand_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3078;
        goto try_except_handler_8;
    }
    tmp_slice_upper_34 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_35 );
    Py_DECREF( tmp_operand_name_35 );
    if ( tmp_slice_upper_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3078;
        goto try_except_handler_8;
    }
    tmp_assign_source_79 = LOOKUP_SLICE( tmp_slice_source_53, Py_None, tmp_slice_upper_34 );
    Py_DECREF( tmp_slice_upper_34 );
    if ( tmp_assign_source_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3078;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_79;
        Py_XDECREF( old );
    }

    tmp_called_instance_38 = par_word;

    frame_function->f_lineno = 3080;
    tmp_cond_value_19 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_38, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_gu_tuple, 0 ) );

    if ( tmp_cond_value_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3080;
        goto try_except_handler_8;
    }
    tmp_cond_truth_19 = CHECK_IF_TRUE( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_19 );

        exception_lineno = 3080;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == 1 )
    {
        goto branch_yes_28;
    }
    else
    {
        goto branch_no_28;
    }
    branch_yes_28:;
    tmp_sliceslicedel_index_lower_20 = 0;
    tmp_slice_index_upper_20 = -1;
    tmp_slice_source_54 = par_word;

    tmp_assign_source_80 = LOOKUP_INDEX_SLICE( tmp_slice_source_54, tmp_sliceslicedel_index_lower_20, tmp_slice_index_upper_20 );
    if ( tmp_assign_source_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3081;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_80;
        Py_DECREF( old );
    }

    branch_no_28:;
    tmp_called_instance_39 = var_rv;

    frame_function->f_lineno = 3083;
    tmp_cond_value_20 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_39, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_unicode_plain_gu_tuple, 0 ) );

    if ( tmp_cond_value_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3083;
        goto try_except_handler_8;
    }
    tmp_cond_truth_20 = CHECK_IF_TRUE( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_20 );

        exception_lineno = 3083;
        goto try_except_handler_8;
    }
    Py_DECREF( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == 1 )
    {
        goto branch_yes_29;
    }
    else
    {
        goto branch_no_29;
    }
    branch_yes_29:;
    tmp_sliceslicedel_index_lower_21 = 0;
    tmp_slice_index_upper_21 = -1;
    tmp_slice_source_55 = var_rv;

    tmp_assign_source_81 = LOOKUP_INDEX_SLICE( tmp_slice_source_55, tmp_sliceslicedel_index_lower_21, tmp_slice_index_upper_21 );
    if ( tmp_assign_source_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3084;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_rv;
        assert( old != NULL );
        var_rv = tmp_assign_source_81;
        Py_DECREF( old );
    }

    branch_no_29:;
    goto branch_end_27;
    branch_no_27:;
    tmp_slice_source_56 = par_word;

    if ( tmp_slice_source_56 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3086;
        goto try_except_handler_8;
    }

    tmp_len_arg_36 = var_suffix;

    tmp_operand_name_36 = BUILTIN_LEN( tmp_len_arg_36 );
    if ( tmp_operand_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3086;
        goto try_except_handler_8;
    }
    tmp_slice_upper_35 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_36 );
    Py_DECREF( tmp_operand_name_36 );
    if ( tmp_slice_upper_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3086;
        goto try_except_handler_8;
    }
    tmp_assign_source_82 = LOOKUP_SLICE( tmp_slice_source_56, Py_None, tmp_slice_upper_35 );
    Py_DECREF( tmp_slice_upper_35 );
    if ( tmp_assign_source_82 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3086;
        goto try_except_handler_8;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_82;
        Py_XDECREF( old );
    }

    tmp_slice_source_57 = var_rv;

    if ( tmp_slice_source_57 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3087;
        goto try_except_handler_8;
    }

    tmp_len_arg_37 = var_suffix;

    tmp_operand_name_37 = BUILTIN_LEN( tmp_len_arg_37 );
    if ( tmp_operand_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3087;
        goto try_except_handler_8;
    }
    tmp_slice_upper_36 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_37 );
    Py_DECREF( tmp_operand_name_37 );
    if ( tmp_slice_upper_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3087;
        goto try_except_handler_8;
    }
    tmp_assign_source_83 = LOOKUP_SLICE( tmp_slice_source_57, Py_None, tmp_slice_upper_36 );
    Py_DECREF( tmp_slice_upper_36 );
    if ( tmp_assign_source_83 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3087;
        goto try_except_handler_8;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_83;
        Py_XDECREF( old );
    }

    branch_end_27:;
    goto loop_end_5;
    branch_no_26:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3074;
        goto try_except_handler_8;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    Py_XDECREF( tmp_for_loop_5__iter_value );
    tmp_for_loop_5__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_5__for_iterator );
    Py_DECREF( tmp_for_loop_5__for_iterator );
    tmp_for_loop_5__for_iterator = NULL;

    branch_no_24:;
    tmp_source_name_10 = par_self;

    tmp_iter_arg_7 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__SpanishStemmer__step3_suffixes );
    if ( tmp_iter_arg_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3091;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_84 = MAKE_ITERATOR( tmp_iter_arg_7 );
    Py_DECREF( tmp_iter_arg_7 );
    if ( tmp_assign_source_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3091;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_6__for_iterator == NULL );
    tmp_for_loop_6__for_iterator = tmp_assign_source_84;

    // Tried code:
    loop_start_6:;
    tmp_next_source_6 = tmp_for_loop_6__for_iterator;

    tmp_assign_source_85 = ITERATOR_NEXT( tmp_next_source_6 );
    if ( tmp_assign_source_85 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_6;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 3091;
            goto try_except_handler_9;
        }
    }

    {
        PyObject *old = tmp_for_loop_6__iter_value;
        tmp_for_loop_6__iter_value = tmp_assign_source_85;
        Py_XDECREF( old );
    }

    tmp_assign_source_86 = tmp_for_loop_6__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_86;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_40 = var_rv;

    if ( tmp_called_instance_40 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3092;
        goto try_except_handler_9;
    }

    tmp_args_element_name_25 = var_suffix;

    frame_function->f_lineno = 3092;
    {
        PyObject *call_args[] = { tmp_args_element_name_25 };
        tmp_cond_value_21 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_40, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3092;
        goto try_except_handler_9;
    }
    tmp_cond_truth_21 = CHECK_IF_TRUE( tmp_cond_value_21 );
    if ( tmp_cond_truth_21 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_21 );

        exception_lineno = 3092;
        goto try_except_handler_9;
    }
    Py_DECREF( tmp_cond_value_21 );
    if ( tmp_cond_truth_21 == 1 )
    {
        goto branch_yes_30;
    }
    else
    {
        goto branch_no_30;
    }
    branch_yes_30:;
    tmp_compare_left_10 = var_suffix;

    tmp_compare_right_10 = const_tuple_6d5213587a06b3895cede7973921d993_tuple;
    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    assert( !(tmp_cmp_In_9 == -1) );
    if ( tmp_cmp_In_9 == 1 )
    {
        goto branch_yes_31;
    }
    else
    {
        goto branch_no_31;
    }
    branch_yes_31:;
    tmp_slice_source_58 = par_word;

    if ( tmp_slice_source_58 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3094;
        goto try_except_handler_9;
    }

    tmp_len_arg_38 = var_suffix;

    tmp_operand_name_38 = BUILTIN_LEN( tmp_len_arg_38 );
    if ( tmp_operand_name_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3094;
        goto try_except_handler_9;
    }
    tmp_slice_upper_37 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_38 );
    Py_DECREF( tmp_operand_name_38 );
    if ( tmp_slice_upper_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3094;
        goto try_except_handler_9;
    }
    tmp_assign_source_87 = LOOKUP_SLICE( tmp_slice_source_58, Py_None, tmp_slice_upper_37 );
    Py_DECREF( tmp_slice_upper_37 );
    if ( tmp_assign_source_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3094;
        goto try_except_handler_9;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_87;
        Py_XDECREF( old );
    }

    tmp_slice_source_59 = var_rv;

    if ( tmp_slice_source_59 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;

        exception_lineno = 3095;
        goto try_except_handler_9;
    }

    tmp_len_arg_39 = var_suffix;

    tmp_operand_name_39 = BUILTIN_LEN( tmp_len_arg_39 );
    if ( tmp_operand_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3095;
        goto try_except_handler_9;
    }
    tmp_slice_upper_38 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_39 );
    Py_DECREF( tmp_operand_name_39 );
    if ( tmp_slice_upper_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3095;
        goto try_except_handler_9;
    }
    tmp_assign_source_88 = LOOKUP_SLICE( tmp_slice_source_59, Py_None, tmp_slice_upper_38 );
    Py_DECREF( tmp_slice_upper_38 );
    if ( tmp_assign_source_88 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3095;
        goto try_except_handler_9;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_88;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_22 = -2;
    tmp_slice_index_upper_22 = PY_SSIZE_T_MAX;
    tmp_slice_source_60 = par_word;

    tmp_compexpr_left_3 = LOOKUP_INDEX_SLICE( tmp_slice_source_60, tmp_sliceslicedel_index_lower_22, tmp_slice_index_upper_22 );
    if ( tmp_compexpr_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3097;
        goto try_except_handler_9;
    }
    tmp_compexpr_right_3 = const_unicode_plain_gu;
    tmp_and_left_value_4 = RICH_COMPARE_EQ( tmp_compexpr_left_3, tmp_compexpr_right_3 );
    Py_DECREF( tmp_compexpr_left_3 );
    if ( tmp_and_left_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3097;
        goto try_except_handler_9;
    }
    tmp_and_left_truth_4 = CHECK_IF_TRUE( tmp_and_left_value_4 );
    if ( tmp_and_left_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_4 );

        exception_lineno = 3097;
        goto try_except_handler_9;
    }
    if ( tmp_and_left_truth_4 == 1 )
    {
        goto and_right_4;
    }
    else
    {
        goto and_left_4;
    }
    and_right_4:;
    Py_DECREF( tmp_and_left_value_4 );
    tmp_subscribed_name_1 = var_rv;

    tmp_subscript_name_1 = const_int_neg_1;
    tmp_compexpr_left_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_compexpr_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3097;
        goto try_except_handler_9;
    }
    tmp_compexpr_right_4 = const_unicode_plain_u;
    tmp_and_right_value_4 = RICH_COMPARE_EQ( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    Py_DECREF( tmp_compexpr_left_4 );
    if ( tmp_and_right_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3097;
        goto try_except_handler_9;
    }
    tmp_cond_value_22 = tmp_and_right_value_4;
    goto and_end_4;
    and_left_4:;
    tmp_cond_value_22 = tmp_and_left_value_4;
    and_end_4:;
    tmp_cond_truth_22 = CHECK_IF_TRUE( tmp_cond_value_22 );
    if ( tmp_cond_truth_22 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_22 );

        exception_lineno = 3097;
        goto try_except_handler_9;
    }
    Py_DECREF( tmp_cond_value_22 );
    if ( tmp_cond_truth_22 == 1 )
    {
        goto branch_yes_32;
    }
    else
    {
        goto branch_no_32;
    }
    branch_yes_32:;
    tmp_sliceslicedel_index_lower_23 = 0;
    tmp_slice_index_upper_23 = -1;
    tmp_slice_source_61 = par_word;

    tmp_assign_source_89 = LOOKUP_INDEX_SLICE( tmp_slice_source_61, tmp_sliceslicedel_index_lower_23, tmp_slice_index_upper_23 );
    if ( tmp_assign_source_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3098;
        goto try_except_handler_9;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_89;
        Py_DECREF( old );
    }

    branch_no_32:;
    goto branch_end_31;
    branch_no_31:;
    tmp_slice_source_62 = par_word;

    if ( tmp_slice_source_62 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3100;
        goto try_except_handler_9;
    }

    tmp_len_arg_40 = var_suffix;

    tmp_operand_name_40 = BUILTIN_LEN( tmp_len_arg_40 );
    if ( tmp_operand_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3100;
        goto try_except_handler_9;
    }
    tmp_slice_upper_39 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_40 );
    Py_DECREF( tmp_operand_name_40 );
    if ( tmp_slice_upper_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3100;
        goto try_except_handler_9;
    }
    tmp_assign_source_90 = LOOKUP_SLICE( tmp_slice_source_62, Py_None, tmp_slice_upper_39 );
    Py_DECREF( tmp_slice_upper_39 );
    if ( tmp_assign_source_90 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3100;
        goto try_except_handler_9;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_90;
        Py_XDECREF( old );
    }

    branch_end_31:;
    goto loop_end_6;
    branch_no_30:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3091;
        goto try_except_handler_9;
    }
    goto loop_start_6;
    loop_end_6:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    Py_XDECREF( tmp_for_loop_6__iter_value );
    tmp_for_loop_6__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_6__for_iterator );
    Py_DECREF( tmp_for_loop_6__for_iterator );
    tmp_for_loop_6__for_iterator = NULL;

    tmp_called_instance_45 = par_word;

    if ( tmp_called_instance_45 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3103;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3103;
    tmp_called_instance_44 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_45, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_5eff0911f36248c31970c9d9669b12e2_tuple, 0 ) );

    if ( tmp_called_instance_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3103;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 3103;
    tmp_called_instance_43 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_44, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_af47b87413332a5bef6ea1fc7af3c92e_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_44 );
    if ( tmp_called_instance_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3103;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 3103;
    tmp_called_instance_42 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_43, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_dc8d33361ac7399a3d0f321f8e95c4b2_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_43 );
    if ( tmp_called_instance_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3103;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 3103;
    tmp_called_instance_41 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_42, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_14a12a5482d894dcd4ddfab6cd3d2db3_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_42 );
    if ( tmp_called_instance_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3103;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 3103;
    tmp_assign_source_91 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_41, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_ac5041baf699e514050e7e516f7e6b3c_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_41 );
    if ( tmp_assign_source_91 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3103;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_91;
        Py_XDECREF( old );
    }


#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_step1_success )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_step1_success,
                    var_step1_success
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_r2 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r2,
                    var_r2
                );

                assert( res == 0 );
            }

            if ( var_rv )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_rv,
                    var_rv
                );

                assert( res == 0 );
            }

            if ( var_suffix )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_suffix,
                    var_suffix
                );

                assert( res == 0 );
            }

            if ( var_pre_suff )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_pre_suff,
                    var_pre_suff
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_15_SpanishStemmer$$$function_1_stem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_word );
    Py_DECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step1_success );
    var_step1_success = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    Py_XDECREF( var_pre_suff );
    var_pre_suff = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_step1_success );
    var_step1_success = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_r2 );
    var_r2 = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    Py_XDECREF( var_pre_suff );
    var_pre_suff = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_15_SpanishStemmer$$$function_1_stem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


NUITKA_LOCAL_MODULE PyObject *impl_nltk$stem$snowball$$$class_16_SwedishStemmer( PyObject **python_pars )
{
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
    assert(!had_error); // Do not enter inlined functions with error set.
#endif

    // Local variable declarations.
    PyObject *var___module__ = NULL;
    PyObject *var___doc__ = NULL;
    PyObject *var__SwedishStemmer__vowels = NULL;
    PyObject *var__SwedishStemmer__s_ending = NULL;
    PyObject *var__SwedishStemmer__step1_suffixes = NULL;
    PyObject *var__SwedishStemmer__step2_suffixes = NULL;
    PyObject *var__SwedishStemmer__step3_suffixes = NULL;
    PyObject *var_stem = NULL;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = const_str_digest_58494c585006c17a0e20f33e08f63673;
    assert( var___module__ == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var___module__ = tmp_assign_source_1;

    tmp_assign_source_2 = const_unicode_digest_7116690f828f2ee99b0ed34103592a1e;
    assert( var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_2 );
    var___doc__ = tmp_assign_source_2;

    tmp_assign_source_3 = const_unicode_digest_447616c6c69e23ddf1149fc938d915f0;
    assert( var__SwedishStemmer__vowels == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var__SwedishStemmer__vowels = tmp_assign_source_3;

    tmp_assign_source_4 = const_unicode_plain_bcdfghjklmnoprtvy;
    assert( var__SwedishStemmer__s_ending == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var__SwedishStemmer__s_ending = tmp_assign_source_4;

    tmp_assign_source_5 = const_tuple_496ad5371573b8369845b15055770b5e_tuple;
    assert( var__SwedishStemmer__step1_suffixes == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var__SwedishStemmer__step1_suffixes = tmp_assign_source_5;

    tmp_assign_source_6 = const_tuple_f76cbe2358e2c788a54a3d5b640f5f04_tuple;
    assert( var__SwedishStemmer__step2_suffixes == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var__SwedishStemmer__step2_suffixes = tmp_assign_source_6;

    tmp_assign_source_7 = const_tuple_993502414358840495b1f55dd7172430_tuple;
    assert( var__SwedishStemmer__step3_suffixes == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var__SwedishStemmer__step3_suffixes = tmp_assign_source_7;

    tmp_assign_source_8 = MAKE_FUNCTION_nltk$stem$snowball$$$class_16_SwedishStemmer$$$function_1_stem(  );
    assert( var_stem == NULL );
    var_stem = tmp_assign_source_8;

    // Tried code:
    tmp_return_value = PyDict_New();
    if ( var___module__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___module__,
            var___module__
        );

        assert( res == 0 );
    }

    if ( var___doc__ )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain___doc__,
            var___doc__
        );

        assert( res == 0 );
    }

    if ( var__SwedishStemmer__vowels )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__SwedishStemmer__vowels,
            var__SwedishStemmer__vowels
        );

        assert( res == 0 );
    }

    if ( var__SwedishStemmer__s_ending )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__SwedishStemmer__s_ending,
            var__SwedishStemmer__s_ending
        );

        assert( res == 0 );
    }

    if ( var__SwedishStemmer__step1_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__SwedishStemmer__step1_suffixes,
            var__SwedishStemmer__step1_suffixes
        );

        assert( res == 0 );
    }

    if ( var__SwedishStemmer__step2_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__SwedishStemmer__step2_suffixes,
            var__SwedishStemmer__step2_suffixes
        );

        assert( res == 0 );
    }

    if ( var__SwedishStemmer__step3_suffixes )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain__SwedishStemmer__step3_suffixes,
            var__SwedishStemmer__step3_suffixes
        );

        assert( res == 0 );
    }

    if ( var_stem )
    {
        int res = PyDict_SetItem(
            tmp_return_value,
            const_str_plain_stem,
            var_stem
        );

        assert( res == 0 );
    }

    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_16_SwedishStemmer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__SwedishStemmer__vowels );
    Py_DECREF( var__SwedishStemmer__vowels );
    var__SwedishStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__SwedishStemmer__s_ending );
    Py_DECREF( var__SwedishStemmer__s_ending );
    var__SwedishStemmer__s_ending = NULL;

    CHECK_OBJECT( (PyObject *)var__SwedishStemmer__step1_suffixes );
    Py_DECREF( var__SwedishStemmer__step1_suffixes );
    var__SwedishStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__SwedishStemmer__step2_suffixes );
    Py_DECREF( var__SwedishStemmer__step2_suffixes );
    var__SwedishStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__SwedishStemmer__step3_suffixes );
    Py_DECREF( var__SwedishStemmer__step3_suffixes );
    var__SwedishStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)var___module__ );
    Py_DECREF( var___module__ );
    var___module__ = NULL;

    CHECK_OBJECT( (PyObject *)var___doc__ );
    Py_DECREF( var___doc__ );
    var___doc__ = NULL;

    CHECK_OBJECT( (PyObject *)var__SwedishStemmer__vowels );
    Py_DECREF( var__SwedishStemmer__vowels );
    var__SwedishStemmer__vowels = NULL;

    CHECK_OBJECT( (PyObject *)var__SwedishStemmer__s_ending );
    Py_DECREF( var__SwedishStemmer__s_ending );
    var__SwedishStemmer__s_ending = NULL;

    CHECK_OBJECT( (PyObject *)var__SwedishStemmer__step1_suffixes );
    Py_DECREF( var__SwedishStemmer__step1_suffixes );
    var__SwedishStemmer__step1_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__SwedishStemmer__step2_suffixes );
    Py_DECREF( var__SwedishStemmer__step2_suffixes );
    var__SwedishStemmer__step2_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var__SwedishStemmer__step3_suffixes );
    Py_DECREF( var__SwedishStemmer__step3_suffixes );
    var__SwedishStemmer__step3_suffixes = NULL;

    CHECK_OBJECT( (PyObject *)var_stem );
    Py_DECREF( var_stem );
    var_stem = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_16_SwedishStemmer );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$class_16_SwedishStemmer$$$function_1_stem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_word = python_pars[ 1 ];
    PyObject *var_r1 = NULL;
    PyObject *var_suffix = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_name_1;
    int tmp_cmp_Eq_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_frame_locals;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_next_source_3;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_operand_name_2;
    PyObject *tmp_operand_name_3;
    PyObject *tmp_return_value;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_upper_1;
    PyObject *tmp_slice_upper_2;
    PyObject *tmp_slice_upper_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_4cc9a59394940b6b38dc5c650346725d, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_compare_left_1 = par_word;

    tmp_source_name_1 = par_self;

    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stopwords );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3156;
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = par_word;

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_called_instance_1 = par_word;

    frame_function->f_lineno = 3159;
    tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_lower );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3159;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_1;
        Py_DECREF( old );
    }

    tmp_source_name_2 = par_self;

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__r1_scandinavian );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3161;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_word;

    tmp_source_name_3 = par_self;

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__SwedishStemmer__vowels );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 3161;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 3161;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3161;
        goto frame_exception_exit_1;
    }
    assert( var_r1 == NULL );
    var_r1 = tmp_assign_source_2;

    tmp_source_name_4 = par_self;

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__SwedishStemmer__step1_suffixes );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3164;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3164;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_3;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 3164;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_assign_source_5 = tmp_for_loop_1__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_5;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_2 = var_r1;

    tmp_args_element_name_3 = var_suffix;

    frame_function->f_lineno = 3165;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_cond_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3165;
        goto try_except_handler_2;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 3165;
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_compare_left_2 = var_suffix;

    tmp_compare_right_2 = const_unicode_plain_s;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3166;
        goto try_except_handler_2;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_subscribed_name_1 = par_word;

    tmp_subscript_name_1 = const_int_neg_2;
    tmp_compare_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3167;
        goto try_except_handler_2;
    }
    tmp_source_name_5 = par_self;

    tmp_compare_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__SwedishStemmer__s_ending );
    if ( tmp_compare_right_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_3 );

        exception_lineno = 3167;
        goto try_except_handler_2;
    }
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_2 == -1) );
    Py_DECREF( tmp_compare_left_3 );
    Py_DECREF( tmp_compare_right_3 );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = -1;
    tmp_slice_source_1 = par_word;

    tmp_assign_source_6 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3168;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_6;
        Py_DECREF( old );
    }

    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = -1;
    tmp_slice_source_2 = var_r1;

    tmp_assign_source_7 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3169;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_7;
        Py_DECREF( old );
    }

    branch_no_4:;
    goto branch_end_3;
    branch_no_3:;
    tmp_slice_source_3 = par_word;

    tmp_len_arg_1 = var_suffix;

    tmp_operand_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3171;
        goto try_except_handler_2;
    }
    tmp_slice_upper_1 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_slice_upper_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3171;
        goto try_except_handler_2;
    }
    tmp_assign_source_8 = LOOKUP_SLICE( tmp_slice_source_3, Py_None, tmp_slice_upper_1 );
    Py_DECREF( tmp_slice_upper_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3171;
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_word;
        assert( old != NULL );
        par_word = tmp_assign_source_8;
        Py_DECREF( old );
    }

    tmp_slice_source_4 = var_r1;

    tmp_len_arg_2 = var_suffix;

    tmp_operand_name_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_operand_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3172;
        goto try_except_handler_2;
    }
    tmp_slice_upper_2 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
    Py_DECREF( tmp_operand_name_2 );
    if ( tmp_slice_upper_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3172;
        goto try_except_handler_2;
    }
    tmp_assign_source_9 = LOOKUP_SLICE( tmp_slice_source_4, Py_None, tmp_slice_upper_2 );
    Py_DECREF( tmp_slice_upper_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3172;
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_r1;
        assert( old != NULL );
        var_r1 = tmp_assign_source_9;
        Py_DECREF( old );
    }

    branch_end_3:;
    goto loop_end_1;
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3164;
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_source_name_6 = par_self;

    tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__SwedishStemmer__step2_suffixes );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3176;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3176;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_10;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    tmp_assign_source_11 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_11 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 3176;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    tmp_assign_source_12 = tmp_for_loop_2__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_12;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_3 = var_r1;

    if ( tmp_called_instance_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 3177;
        goto try_except_handler_3;
    }

    tmp_args_element_name_4 = var_suffix;

    frame_function->f_lineno = 3177;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_cond_value_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3177;
        goto try_except_handler_3;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 3177;
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = -1;
    tmp_slice_source_5 = par_word;

    if ( tmp_slice_source_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3178;
        goto try_except_handler_3;
    }

    tmp_assign_source_13 = LOOKUP_INDEX_SLICE( tmp_slice_source_5, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3178;
        goto try_except_handler_3;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_13;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = -1;
    tmp_slice_source_6 = var_r1;

    if ( tmp_slice_source_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 3179;
        goto try_except_handler_3;
    }

    tmp_assign_source_14 = LOOKUP_INDEX_SLICE( tmp_slice_source_6, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3179;
        goto try_except_handler_3;
    }
    {
        PyObject *old = var_r1;
        var_r1 = tmp_assign_source_14;
        Py_XDECREF( old );
    }

    goto loop_end_2;
    branch_no_5:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3176;
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_source_name_7 = par_self;

    tmp_iter_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__SwedishStemmer__step3_suffixes );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3183;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_15 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3183;
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_3__for_iterator == NULL );
    tmp_for_loop_3__for_iterator = tmp_assign_source_15;

    // Tried code:
    loop_start_3:;
    tmp_next_source_3 = tmp_for_loop_3__for_iterator;

    tmp_assign_source_16 = ITERATOR_NEXT( tmp_next_source_3 );
    if ( tmp_assign_source_16 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_3;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            frame_function->f_lineno = 3183;
            goto try_except_handler_4;
        }
    }

    {
        PyObject *old = tmp_for_loop_3__iter_value;
        tmp_for_loop_3__iter_value = tmp_assign_source_16;
        Py_XDECREF( old );
    }

    tmp_assign_source_17 = tmp_for_loop_3__iter_value;

    {
        PyObject *old = var_suffix;
        var_suffix = tmp_assign_source_17;
        Py_INCREF( var_suffix );
        Py_XDECREF( old );
    }

    tmp_called_instance_4 = var_r1;

    if ( tmp_called_instance_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "r1" );
        exception_tb = NULL;

        exception_lineno = 3184;
        goto try_except_handler_4;
    }

    tmp_args_element_name_5 = var_suffix;

    frame_function->f_lineno = 3184;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_cond_value_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_endswith, call_args );
    }

    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3184;
        goto try_except_handler_4;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 3184;
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_compare_left_4 = var_suffix;

    tmp_compare_right_4 = const_tuple_unicode_plain_els_unicode_plain_lig_unicode_plain_ig_tuple;
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_slice_source_7 = par_word;

    if ( tmp_slice_source_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3186;
        goto try_except_handler_4;
    }

    tmp_len_arg_3 = var_suffix;

    tmp_operand_name_3 = BUILTIN_LEN( tmp_len_arg_3 );
    if ( tmp_operand_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3186;
        goto try_except_handler_4;
    }
    tmp_slice_upper_3 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_3 );
    Py_DECREF( tmp_operand_name_3 );
    if ( tmp_slice_upper_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3186;
        goto try_except_handler_4;
    }
    tmp_assign_source_18 = LOOKUP_SLICE( tmp_slice_source_7, Py_None, tmp_slice_upper_3 );
    Py_DECREF( tmp_slice_upper_3 );
    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3186;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_18;
        Py_XDECREF( old );
    }

    goto branch_end_7;
    branch_no_7:;
    tmp_compare_left_5 = var_suffix;

    tmp_compare_right_5 = const_tuple_771c93f72ced5928d5cb9dfc65e3b3e2_tuple;
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = -1;
    tmp_slice_source_8 = par_word;

    if ( tmp_slice_source_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3188;
        goto try_except_handler_4;
    }

    tmp_assign_source_19 = LOOKUP_INDEX_SLICE( tmp_slice_source_8, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3188;
        goto try_except_handler_4;
    }
    {
        PyObject *old = par_word;
        par_word = tmp_assign_source_19;
        Py_XDECREF( old );
    }

    branch_no_8:;
    branch_end_7:;
    goto loop_end_3;
    branch_no_6:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3183;
        goto try_except_handler_4;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    tmp_return_value = par_word;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "word" );
        exception_tb = NULL;

        exception_lineno = 3192;
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto try_return_handler_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( par_self )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_self,
                    par_self
                );

                assert( res == 0 );
            }

            if ( par_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    par_word
                );

                assert( res == 0 );
            }

            if ( var_r1 )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_r1,
                    var_r1
                );

                assert( res == 0 );
            }

            if ( var_suffix )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_suffix,
                    var_suffix
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_16_SwedishStemmer$$$function_1_stem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_word );
    par_word = NULL;

    Py_XDECREF( var_r1 );
    var_r1 = NULL;

    Py_XDECREF( var_suffix );
    var_suffix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$class_16_SwedishStemmer$$$function_1_stem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_nltk$stem$snowball$$$function_1_demo( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *var_re = NULL;
    PyObject *var_udhr = NULL;
    PyObject *var_language = NULL;
    PyObject *var_stemmer = NULL;
    PyObject *var_excerpt = NULL;
    PyObject *var_word = NULL;
    PyObject *var_stemmed = NULL;
    PyObject *tmp_list_contraction_1__$0 = NULL;
    PyObject *tmp_list_contraction_1__contraction_result = NULL;
    PyObject *tmp_list_contraction_1__iter_value_0 = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_append_list_1;
    PyObject *tmp_append_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_instance_11;
    PyObject *tmp_called_instance_12;
    PyObject *tmp_called_instance_13;
    PyObject *tmp_called_instance_14;
    PyObject *tmp_called_instance_15;
    PyObject *tmp_called_instance_16;
    PyObject *tmp_called_instance_17;
    PyObject *tmp_called_instance_18;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    int tmp_cmp_Eq_3;
    int tmp_cmp_Eq_4;
    int tmp_cmp_Eq_5;
    int tmp_cmp_Eq_6;
    int tmp_cmp_Eq_7;
    int tmp_cmp_Eq_8;
    int tmp_cmp_Eq_9;
    int tmp_cmp_Eq_10;
    int tmp_cmp_Eq_11;
    int tmp_cmp_Eq_12;
    int tmp_cmp_Eq_13;
    int tmp_cmp_Eq_14;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_frame_locals;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_next_source_1;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_print_value;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    Py_ssize_t tmp_slice_index_upper_1;
    Py_ssize_t tmp_slice_index_upper_2;
    Py_ssize_t tmp_slice_index_upper_3;
    Py_ssize_t tmp_slice_index_upper_4;
    Py_ssize_t tmp_slice_index_upper_5;
    Py_ssize_t tmp_slice_index_upper_6;
    Py_ssize_t tmp_slice_index_upper_7;
    Py_ssize_t tmp_slice_index_upper_8;
    Py_ssize_t tmp_slice_index_upper_9;
    Py_ssize_t tmp_slice_index_upper_10;
    Py_ssize_t tmp_slice_index_upper_11;
    Py_ssize_t tmp_slice_index_upper_12;
    Py_ssize_t tmp_slice_index_upper_13;
    PyObject *tmp_slice_source_1;
    PyObject *tmp_slice_source_2;
    PyObject *tmp_slice_source_3;
    PyObject *tmp_slice_source_4;
    PyObject *tmp_slice_source_5;
    PyObject *tmp_slice_source_6;
    PyObject *tmp_slice_source_7;
    PyObject *tmp_slice_source_8;
    PyObject *tmp_slice_source_9;
    PyObject *tmp_slice_source_10;
    PyObject *tmp_slice_source_11;
    PyObject *tmp_slice_source_12;
    PyObject *tmp_slice_source_13;
    Py_ssize_t tmp_sliceslicedel_index_lower_1;
    Py_ssize_t tmp_sliceslicedel_index_lower_2;
    Py_ssize_t tmp_sliceslicedel_index_lower_3;
    Py_ssize_t tmp_sliceslicedel_index_lower_4;
    Py_ssize_t tmp_sliceslicedel_index_lower_5;
    Py_ssize_t tmp_sliceslicedel_index_lower_6;
    Py_ssize_t tmp_sliceslicedel_index_lower_7;
    Py_ssize_t tmp_sliceslicedel_index_lower_8;
    Py_ssize_t tmp_sliceslicedel_index_lower_9;
    Py_ssize_t tmp_sliceslicedel_index_lower_10;
    Py_ssize_t tmp_sliceslicedel_index_lower_11;
    Py_ssize_t tmp_sliceslicedel_index_lower_12;
    Py_ssize_t tmp_sliceslicedel_index_lower_13;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    static PyFrameObject *cache_frame_function = NULL;

    PyFrameObject *frame_function;

    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_function, codeobj_a23e49f2726f6f860501c7287cb93d0c, module_nltk$stem$snowball );
    frame_function = cache_frame_function;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_function );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( frame_function );
    assert( Py_REFCNT( frame_function ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    frame_function->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_nltk$stem$snowball)->md_dict;
    frame_function->f_lineno = 3207;
    tmp_assign_source_1 = IMPORT_MODULE( const_str_plain_re, tmp_import_globals_1, Py_None, Py_None, const_int_neg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3207;
        goto frame_exception_exit_1;
    }
    assert( var_re == NULL );
    var_re = tmp_assign_source_1;

    tmp_import_globals_2 = ((PyModuleObject *)module_nltk$stem$snowball)->md_dict;
    frame_function->f_lineno = 3208;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_f58de60a0881ce5c15d7da6b10750aee, tmp_import_globals_2, Py_None, const_tuple_str_plain_udhr_tuple, const_int_neg_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3208;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_udhr );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3208;
        goto frame_exception_exit_1;
    }
    assert( var_udhr == NULL );
    var_udhr = tmp_assign_source_2;

    tmp_print_value = const_unicode_newline;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3210;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3210;
        goto frame_exception_exit_1;
    }
    tmp_print_value = const_unicode_digest_d0fe3dadce72905b5ca3596d45c99bde;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3211;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3211;
        goto frame_exception_exit_1;
    }
    tmp_print_value = const_unicode_digest_20f5146bb9a5a2e0e8d455177dad4e11;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3212;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3212;
        goto frame_exception_exit_1;
    }
    tmp_print_value = const_unicode_digest_d0fe3dadce72905b5ca3596d45c99bde;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3213;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3213;
        goto frame_exception_exit_1;
    }
    loop_start_1:;
    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_raw_input );
    assert( tmp_called_name_1 != NULL );
    tmp_left_name_3 = const_unicode_digest_56ab2dbed0688715ab78ed4253b12de6;
    tmp_source_name_1 = const_unicode_chr_47;
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_join );
    assert( tmp_called_name_2 != NULL );
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3219;
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_languages );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 3219;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 3219;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_right_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3219;
        goto frame_exception_exit_1;
    }
    tmp_left_name_2 = BINARY_OPERATION_ADD( tmp_left_name_3, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_left_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3218;
        goto frame_exception_exit_1;
    }
    tmp_right_name_2 = const_unicode_newline;
    tmp_left_name_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_2 );
    Py_DECREF( tmp_left_name_2 );
    if ( tmp_left_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3219;
        goto frame_exception_exit_1;
    }
    tmp_right_name_3 = const_unicode_digest_bb920a9c520a3c123ca25a0bee3c6dc2;
    tmp_args_element_name_1 = BINARY_OPERATION_ADD( tmp_left_name_1, tmp_right_name_3 );
    Py_DECREF( tmp_left_name_1 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3220;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 3217;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3217;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_language;
        var_language = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    tmp_compare_left_1 = var_language;

    tmp_compare_right_1 = const_unicode_plain_exit;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3223;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    goto loop_end_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_compare_left_2 = var_language;

    tmp_compare_right_2 = const_unicode_plain_danish;
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3226;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3227;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3227;
    tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, &PyTuple_GET_ITEM( const_tuple_unicode_plain_danish_tuple, 0 ) );

    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3227;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmer;
        var_stemmer = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_1 = 0;
    tmp_slice_index_upper_1 = 300;
    tmp_called_instance_1 = var_udhr;

    frame_function->f_lineno = 3228;
    tmp_slice_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_words, &PyTuple_GET_ITEM( const_tuple_unicode_digest_dbe956c5481134fcb58b233f0351b464_tuple, 0 ) );

    if ( tmp_slice_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3228;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_5 = LOOKUP_INDEX_SLICE( tmp_slice_source_1, tmp_sliceslicedel_index_lower_1, tmp_slice_index_upper_1 );
    Py_DECREF( tmp_slice_source_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3228;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    goto branch_end_2;
    branch_no_2:;
    tmp_compare_left_3 = var_language;

    tmp_compare_right_3 = const_unicode_plain_dutch;
    tmp_cmp_Eq_3 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_cmp_Eq_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3229;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_3 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3230;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3230;
    tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, &PyTuple_GET_ITEM( const_tuple_unicode_plain_dutch_tuple, 0 ) );

    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3230;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmer;
        var_stemmer = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_2 = 0;
    tmp_slice_index_upper_2 = 300;
    tmp_called_instance_2 = var_udhr;

    frame_function->f_lineno = 3231;
    tmp_slice_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_words, &PyTuple_GET_ITEM( const_tuple_unicode_digest_aed26e9fdc4d953682a95803e01952d3_tuple, 0 ) );

    if ( tmp_slice_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3231;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_7 = LOOKUP_INDEX_SLICE( tmp_slice_source_2, tmp_sliceslicedel_index_lower_2, tmp_slice_index_upper_2 );
    Py_DECREF( tmp_slice_source_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3231;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_7;
        Py_XDECREF( old );
    }

    goto branch_end_3;
    branch_no_3:;
    tmp_compare_left_4 = var_language;

    tmp_compare_right_4 = const_unicode_plain_finnish;
    tmp_cmp_Eq_4 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_Eq_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3232;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_4 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3233;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3233;
    tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, &PyTuple_GET_ITEM( const_tuple_unicode_plain_finnish_tuple, 0 ) );

    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3233;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmer;
        var_stemmer = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_3 = 0;
    tmp_slice_index_upper_3 = 300;
    tmp_called_instance_3 = var_udhr;

    frame_function->f_lineno = 3234;
    tmp_slice_source_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_words, &PyTuple_GET_ITEM( const_tuple_unicode_digest_2d6c9d5dde7e4950753696b6ed5a35ff_tuple, 0 ) );

    if ( tmp_slice_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3234;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_9 = LOOKUP_INDEX_SLICE( tmp_slice_source_3, tmp_sliceslicedel_index_lower_3, tmp_slice_index_upper_3 );
    Py_DECREF( tmp_slice_source_3 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3234;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    goto branch_end_4;
    branch_no_4:;
    tmp_compare_left_5 = var_language;

    tmp_compare_right_5 = const_unicode_plain_french;
    tmp_cmp_Eq_5 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_5, tmp_compare_right_5 );
    if ( tmp_cmp_Eq_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3235;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_5 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_called_name_6 == NULL ))
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_called_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3236;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3236;
    tmp_assign_source_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_unicode_plain_french_tuple, 0 ) );

    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3236;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmer;
        var_stemmer = tmp_assign_source_10;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_4 = 0;
    tmp_slice_index_upper_4 = 300;
    tmp_called_instance_4 = var_udhr;

    frame_function->f_lineno = 3237;
    tmp_slice_source_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_words, &PyTuple_GET_ITEM( const_tuple_unicode_digest_bd45c14285625ef7d1459fb4891f8e95_tuple, 0 ) );

    if ( tmp_slice_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3237;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_11 = LOOKUP_INDEX_SLICE( tmp_slice_source_4, tmp_sliceslicedel_index_lower_4, tmp_slice_index_upper_4 );
    Py_DECREF( tmp_slice_source_4 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3237;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    goto branch_end_5;
    branch_no_5:;
    tmp_compare_left_6 = var_language;

    tmp_compare_right_6 = const_unicode_plain_german;
    tmp_cmp_Eq_6 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_6, tmp_compare_right_6 );
    if ( tmp_cmp_Eq_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3238;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_6 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_called_name_7 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_called_name_7 == NULL ))
    {
        tmp_called_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_called_name_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3239;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3239;
    tmp_assign_source_12 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_unicode_plain_german_tuple, 0 ) );

    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3239;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmer;
        var_stemmer = tmp_assign_source_12;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_5 = 0;
    tmp_slice_index_upper_5 = 300;
    tmp_called_instance_5 = var_udhr;

    frame_function->f_lineno = 3240;
    tmp_slice_source_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_words, &PyTuple_GET_ITEM( const_tuple_unicode_digest_3237b32eb23cee6617f0a3a9251acea5_tuple, 0 ) );

    if ( tmp_slice_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3240;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_13 = LOOKUP_INDEX_SLICE( tmp_slice_source_5, tmp_sliceslicedel_index_lower_5, tmp_slice_index_upper_5 );
    Py_DECREF( tmp_slice_source_5 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3240;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_13;
        Py_XDECREF( old );
    }

    goto branch_end_6;
    branch_no_6:;
    tmp_compare_left_7 = var_language;

    tmp_compare_right_7 = const_unicode_plain_hungarian;
    tmp_cmp_Eq_7 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_7, tmp_compare_right_7 );
    if ( tmp_cmp_Eq_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3241;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_7 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_called_name_8 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_called_name_8 == NULL ))
    {
        tmp_called_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_called_name_8 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3242;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3242;
    tmp_assign_source_14 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, &PyTuple_GET_ITEM( const_tuple_unicode_plain_hungarian_tuple, 0 ) );

    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3242;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmer;
        var_stemmer = tmp_assign_source_14;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_6 = 0;
    tmp_slice_index_upper_6 = 300;
    tmp_called_instance_6 = var_udhr;

    frame_function->f_lineno = 3243;
    tmp_slice_source_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_words, &PyTuple_GET_ITEM( const_tuple_unicode_digest_5adb8d1bbb76387630c09a27d94fc384_tuple, 0 ) );

    if ( tmp_slice_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3243;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_15 = LOOKUP_INDEX_SLICE( tmp_slice_source_6, tmp_sliceslicedel_index_lower_6, tmp_slice_index_upper_6 );
    Py_DECREF( tmp_slice_source_6 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3243;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_15;
        Py_XDECREF( old );
    }

    goto branch_end_7;
    branch_no_7:;
    tmp_compare_left_8 = var_language;

    tmp_compare_right_8 = const_unicode_plain_italian;
    tmp_cmp_Eq_8 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_8, tmp_compare_right_8 );
    if ( tmp_cmp_Eq_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3244;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_8 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_called_name_9 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_called_name_9 == NULL ))
    {
        tmp_called_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_called_name_9 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3245;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3245;
    tmp_assign_source_16 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, &PyTuple_GET_ITEM( const_tuple_unicode_plain_italian_tuple, 0 ) );

    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3245;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmer;
        var_stemmer = tmp_assign_source_16;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_7 = 0;
    tmp_slice_index_upper_7 = 300;
    tmp_called_instance_7 = var_udhr;

    frame_function->f_lineno = 3246;
    tmp_slice_source_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_words, &PyTuple_GET_ITEM( const_tuple_unicode_digest_a6a1250a415661d97d62909534ab83c0_tuple, 0 ) );

    if ( tmp_slice_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3246;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_17 = LOOKUP_INDEX_SLICE( tmp_slice_source_7, tmp_sliceslicedel_index_lower_7, tmp_slice_index_upper_7 );
    Py_DECREF( tmp_slice_source_7 );
    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3246;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_17;
        Py_XDECREF( old );
    }

    goto branch_end_8;
    branch_no_8:;
    tmp_compare_left_9 = var_language;

    tmp_compare_right_9 = const_unicode_plain_norwegian;
    tmp_cmp_Eq_9 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_9, tmp_compare_right_9 );
    if ( tmp_cmp_Eq_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3247;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_9 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_called_name_10 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_called_name_10 == NULL ))
    {
        tmp_called_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_called_name_10 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3248;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3248;
    tmp_assign_source_18 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, &PyTuple_GET_ITEM( const_tuple_unicode_plain_norwegian_tuple, 0 ) );

    if ( tmp_assign_source_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3248;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmer;
        var_stemmer = tmp_assign_source_18;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_8 = 0;
    tmp_slice_index_upper_8 = 300;
    tmp_called_instance_8 = var_udhr;

    frame_function->f_lineno = 3249;
    tmp_slice_source_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_words, &PyTuple_GET_ITEM( const_tuple_unicode_digest_2402c52e17483901ade2167dd26d0fe1_tuple, 0 ) );

    if ( tmp_slice_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3249;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_19 = LOOKUP_INDEX_SLICE( tmp_slice_source_8, tmp_sliceslicedel_index_lower_8, tmp_slice_index_upper_8 );
    Py_DECREF( tmp_slice_source_8 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3249;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_19;
        Py_XDECREF( old );
    }

    goto branch_end_9;
    branch_no_9:;
    tmp_compare_left_10 = var_language;

    tmp_compare_right_10 = const_unicode_plain_portuguese;
    tmp_cmp_Eq_10 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_10, tmp_compare_right_10 );
    if ( tmp_cmp_Eq_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3250;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_10 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_called_name_11 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_called_name_11 == NULL ))
    {
        tmp_called_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_called_name_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3251;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3251;
    tmp_assign_source_20 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, &PyTuple_GET_ITEM( const_tuple_unicode_plain_portuguese_tuple, 0 ) );

    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3251;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmer;
        var_stemmer = tmp_assign_source_20;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_9 = 0;
    tmp_slice_index_upper_9 = 300;
    tmp_called_instance_9 = var_udhr;

    frame_function->f_lineno = 3252;
    tmp_slice_source_9 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_words, &PyTuple_GET_ITEM( const_tuple_unicode_digest_92351d786d28b4b8e77f42285e4f88f6_tuple, 0 ) );

    if ( tmp_slice_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3252;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_21 = LOOKUP_INDEX_SLICE( tmp_slice_source_9, tmp_sliceslicedel_index_lower_9, tmp_slice_index_upper_9 );
    Py_DECREF( tmp_slice_source_9 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3252;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_21;
        Py_XDECREF( old );
    }

    goto branch_end_10;
    branch_no_10:;
    tmp_compare_left_11 = var_language;

    tmp_compare_right_11 = const_unicode_plain_romanian;
    tmp_cmp_Eq_11 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_11, tmp_compare_right_11 );
    if ( tmp_cmp_Eq_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3253;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_11 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_called_name_12 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_called_name_12 == NULL ))
    {
        tmp_called_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_called_name_12 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3254;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3254;
    tmp_assign_source_22 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, &PyTuple_GET_ITEM( const_tuple_unicode_plain_romanian_tuple, 0 ) );

    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3254;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmer;
        var_stemmer = tmp_assign_source_22;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_10 = 0;
    tmp_slice_index_upper_10 = 300;
    tmp_called_instance_10 = var_udhr;

    frame_function->f_lineno = 3255;
    tmp_slice_source_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain_words, &PyTuple_GET_ITEM( const_tuple_unicode_digest_ffbcedbec480ba49ec103efa1145d4f8_tuple, 0 ) );

    if ( tmp_slice_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3255;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_23 = LOOKUP_INDEX_SLICE( tmp_slice_source_10, tmp_sliceslicedel_index_lower_10, tmp_slice_index_upper_10 );
    Py_DECREF( tmp_slice_source_10 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3255;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_23;
        Py_XDECREF( old );
    }

    goto branch_end_11;
    branch_no_11:;
    tmp_compare_left_12 = var_language;

    tmp_compare_right_12 = const_unicode_plain_russian;
    tmp_cmp_Eq_12 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_12, tmp_compare_right_12 );
    if ( tmp_cmp_Eq_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3256;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_12 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_called_name_13 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_called_name_13 == NULL ))
    {
        tmp_called_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_called_name_13 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3257;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3257;
    tmp_assign_source_24 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, &PyTuple_GET_ITEM( const_tuple_unicode_plain_russian_tuple, 0 ) );

    if ( tmp_assign_source_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3257;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmer;
        var_stemmer = tmp_assign_source_24;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_11 = 0;
    tmp_slice_index_upper_11 = 300;
    tmp_called_instance_11 = var_udhr;

    frame_function->f_lineno = 3258;
    tmp_slice_source_11 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_words, &PyTuple_GET_ITEM( const_tuple_unicode_digest_3b44810ca84c2278367df501b9231323_tuple, 0 ) );

    if ( tmp_slice_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3258;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_25 = LOOKUP_INDEX_SLICE( tmp_slice_source_11, tmp_sliceslicedel_index_lower_11, tmp_slice_index_upper_11 );
    Py_DECREF( tmp_slice_source_11 );
    if ( tmp_assign_source_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3258;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_25;
        Py_XDECREF( old );
    }

    goto branch_end_12;
    branch_no_12:;
    tmp_compare_left_13 = var_language;

    tmp_compare_right_13 = const_unicode_plain_spanish;
    tmp_cmp_Eq_13 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_13, tmp_compare_right_13 );
    if ( tmp_cmp_Eq_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3259;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_13 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_called_name_14 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_called_name_14 == NULL ))
    {
        tmp_called_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_called_name_14 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3260;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3260;
    tmp_assign_source_26 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, &PyTuple_GET_ITEM( const_tuple_unicode_plain_spanish_tuple, 0 ) );

    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3260;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmer;
        var_stemmer = tmp_assign_source_26;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_12 = 0;
    tmp_slice_index_upper_12 = 300;
    tmp_called_instance_12 = var_udhr;

    frame_function->f_lineno = 3261;
    tmp_slice_source_12 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_12, const_str_plain_words, &PyTuple_GET_ITEM( const_tuple_unicode_digest_1737b60e1e3799cec4e3066da44e189b_tuple, 0 ) );

    if ( tmp_slice_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3261;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_27 = LOOKUP_INDEX_SLICE( tmp_slice_source_12, tmp_sliceslicedel_index_lower_12, tmp_slice_index_upper_12 );
    Py_DECREF( tmp_slice_source_12 );
    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3261;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_27;
        Py_XDECREF( old );
    }

    goto branch_end_13;
    branch_no_13:;
    tmp_compare_left_14 = var_language;

    tmp_compare_right_14 = const_unicode_plain_swedish;
    tmp_cmp_Eq_14 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_14, tmp_compare_right_14 );
    if ( tmp_cmp_Eq_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3262;
        goto frame_exception_exit_1;
    }
    if ( tmp_cmp_Eq_14 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_called_name_15 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_called_name_15 == NULL ))
    {
        tmp_called_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_called_name_15 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "global name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 3263;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3263;
    tmp_assign_source_28 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, &PyTuple_GET_ITEM( const_tuple_unicode_plain_swedish_tuple, 0 ) );

    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3263;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmer;
        var_stemmer = tmp_assign_source_28;
        Py_XDECREF( old );
    }

    tmp_sliceslicedel_index_lower_13 = 0;
    tmp_slice_index_upper_13 = 300;
    tmp_called_instance_13 = var_udhr;

    frame_function->f_lineno = 3264;
    tmp_slice_source_13 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_13, const_str_plain_words, &PyTuple_GET_ITEM( const_tuple_unicode_digest_ed35aff149c3cd50410b4d18ad86e792_tuple, 0 ) );

    if ( tmp_slice_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3264;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_29 = LOOKUP_INDEX_SLICE( tmp_slice_source_13, tmp_sliceslicedel_index_lower_13, tmp_slice_index_upper_13 );
    Py_DECREF( tmp_slice_source_13 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3264;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_29;
        Py_XDECREF( old );
    }

    goto branch_end_14;
    branch_no_14:;
    tmp_print_value = const_unicode_digest_038f3890eedcee1b21b7d2364a09bcab;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3266;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3266;
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    branch_end_14:;
    branch_end_13:;
    branch_end_12:;
    branch_end_11:;
    branch_end_10:;
    branch_end_9:;
    branch_end_8:;
    branch_end_7:;
    branch_end_6:;
    branch_end_5:;
    branch_end_4:;
    branch_end_3:;
    branch_end_2:;
    branch_end_1:;
    tmp_source_name_3 = const_unicode_space;
    tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_join );
    assert( tmp_called_name_16 != NULL );
    // Tried code:
    tmp_iter_arg_1 = var_excerpt;

    if ( tmp_iter_arg_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "excerpt" );
        exception_tb = NULL;

        exception_lineno = 3270;
        goto try_except_handler_2;
    }

    tmp_assign_source_31 = MAKE_ITERATOR( tmp_iter_arg_1 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3270;
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_list_contraction_1__$0;
        tmp_list_contraction_1__$0 = tmp_assign_source_31;
        Py_XDECREF( old );
    }

    tmp_assign_source_32 = PyList_New( 0 );
    {
        PyObject *old = tmp_list_contraction_1__contraction_result;
        tmp_list_contraction_1__contraction_result = tmp_assign_source_32;
        Py_XDECREF( old );
    }

    loop_start_2:;
    tmp_next_source_1 = tmp_list_contraction_1__$0;

    tmp_assign_source_33 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_33 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            PyThreadState_GET()->frame->f_lineno = 3270;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_list_contraction_1__iter_value_0;
        tmp_list_contraction_1__iter_value_0 = tmp_assign_source_33;
        Py_XDECREF( old );
    }

    tmp_assign_source_34 = tmp_list_contraction_1__iter_value_0;

    {
        PyObject *old = var_word;
        var_word = tmp_assign_source_34;
        Py_INCREF( var_word );
        Py_XDECREF( old );
    }

    tmp_append_list_1 = tmp_list_contraction_1__contraction_result;

    tmp_called_instance_14 = var_stemmer;

    if ( tmp_called_instance_14 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "stemmer" );
        exception_tb = NULL;

        exception_lineno = 3270;
        goto try_except_handler_2;
    }

    tmp_args_element_name_4 = var_word;

    PyThreadState_GET()->frame->f_lineno = 3270;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_append_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_14, const_str_plain_stem, call_args );
    }

    if ( tmp_append_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3270;
        goto try_except_handler_2;
    }
    assert( PyList_Check( tmp_append_list_1 ) );
    tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
    Py_DECREF( tmp_append_value_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3270;
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3270;
        goto try_except_handler_2;
    }
    goto loop_start_2;
    loop_end_2:;
    tmp_outline_return_value_1 = tmp_list_contraction_1__contraction_result;

    Py_INCREF( tmp_outline_return_value_1 );
    goto try_return_handler_2;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$function_1_demo );
    return NULL;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_list_contraction_1__$0 );
    Py_DECREF( tmp_list_contraction_1__$0 );
    tmp_list_contraction_1__$0 = NULL;

    CHECK_OBJECT( (PyObject *)tmp_list_contraction_1__contraction_result );
    Py_DECREF( tmp_list_contraction_1__contraction_result );
    tmp_list_contraction_1__contraction_result = NULL;

    Py_XDECREF( tmp_list_contraction_1__iter_value_0 );
    tmp_list_contraction_1__iter_value_0 = NULL;

    goto outline_result_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_list_contraction_1__$0 );
    tmp_list_contraction_1__$0 = NULL;

    Py_XDECREF( tmp_list_contraction_1__contraction_result );
    tmp_list_contraction_1__contraction_result = NULL;

    Py_XDECREF( tmp_list_contraction_1__iter_value_0 );
    tmp_list_contraction_1__iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$function_1_demo );
    return NULL;
    outline_result_1:;
    tmp_args_element_name_3 = tmp_outline_return_value_1;
    frame_function->f_lineno = 3270;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_30 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, call_args );
    }

    Py_DECREF( tmp_called_name_16 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3270;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmed;
        var_stemmed = tmp_assign_source_30;
        Py_XDECREF( old );
    }

    tmp_source_name_4 = var_re;

    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_sub );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3271;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = const_str_digest_75b9a5f892ea679922632e6d2d7d662a;
    tmp_args_element_name_6 = const_str_digest_68cda404ee2dc137b693a4f3167c6d17;
    tmp_left_name_4 = var_stemmed;

    tmp_right_name_4 = const_unicode_space;
    tmp_args_element_name_7 = BINARY_OPERATION_ADD( tmp_left_name_4, tmp_right_name_4 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_17 );

        exception_lineno = 3271;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 3271;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_called_instance_15 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_17, call_args );
    }

    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_called_instance_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3271;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 3271;
    tmp_assign_source_35 = CALL_METHOD_NO_ARGS( tmp_called_instance_15, const_str_plain_rstrip );
    Py_DECREF( tmp_called_instance_15 );
    if ( tmp_assign_source_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3271;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_stemmed;
        assert( old != NULL );
        var_stemmed = tmp_assign_source_35;
        Py_DECREF( old );
    }

    tmp_source_name_5 = const_unicode_space;
    tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_join );
    assert( tmp_called_name_18 != NULL );
    tmp_args_element_name_8 = var_excerpt;

    if ( tmp_args_element_name_8 == NULL )
    {
        Py_DECREF( tmp_called_name_18 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "local variable '%s' referenced before assignment", "excerpt" );
        exception_tb = NULL;

        exception_lineno = 3272;
        goto frame_exception_exit_1;
    }

    frame_function->f_lineno = 3272;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_assign_source_36 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_18, call_args );
    }

    Py_DECREF( tmp_called_name_18 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3272;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        var_excerpt = tmp_assign_source_36;
        Py_XDECREF( old );
    }

    tmp_source_name_6 = var_re;

    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_sub );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3273;
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = const_str_digest_75b9a5f892ea679922632e6d2d7d662a;
    tmp_args_element_name_10 = const_str_digest_68cda404ee2dc137b693a4f3167c6d17;
    tmp_left_name_5 = var_excerpt;

    tmp_right_name_5 = const_unicode_space;
    tmp_args_element_name_11 = BINARY_OPERATION_ADD( tmp_left_name_5, tmp_right_name_5 );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_19 );

        exception_lineno = 3273;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 3273;
    {
        PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_11 };
        tmp_called_instance_16 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_19, call_args );
    }

    Py_DECREF( tmp_called_name_19 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_called_instance_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3273;
        goto frame_exception_exit_1;
    }
    frame_function->f_lineno = 3273;
    tmp_assign_source_37 = CALL_METHOD_NO_ARGS( tmp_called_instance_16, const_str_plain_rstrip );
    Py_DECREF( tmp_called_instance_16 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3273;
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_excerpt;
        assert( old != NULL );
        var_excerpt = tmp_assign_source_37;
        Py_DECREF( old );
    }

    tmp_print_value = const_unicode_newline;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3275;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3275;
        goto frame_exception_exit_1;
    }
    tmp_print_value = const_unicode_digest_56ba0b0039dcafb80583c021ac6f64cc;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3276;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3276;
        goto frame_exception_exit_1;
    }
    tmp_called_instance_17 = const_unicode_plain_ORIGINAL;
    frame_function->f_lineno = 3277;
    tmp_print_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_17, const_str_plain_center, &PyTuple_GET_ITEM( const_tuple_int_pos_70_tuple, 0 ) );

    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3277;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        exception_lineno = 3277;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3277;
        goto frame_exception_exit_1;
    }
    tmp_print_value = var_excerpt;

    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3278;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3278;
        goto frame_exception_exit_1;
    }
    tmp_print_value = const_unicode_digest_09bc009ffd858aaf58df7e98266d9b89;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3279;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3279;
        goto frame_exception_exit_1;
    }
    tmp_called_instance_18 = const_unicode_digest_6417e272e31675efd6de9d067f962404;
    frame_function->f_lineno = 3280;
    tmp_print_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_18, const_str_plain_center, &PyTuple_GET_ITEM( const_tuple_int_pos_70_tuple, 0 ) );

    if ( tmp_print_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3280;
        goto frame_exception_exit_1;
    }
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_print_value );

        exception_lineno = 3280;
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_print_value );
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3280;
        goto frame_exception_exit_1;
    }
    tmp_print_value = var_stemmed;

    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3281;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3281;
        goto frame_exception_exit_1;
    }
    tmp_print_value = const_unicode_digest_56ba0b0039dcafb80583c021ac6f64cc;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3282;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3282;
        goto frame_exception_exit_1;
    }
    tmp_print_value = const_unicode_newline;
    if ( PRINT_ITEM( tmp_print_value ) == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3283;
        goto frame_exception_exit_1;
    }
    if ( PRINT_NEW_LINE() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3283;
        goto frame_exception_exit_1;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3215;
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif
    // Put the previous frame back on top.
    popFrameStack();
#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );
    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_function );
#endif

    {
        bool needs_detach = false;

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_function, exception_lineno );
            needs_detach = true;
        }
        else if ( exception_lineno != -1 )
        {
            PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_function, exception_lineno );
            traceback_new->tb_next = exception_tb;
            exception_tb = traceback_new;

            needs_detach = true;
        }

        if (needs_detach)
        {

            tmp_frame_locals = PyDict_New();
            if ( var_re )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_re,
                    var_re
                );

                assert( res == 0 );
            }

            if ( var_udhr )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_udhr,
                    var_udhr
                );

                assert( res == 0 );
            }

            if ( var_language )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_language,
                    var_language
                );

                assert( res == 0 );
            }

            if ( var_stemmer )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_stemmer,
                    var_stemmer
                );

                assert( res == 0 );
            }

            if ( var_excerpt )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_excerpt,
                    var_excerpt
                );

                assert( res == 0 );
            }

            if ( var_word )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_word,
                    var_word
                );

                assert( res == 0 );
            }

            if ( var_stemmed )
            {
                int res = PyDict_SetItem(
                    tmp_frame_locals,
                    const_str_plain_stemmed,
                    var_stemmed
                );

                assert( res == 0 );
            }



            detachFrame( exception_tb, tmp_frame_locals );
        }
    }

    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_function->f_executing -= 1;
#endif
    Py_DECREF( frame_function );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$function_1_demo );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var_re );
    Py_DECREF( var_re );
    var_re = NULL;

    CHECK_OBJECT( (PyObject *)var_udhr );
    Py_DECREF( var_udhr );
    var_udhr = NULL;

    CHECK_OBJECT( (PyObject *)var_language );
    Py_DECREF( var_language );
    var_language = NULL;

    Py_XDECREF( var_stemmer );
    var_stemmer = NULL;

    Py_XDECREF( var_excerpt );
    var_excerpt = NULL;

    Py_XDECREF( var_word );
    var_word = NULL;

    Py_XDECREF( var_stemmed );
    var_stemmed = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( var_re );
    var_re = NULL;

    Py_XDECREF( var_udhr );
    var_udhr = NULL;

    Py_XDECREF( var_language );
    var_language = NULL;

    Py_XDECREF( var_stemmer );
    var_stemmer = NULL;

    Py_XDECREF( var_excerpt );
    var_excerpt = NULL;

    Py_XDECREF( var_word );
    var_word = NULL;

    Py_XDECREF( var_stemmed );
    var_stemmed = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( nltk$stem$snowball$$$function_1_demo );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_10_ItalianStemmer$$$function_1_stem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_10_ItalianStemmer$$$function_1_stem,
        const_str_plain_stem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3b7a6830f9db608ff7a466fa87e07c1a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_5c44415f6ed9e791b54dc6fa231033cb,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_11_NorwegianStemmer$$$function_1_stem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_11_NorwegianStemmer$$$function_1_stem,
        const_str_plain_stem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b5b69d6e30ecfcc2bbdf301ba1783573,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_fa2751934f9ca2cad0b25c6f6122fb13,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_12_PortugueseStemmer$$$function_1_stem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_12_PortugueseStemmer$$$function_1_stem,
        const_str_plain_stem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f5d007b48c80586982a1e994dfc49279,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_0d91f930432018bb18ffb16b7a67f790,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_13_RomanianStemmer$$$function_1_stem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_13_RomanianStemmer$$$function_1_stem,
        const_str_plain_stem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c291c3a3150eaddb0391313781f9c5e8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_75a810c13d55d8b1a714194a3f83e70b,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_1_stem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_1_stem,
        const_str_plain_stem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b8e3267eed385f2afcfa7820714635b8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_c19ed4ecc1fef767495e0e340b43a2ea,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_2___regions_russian(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_2___regions_russian,
        const_str_plain___regions_russian,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0e81928e7aeb07816c6a2f33bb9fc9d3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_6bb7032994e2ecddb72007dc1a2f8ad1,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_3___cyrillic_to_roman(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_3___cyrillic_to_roman,
        const_str_plain___cyrillic_to_roman,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c7fb3173e9bd546d002cfa28c8a4468c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_09379b5ee1ff611b09e0163788e986cf,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_4___roman_to_cyrillic(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_14_RussianStemmer$$$function_4___roman_to_cyrillic,
        const_str_plain___roman_to_cyrillic,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4e74bcc9a19b69bc9cadf240f2165ca1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_8c8e4b6bd23cf2e7692e4c9913649e65,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_15_SpanishStemmer$$$function_1_stem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_15_SpanishStemmer$$$function_1_stem,
        const_str_plain_stem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bf12e7d340de9a095d26f12b190c4152,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_8f6a7814126e381258f9b1f64b393e62,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_16_SwedishStemmer$$$function_1_stem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_16_SwedishStemmer$$$function_1_stem,
        const_str_plain_stem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4cc9a59394940b6b38dc5c650346725d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_c8044251e6b6f1cdce09ea056e961ef9,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_1___new__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_1___new__,
        const_str_plain___new__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a996ca38f0445b44e45ba5eb069e4574,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_e6b89c1d38160e6677c4bb9f081e6c5c,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_2___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_2___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_243c4190efbb3c785a0635605d43f575,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_b428152830fa2709bfae80a9618c6525,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_3___repr__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_1_SnowballStemmer$$$function_3___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d05027475ab0453d912e220ccd2119c9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_56efed22f0179fa5c50d8d8a65abb7a7,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_2__ScandinavianStemmer$$$function_1__r1_scandinavian(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_2__ScandinavianStemmer$$$function_1__r1_scandinavian,
        const_str_plain__r1_scandinavian,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e33d382ef1750bd8c017514a1536a042,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_835ae20366f52774a0028b17a200037f,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_3__StandardStemmer$$$function_1__r1r2_standard(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_3__StandardStemmer$$$function_1__r1r2_standard,
        const_str_plain__r1r2_standard,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_db9382194eb17074b035efca03ecccdd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_ed1edf7feaa5fdc8aac633ccea30b6dd,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_3__StandardStemmer$$$function_2__rv_standard(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_3__StandardStemmer$$$function_2__rv_standard,
        const_str_plain__rv_standard,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_73e63468ae4bbcaa58e6727983b3ecfb,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_5d716e0e0c126123060ed96d8b60763a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_4_DanishStemmer$$$function_1_stem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_4_DanishStemmer$$$function_1_stem,
        const_str_plain_stem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2234ca157113cfc2c16998e25bd077a1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_beac4342d59d3a7b563dc5eede05b77a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_5_DutchStemmer$$$function_1_stem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_5_DutchStemmer$$$function_1_stem,
        const_str_plain_stem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5925dadbdbcb7522f2840618af6470ad,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_e754c22dbff07c1f09acf2d98e4c2501,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_6_FinnishStemmer$$$function_1_stem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_6_FinnishStemmer$$$function_1_stem,
        const_str_plain_stem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ccfa7c786e79bfc49a82689d5dcf8f55,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_6667a34fda61468463f1f7f60bc9760f,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_1_stem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_1_stem,
        const_str_plain_stem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_036c5898c5d68d401edf79ea0b1c72fd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_20042556b9dae87c3a9051aba782c2ad,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_2___rv_french(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_7_FrenchStemmer$$$function_2___rv_french,
        const_str_plain___rv_french,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3fed6816e3a20e546c6c4bc55e0c98aa,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_4146a4126dfa7199bdd957a83f1a5d45,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_8_GermanStemmer$$$function_1_stem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_8_GermanStemmer$$$function_1_stem,
        const_str_plain_stem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1c71aba6b7d55771191b8babc12b24ba,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_b33cd26bbcfa97d19a9a4f51b91d38e9,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_1_stem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_1_stem,
        const_str_plain_stem,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_dd2928d8e8c41c79730127e0ebcb14f3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_04a20b4e03cace659924c6aa2933c949,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_2___r1_hungarian(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$class_9_HungarianStemmer$$$function_2___r1_hungarian,
        const_str_plain___r1_hungarian,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b43fa8fb94544c04a6f2d05e9123b316,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_0f730b2c3258f3fadc9b3f78c97c81ea,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_nltk$stem$snowball$$$function_1_demo(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_nltk$stem$snowball$$$function_1_demo,
        const_str_plain_demo,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a23e49f2726f6f860501c7287cb93d0c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_nltk$stem$snowball,
        const_unicode_digest_2274517caed1fbe8acda049ccf86c576,
        0
    );


    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_nltk$stem$snowball =
{
    PyModuleDef_HEAD_INIT,
    "nltk.stem.snowball",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#if PYTHON_VERSION >= 300
extern PyObject *metapath_based_loader;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineType();
extern void _initCompiledCoroutineWrapperType();
#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( nltk$stem$snowball )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_nltk$stem$snowball );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();

#if PYTHON_VERSION >= 350
    _initCompiledCoroutineType();
    _initCompiledCoroutineWrapperType();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("nltk.stem.snowball: Calling createModuleConstants().");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("nltk.stem.snowball: Calling createModuleCodeObjects().");
#endif
    createModuleCodeObjects();

    // puts( "in initnltk$stem$snowball" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_nltk$stem$snowball = Py_InitModule4(
        "nltk.stem.snowball",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_nltk$stem$snowball = PyModule_Create( &mdef_nltk$stem$snowball );
#endif

    moduledict_nltk$stem$snowball = (PyDictObject *)((PyModuleObject *)module_nltk$stem$snowball)->md_dict;

    CHECK_OBJECT( module_nltk$stem$snowball );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_digest_58494c585006c17a0e20f33e08f63673, module_nltk$stem$snowball );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( module_nltk$stem$snowball );

    if ( PyDict_GetItem( module_dict, const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, const_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
    PyDict_SetItem( module_dict, const_str_plain___loader__, metapath_based_loader );
#endif

    // Temp variables if any
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__class = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__class_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__class = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__class_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__class = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__class_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__class = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__class_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__class = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__class_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__class = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__class_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__class = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__class_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_8__class = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__class_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_class_creation_9__class = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__class_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_10__class = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__class_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_11__class = NULL;
    PyObject *tmp_class_creation_12__bases = NULL;
    PyObject *tmp_class_creation_12__class_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_12__class = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__class_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_13__class = NULL;
    PyObject *tmp_class_creation_14__bases = NULL;
    PyObject *tmp_class_creation_14__class_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_14__class = NULL;
    PyObject *tmp_class_creation_15__bases = NULL;
    PyObject *tmp_class_creation_15__class_dict = NULL;
    PyObject *tmp_class_creation_15__metaclass = NULL;
    PyObject *tmp_class_creation_15__class = NULL;
    PyObject *tmp_class_creation_16__bases = NULL;
    PyObject *tmp_class_creation_16__class_dict = NULL;
    PyObject *tmp_class_creation_16__metaclass = NULL;
    PyObject *tmp_class_creation_16__class = NULL;
    PyObject *exception_type = NULL, *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = -1;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_element_name_43;
    PyObject *tmp_args_element_name_44;
    PyObject *tmp_args_element_name_45;
    PyObject *tmp_args_element_name_46;
    PyObject *tmp_args_element_name_47;
    PyObject *tmp_args_element_name_48;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_bases_name_1;
    PyObject *tmp_bases_name_2;
    PyObject *tmp_bases_name_3;
    PyObject *tmp_bases_name_4;
    PyObject *tmp_bases_name_5;
    PyObject *tmp_bases_name_6;
    PyObject *tmp_bases_name_7;
    PyObject *tmp_bases_name_8;
    PyObject *tmp_bases_name_9;
    PyObject *tmp_bases_name_10;
    PyObject *tmp_bases_name_11;
    PyObject *tmp_bases_name_12;
    PyObject *tmp_bases_name_13;
    PyObject *tmp_bases_name_14;
    PyObject *tmp_bases_name_15;
    PyObject *tmp_bases_name_16;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    int tmp_cmp_In_10;
    int tmp_cmp_In_11;
    int tmp_cmp_In_12;
    int tmp_cmp_In_13;
    int tmp_cmp_In_14;
    int tmp_cmp_In_15;
    int tmp_cmp_In_16;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_dict_name_1;
    PyObject *tmp_dict_name_2;
    PyObject *tmp_dict_name_3;
    PyObject *tmp_dict_name_4;
    PyObject *tmp_dict_name_5;
    PyObject *tmp_dict_name_6;
    PyObject *tmp_dict_name_7;
    PyObject *tmp_dict_name_8;
    PyObject *tmp_dict_name_9;
    PyObject *tmp_dict_name_10;
    PyObject *tmp_dict_name_11;
    PyObject *tmp_dict_name_12;
    PyObject *tmp_dict_name_13;
    PyObject *tmp_dict_name_14;
    PyObject *tmp_dict_name_15;
    PyObject *tmp_dict_name_16;
    PyObject *tmp_import_globals_1;
    PyObject *tmp_import_globals_2;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_key_name_1;
    PyObject *tmp_key_name_2;
    PyObject *tmp_key_name_3;
    PyObject *tmp_key_name_4;
    PyObject *tmp_key_name_5;
    PyObject *tmp_key_name_6;
    PyObject *tmp_key_name_7;
    PyObject *tmp_key_name_8;
    PyObject *tmp_key_name_9;
    PyObject *tmp_key_name_10;
    PyObject *tmp_key_name_11;
    PyObject *tmp_key_name_12;
    PyObject *tmp_key_name_13;
    PyObject *tmp_key_name_14;
    PyObject *tmp_key_name_15;
    PyObject *tmp_key_name_16;
    bool tmp_result;
    PyObject *tmp_star_imported_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_tuple_element_13;
    PyObject *tmp_tuple_element_14;
    PyObject *tmp_tuple_element_15;
    PyObject *tmp_tuple_element_16;
    PyFrameObject *frame_module;


    // Module code.
    tmp_assign_source_1 = const_unicode_digest_48a5e5414e404390c40aa90eef5b408f;
    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = const_str_digest_16d3a0b90457c34a4aa3a9ea88cd53fa;
    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    // Frame without reuse.
    frame_module = MAKE_MODULE_FRAME( codeobj_e0fb2f7f15383b3c5cf041d32e1eb5ce, module_nltk$stem$snowball );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_module );
    assert( Py_REFCNT( frame_module ) == 1 );

#if PYTHON_VERSION >= 340
    frame_module->f_executing += 1;
#endif

    // Framed code:
    tmp_import_globals_1 = ((PyModuleObject *)module_nltk$stem$snowball)->md_dict;
    frame_module->f_lineno = 26;
    tmp_star_imported_1 = IMPORT_MODULE( const_str_plain_api, tmp_import_globals_1, Py_None, const_tuple_str_chr_42_tuple, const_int_neg_1 );
    if ( tmp_star_imported_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto frame_exception_exit_1;
    }
    tmp_result = IMPORT_MODULE_STAR( module_nltk$stem$snowball, true, tmp_star_imported_1 );
    Py_DECREF( tmp_star_imported_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 26;
        goto frame_exception_exit_1;
    }
    tmp_import_globals_2 = ((PyModuleObject *)module_nltk$stem$snowball)->md_dict;
    frame_module->f_lineno = 27;
    tmp_import_name_from_1 = IMPORT_MODULE( const_str_digest_f58de60a0881ce5c15d7da6b10750aee, tmp_import_globals_2, Py_None, const_tuple_str_plain_stopwords_tuple, const_int_neg_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 27;
        goto frame_exception_exit_1;
    }
    tmp_assign_source_3 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_stopwords );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 27;
        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_stopwords, tmp_assign_source_3 );
    // Tried code:
    tmp_assign_source_4 = PyTuple_New( 1 );
    tmp_tuple_element_1 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_StemmerI );

    if (unlikely( tmp_tuple_element_1 == NULL ))
    {
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StemmerI );
    }

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "StemmerI" );
        exception_tb = NULL;

        exception_lineno = 30;
        goto try_except_handler_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_assign_source_4, 0, tmp_tuple_element_1 );
    assert( tmp_class_creation_1__bases == NULL );
    tmp_class_creation_1__bases = tmp_assign_source_4;

    tmp_assign_source_5 = impl_nltk$stem$snowball$$$class_1_SnowballStemmer( NULL );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_1;
    }
    assert( tmp_class_creation_1__class_dict == NULL );
    tmp_class_creation_1__class_dict = tmp_assign_source_5;

    tmp_compare_left_1 = const_str_plain___metaclass__;
    tmp_compare_right_1 = tmp_class_creation_1__class_dict;

    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dict_name_1 = tmp_class_creation_1__class_dict;

    tmp_key_name_1 = const_str_plain___metaclass__;
    tmp_assign_source_6 = DICT_GET_ITEM( tmp_dict_name_1, tmp_key_name_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_1;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_bases_name_1 = tmp_class_creation_1__bases;

    tmp_assign_source_6 = SELECT_METACLASS( tmp_bases_name_1, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_1:;
    assert( tmp_class_creation_1__metaclass == NULL );
    tmp_class_creation_1__metaclass = tmp_assign_source_6;

    tmp_called_name_1 = tmp_class_creation_1__metaclass;

    tmp_args_element_name_1 = const_str_plain_SnowballStemmer;
    tmp_args_element_name_2 = tmp_class_creation_1__bases;

    tmp_args_element_name_3 = tmp_class_creation_1__class_dict;

    frame_module->f_lineno = 30;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 30;
        goto try_except_handler_1;
    }
    assert( tmp_class_creation_1__class == NULL );
    tmp_class_creation_1__class = tmp_assign_source_7;

    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    tmp_assign_source_8 = tmp_class_creation_1__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer, tmp_assign_source_8 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class );
    Py_DECREF( tmp_class_creation_1__class );
    tmp_class_creation_1__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_dict );
    Py_DECREF( tmp_class_creation_1__class_dict );
    tmp_class_creation_1__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    // Tried code:
    tmp_assign_source_9 = PyTuple_New( 1 );
    tmp_tuple_element_2 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_tuple_element_2 == NULL ))
    {
        tmp_tuple_element_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_assign_source_9 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 152;
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_assign_source_9, 0, tmp_tuple_element_2 );
    assert( tmp_class_creation_2__bases == NULL );
    tmp_class_creation_2__bases = tmp_assign_source_9;

    tmp_assign_source_10 = impl_nltk$stem$snowball$$$class_2__ScandinavianStemmer( NULL );
    assert( tmp_assign_source_10 != NULL );
    assert( tmp_class_creation_2__class_dict == NULL );
    tmp_class_creation_2__class_dict = tmp_assign_source_10;

    tmp_compare_left_2 = const_str_plain___metaclass__;
    tmp_compare_right_2 = tmp_class_creation_2__class_dict;

    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_dict_name_2 = tmp_class_creation_2__class_dict;

    tmp_key_name_2 = const_str_plain___metaclass__;
    tmp_assign_source_11 = DICT_GET_ITEM( tmp_dict_name_2, tmp_key_name_2 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto try_except_handler_2;
    }
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_bases_name_2 = tmp_class_creation_2__bases;

    tmp_assign_source_11 = SELECT_METACLASS( tmp_bases_name_2, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_2:;
    assert( tmp_class_creation_2__metaclass == NULL );
    tmp_class_creation_2__metaclass = tmp_assign_source_11;

    tmp_called_name_2 = tmp_class_creation_2__metaclass;

    tmp_args_element_name_4 = const_str_plain__ScandinavianStemmer;
    tmp_args_element_name_5 = tmp_class_creation_2__bases;

    tmp_args_element_name_6 = tmp_class_creation_2__class_dict;

    frame_module->f_lineno = 152;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_assign_source_12 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
    }

    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 152;
        goto try_except_handler_2;
    }
    assert( tmp_class_creation_2__class == NULL );
    tmp_class_creation_2__class = tmp_assign_source_12;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    Py_XDECREF( tmp_class_creation_2__class_dict );
    tmp_class_creation_2__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    tmp_assign_source_13 = tmp_class_creation_2__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain__ScandinavianStemmer, tmp_assign_source_13 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class );
    Py_DECREF( tmp_class_creation_2__class );
    tmp_class_creation_2__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__bases );
    Py_DECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_dict );
    Py_DECREF( tmp_class_creation_2__class_dict );
    tmp_class_creation_2__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__metaclass );
    Py_DECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    // Tried code:
    tmp_assign_source_14 = PyTuple_New( 1 );
    tmp_tuple_element_3 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_tuple_element_3 == NULL ))
    {
        tmp_tuple_element_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_tuple_element_3 == NULL )
    {
        Py_DECREF( tmp_assign_source_14 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 196;
        goto try_except_handler_3;
    }

    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_assign_source_14, 0, tmp_tuple_element_3 );
    assert( tmp_class_creation_3__bases == NULL );
    tmp_class_creation_3__bases = tmp_assign_source_14;

    tmp_assign_source_15 = impl_nltk$stem$snowball$$$class_3__StandardStemmer( NULL );
    assert( tmp_assign_source_15 != NULL );
    assert( tmp_class_creation_3__class_dict == NULL );
    tmp_class_creation_3__class_dict = tmp_assign_source_15;

    tmp_compare_left_3 = const_str_plain___metaclass__;
    tmp_compare_right_3 = tmp_class_creation_3__class_dict;

    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_dict_name_3 = tmp_class_creation_3__class_dict;

    tmp_key_name_3 = const_str_plain___metaclass__;
    tmp_assign_source_16 = DICT_GET_ITEM( tmp_dict_name_3, tmp_key_name_3 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 196;
        goto try_except_handler_3;
    }
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_bases_name_3 = tmp_class_creation_3__bases;

    tmp_assign_source_16 = SELECT_METACLASS( tmp_bases_name_3, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_3:;
    assert( tmp_class_creation_3__metaclass == NULL );
    tmp_class_creation_3__metaclass = tmp_assign_source_16;

    tmp_called_name_3 = tmp_class_creation_3__metaclass;

    tmp_args_element_name_7 = const_str_plain__StandardStemmer;
    tmp_args_element_name_8 = tmp_class_creation_3__bases;

    tmp_args_element_name_9 = tmp_class_creation_3__class_dict;

    frame_module->f_lineno = 196;
    {
        PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9 };
        tmp_assign_source_17 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_3, call_args );
    }

    if ( tmp_assign_source_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 196;
        goto try_except_handler_3;
    }
    assert( tmp_class_creation_3__class == NULL );
    tmp_class_creation_3__class = tmp_assign_source_17;

    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    Py_XDECREF( tmp_class_creation_3__class_dict );
    tmp_class_creation_3__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    tmp_assign_source_18 = tmp_class_creation_3__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain__StandardStemmer, tmp_assign_source_18 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class );
    Py_DECREF( tmp_class_creation_3__class );
    tmp_class_creation_3__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__bases );
    Py_DECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class_dict );
    Py_DECREF( tmp_class_creation_3__class_dict );
    tmp_class_creation_3__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__metaclass );
    Py_DECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    // Tried code:
    tmp_assign_source_19 = PyTuple_New( 1 );
    tmp_tuple_element_4 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain__ScandinavianStemmer );

    if (unlikely( tmp_tuple_element_4 == NULL ))
    {
        tmp_tuple_element_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__ScandinavianStemmer );
    }

    if ( tmp_tuple_element_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_ScandinavianStemmer" );
        exception_tb = NULL;

        exception_lineno = 292;
        goto try_except_handler_4;
    }

    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_assign_source_19, 0, tmp_tuple_element_4 );
    assert( tmp_class_creation_4__bases == NULL );
    tmp_class_creation_4__bases = tmp_assign_source_19;

    tmp_assign_source_20 = impl_nltk$stem$snowball$$$class_4_DanishStemmer( NULL );
    assert( tmp_assign_source_20 != NULL );
    assert( tmp_class_creation_4__class_dict == NULL );
    tmp_class_creation_4__class_dict = tmp_assign_source_20;

    tmp_compare_left_4 = const_str_plain___metaclass__;
    tmp_compare_right_4 = tmp_class_creation_4__class_dict;

    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_dict_name_4 = tmp_class_creation_4__class_dict;

    tmp_key_name_4 = const_str_plain___metaclass__;
    tmp_assign_source_21 = DICT_GET_ITEM( tmp_dict_name_4, tmp_key_name_4 );
    if ( tmp_assign_source_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;
        goto try_except_handler_4;
    }
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_bases_name_4 = tmp_class_creation_4__bases;

    tmp_assign_source_21 = SELECT_METACLASS( tmp_bases_name_4, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_4:;
    assert( tmp_class_creation_4__metaclass == NULL );
    tmp_class_creation_4__metaclass = tmp_assign_source_21;

    tmp_called_name_4 = tmp_class_creation_4__metaclass;

    tmp_args_element_name_10 = const_str_plain_DanishStemmer;
    tmp_args_element_name_11 = tmp_class_creation_4__bases;

    tmp_args_element_name_12 = tmp_class_creation_4__class_dict;

    frame_module->f_lineno = 292;
    {
        PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 };
        tmp_assign_source_22 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, call_args );
    }

    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;
        goto try_except_handler_4;
    }
    assert( tmp_class_creation_4__class == NULL );
    tmp_class_creation_4__class = tmp_assign_source_22;

    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    Py_XDECREF( tmp_class_creation_4__class_dict );
    tmp_class_creation_4__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    tmp_assign_source_23 = tmp_class_creation_4__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_DanishStemmer, tmp_assign_source_23 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class );
    Py_DECREF( tmp_class_creation_4__class );
    tmp_class_creation_4__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__bases );
    Py_DECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class_dict );
    Py_DECREF( tmp_class_creation_4__class_dict );
    tmp_class_creation_4__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__metaclass );
    Py_DECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    // Tried code:
    tmp_assign_source_24 = PyTuple_New( 1 );
    tmp_tuple_element_5 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain__StandardStemmer );

    if (unlikely( tmp_tuple_element_5 == NULL ))
    {
        tmp_tuple_element_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__StandardStemmer );
    }

    if ( tmp_tuple_element_5 == NULL )
    {
        Py_DECREF( tmp_assign_source_24 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_StandardStemmer" );
        exception_tb = NULL;

        exception_lineno = 412;
        goto try_except_handler_5;
    }

    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_assign_source_24, 0, tmp_tuple_element_5 );
    assert( tmp_class_creation_5__bases == NULL );
    tmp_class_creation_5__bases = tmp_assign_source_24;

    tmp_assign_source_25 = impl_nltk$stem$snowball$$$class_5_DutchStemmer( NULL );
    assert( tmp_assign_source_25 != NULL );
    assert( tmp_class_creation_5__class_dict == NULL );
    tmp_class_creation_5__class_dict = tmp_assign_source_25;

    tmp_compare_left_5 = const_str_plain___metaclass__;
    tmp_compare_right_5 = tmp_class_creation_5__class_dict;

    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_In_5 == -1) );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_dict_name_5 = tmp_class_creation_5__class_dict;

    tmp_key_name_5 = const_str_plain___metaclass__;
    tmp_assign_source_26 = DICT_GET_ITEM( tmp_dict_name_5, tmp_key_name_5 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 412;
        goto try_except_handler_5;
    }
    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_bases_name_5 = tmp_class_creation_5__bases;

    tmp_assign_source_26 = SELECT_METACLASS( tmp_bases_name_5, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_5:;
    assert( tmp_class_creation_5__metaclass == NULL );
    tmp_class_creation_5__metaclass = tmp_assign_source_26;

    tmp_called_name_5 = tmp_class_creation_5__metaclass;

    tmp_args_element_name_13 = const_str_plain_DutchStemmer;
    tmp_args_element_name_14 = tmp_class_creation_5__bases;

    tmp_args_element_name_15 = tmp_class_creation_5__class_dict;

    frame_module->f_lineno = 412;
    {
        PyObject *call_args[] = { tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15 };
        tmp_assign_source_27 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
    }

    if ( tmp_assign_source_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 412;
        goto try_except_handler_5;
    }
    assert( tmp_class_creation_5__class == NULL );
    tmp_class_creation_5__class = tmp_assign_source_27;

    goto try_end_5;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    Py_XDECREF( tmp_class_creation_5__class_dict );
    tmp_class_creation_5__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    tmp_assign_source_28 = tmp_class_creation_5__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_DutchStemmer, tmp_assign_source_28 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class );
    Py_DECREF( tmp_class_creation_5__class );
    tmp_class_creation_5__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__bases );
    Py_DECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class_dict );
    Py_DECREF( tmp_class_creation_5__class_dict );
    tmp_class_creation_5__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__metaclass );
    Py_DECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    // Tried code:
    tmp_assign_source_29 = PyTuple_New( 1 );
    tmp_tuple_element_6 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain__StandardStemmer );

    if (unlikely( tmp_tuple_element_6 == NULL ))
    {
        tmp_tuple_element_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__StandardStemmer );
    }

    if ( tmp_tuple_element_6 == NULL )
    {
        Py_DECREF( tmp_assign_source_29 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_StandardStemmer" );
        exception_tb = NULL;

        exception_lineno = 588;
        goto try_except_handler_6;
    }

    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_assign_source_29, 0, tmp_tuple_element_6 );
    assert( tmp_class_creation_6__bases == NULL );
    tmp_class_creation_6__bases = tmp_assign_source_29;

    tmp_assign_source_30 = impl_nltk$stem$snowball$$$class_6_FinnishStemmer( NULL );
    assert( tmp_assign_source_30 != NULL );
    assert( tmp_class_creation_6__class_dict == NULL );
    tmp_class_creation_6__class_dict = tmp_assign_source_30;

    tmp_compare_left_6 = const_str_plain___metaclass__;
    tmp_compare_right_6 = tmp_class_creation_6__class_dict;

    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    assert( !(tmp_cmp_In_6 == -1) );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto condexpr_true_6;
    }
    else
    {
        goto condexpr_false_6;
    }
    condexpr_true_6:;
    tmp_dict_name_6 = tmp_class_creation_6__class_dict;

    tmp_key_name_6 = const_str_plain___metaclass__;
    tmp_assign_source_31 = DICT_GET_ITEM( tmp_dict_name_6, tmp_key_name_6 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 588;
        goto try_except_handler_6;
    }
    goto condexpr_end_6;
    condexpr_false_6:;
    tmp_bases_name_6 = tmp_class_creation_6__bases;

    tmp_assign_source_31 = SELECT_METACLASS( tmp_bases_name_6, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_6:;
    assert( tmp_class_creation_6__metaclass == NULL );
    tmp_class_creation_6__metaclass = tmp_assign_source_31;

    tmp_called_name_6 = tmp_class_creation_6__metaclass;

    tmp_args_element_name_16 = const_str_plain_FinnishStemmer;
    tmp_args_element_name_17 = tmp_class_creation_6__bases;

    tmp_args_element_name_18 = tmp_class_creation_6__class_dict;

    frame_module->f_lineno = 588;
    {
        PyObject *call_args[] = { tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 };
        tmp_assign_source_32 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, call_args );
    }

    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 588;
        goto try_except_handler_6;
    }
    assert( tmp_class_creation_6__class == NULL );
    tmp_class_creation_6__class = tmp_assign_source_32;

    goto try_end_6;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    Py_XDECREF( tmp_class_creation_6__class_dict );
    tmp_class_creation_6__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    tmp_assign_source_33 = tmp_class_creation_6__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_FinnishStemmer, tmp_assign_source_33 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class );
    Py_DECREF( tmp_class_creation_6__class );
    tmp_class_creation_6__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__bases );
    Py_DECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class_dict );
    Py_DECREF( tmp_class_creation_6__class_dict );
    tmp_class_creation_6__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__metaclass );
    Py_DECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    // Tried code:
    tmp_assign_source_34 = PyTuple_New( 1 );
    tmp_tuple_element_7 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain__StandardStemmer );

    if (unlikely( tmp_tuple_element_7 == NULL ))
    {
        tmp_tuple_element_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__StandardStemmer );
    }

    if ( tmp_tuple_element_7 == NULL )
    {
        Py_DECREF( tmp_assign_source_34 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_StandardStemmer" );
        exception_tb = NULL;

        exception_lineno = 858;
        goto try_except_handler_7;
    }

    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_assign_source_34, 0, tmp_tuple_element_7 );
    assert( tmp_class_creation_7__bases == NULL );
    tmp_class_creation_7__bases = tmp_assign_source_34;

    tmp_assign_source_35 = impl_nltk$stem$snowball$$$class_7_FrenchStemmer( NULL );
    assert( tmp_assign_source_35 != NULL );
    assert( tmp_class_creation_7__class_dict == NULL );
    tmp_class_creation_7__class_dict = tmp_assign_source_35;

    tmp_compare_left_7 = const_str_plain___metaclass__;
    tmp_compare_right_7 = tmp_class_creation_7__class_dict;

    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    assert( !(tmp_cmp_In_7 == -1) );
    if ( tmp_cmp_In_7 == 1 )
    {
        goto condexpr_true_7;
    }
    else
    {
        goto condexpr_false_7;
    }
    condexpr_true_7:;
    tmp_dict_name_7 = tmp_class_creation_7__class_dict;

    tmp_key_name_7 = const_str_plain___metaclass__;
    tmp_assign_source_36 = DICT_GET_ITEM( tmp_dict_name_7, tmp_key_name_7 );
    if ( tmp_assign_source_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 858;
        goto try_except_handler_7;
    }
    goto condexpr_end_7;
    condexpr_false_7:;
    tmp_bases_name_7 = tmp_class_creation_7__bases;

    tmp_assign_source_36 = SELECT_METACLASS( tmp_bases_name_7, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_7:;
    assert( tmp_class_creation_7__metaclass == NULL );
    tmp_class_creation_7__metaclass = tmp_assign_source_36;

    tmp_called_name_7 = tmp_class_creation_7__metaclass;

    tmp_args_element_name_19 = const_str_plain_FrenchStemmer;
    tmp_args_element_name_20 = tmp_class_creation_7__bases;

    tmp_args_element_name_21 = tmp_class_creation_7__class_dict;

    frame_module->f_lineno = 858;
    {
        PyObject *call_args[] = { tmp_args_element_name_19, tmp_args_element_name_20, tmp_args_element_name_21 };
        tmp_assign_source_37 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, call_args );
    }

    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 858;
        goto try_except_handler_7;
    }
    assert( tmp_class_creation_7__class == NULL );
    tmp_class_creation_7__class = tmp_assign_source_37;

    goto try_end_7;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    Py_XDECREF( tmp_class_creation_7__class_dict );
    tmp_class_creation_7__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    tmp_assign_source_38 = tmp_class_creation_7__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_FrenchStemmer, tmp_assign_source_38 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__class );
    Py_DECREF( tmp_class_creation_7__class );
    tmp_class_creation_7__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__bases );
    Py_DECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__class_dict );
    Py_DECREF( tmp_class_creation_7__class_dict );
    tmp_class_creation_7__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__metaclass );
    Py_DECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    // Tried code:
    tmp_assign_source_39 = PyTuple_New( 1 );
    tmp_tuple_element_8 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain__StandardStemmer );

    if (unlikely( tmp_tuple_element_8 == NULL ))
    {
        tmp_tuple_element_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__StandardStemmer );
    }

    if ( tmp_tuple_element_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_39 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_StandardStemmer" );
        exception_tb = NULL;

        exception_lineno = 1213;
        goto try_except_handler_8;
    }

    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_assign_source_39, 0, tmp_tuple_element_8 );
    assert( tmp_class_creation_8__bases == NULL );
    tmp_class_creation_8__bases = tmp_assign_source_39;

    tmp_assign_source_40 = impl_nltk$stem$snowball$$$class_8_GermanStemmer( NULL );
    assert( tmp_assign_source_40 != NULL );
    assert( tmp_class_creation_8__class_dict == NULL );
    tmp_class_creation_8__class_dict = tmp_assign_source_40;

    tmp_compare_left_8 = const_str_plain___metaclass__;
    tmp_compare_right_8 = tmp_class_creation_8__class_dict;

    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_8 == -1) );
    if ( tmp_cmp_In_8 == 1 )
    {
        goto condexpr_true_8;
    }
    else
    {
        goto condexpr_false_8;
    }
    condexpr_true_8:;
    tmp_dict_name_8 = tmp_class_creation_8__class_dict;

    tmp_key_name_8 = const_str_plain___metaclass__;
    tmp_assign_source_41 = DICT_GET_ITEM( tmp_dict_name_8, tmp_key_name_8 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1213;
        goto try_except_handler_8;
    }
    goto condexpr_end_8;
    condexpr_false_8:;
    tmp_bases_name_8 = tmp_class_creation_8__bases;

    tmp_assign_source_41 = SELECT_METACLASS( tmp_bases_name_8, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_8:;
    assert( tmp_class_creation_8__metaclass == NULL );
    tmp_class_creation_8__metaclass = tmp_assign_source_41;

    tmp_called_name_8 = tmp_class_creation_8__metaclass;

    tmp_args_element_name_22 = const_str_plain_GermanStemmer;
    tmp_args_element_name_23 = tmp_class_creation_8__bases;

    tmp_args_element_name_24 = tmp_class_creation_8__class_dict;

    frame_module->f_lineno = 1213;
    {
        PyObject *call_args[] = { tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24 };
        tmp_assign_source_42 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_8, call_args );
    }

    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1213;
        goto try_except_handler_8;
    }
    assert( tmp_class_creation_8__class == NULL );
    tmp_class_creation_8__class = tmp_assign_source_42;

    goto try_end_8;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    Py_XDECREF( tmp_class_creation_8__class_dict );
    tmp_class_creation_8__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    tmp_assign_source_43 = tmp_class_creation_8__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_GermanStemmer, tmp_assign_source_43 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__class );
    Py_DECREF( tmp_class_creation_8__class );
    tmp_class_creation_8__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__bases );
    Py_DECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__class_dict );
    Py_DECREF( tmp_class_creation_8__class_dict );
    tmp_class_creation_8__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__metaclass );
    Py_DECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    // Tried code:
    tmp_assign_source_44 = PyTuple_New( 1 );
    tmp_tuple_element_9 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_tuple_element_9 == NULL ))
    {
        tmp_tuple_element_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_tuple_element_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_44 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 1359;
        goto try_except_handler_9;
    }

    Py_INCREF( tmp_tuple_element_9 );
    PyTuple_SET_ITEM( tmp_assign_source_44, 0, tmp_tuple_element_9 );
    assert( tmp_class_creation_9__bases == NULL );
    tmp_class_creation_9__bases = tmp_assign_source_44;

    tmp_assign_source_45 = impl_nltk$stem$snowball$$$class_9_HungarianStemmer( NULL );
    assert( tmp_assign_source_45 != NULL );
    assert( tmp_class_creation_9__class_dict == NULL );
    tmp_class_creation_9__class_dict = tmp_assign_source_45;

    tmp_compare_left_9 = const_str_plain___metaclass__;
    tmp_compare_right_9 = tmp_class_creation_9__class_dict;

    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    assert( !(tmp_cmp_In_9 == -1) );
    if ( tmp_cmp_In_9 == 1 )
    {
        goto condexpr_true_9;
    }
    else
    {
        goto condexpr_false_9;
    }
    condexpr_true_9:;
    tmp_dict_name_9 = tmp_class_creation_9__class_dict;

    tmp_key_name_9 = const_str_plain___metaclass__;
    tmp_assign_source_46 = DICT_GET_ITEM( tmp_dict_name_9, tmp_key_name_9 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1359;
        goto try_except_handler_9;
    }
    goto condexpr_end_9;
    condexpr_false_9:;
    tmp_bases_name_9 = tmp_class_creation_9__bases;

    tmp_assign_source_46 = SELECT_METACLASS( tmp_bases_name_9, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_9:;
    assert( tmp_class_creation_9__metaclass == NULL );
    tmp_class_creation_9__metaclass = tmp_assign_source_46;

    tmp_called_name_9 = tmp_class_creation_9__metaclass;

    tmp_args_element_name_25 = const_str_plain_HungarianStemmer;
    tmp_args_element_name_26 = tmp_class_creation_9__bases;

    tmp_args_element_name_27 = tmp_class_creation_9__class_dict;

    frame_module->f_lineno = 1359;
    {
        PyObject *call_args[] = { tmp_args_element_name_25, tmp_args_element_name_26, tmp_args_element_name_27 };
        tmp_assign_source_47 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_9, call_args );
    }

    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1359;
        goto try_except_handler_9;
    }
    assert( tmp_class_creation_9__class == NULL );
    tmp_class_creation_9__class = tmp_assign_source_47;

    goto try_end_9;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    Py_XDECREF( tmp_class_creation_9__class_dict );
    tmp_class_creation_9__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    tmp_assign_source_48 = tmp_class_creation_9__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_HungarianStemmer, tmp_assign_source_48 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__class );
    Py_DECREF( tmp_class_creation_9__class );
    tmp_class_creation_9__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__bases );
    Py_DECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__class_dict );
    Py_DECREF( tmp_class_creation_9__class_dict );
    tmp_class_creation_9__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__metaclass );
    Py_DECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    // Tried code:
    tmp_assign_source_49 = PyTuple_New( 1 );
    tmp_tuple_element_10 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain__StandardStemmer );

    if (unlikely( tmp_tuple_element_10 == NULL ))
    {
        tmp_tuple_element_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__StandardStemmer );
    }

    if ( tmp_tuple_element_10 == NULL )
    {
        Py_DECREF( tmp_assign_source_49 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_StandardStemmer" );
        exception_tb = NULL;

        exception_lineno = 1635;
        goto try_except_handler_10;
    }

    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_assign_source_49, 0, tmp_tuple_element_10 );
    assert( tmp_class_creation_10__bases == NULL );
    tmp_class_creation_10__bases = tmp_assign_source_49;

    tmp_assign_source_50 = impl_nltk$stem$snowball$$$class_10_ItalianStemmer( NULL );
    assert( tmp_assign_source_50 != NULL );
    assert( tmp_class_creation_10__class_dict == NULL );
    tmp_class_creation_10__class_dict = tmp_assign_source_50;

    tmp_compare_left_10 = const_str_plain___metaclass__;
    tmp_compare_right_10 = tmp_class_creation_10__class_dict;

    tmp_cmp_In_10 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    assert( !(tmp_cmp_In_10 == -1) );
    if ( tmp_cmp_In_10 == 1 )
    {
        goto condexpr_true_10;
    }
    else
    {
        goto condexpr_false_10;
    }
    condexpr_true_10:;
    tmp_dict_name_10 = tmp_class_creation_10__class_dict;

    tmp_key_name_10 = const_str_plain___metaclass__;
    tmp_assign_source_51 = DICT_GET_ITEM( tmp_dict_name_10, tmp_key_name_10 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1635;
        goto try_except_handler_10;
    }
    goto condexpr_end_10;
    condexpr_false_10:;
    tmp_bases_name_10 = tmp_class_creation_10__bases;

    tmp_assign_source_51 = SELECT_METACLASS( tmp_bases_name_10, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_10:;
    assert( tmp_class_creation_10__metaclass == NULL );
    tmp_class_creation_10__metaclass = tmp_assign_source_51;

    tmp_called_name_10 = tmp_class_creation_10__metaclass;

    tmp_args_element_name_28 = const_str_plain_ItalianStemmer;
    tmp_args_element_name_29 = tmp_class_creation_10__bases;

    tmp_args_element_name_30 = tmp_class_creation_10__class_dict;

    frame_module->f_lineno = 1635;
    {
        PyObject *call_args[] = { tmp_args_element_name_28, tmp_args_element_name_29, tmp_args_element_name_30 };
        tmp_assign_source_52 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_10, call_args );
    }

    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1635;
        goto try_except_handler_10;
    }
    assert( tmp_class_creation_10__class == NULL );
    tmp_class_creation_10__class = tmp_assign_source_52;

    goto try_end_10;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    Py_XDECREF( tmp_class_creation_10__class_dict );
    tmp_class_creation_10__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    tmp_assign_source_53 = tmp_class_creation_10__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_ItalianStemmer, tmp_assign_source_53 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__class );
    Py_DECREF( tmp_class_creation_10__class );
    tmp_class_creation_10__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__bases );
    Py_DECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__class_dict );
    Py_DECREF( tmp_class_creation_10__class_dict );
    tmp_class_creation_10__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__metaclass );
    Py_DECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    // Tried code:
    tmp_assign_source_54 = PyTuple_New( 1 );
    tmp_tuple_element_11 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain__ScandinavianStemmer );

    if (unlikely( tmp_tuple_element_11 == NULL ))
    {
        tmp_tuple_element_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__ScandinavianStemmer );
    }

    if ( tmp_tuple_element_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_54 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_ScandinavianStemmer" );
        exception_tb = NULL;

        exception_lineno = 1868;
        goto try_except_handler_11;
    }

    Py_INCREF( tmp_tuple_element_11 );
    PyTuple_SET_ITEM( tmp_assign_source_54, 0, tmp_tuple_element_11 );
    assert( tmp_class_creation_11__bases == NULL );
    tmp_class_creation_11__bases = tmp_assign_source_54;

    tmp_assign_source_55 = impl_nltk$stem$snowball$$$class_11_NorwegianStemmer( NULL );
    assert( tmp_assign_source_55 != NULL );
    assert( tmp_class_creation_11__class_dict == NULL );
    tmp_class_creation_11__class_dict = tmp_assign_source_55;

    tmp_compare_left_11 = const_str_plain___metaclass__;
    tmp_compare_right_11 = tmp_class_creation_11__class_dict;

    tmp_cmp_In_11 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    assert( !(tmp_cmp_In_11 == -1) );
    if ( tmp_cmp_In_11 == 1 )
    {
        goto condexpr_true_11;
    }
    else
    {
        goto condexpr_false_11;
    }
    condexpr_true_11:;
    tmp_dict_name_11 = tmp_class_creation_11__class_dict;

    tmp_key_name_11 = const_str_plain___metaclass__;
    tmp_assign_source_56 = DICT_GET_ITEM( tmp_dict_name_11, tmp_key_name_11 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1868;
        goto try_except_handler_11;
    }
    goto condexpr_end_11;
    condexpr_false_11:;
    tmp_bases_name_11 = tmp_class_creation_11__bases;

    tmp_assign_source_56 = SELECT_METACLASS( tmp_bases_name_11, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_11:;
    assert( tmp_class_creation_11__metaclass == NULL );
    tmp_class_creation_11__metaclass = tmp_assign_source_56;

    tmp_called_name_11 = tmp_class_creation_11__metaclass;

    tmp_args_element_name_31 = const_str_plain_NorwegianStemmer;
    tmp_args_element_name_32 = tmp_class_creation_11__bases;

    tmp_args_element_name_33 = tmp_class_creation_11__class_dict;

    frame_module->f_lineno = 1868;
    {
        PyObject *call_args[] = { tmp_args_element_name_31, tmp_args_element_name_32, tmp_args_element_name_33 };
        tmp_assign_source_57 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_11, call_args );
    }

    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1868;
        goto try_except_handler_11;
    }
    assert( tmp_class_creation_11__class == NULL );
    tmp_class_creation_11__class = tmp_assign_source_57;

    goto try_end_11;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    Py_XDECREF( tmp_class_creation_11__class_dict );
    tmp_class_creation_11__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    tmp_assign_source_58 = tmp_class_creation_11__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_NorwegianStemmer, tmp_assign_source_58 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__class );
    Py_DECREF( tmp_class_creation_11__class );
    tmp_class_creation_11__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__bases );
    Py_DECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__class_dict );
    Py_DECREF( tmp_class_creation_11__class_dict );
    tmp_class_creation_11__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__metaclass );
    Py_DECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    // Tried code:
    tmp_assign_source_59 = PyTuple_New( 1 );
    tmp_tuple_element_12 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain__StandardStemmer );

    if (unlikely( tmp_tuple_element_12 == NULL ))
    {
        tmp_tuple_element_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__StandardStemmer );
    }

    if ( tmp_tuple_element_12 == NULL )
    {
        Py_DECREF( tmp_assign_source_59 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_StandardStemmer" );
        exception_tb = NULL;

        exception_lineno = 1955;
        goto try_except_handler_12;
    }

    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_assign_source_59, 0, tmp_tuple_element_12 );
    assert( tmp_class_creation_12__bases == NULL );
    tmp_class_creation_12__bases = tmp_assign_source_59;

    tmp_assign_source_60 = impl_nltk$stem$snowball$$$class_12_PortugueseStemmer( NULL );
    assert( tmp_assign_source_60 != NULL );
    assert( tmp_class_creation_12__class_dict == NULL );
    tmp_class_creation_12__class_dict = tmp_assign_source_60;

    tmp_compare_left_12 = const_str_plain___metaclass__;
    tmp_compare_right_12 = tmp_class_creation_12__class_dict;

    tmp_cmp_In_12 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    assert( !(tmp_cmp_In_12 == -1) );
    if ( tmp_cmp_In_12 == 1 )
    {
        goto condexpr_true_12;
    }
    else
    {
        goto condexpr_false_12;
    }
    condexpr_true_12:;
    tmp_dict_name_12 = tmp_class_creation_12__class_dict;

    tmp_key_name_12 = const_str_plain___metaclass__;
    tmp_assign_source_61 = DICT_GET_ITEM( tmp_dict_name_12, tmp_key_name_12 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1955;
        goto try_except_handler_12;
    }
    goto condexpr_end_12;
    condexpr_false_12:;
    tmp_bases_name_12 = tmp_class_creation_12__bases;

    tmp_assign_source_61 = SELECT_METACLASS( tmp_bases_name_12, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_12:;
    assert( tmp_class_creation_12__metaclass == NULL );
    tmp_class_creation_12__metaclass = tmp_assign_source_61;

    tmp_called_name_12 = tmp_class_creation_12__metaclass;

    tmp_args_element_name_34 = const_str_plain_PortugueseStemmer;
    tmp_args_element_name_35 = tmp_class_creation_12__bases;

    tmp_args_element_name_36 = tmp_class_creation_12__class_dict;

    frame_module->f_lineno = 1955;
    {
        PyObject *call_args[] = { tmp_args_element_name_34, tmp_args_element_name_35, tmp_args_element_name_36 };
        tmp_assign_source_62 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_12, call_args );
    }

    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1955;
        goto try_except_handler_12;
    }
    assert( tmp_class_creation_12__class == NULL );
    tmp_class_creation_12__class = tmp_assign_source_62;

    goto try_end_12;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_12__bases );
    tmp_class_creation_12__bases = NULL;

    Py_XDECREF( tmp_class_creation_12__class_dict );
    tmp_class_creation_12__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_12__metaclass );
    tmp_class_creation_12__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    tmp_assign_source_63 = tmp_class_creation_12__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_PortugueseStemmer, tmp_assign_source_63 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__class );
    Py_DECREF( tmp_class_creation_12__class );
    tmp_class_creation_12__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__bases );
    Py_DECREF( tmp_class_creation_12__bases );
    tmp_class_creation_12__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__class_dict );
    Py_DECREF( tmp_class_creation_12__class_dict );
    tmp_class_creation_12__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__metaclass );
    Py_DECREF( tmp_class_creation_12__metaclass );
    tmp_class_creation_12__metaclass = NULL;

    // Tried code:
    tmp_assign_source_64 = PyTuple_New( 1 );
    tmp_tuple_element_13 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain__StandardStemmer );

    if (unlikely( tmp_tuple_element_13 == NULL ))
    {
        tmp_tuple_element_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__StandardStemmer );
    }

    if ( tmp_tuple_element_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_64 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_StandardStemmer" );
        exception_tb = NULL;

        exception_lineno = 2163;
        goto try_except_handler_13;
    }

    Py_INCREF( tmp_tuple_element_13 );
    PyTuple_SET_ITEM( tmp_assign_source_64, 0, tmp_tuple_element_13 );
    assert( tmp_class_creation_13__bases == NULL );
    tmp_class_creation_13__bases = tmp_assign_source_64;

    tmp_assign_source_65 = impl_nltk$stem$snowball$$$class_13_RomanianStemmer( NULL );
    assert( tmp_assign_source_65 != NULL );
    assert( tmp_class_creation_13__class_dict == NULL );
    tmp_class_creation_13__class_dict = tmp_assign_source_65;

    tmp_compare_left_13 = const_str_plain___metaclass__;
    tmp_compare_right_13 = tmp_class_creation_13__class_dict;

    tmp_cmp_In_13 = PySequence_Contains( tmp_compare_right_13, tmp_compare_left_13 );
    assert( !(tmp_cmp_In_13 == -1) );
    if ( tmp_cmp_In_13 == 1 )
    {
        goto condexpr_true_13;
    }
    else
    {
        goto condexpr_false_13;
    }
    condexpr_true_13:;
    tmp_dict_name_13 = tmp_class_creation_13__class_dict;

    tmp_key_name_13 = const_str_plain___metaclass__;
    tmp_assign_source_66 = DICT_GET_ITEM( tmp_dict_name_13, tmp_key_name_13 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2163;
        goto try_except_handler_13;
    }
    goto condexpr_end_13;
    condexpr_false_13:;
    tmp_bases_name_13 = tmp_class_creation_13__bases;

    tmp_assign_source_66 = SELECT_METACLASS( tmp_bases_name_13, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_13:;
    assert( tmp_class_creation_13__metaclass == NULL );
    tmp_class_creation_13__metaclass = tmp_assign_source_66;

    tmp_called_name_13 = tmp_class_creation_13__metaclass;

    tmp_args_element_name_37 = const_str_plain_RomanianStemmer;
    tmp_args_element_name_38 = tmp_class_creation_13__bases;

    tmp_args_element_name_39 = tmp_class_creation_13__class_dict;

    frame_module->f_lineno = 2163;
    {
        PyObject *call_args[] = { tmp_args_element_name_37, tmp_args_element_name_38, tmp_args_element_name_39 };
        tmp_assign_source_67 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_13, call_args );
    }

    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2163;
        goto try_except_handler_13;
    }
    assert( tmp_class_creation_13__class == NULL );
    tmp_class_creation_13__class = tmp_assign_source_67;

    goto try_end_13;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_13__bases );
    tmp_class_creation_13__bases = NULL;

    Py_XDECREF( tmp_class_creation_13__class_dict );
    tmp_class_creation_13__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_13__metaclass );
    tmp_class_creation_13__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    tmp_assign_source_68 = tmp_class_creation_13__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_RomanianStemmer, tmp_assign_source_68 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__class );
    Py_DECREF( tmp_class_creation_13__class );
    tmp_class_creation_13__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__bases );
    Py_DECREF( tmp_class_creation_13__bases );
    tmp_class_creation_13__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__class_dict );
    Py_DECREF( tmp_class_creation_13__class_dict );
    tmp_class_creation_13__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__metaclass );
    Py_DECREF( tmp_class_creation_13__metaclass );
    tmp_class_creation_13__metaclass = NULL;

    // Tried code:
    tmp_assign_source_69 = PyTuple_New( 1 );
    tmp_tuple_element_14 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );

    if (unlikely( tmp_tuple_element_14 == NULL ))
    {
        tmp_tuple_element_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SnowballStemmer );
    }

    if ( tmp_tuple_element_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_69 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "SnowballStemmer" );
        exception_tb = NULL;

        exception_lineno = 2417;
        goto try_except_handler_14;
    }

    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_assign_source_69, 0, tmp_tuple_element_14 );
    assert( tmp_class_creation_14__bases == NULL );
    tmp_class_creation_14__bases = tmp_assign_source_69;

    tmp_assign_source_70 = impl_nltk$stem$snowball$$$class_14_RussianStemmer( NULL );
    assert( tmp_assign_source_70 != NULL );
    assert( tmp_class_creation_14__class_dict == NULL );
    tmp_class_creation_14__class_dict = tmp_assign_source_70;

    tmp_compare_left_14 = const_str_plain___metaclass__;
    tmp_compare_right_14 = tmp_class_creation_14__class_dict;

    tmp_cmp_In_14 = PySequence_Contains( tmp_compare_right_14, tmp_compare_left_14 );
    assert( !(tmp_cmp_In_14 == -1) );
    if ( tmp_cmp_In_14 == 1 )
    {
        goto condexpr_true_14;
    }
    else
    {
        goto condexpr_false_14;
    }
    condexpr_true_14:;
    tmp_dict_name_14 = tmp_class_creation_14__class_dict;

    tmp_key_name_14 = const_str_plain___metaclass__;
    tmp_assign_source_71 = DICT_GET_ITEM( tmp_dict_name_14, tmp_key_name_14 );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2417;
        goto try_except_handler_14;
    }
    goto condexpr_end_14;
    condexpr_false_14:;
    tmp_bases_name_14 = tmp_class_creation_14__bases;

    tmp_assign_source_71 = SELECT_METACLASS( tmp_bases_name_14, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_14:;
    assert( tmp_class_creation_14__metaclass == NULL );
    tmp_class_creation_14__metaclass = tmp_assign_source_71;

    tmp_called_name_14 = tmp_class_creation_14__metaclass;

    tmp_args_element_name_40 = const_str_plain_RussianStemmer;
    tmp_args_element_name_41 = tmp_class_creation_14__bases;

    tmp_args_element_name_42 = tmp_class_creation_14__class_dict;

    frame_module->f_lineno = 2417;
    {
        PyObject *call_args[] = { tmp_args_element_name_40, tmp_args_element_name_41, tmp_args_element_name_42 };
        tmp_assign_source_72 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_14, call_args );
    }

    if ( tmp_assign_source_72 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2417;
        goto try_except_handler_14;
    }
    assert( tmp_class_creation_14__class == NULL );
    tmp_class_creation_14__class = tmp_assign_source_72;

    goto try_end_14;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_14__bases );
    tmp_class_creation_14__bases = NULL;

    Py_XDECREF( tmp_class_creation_14__class_dict );
    tmp_class_creation_14__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_14__metaclass );
    tmp_class_creation_14__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    tmp_assign_source_73 = tmp_class_creation_14__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_RussianStemmer, tmp_assign_source_73 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__class );
    Py_DECREF( tmp_class_creation_14__class );
    tmp_class_creation_14__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__bases );
    Py_DECREF( tmp_class_creation_14__bases );
    tmp_class_creation_14__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__class_dict );
    Py_DECREF( tmp_class_creation_14__class_dict );
    tmp_class_creation_14__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__metaclass );
    Py_DECREF( tmp_class_creation_14__metaclass );
    tmp_class_creation_14__metaclass = NULL;

    // Tried code:
    tmp_assign_source_74 = PyTuple_New( 1 );
    tmp_tuple_element_15 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain__StandardStemmer );

    if (unlikely( tmp_tuple_element_15 == NULL ))
    {
        tmp_tuple_element_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__StandardStemmer );
    }

    if ( tmp_tuple_element_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_74 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_StandardStemmer" );
        exception_tb = NULL;

        exception_lineno = 2860;
        goto try_except_handler_15;
    }

    Py_INCREF( tmp_tuple_element_15 );
    PyTuple_SET_ITEM( tmp_assign_source_74, 0, tmp_tuple_element_15 );
    assert( tmp_class_creation_15__bases == NULL );
    tmp_class_creation_15__bases = tmp_assign_source_74;

    tmp_assign_source_75 = impl_nltk$stem$snowball$$$class_15_SpanishStemmer( NULL );
    assert( tmp_assign_source_75 != NULL );
    assert( tmp_class_creation_15__class_dict == NULL );
    tmp_class_creation_15__class_dict = tmp_assign_source_75;

    tmp_compare_left_15 = const_str_plain___metaclass__;
    tmp_compare_right_15 = tmp_class_creation_15__class_dict;

    tmp_cmp_In_15 = PySequence_Contains( tmp_compare_right_15, tmp_compare_left_15 );
    assert( !(tmp_cmp_In_15 == -1) );
    if ( tmp_cmp_In_15 == 1 )
    {
        goto condexpr_true_15;
    }
    else
    {
        goto condexpr_false_15;
    }
    condexpr_true_15:;
    tmp_dict_name_15 = tmp_class_creation_15__class_dict;

    tmp_key_name_15 = const_str_plain___metaclass__;
    tmp_assign_source_76 = DICT_GET_ITEM( tmp_dict_name_15, tmp_key_name_15 );
    if ( tmp_assign_source_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2860;
        goto try_except_handler_15;
    }
    goto condexpr_end_15;
    condexpr_false_15:;
    tmp_bases_name_15 = tmp_class_creation_15__bases;

    tmp_assign_source_76 = SELECT_METACLASS( tmp_bases_name_15, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_15:;
    assert( tmp_class_creation_15__metaclass == NULL );
    tmp_class_creation_15__metaclass = tmp_assign_source_76;

    tmp_called_name_15 = tmp_class_creation_15__metaclass;

    tmp_args_element_name_43 = const_str_plain_SpanishStemmer;
    tmp_args_element_name_44 = tmp_class_creation_15__bases;

    tmp_args_element_name_45 = tmp_class_creation_15__class_dict;

    frame_module->f_lineno = 2860;
    {
        PyObject *call_args[] = { tmp_args_element_name_43, tmp_args_element_name_44, tmp_args_element_name_45 };
        tmp_assign_source_77 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_15, call_args );
    }

    if ( tmp_assign_source_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 2860;
        goto try_except_handler_15;
    }
    assert( tmp_class_creation_15__class == NULL );
    tmp_class_creation_15__class = tmp_assign_source_77;

    goto try_end_15;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_15__bases );
    tmp_class_creation_15__bases = NULL;

    Py_XDECREF( tmp_class_creation_15__class_dict );
    tmp_class_creation_15__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_15__metaclass );
    tmp_class_creation_15__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    tmp_assign_source_78 = tmp_class_creation_15__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SpanishStemmer, tmp_assign_source_78 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_15__class );
    Py_DECREF( tmp_class_creation_15__class );
    tmp_class_creation_15__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_15__bases );
    Py_DECREF( tmp_class_creation_15__bases );
    tmp_class_creation_15__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_15__class_dict );
    Py_DECREF( tmp_class_creation_15__class_dict );
    tmp_class_creation_15__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_15__metaclass );
    Py_DECREF( tmp_class_creation_15__metaclass );
    tmp_class_creation_15__metaclass = NULL;

    // Tried code:
    tmp_assign_source_79 = PyTuple_New( 1 );
    tmp_tuple_element_16 = GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain__ScandinavianStemmer );

    if (unlikely( tmp_tuple_element_16 == NULL ))
    {
        tmp_tuple_element_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__ScandinavianStemmer );
    }

    if ( tmp_tuple_element_16 == NULL )
    {
        Py_DECREF( tmp_assign_source_79 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyString_FromFormat( "name '%s' is not defined", "_ScandinavianStemmer" );
        exception_tb = NULL;

        exception_lineno = 3112;
        goto try_except_handler_16;
    }

    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_assign_source_79, 0, tmp_tuple_element_16 );
    assert( tmp_class_creation_16__bases == NULL );
    tmp_class_creation_16__bases = tmp_assign_source_79;

    tmp_assign_source_80 = impl_nltk$stem$snowball$$$class_16_SwedishStemmer( NULL );
    assert( tmp_assign_source_80 != NULL );
    assert( tmp_class_creation_16__class_dict == NULL );
    tmp_class_creation_16__class_dict = tmp_assign_source_80;

    tmp_compare_left_16 = const_str_plain___metaclass__;
    tmp_compare_right_16 = tmp_class_creation_16__class_dict;

    tmp_cmp_In_16 = PySequence_Contains( tmp_compare_right_16, tmp_compare_left_16 );
    assert( !(tmp_cmp_In_16 == -1) );
    if ( tmp_cmp_In_16 == 1 )
    {
        goto condexpr_true_16;
    }
    else
    {
        goto condexpr_false_16;
    }
    condexpr_true_16:;
    tmp_dict_name_16 = tmp_class_creation_16__class_dict;

    tmp_key_name_16 = const_str_plain___metaclass__;
    tmp_assign_source_81 = DICT_GET_ITEM( tmp_dict_name_16, tmp_key_name_16 );
    if ( tmp_assign_source_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3112;
        goto try_except_handler_16;
    }
    goto condexpr_end_16;
    condexpr_false_16:;
    tmp_bases_name_16 = tmp_class_creation_16__bases;

    tmp_assign_source_81 = SELECT_METACLASS( tmp_bases_name_16, GET_STRING_DICT_VALUE( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain___metaclass__ ) );
    condexpr_end_16:;
    assert( tmp_class_creation_16__metaclass == NULL );
    tmp_class_creation_16__metaclass = tmp_assign_source_81;

    tmp_called_name_16 = tmp_class_creation_16__metaclass;

    tmp_args_element_name_46 = const_str_plain_SwedishStemmer;
    tmp_args_element_name_47 = tmp_class_creation_16__bases;

    tmp_args_element_name_48 = tmp_class_creation_16__class_dict;

    frame_module->f_lineno = 3112;
    {
        PyObject *call_args[] = { tmp_args_element_name_46, tmp_args_element_name_47, tmp_args_element_name_48 };
        tmp_assign_source_82 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_16, call_args );
    }

    if ( tmp_assign_source_82 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 3112;
        goto try_except_handler_16;
    }
    assert( tmp_class_creation_16__class == NULL );
    tmp_class_creation_16__class = tmp_assign_source_82;

    goto try_end_16;
    // Exception handler code:
    try_except_handler_16:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = -1;

    Py_XDECREF( tmp_class_creation_16__bases );
    tmp_class_creation_16__bases = NULL;

    Py_XDECREF( tmp_class_creation_16__class_dict );
    tmp_class_creation_16__class_dict = NULL;

    Py_XDECREF( tmp_class_creation_16__metaclass );
    tmp_class_creation_16__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif
    popFrameStack();

    assertFrameObject( frame_module );
    Py_DECREF( frame_module );

    goto frame_no_exception_1;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_module );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_module, exception_lineno );
    }
    else if ( exception_tb->tb_frame != frame_module )
    {
        PyTracebackObject *traceback_new = MAKE_TRACEBACK( frame_module, exception_lineno );
        traceback_new->tb_next = exception_tb;
        exception_tb = traceback_new;
    }

    // Put the previous frame back on top.
    popFrameStack();

#if PYTHON_VERSION >= 340
    frame_module->f_executing -= 1;
#endif
    Py_DECREF( frame_module );

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_1:;
    tmp_assign_source_83 = tmp_class_creation_16__class;

    UPDATE_STRING_DICT0( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_SwedishStemmer, tmp_assign_source_83 );
    CHECK_OBJECT( (PyObject *)tmp_class_creation_16__class );
    Py_DECREF( tmp_class_creation_16__class );
    tmp_class_creation_16__class = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_16__bases );
    Py_DECREF( tmp_class_creation_16__bases );
    tmp_class_creation_16__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_16__class_dict );
    Py_DECREF( tmp_class_creation_16__class_dict );
    tmp_class_creation_16__class_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_16__metaclass );
    Py_DECREF( tmp_class_creation_16__metaclass );
    tmp_class_creation_16__metaclass = NULL;

    tmp_assign_source_84 = MAKE_FUNCTION_nltk$stem$snowball$$$function_1_demo(  );
    UPDATE_STRING_DICT1( moduledict_nltk$stem$snowball, (Nuitka_StringObject *)const_str_plain_demo, tmp_assign_source_84 );

    return MOD_RETURN_VALUE( module_nltk$stem$snowball );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
